{"configuration":[{"internal":false,"companyConfig":false,"defaultValue":"https://api.steampowered.com","displayOrder":1,"active":true,"description":"Steam Base Url","type":"TEXTFIELD_1000","resellerConfig":false,"required":true,"hideFromConsole":true,"name":"Base Url","groupControl":false,"key":"base.url"},{"internal":false,"hideFromConsole":false,"companyConfig":false,"displayOrder":1,"name":"User Web API Key","active":true,"description":"User Web API Key","type":"TEXTFIELD_32","groupControl":false,"resellerConfig":false,"key":"key","required":true},{"internal":false,"companyConfig":false,"defaultValue":"0","displayOrder":1,"active":true,"description":"Steam Pagination Start Index","type":"TEXTFIELD_32","resellerConfig":false,"required":false,"hideFromConsole":true,"name":"Pagination Start Index","groupControl":false,"key":"pagination.page.startindex"},{"internal":false,"companyConfig":false,"defaultValue":"page 0","displayOrder":1,"active":true,"description":"Steam Pagination Type","type":"TEXTFIELD_32","resellerConfig":false,"required":false,"hideFromConsole":true,"name":"Pagination Type","groupControl":false,"key":"pagination.type"},{"internal":false,"companyConfig":false,"defaultValue":"100","displayOrder":1,"active":true,"description":"Steam Max Page Size (or limit)","type":"TEXTFIELD_32","resellerConfig":false,"required":false,"hideFromConsole":true,"name":"Max Page Size (or limit)","groupControl":false,"key":"pagination.max"},{"internal":false,"hideFromConsole":true,"companyConfig":false,"displayOrder":11,"name":"Event Notification Signature Key","active":true,"description":"Steam Event Notification Signature Key","type":"TEXTFIELD_128","groupControl":false,"resellerConfig":false,"key":"event.notification.signature.key","required":false},{"internal":false,"hideFromConsole":false,"companyConfig":false,"displayOrder":12,"name":"Event Notification Basic User Name","active":true,"description":"Steam Event Notification Basic User Name","type":"TEXTFIELD_128","groupControl":false,"resellerConfig":false,"key":"event.notification.basic.username","required":false},{"internal":false,"hideFromConsole":false,"companyConfig":false,"displayOrder":13,"name":"Event Notification Basic Password","active":true,"description":"Steam Event Notification Basic Password","type":"PASSWORD","groupControl":false,"resellerConfig":false,"key":"event.notification.basic.password","required":false},{"internal":false,"hideFromConsole":false,"companyConfig":false,"displayOrder":98,"name":"Default select fields","active":true,"description":"Generic map used to specify default fields for bulk download and GET /all requests. Each key should be the canonical objectName and values may be specified as a comma-delimited string or a list of strings","type":"TEXTAREA","groupControl":false,"resellerConfig":false,"key":"default.select.fields.map","required":false},{"internal":false,"companyConfig":false,"defaultValue":"true","displayOrder":99,"active":true,"description":"Used to enable/disable filtering of null values from the responses","type":"BOOLEAN","resellerConfig":false,"required":false,"hideFromConsole":false,"name":"Filter null values from the response","groupControl":false,"key":"filter.response.nulls"},{"internal":true,"hideFromConsole":true,"companyConfig":false,"displayOrder":100,"name":"Time of Getting Token or Performing Authentication","active":true,"description":"Steam Time of Getting Token or Performing Authentication","type":"TEXTFIELD_32","groupControl":false,"resellerConfig":false,"key":"authentication.time","required":false},{"internal":true,"companyConfig":false,"defaultValue":"polling","displayOrder":100,"active":true,"description":"Steam Event Type","type":"TEXTFIELD_128","resellerConfig":false,"required":false,"hideFromConsole":true,"name":"Event Type","groupControl":false,"key":"event.vendor.type"},{"internal":false,"companyConfig":false,"defaultValue":"5","displayOrder":101,"active":true,"description":"Steam Set time interval for polling application (in minutes)","type":"TEXTFIELD_128","resellerConfig":false,"required":false,"hideFromConsole":false,"name":"Event poller refresh interval","groupControl":false,"key":"event.poller.refresh_interval"},{"internal":false,"hideFromConsole":false,"companyConfig":false,"displayOrder":102,"name":"Event Notification Callback URL","active":true,"description":"Steam Event Notification Callback URL","type":"TEXTFIELD_1000","groupControl":false,"resellerConfig":false,"key":"event.notification.callback.url","required":false},{"internal":false,"companyConfig":false,"defaultValue":"false","displayOrder":102,"active":true,"description":"Steam Enable/Disable Event Notification","type":"BOOLEAN","resellerConfig":false,"required":false,"hideFromConsole":false,"name":"Event Notifications Enabled","groupControl":false,"key":"event.notification.enabled"},{"internal":false,"companyConfig":false,"defaultValue":"{}","displayOrder":104,"active":true,"description":"Steam Event Poller Resources Configuration","type":"TEXTAREA","resellerConfig":false,"required":false,"hideFromConsole":false,"name":"Event Poller Resources Configuration","groupControl":false,"key":"event.poller.configuration"},{"internal":false,"hideFromConsole":true,"companyConfig":false,"displayOrder":104,"name":"Event Notification Subscription ID","active":true,"description":"Steam Event Notification Subscription ID","type":"TEXTFIELD_1000","groupControl":false,"resellerConfig":false,"key":"event.notification.subscription.id","required":false}],"objects":[{"elementId":18690,"metadataDiscovery":false,"bulkDownloadEnabled":false,"eventsEnabled":false,"name":"getAppList","nativeBulkUpload":false,"hulkDownloadEnabled":false,"migrated":false,"nativeBulkDownload":false,"hulkUploadEnabled":false}],"description":"Steam Web API\n\nReference Documentation:\nhttps://partner.steamgames.com/doc/webapi\n","cloneable":false,"extended":false,"bulkDownloadEnabled":false,"useModelsForMetadata":true,"trialAccount":false,"logo":"steam","hooks":[],"beta":false,"key":"steam1","authentication":{"type":"custom"},"bulkUploadEnabled":false,"image":"https://images.cloudelements.io/Steam_Logo201907151730.png","models":[],"active":true,"resources":[{"method":"GET","kind":"eb","description":"List all apps on Steam. Currently doesn't work.","type":"api","vendorPath":"/ISteamApps/GetAppList/v2/","path":"/hubs/gaming/applist","vendorMethod":"GET","response":{"contentType":"application/json"},"model":{"transform":false,"name":"getAppList","swagger":{"app":{"title":"getAppList","type":"object","properties":{"appid":{"format":"int32","type":"integer"},"name":{"type":"string"}}},"getAppList":{"type":"array","items":{"type":"app"}}}},"hooks":[{"isLegacy":false,"contextParams":"request_vendor_parameters,response_body","mimeType":"application/javascript","body":"var limit = response_body.applist.apps.length;\nvar offset = request_vendor_parameters[\"page\"]*request_vendor_parameters[\"pageSize\"];\nvar end = offset+request_vendor_parameters[\"pageSize\"];\n\nif(limit<end) {\n  var returnArray = response_body.applist.apps.slice(offset,limit);\n} else {\n  var returnArray = response_body.applist.apps.slice(offset,end);\n}\n\nconsole.log(returnArray);\n\ndone({\n  \"continue\": true,\n  response_body: {\n    returnArray\n  }\n})","type":"postRequest"}],"modelMigrated":false,"parameters":[{"vendorType":"query","dataType":"string","name":"pageSize","description":"The number of resources to return in a given page","vendorDataType":"string","source":"request","type":"query","vendorName":"pageSize","required":false},{"vendorType":"query","dataType":"string","name":"page","description":"The page number of resources to retrieve","vendorDataType":"string","source":"request","type":"query","vendorName":"page","required":false}],"rootKey":"returnArray"},{"method":"GET","kind":"eb","description":"Retrieve a list of all badges for an account by ID.","type":"api","vendorPath":"/IPlayerService/GetBadges/v1/","path":"/hubs/gaming/badges","vendorMethod":"GET","response":{"contentType":"application/json"},"model":{"transform":false,"name":"getBadges","swagger":{"getBadges":{"type":"array","items":{"type":"getBadgesObject"}},"getBadgesObject":{"title":"getBadges","type":"object","properties":{"completion_time":{"x-mask":"yyyy-MM-dd'T'HH:mm:ss.SSSXXX","format":"date-time","type":"string"},"badgeid":{"format":"int32","type":"integer"},"level":{"format":"int32","type":"integer"},"scarcity":{"format":"int32","type":"integer"},"xp":{"format":"int32","type":"integer"}}}}},"hooks":[{"isLegacy":false,"contextParams":"request_vendor_parameters,response_body","mimeType":"application/javascript","body":"var limit = response_body.response.badges.length;\nvar offset = request_vendor_parameters[\"page\"]*request_vendor_parameters[\"pageSize\"];\nvar end = offset+request_vendor_parameters[\"pageSize\"];\n\nif(limit<end) {\n  var returnArray = response_body.response.badges.slice(offset,limit);\n} else {\n  var returnArray = response_body.response.badges.slice(offset,end);\n}\n\nvar temp;\nfor(var i = 0; i < returnArray.length; i++) {\n  temp = new Date(returnArray[i].completion_time*1000);\n  returnArray[i].completion_time = temp.toISOString();\n}\n\nconsole.log(returnArray);\n\ndone({\n  \"continue\": true,\n  response_body: {\n    returnArray\n  }\n})","type":"postRequest"}],"modelMigrated":false,"parameters":[{"vendorType":"query","dataType":"integer","name":"steamid","description":"The account's SteamID","vendorDataType":"integer","source":"request","type":"query","vendorName":"steamid","required":true},{"vendorType":"query","dataType":"integer","name":"pageSize","description":"The number of resources to return in a given page","vendorDataType":"integer","source":"request","type":"query","vendorName":"pageSize","required":false},{"vendorType":"query","dataType":"integer","name":"page","description":"The page number of resources to retrieve","vendorDataType":"integer","source":"request","type":"query","vendorName":"page","required":false}],"rootKey":"returnArray"},{"method":"GET","kind":"eb","description":"Retrieve the friend list of an account by ID. Fails if friends list is set to private.","type":"api","vendorPath":"/ISteamUser/GetFriendList/v1/","path":"/hubs/gaming/friendlist","vendorMethod":"GET","response":{"contentType":"application/json"},"model":{"transform":false,"name":"getFriendList","swagger":{"getFriendList":{"type":"array","items":{"type":"getFriendListObject"}},"getFriendListObject":{"title":"getFriendList","type":"object","properties":{"steamid":{"type":"string"},"friend_since":{"x-mask":"yyyy-MM-dd'T'HH:mm:ss.SSSXXX","format":"date-time","type":"string"},"relationship":{"type":"string"}}}}},"hooks":[{"isLegacy":false,"contextParams":"request_vendor_parameters,response_body","mimeType":"application/javascript","body":"var limit = response_body.friendslist.friends.length;\nvar offset = request_vendor_parameters[\"page\"]*request_vendor_parameters[\"pageSize\"];\nvar end = offset+request_vendor_parameters[\"pageSize\"];\n\nif(limit<end) {\n  var returnArray = response_body.friendslist.friends.slice(offset,limit);\n} else {\n  var returnArray = response_body.friendslist.friends.slice(offset,end);\n}\n\nvar temp;\nfor(var i = 0; i < returnArray.length; i++) {\n  temp = new Date(returnArray[i].friend_since*1000);\n  returnArray[i].friend_since = temp.toISOString();\n}\n\nconsole.log(returnArray);\n\ndone({\n  \"continue\": true,\n  response_body: {\n    returnArray\n  }\n})","type":"postRequest"}],"modelMigrated":false,"parameters":[{"vendorType":"query","dataType":"integer","name":"page","description":"The page number of resources to retrieve","vendorDataType":"integer","source":"request","type":"query","vendorName":"page","required":false},{"vendorType":"query","dataType":"integer","name":"pageSize","description":"The number of resources to return in a given page","vendorDataType":"integer","source":"request","type":"query","vendorName":"pageSize","required":false},{"vendorType":"query","dataType":"string","name":"relationship","description":"relationship type (ex: friend)","vendorDataType":"string","source":"request","type":"query","vendorName":"relationship","required":false},{"vendorType":"query","dataType":"integer","name":"steamid","description":"The account's SteamID","vendorDataType":"integer","source":"request","type":"query","vendorName":"steamid","required":true}],"rootKey":"returnArray"},{"method":"GET","kind":"eb","description":"Retrieves the global achievement percentages for the specified app/game.","type":"api","vendorPath":"/ISteamUserStats/GetGlobalAchievementPercentagesForApp/v2/","path":"/hubs/gaming/globalAchievementPercentagesForApp","vendorMethod":"GET","response":{"contentType":"application/json"},"model":{"transform":false,"name":"getGlobalAchievementPercentagesForApp","swagger":{"getGlobalAchievementPercentagesForAppObject":{"title":"getGlobalAchievementPercentagesForApp","type":"object","properties":{"name":{"type":"string"},"percent":{"format":"double","type":"number"}}},"getGlobalAchievementPercentagesForApp":{"type":"array","items":{"type":"getGlobalAchievementPercentagesForAppObject"}}}},"hooks":[{"isLegacy":false,"contextParams":"request_vendor_parameters,response_body","mimeType":"application/javascript","body":"var limit = response_body.achievementpercentages.achievements.length;\nvar offset = request_vendor_parameters[\"page\"]*request_vendor_parameters[\"pageSize\"];\nvar end = offset+request_vendor_parameters[\"pageSize\"];\n\nif(limit<end) {\n  var returnArray = response_body.achievementpercentages.achievements.slice(offset,limit);\n} else {\n  var returnArray = response_body.achievementpercentages.achievements.slice(offset,end);\n}\n\ndone({\n  \"continue\": true,\n  response_body: {\n    returnArray\n  }\n})","type":"postRequest"}],"modelMigrated":false,"parameters":[{"vendorType":"query","dataType":"string","name":"pageSize","description":"The number of resources to return in a given page","vendorDataType":"string","source":"request","type":"query","vendorName":"pageSize","required":false},{"vendorType":"query","dataType":"string","name":"page","description":"The page number of resources to retrieve","vendorDataType":"string","source":"request","type":"query","vendorName":"page","required":false},{"vendorType":"query","dataType":"integer","name":"appid","description":"The game's ID","vendorDataType":"integer","source":"request","type":"query","vendorName":"gameid","required":true}],"rootKey":"returnArray"},{"path":"/hubs/gaming/globalStatsForGame","vendorMethod":"GET","method":"GET","kind":"eb","response":{"contentType":"application/json"},"description":"Retrieves the global stats percentages for the specified app. Use /schemaForGame to get stat names. Only works for aggregated stats.","type":"api","hooks":[{"isLegacy":false,"contextParams":"request_parameters,request_vendor_parameters","mimeType":"application/javascript","body":"var returnParams = request_parameters;\nvar statnames = request_parameters.statnames.split(', ');\nreturnParams.count = statnames.length;\nvar temp;\nfor(var i in statnames) {\n  temp = \"name[\" + i + \"]\";\n  returnParams[temp] = statnames[i];\n}\n\nconsole.log(JSON.stringify(returnParams));\ndone({\n  \"continue\": true,\n  \"request_vendor_parameters\": returnParams\n})","type":"preRequest"}],"modelMigrated":false,"parameters":[{"vendorType":"query","dataType":"string","name":"statnames","description":"Name of the stats to get data for, comma separated","vendorDataType":"string","source":"request","type":"query","vendorName":"names","required":true},{"vendorType":"query","dataType":"integer","name":"appid","description":"The game's ID","vendorDataType":"integer","source":"request","type":"query","vendorName":"appid","required":true},{"vendorType":"query","dataType":"string","name":"pageSize","description":"The number of resources to return in a given page","vendorDataType":"string","source":"request","type":"query","vendorName":"pageSize","required":false},{"vendorType":"query","dataType":"string","name":"page","description":"The page number of resources to retrieve","vendorDataType":"string","source":"request","type":"query","vendorName":"page","required":false}],"vendorPath":"/ISteamUserStats/GetGlobalStatsForGame/v1/","rootKey":"response"},{"method":"GET","kind":"eb","description":"Retrieve the news for the specified app.","type":"api","vendorPath":"/ISteamNews/GetNewsForApp/v2/","path":"/hubs/gaming/newsForApp","vendorMethod":"GET","response":{"contentType":"application/json"},"model":{"transform":false,"name":"getNewsForApp","swagger":{"getNewsForApp":{"type":"array","items":{"type":"getNewsForAppObject"}},"getNewsForAppObject":{"title":"getNewsForApp","type":"object","properties":{"date":{"x-mask":"yyyy-MM-dd'T'HH:mm:ss.SSSXXX","format":"date-time","type":"string"},"feedlabel":{"type":"string"},"feedname":{"type":"string"},"gid":{"type":"string"},"contents":{"type":"string"},"author":{"type":"string"},"appid":{"format":"int32","type":"integer"},"is_external_url":{"type":"boolean"},"title":{"type":"string"},"feed_type":{"format":"int32","type":"integer"},"url":{"type":"string"}}}}},"hooks":[{"isLegacy":false,"contextParams":"request_vendor_parameters,response_body","mimeType":"application/javascript","body":"var limit = response_body.appnews.newsitems.length;\nvar offset = request_vendor_parameters[\"page\"]*request_vendor_parameters[\"pageSize\"];\nvar end = offset+request_vendor_parameters[\"pageSize\"];\n\nif(limit<end) {\n  var returnArray = response_body.appnews.newsitems.slice(offset,limit);\n} else {\n  var returnArray = response_body.appnews.newsitems.slice(offset,end);\n}\n\nvar temp;\nfor(var i = 0; i < returnArray.length; i++) {\n  temp = new Date(returnArray[i].date*1000);\n  returnArray[i].date = temp.toISOString();\n}\n\ndone({\n  \"continue\": true,\n  response_body: {\n    returnArray\n  }\n})","type":"postRequest"}],"modelMigrated":false,"parameters":[{"vendorType":"query","dataType":"integer","name":"enddate","description":"Retrieve posts earlier than this date (unix epoch timestamp)","vendorDataType":"integer","source":"request","type":"query","vendorName":"enddate","required":false},{"vendorType":"query","dataType":"integer","name":"count","description":"number of posts to retrieve (default 20)","vendorDataType":"integer","source":"request","type":"query","vendorName":"count","required":false},{"vendorType":"query","dataType":"integer","name":"appid","description":"The game's ID","vendorDataType":"integer","source":"request","type":"query","vendorName":"appid","required":true},{"vendorType":"query","dataType":"string","name":"page","description":"The page number of resources to retrieve","vendorDataType":"string","source":"request","type":"query","vendorName":"page","required":false},{"vendorType":"query","dataType":"string","name":"pageSize","description":"The number of resources to return in a given page","vendorDataType":"string","source":"request","type":"query","vendorName":"pageSize","required":false},{"vendorType":"query","dataType":"string","name":"feeds","description":"Comma-seperated list of feed names to return news for","vendorDataType":"string","source":"request","type":"query","vendorName":"feeds","required":false},{"vendorType":"query","dataType":"integer","name":"maxlength","description":"Maximum length for the content to return, if this is 0 the full content is returned, if it's less then a blurb is generated to fit.","vendorDataType":"integer","source":"request","type":"query","vendorName":"maxlength","required":false}],"rootKey":"returnArray"},{"method":"GET","kind":"eb","description":"Retrieve the total number of players currently active in the specified app on Steam.","type":"api","vendorPath":"/ISteamUserStats/GetNumberOfCurrentPlayers/v1/","path":"/hubs/gaming/numberOfCurrentPlayers","vendorMethod":"GET","response":{"contentType":"application/json"},"model":{"transform":false,"name":"getNumberOfCurrentPlayers","swagger":{"getNumberOfCurrentPlayers":{"title":"getNumberOfCurrentPlayers","properties":{"result":{"format":"int32","type":"integer"},"player_count":{"format":"int32","type":"integer"}}}}},"hooks":[],"modelMigrated":false,"parameters":[{"vendorType":"query","dataType":"integer","name":"appid","description":"The game's ID","vendorDataType":"integer","source":"request","type":"query","vendorName":"appid","required":true}],"rootKey":"response"},{"method":"GET","kind":"eb","description":"Retrieve a list of owned games for an account by ID.","type":"api","vendorPath":"/IPlayerService/GetOwnedGames/v1/","path":"/hubs/gaming/ownedGames","vendorMethod":"GET","response":{"contentType":"application/json"},"model":{"transform":false,"name":"getOwnedGames","swagger":{"getOwnedGamesObject":{"title":"getOwnedGames","type":"object","properties":{"img_icon_url":{"type":"string"},"has_community_visible_stats":{"type":"boolean"},"appid":{"format":"int32","type":"integer"},"name":{"type":"string"},"img_logo_url":{"type":"string"},"playtime_forever":{"format":"int32","type":"integer"},"playtime_2weeks":{"format":"int32","type":"integer"}}},"getOwnedGames":{"type":"array","items":{"type":"getOwnedGamesObject"}}}},"hooks":[{"isLegacy":false,"contextParams":"request_vendor_parameters,response_body","mimeType":"application/javascript","body":"var limit = response_body.response.games.length;\nvar offset = request_vendor_parameters[\"page\"]*request_vendor_parameters[\"pageSize\"];\nvar end = offset+request_vendor_parameters[\"pageSize\"];\n\nif(limit<end) {\n  var returnArray = response_body.response.games.slice(offset,limit);\n} else {\n  var returnArray = response_body.response.games.slice(offset,end);\n}\n\ndone({\n  \"continue\": true,\n  response_body: {\n    returnArray\n  }\n})","type":"postRequest"}],"modelMigrated":false,"parameters":[{"vendorType":"query","dataType":"string","name":"pageSize","description":"The number of resources to return in a given page","vendorDataType":"string","source":"request","type":"query","vendorName":"pageSize","required":false},{"vendorType":"query","dataType":"string","name":"page","description":"The page number of resources to retrieve","vendorDataType":"string","source":"request","type":"query","vendorName":"page","required":false},{"vendorType":"query","dataType":"integer","name":"steamid","description":"The account's SteamID","vendorDataType":"integer","source":"request","type":"query","vendorName":"steamid","required":true},{"vendorType":"query","dataType":"boolean","name":"include_appinfo","description":"true if we want additional details (name, icon) about each game","vendorDataType":"boolean","source":"request","type":"query","vendorName":"include_appinfo","required":false},{"vendorType":"query","dataType":"boolean","name":"include_played_free_games","description":"Free games are excluded by default. If this is set, free games the user has played will be returned.","vendorDataType":"boolean","source":"request","type":"query","vendorName":"include_played_free_games","required":false},{"vendorType":"query","dataType":"integer","name":"appids_filter","description":"if set, restricts result set to the passed in apps","vendorDataType":"integer","source":"request","type":"query","vendorName":"appids_filter","required":false}],"rootKey":"returnArray"},{"method":"GET","kind":"eb","description":"Retrieve the list of achievements the specified user has unlocked in an app.","type":"api","vendorPath":"/ISteamUserStats/GetPlayerAchievements/v1/","path":"/hubs/gaming/playerAchievements","vendorMethod":"GET","response":{"contentType":"application/json"},"model":{"transform":false,"name":"getPlayerAchievementsGetRes","swagger":{"getPlayerAchievementsGetRes":{"type":"array","items":{"type":"getPlayerAchievementsGetResObject"}},"getPlayerAchievementsGetResObject":{"title":"getPlayerAchievementsGetRes","type":"object","properties":{"apiname":{"type":"string"},"unlocktime":{"x-mask":"yyyy-MM-dd'T'HH:mm:ss.SSSXXX","format":"date-time","type":"string"},"achieved":{"format":"int32","type":"integer"}}}}},"hooks":[{"isLegacy":false,"contextParams":"request_vendor_parameters,response_body","mimeType":"application/javascript","body":"var limit = response_body.playerstats.achievements.length;\nvar offset = request_vendor_parameters[\"page\"]*request_vendor_parameters[\"pageSize\"];\nvar end = offset+request_vendor_parameters[\"pageSize\"];\n\nif(limit<end) {\n  var returnArray = response_body.playerstats.achievements.slice(offset,limit);\n} else {\n  var returnArray = response_body.playerstats.achievements.slice(offset,end);\n}\n\nvar temp;\nfor(var i = 0; i < returnArray.length; i++) {\n  if(returnArray[i].unlocktime!==0) {\n    temp = new Date(returnArray[i].unlocktime*1000);\n    returnArray[i].unlocktime = temp.toISOString();\n  } else {\n    delete returnArray[i].unlocktime;\n  }\n}\n\ndone({\n  \"continue\": true,\n  response_body: {\n    returnArray\n  }\n})","type":"postRequest"}],"modelMigrated":false,"parameters":[{"vendorType":"query","dataType":"string","name":"page","description":"The page number of resources to retrieve","vendorDataType":"string","source":"request","type":"query","vendorName":"page","required":false},{"vendorType":"query","dataType":"string","name":"pageSize","description":"The number of resources to return in a given page","vendorDataType":"string","source":"request","type":"query","vendorName":"pageSize","required":false},{"vendorType":"query","dataType":"integer","name":"appid","description":"The game's ID","vendorDataType":"integer","source":"request","type":"query","vendorName":"appid","required":true},{"vendorType":"query","dataType":"integer","name":"steamid","description":"The account's SteamID","vendorDataType":"integer","source":"request","type":"query","vendorName":"steamid","required":true}],"rootKey":"returnArray"},{"method":"GET","kind":"eb","description":"Retrieve the bans for an account by ID.","type":"api","vendorPath":"/ISteamUser/GetPlayerBans/v1/","path":"/hubs/gaming/playerBans","vendorMethod":"GET","response":{"contentType":"application/json"},"model":{"transform":false,"name":"getPlayerBans","swagger":{"getPlayerBansObject":{"title":"getPlayerBans","type":"object","properties":{"VACBanned":{"type":"boolean"},"EconomyBan":{"type":"string"},"NumberOfVACBans":{"format":"int32","type":"integer"},"CommunityBanned":{"type":"boolean"},"DaysSinceLastBan":{"format":"int32","type":"integer"},"NumberOfGameBans":{"format":"int32","type":"integer"},"SteamId":{"type":"string"}}},"getPlayerBans":{"type":"array","items":{"type":"getPlayerBansObject"}}}},"hooks":[{"isLegacy":false,"contextParams":"request_vendor_parameters,response_body","mimeType":"application/javascript","body":"var limit = response_body.players.length;\nvar offset = request_vendor_parameters[\"page\"]*request_vendor_parameters[\"pageSize\"];\nvar end = offset+request_vendor_parameters[\"pageSize\"];\n\nif(limit<end) {\n  var returnArray = response_body.players.slice(offset,limit);\n} else {\n  var returnArray = response_body.players.slice(offset,end);\n}\n\ndone({\n  \"continue\": true,\n  response_body: {\n    returnArray\n  }\n})","type":"postRequest"}],"modelMigrated":false,"parameters":[{"vendorType":"query","dataType":"string","name":"page","description":"The page number of resources to retrieve","vendorDataType":"string","source":"request","type":"query","vendorName":"page","required":false},{"vendorType":"query","dataType":"string","name":"pageSize","description":"The number of resources to return in a given page","vendorDataType":"string","source":"request","type":"query","vendorName":"pageSize","required":false},{"vendorType":"query","dataType":"integer","name":"steamid","description":"The account's SteamID. A comma-delimited list of SteamIDs can be used.","vendorDataType":"integer","source":"request","type":"query","vendorName":"steamids","required":true}],"rootKey":"returnArray"},{"method":"GET","kind":"eb","description":"Retrieve player summaries for an account by ID.","type":"api","vendorPath":"/ISteamUser/GetPlayerSummaries/v2/","path":"/hubs/gaming/playerSummaries","vendorMethod":"GET","response":{"contentType":"application/json"},"model":{"transform":false,"name":"getPlayerSummaries","swagger":{"getPlayerSummariesObject":{"title":"getPlayerSummaries","type":"object","properties":{"personastate":{"format":"int32","type":"integer"},"profileurl":{"type":"string"},"profilestate":{"format":"int32","type":"integer"},"primaryclanid":{"type":"string"},"avatarfull":{"type":"string"},"avatarmedium":{"type":"string"},"locstatecode":{"type":"string"},"avatar":{"type":"string"},"personaname":{"type":"string"},"personastateflags":{"format":"int32","type":"integer"},"realname":{"type":"string"},"steamid":{"type":"string"},"timecreated":{"x-mask":"yyyy-MM-dd'T'HH:mm:ss.SSSXXX","format":"date-time","type":"string"},"lastlogoff":{"x-mask":"yyyy-MM-dd'T'HH:mm:ss.SSSXXX","format":"date-time","type":"string"},"loccountrycode":{"type":"string"},"communityvisibilitystate":{"format":"int32","type":"integer"}}},"getPlayerSummaries":{"type":"array","items":{"type":"getPlayerSummariesObject"}}}},"hooks":[{"isLegacy":false,"contextParams":"request_vendor_parameters,response_body","mimeType":"application/javascript","body":"var limit = response_body.response.players.length;\nvar offset = request_vendor_parameters[\"page\"]*request_vendor_parameters[\"pageSize\"];\nvar end = offset+request_vendor_parameters[\"pageSize\"];\n\nif(limit<end) {\n  var returnArray = response_body.response.players.slice(offset,limit);\n} else {\n  var returnArray = response_body.response.players.slice(offset,end);\n}\n\nvar temp;\nfor(var i = 0; i < returnArray.length; i++) {\n  temp = new Date(returnArray[i].timecreated*1000);\n  returnArray[i].timecreated = temp.toISOString();\n  temp = new Date(returnArray[i].lastlogoff*1000);\n  returnArray[i].lastlogoff = temp.toISOString();\n}\n\ndone({\n  \"continue\": true,\n  response_body: {\n    returnArray\n  }\n})","type":"postRequest"}],"modelMigrated":false,"parameters":[{"vendorType":"query","dataType":"string","name":"steamid","description":"The account's SteamID. A comma-delimited list of SteamIDs can be used. (max: 100)","vendorDataType":"string","source":"request","type":"query","vendorName":"steamids","required":true},{"vendorType":"query","dataType":"string","name":"page","description":"The page number of resources to retrieve","vendorDataType":"string","source":"request","type":"query","vendorName":"page","required":false},{"vendorType":"query","dataType":"string","name":"pageSize","description":"The number of resources to return in a given page","vendorDataType":"string","source":"request","type":"query","vendorName":"pageSize","required":false}],"rootKey":"returnArray"},{"method":"GET","kind":"eb","description":"Retrieve a list of recently played games for an account by ID.","type":"api","vendorPath":"/IPlayerService/GetRecentlyPlayedGames/v1/","path":"/hubs/gaming/recentlyPlayedGames","vendorMethod":"GET","response":{"contentType":"application/json"},"model":{"transform":false,"name":"getRecentlyPlayedGames","swagger":{"getRecentlyPlayedGames":{"type":"array","items":{"type":"getRecentlyPlayedGamesObject"}},"getRecentlyPlayedGamesObject":{"title":"getRecentlyPlayedGames","type":"object","properties":{"img_icon_url":{"type":"string"},"appid":{"format":"int32","type":"integer"},"name":{"type":"string"},"img_logo_url":{"type":"string"},"playtime_forever":{"format":"int32","type":"integer"},"playtime_2weeks":{"format":"int32","type":"integer"}}}}},"hooks":[{"isLegacy":false,"contextParams":"request_vendor_parameters,response_body","mimeType":"application/javascript","body":"var limit = response_body.response.games.length;\nvar offset = request_vendor_parameters[\"page\"]*request_vendor_parameters[\"pageSize\"];\nvar end = offset+request_vendor_parameters[\"pageSize\"];\n\nif(limit<end) {\n  var returnArray = response_body.response.games.slice(offset,limit);\n} else {\n  var returnArray = response_body.response.games.slice(offset,end);\n}\n\ndone({\n  \"continue\": true,\n  response_body: {\n    returnArray\n  }\n})","type":"postRequest"}],"modelMigrated":false,"parameters":[{"vendorType":"query","dataType":"integer","name":"count","description":"The number of games to return (0/unset: all)","vendorDataType":"integer","source":"request","type":"query","vendorName":"count","required":false},{"vendorType":"query","dataType":"string","name":"page","description":"The page number of resources to retrieve","vendorDataType":"string","source":"request","type":"query","vendorName":"page","required":false},{"vendorType":"query","dataType":"string","name":"pageSize","description":"The number of resources to return in a given page","vendorDataType":"string","source":"request","type":"query","vendorName":"pageSize","required":false},{"vendorType":"query","dataType":"integer","name":"steamid","description":"The account's SteamID","vendorDataType":"integer","source":"request","type":"query","vendorName":"steamid","required":true}],"rootKey":"returnArray"},{"method":"GET","kind":"eb","description":"Retrieve the complete list of stats and achievements for the specified game.","type":"api","vendorPath":"/ISteamUserStats/GetSchemaForGame/v2/","path":"/hubs/gaming/schemaForGame","vendorMethod":"GET","response":{"contentType":"application/json"},"model":{"transform":false,"name":"getSchemaForGame","swagger":{"getSchemaForGameObject":{"title":"getSchemaForGame","type":"object","properties":{"achievements":{"type":"array","items":{"type":"getSchemaForGameAchievements"}},"stats":{"type":"array","items":{"type":"getSchemaForGameStats"}}}},"getSchemaForGame":{"type":"array","items":{"type":"getSchemaForGameObject"}},"getSchemaForGameStats":{"title":"stats","properties":{"displayName":{"type":"string"},"name":{"type":"string"},"defaultvalue":{"format":"int32","type":"integer"}}},"getSchemaForGameAchievements":{"title":"achievements","properties":{"icongray":{"type":"string"},"hidden":{"format":"int32","type":"integer"},"displayName":{"type":"string"},"icon":{"type":"string"},"name":{"type":"string"},"defaultvalue":{"format":"int32","type":"integer"},"description":{"type":"string"}}}}},"hooks":[{"isLegacy":false,"contextParams":"request_vendor_parameters,response_body","mimeType":"application/javascript","body":"var limit = response_body.game.availableGameStats.achievements.length;\nvar offset = request_vendor_parameters[\"page\"]*request_vendor_parameters[\"pageSize\"];\nvar end = offset+request_vendor_parameters[\"pageSize\"];\n\nif(limit<end) {\n  var achievements = response_body.game.availableGameStats.achievements.slice(offset,limit);\n} else {\n  var achievements = response_body.game.availableGameStats.achievements.slice(offset,end);\n}\n\nlimit = response_body.game.availableGameStats.stats.length;\noffset = request_vendor_parameters[\"page\"]*request_vendor_parameters[\"pageSize\"];\nend = offset+request_vendor_parameters[\"pageSize\"];\n\nif(limit<end) {\n  var stats = response_body.game.availableGameStats.stats.slice(offset,limit);\n} else {\n  var stats = response_body.game.availableGameStats.stats.slice(offset,end);\n}\n\n\ndone({\n  \"continue\": true,\n  \"response_body\": {\n    \"response\": {\n      achievements,\n      stats\n    }\n  }\n})","type":"postRequest"}],"modelMigrated":false,"parameters":[{"vendorType":"query","dataType":"string","name":"page","description":"The page number of resources to retrieve","vendorDataType":"string","source":"request","type":"query","vendorName":"page","required":false},{"vendorType":"query","dataType":"string","name":"pageSize","description":"The number of resources to return in a given page","vendorDataType":"string","source":"request","type":"query","vendorName":"pageSize","required":false},{"vendorType":"query","dataType":"integer","name":"appid","description":"The game's ID","vendorDataType":"integer","source":"request","type":"query","vendorName":"appid","required":true}],"rootKey":"response"},{"method":"GET","kind":"eb","description":"Retrieve the Steam Level of an account by ID.","type":"api","vendorPath":"/IPlayerService/GetSteamLevel/v1/","path":"/hubs/gaming/steamlevel","vendorMethod":"GET","response":{"contentType":"application/json"},"model":{"transform":false,"name":"getSteamLevel","swagger":{"getSteamLevel":{"title":"getSteamLevel","properties":{"player_level":{"format":"int32","type":"integer"}}}}},"hooks":[],"modelMigrated":false,"parameters":[{"vendorType":"query","dataType":"integer","name":"steamid","description":"The account's SteamID","vendorDataType":"integer","source":"request","type":"query","vendorName":"steamid","required":true}],"rootKey":"response"},{"method":"GET","kind":"eb","description":"Retrieve the list of stats that the specified user has set in an app.","type":"api","vendorPath":"/ISteamUserStats/GetUserStatsForGame/v2/","path":"/hubs/gaming/userStatsForGame","vendorMethod":"GET","response":{"contentType":"application/json"},"model":{"transform":false,"name":"getUserStatsForGame","swagger":{"getUserStatsForGameObject":{"title":"getUserStatsForGame","type":"object","properties":{"achievements":{"type":"array","items":{"type":"getUserStatsForGameAchievements"}},"stats":{"type":"array","items":{"type":"getUserStatsForGameStats"}}}},"getUserStatsForGameStats":{"title":"stats","properties":{"name":{"type":"string"},"value":{"format":"int32","type":"integer"}}},"getUserStatsForGame":{"type":"array","items":{"type":"getUserStatsForGameObject"}},"getUserStatsForGameAchievements":{"title":"achievements","properties":{"name":{"type":"string"},"achieved":{"format":"int32","type":"integer"}}}}},"hooks":[{"isLegacy":false,"contextParams":"request_vendor_parameters,response_body","mimeType":"application/javascript","body":"var limit = response_body.playerstats.achievements.length;\nvar offset = request_vendor_parameters[\"page\"]*request_vendor_parameters[\"pageSize\"];\nvar end = offset+request_vendor_parameters[\"pageSize\"];\n\nif(limit<end) {\n  var achievements = response_body.playerstats.achievements.slice(offset,limit);\n} else {\n  var achievements = response_body.playerstats.achievements.slice(offset,end);\n}\n\nlimit = response_body.playerstats.stats.length;\noffset = request_vendor_parameters[\"page\"]*request_vendor_parameters[\"pageSize\"];\nend = offset+request_vendor_parameters[\"pageSize\"];\n\nif(limit<end) {\n  var stats = response_body.playerstats.stats.slice(offset,limit);\n} else {\n  var stats = response_body.playerstats.stats.slice(offset,end);\n}\n\n\ndone({\n  \"continue\": true,\n  \"response_body\": {\n    \"response\": {\n      achievements,\n      stats\n    }\n  }\n})","type":"postRequest"}],"modelMigrated":false,"parameters":[{"vendorType":"query","dataType":"string","name":"page","description":"The page number of resources to retrieve","vendorDataType":"string","source":"request","type":"query","vendorName":"page","required":false},{"vendorType":"query","dataType":"string","name":"pageSize","description":"The number of resources to return in a given page","vendorDataType":"string","source":"request","type":"query","vendorName":"pageSize","required":false},{"vendorType":"query","dataType":"integer","name":"steamid","description":"The account's SteamID","vendorDataType":"integer","source":"request","type":"query","vendorName":"steamid","required":true},{"vendorType":"query","dataType":"integer","name":"appid","description":"The game's ID","vendorDataType":"integer","source":"request","type":"query","vendorName":"appid","required":true}],"rootKey":"response"}],"modelType":"basic","protocolType":"http","transformationsEnabled":true,"deleted":false,"hub":"gaming","typeOauth":false,"name":"Steam","extendable":true,"parameters":[{"vendorType":"header","name":"application/json","source":"request","type":"value","vendorName":"Accept","required":false},{"vendorType":"header","name":"application/json","source":"request","type":"value","vendorName":"Content-Type","required":false},{"vendorType":"query","name":"key","source":"request","type":"configuration","vendorName":"key","required":false}]}