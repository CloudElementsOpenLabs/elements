{"configuration":[{"internal":false,"companyConfig":false,"defaultValue":"60","displayOrder":1,"active":true,"description":"expires_in","type":"TEXTFIELD_128","resellerConfig":false,"required":false,"hideFromConsole":true,"name":"expires_in","groupControl":false,"key":"expires_in"},{"internal":true,"hideFromConsole":true,"companyConfig":false,"displayOrder":1,"name":"authentication.time","active":true,"description":"authentication.time","type":"TEXTFIELD_32","groupControl":false,"resellerConfig":false,"key":"authentication.time","required":false},{"internal":false,"hideFromConsole":true,"companyConfig":false,"displayOrder":1,"name":"Oauth Token","active":true,"description":"Oauth Token","type":"TEXTFIELD_128","groupControl":false,"resellerConfig":false,"key":"oauth.token","required":false},{"internal":false,"companyConfig":false,"defaultValue":"https://accounts.adp.com","displayOrder":1,"active":true,"description":"ADPoo Base Url","type":"TEXTFIELD_1000","resellerConfig":false,"required":true,"hideFromConsole":true,"name":"Base Url","groupControl":false,"key":"base.url"},{"internal":false,"companyConfig":false,"defaultValue":"100","displayOrder":1,"active":true,"description":"ADPoo Max Page Size (or limit)","type":"TEXTFIELD_32","resellerConfig":false,"required":false,"hideFromConsole":true,"name":"Max Page Size (or limit)","groupControl":false,"key":"pagination.max"},{"internal":false,"hideFromConsole":true,"companyConfig":false,"displayOrder":1,"name":"Pagination Type","active":true,"description":"ADPoo Pagination Type","type":"TEXTFIELD_32","groupControl":false,"resellerConfig":false,"key":"pagination.type","required":false},{"internal":false,"hideFromConsole":false,"companyConfig":false,"displayOrder":1,"name":"Oauth API Key","active":true,"description":"Oauth API Key","type":"TEXTFIELD_128","groupControl":false,"resellerConfig":false,"key":"oauth.api.key","required":true},{"internal":false,"hideFromConsole":false,"companyConfig":false,"displayOrder":1,"name":"Oauth API Secret","active":true,"description":"Oauth API Secret","type":"TEXTFIELD_128","groupControl":false,"resellerConfig":false,"key":"oauth.api.secret","required":true},{"internal":true,"hideFromConsole":false,"companyConfig":false,"displayOrder":1,"name":"Oauth User Token","active":true,"description":"Oauth User Token","type":"TEXTFIELD_32","groupControl":false,"resellerConfig":false,"key":"oauth.user.token","required":false},{"internal":false,"hideFromConsole":true,"companyConfig":false,"displayOrder":11,"name":"Event Notification Signature Key","active":true,"description":"ADPoo Event Notification Signature Key","type":"TEXTFIELD_128","groupControl":false,"resellerConfig":false,"key":"event.notification.signature.key","required":false},{"internal":false,"hideFromConsole":false,"companyConfig":false,"displayOrder":12,"name":"Event Notification Basic User Name","active":true,"description":"ADP WorkForce Now Event Notification Basic User Name","type":"TEXTFIELD_128","groupControl":false,"resellerConfig":false,"key":"event.notification.basic.username","required":false},{"internal":false,"hideFromConsole":false,"companyConfig":false,"displayOrder":13,"name":"Event Notification Basic Password","active":true,"description":"ADP WorkForce Now Event Notification Basic Password","type":"PASSWORD","groupControl":false,"resellerConfig":false,"key":"event.notification.basic.password","required":false},{"internal":false,"hideFromConsole":false,"companyConfig":false,"displayOrder":98,"name":"Default select fields","active":true,"description":"Generic map used to specify default fields for bulk download and GET /all requests. Each key should be the canonical objectName and values may be specified as a comma-delimited string or a list of strings","type":"TEXTAREA","groupControl":false,"resellerConfig":false,"key":"default.select.fields.map","required":false},{"internal":false,"companyConfig":false,"defaultValue":"true","displayOrder":99,"active":true,"description":"Used to enable/disable filtering of null values from the responses","type":"BOOLEAN","resellerConfig":false,"required":false,"hideFromConsole":true,"name":"Filter null values from the response","groupControl":false,"key":"filter.response.nulls"},{"internal":false,"hideFromConsole":false,"companyConfig":false,"displayOrder":101,"name":"Base64 Encoded JKS","active":true,"description":"ADPoo Base64 encoded JKS file. Please see our TLS documentation for additional information including sample code","type":"TEXTFIELD_128","groupControl":false,"resellerConfig":false,"key":"base64.encoded.jks","required":true},{"internal":false,"hideFromConsole":false,"companyConfig":false,"displayOrder":102,"name":"JKS Password","active":true,"description":"ADPoo Password for the provided keystore","type":"PASSWORD","groupControl":false,"resellerConfig":false,"key":"jks.password","required":true}],"objects":[],"description":"ADP Element for WorkForce Now","cloneable":false,"extended":false,"bulkDownloadEnabled":false,"useModelsForMetadata":true,"trialAccount":false,"logo":"adpoo","hooks":[{"isLegacy":false,"mimeType":"application/javascript","body":"let Authorization = `Bearer ${configuration['oauth.token']}`;\ndone({'request_vendor_headers': {Authorization}})","type":"preRequest"}],"beta":false,"key":"adpwfnSDF","authentication":{"type":"custom"},"bulkUploadEnabled":false,"image":"elements/custom-element-default-logo.png","models":[],"active":true,"resources":[{"path":"/hubs/general/authenticate","vendorMethod":"POST","method":"POST","kind":"eb","response":{"contentType":"application/json"},"description":"Create a(n) /","type":"provisionAuthValidation","hooks":[{"isLegacy":false,"mimeType":"application/javascript","body":"if (response_iserror) done(); \ndone({'configuration': {\n  'oauth.token': response_body.access_token,\n  'expires_in': response_body.expires_in\n}})","type":"postRequest"},{"isLegacy":false,"mimeType":"application/javascript","body":"let Authorization = `Basic ${CE.b64(configuration['oauth.api.key'] + ':' + configuration['oauth.api.secret'])}`;\ndone({'request_vendor_headers': {Authorization, 'Content-Type': 'application/x-www-form-urlencoded'}})","type":"preRequest"}],"modelMigrated":false,"parameters":[{"vendorType":"bodyField","dataType":"string","name":"expires_in","description":"token expire time","vendorDataType":"string","source":"request","type":"configuration","vendorName":"expires_in","required":false},{"vendorType":"form","dataType":"string","name":"client_credentials","description":"The object body","vendorDataType":"string","source":"request","type":"value","vendorName":"grant_type","required":true},{"vendorType":"bodyField","dataType":"string","name":"oauth.user.token","description":"oauth token","vendorDataType":"string","source":"request","type":"configuration","vendorName":"access_token","required":false}],"vendorPath":"https://accounts.adp.com/auth/oauth/v2/token"},{"path":"/hubs/general/authenticate-refresh","vendorMethod":"POST","method":"POST","kind":"eb","response":{"contentType":"application/json"},"description":"Create a(n) /","type":"onRefresh","hooks":[{"isLegacy":false,"mimeType":"application/javascript","body":"if (response_iserror) done(); \ndone({'configuration': {\n  'oauth.token': response_body.access_token,\n  'expires_in': response_body.expires_in\n}})","type":"postRequest"},{"isLegacy":false,"mimeType":"application/javascript","body":"let Authorization = `Basic ${CE.b64(configuration['oauth.api.key'] + ':' + configuration['oauth.api.secret'])}`;\ndone({'request_vendor_headers': {Authorization, 'Content-Type': 'application/x-www-form-urlencoded'}})","type":"preRequest"}],"modelMigrated":false,"parameters":[{"vendorType":"bodyField","dataType":"string","name":"expires_in","description":"token expire time","vendorDataType":"string","source":"request","type":"configuration","vendorName":"expires_in","required":false},{"vendorType":"form","dataType":"string","name":"client_credentials","description":"The object body","vendorDataType":"string","source":"request","type":"value","vendorName":"grant_type","required":true},{"vendorType":"bodyField","dataType":"string","name":"oauth.user.token","description":"oauth token","vendorDataType":"string","source":"request","type":"configuration","vendorName":"access_token","required":false}],"vendorPath":"https://accounts.adp.com/auth/oauth/v2/token"},{"path":"/hubs/general/employees","vendorMethod":"GET","method":"GET","kind":"eb","response":{"contentType":"application/json"},"description":"Get a list of employees (workers)","type":"api","hooks":[{"isLegacy":false,"mimeType":"application/javascript","body":"done({\n 'request_vendor_headers': {\n   'Accept': null,\n   'Content-Type': null\n }\n})","type":"preRequest"}],"modelMigrated":false,"parameters":[{"vendorType":"query","dataType":"string","name":"page","description":"The page number of resources to retrieve","vendorDataType":"string","source":"request","type":"query","vendorName":"$skip","required":false},{"vendorType":"query","dataType":"string","name":"pageSize","description":"The number of resources to return in a given page","vendorDataType":"string","source":"request","type":"query","vendorName":"$top","required":false}],"vendorPath":"/hr/v2/workers","rootKey":".workers[*]"},{"path":"/hubs/general/employees","vendorMethod":"POST","method":"POST","kind":"eb","response":{"contentType":"application/json"},"description":"Create a new employee (worker)","type":"api","hooks":[{"isLegacy":false,"mimeType":"application/javascript","body":"let body = request_vendor_body.replace(\"{worker}\", request_body);\ndone({request_vendor_body: body, continue: true})","type":"preRequest"}],"modelMigrated":false,"parameters":[{"vendorType":"body","dataType":"string","name":"{   \"events\": [     {       \"serviceCategoryCode\": {         \"codeValue\": \"hr\"       },       \"eventNameCode\": {         \"codeValue\": \"worker.hire\"       },       \"data\": {         \"transform\": {           \"eventReasonCode\": {             \"shortName\": \"NEW - Position\",             \"codeValue\": \"NEW\"           },           \"eventStatusCode\": {             \"codeValue\": \"submit\"           },           \"worker\": {worker}         }       }     }   ] }","description":"The object body","vendorDataType":"string","source":"request","type":"value","vendorName":"body","required":true},{"vendorType":"no-op","dataType":"employee","name":"worker","description":"The object body","vendorDataType":"employee","source":"request","type":"body","vendorName":"worker","required":true}],"vendorPath":"/events/hr/v1/worker.hire","rootKey":"events[0].data.output.worker"},{"path":"/hubs/general/employees/{employeeId}/contacts","vendorMethod":"GET","method":"GET","kind":"eb","response":{"contentType":"application/json"},"description":"Retrieve a list of contacts for an employee (worker)","type":"api","hooks":[{"isLegacy":false,"mimeType":"application/javascript","body":"done({\n 'request_vendor_headers': {\n   'Content-Type': null,\n }\n})","type":"preRequest"}],"modelMigrated":false,"parameters":[{"vendorType":"path","dataType":"string","name":"employeeId","description":"The employeeId ID","vendorDataType":"string","source":"request","type":"path","vendorName":"employeeId","required":true}],"vendorPath":"/hr/v2/associates/{employeeId}/personal-contacts","rootKey":"personalContacts[*]"},{"path":"/hubs/general/employees/{employeeId}/contacts","vendorMethod":"POST","method":"POST","kind":"eb","response":{"contentType":"application/json"},"description":"Add a contact for  an employee (worker)","type":"api","hooks":[{"isLegacy":false,"mimeType":"application/javascript","body":"let vendorBody = request_vendor_body.replace(\"{id}\", request_path_variables.employeeId).replace(\"{contact}\", request_body);\n\ndone({request_vendor_body: vendorBody, continue: true})","type":"preRequest"}],"modelMigrated":false,"parameters":[{"vendorType":"path","dataType":"string","name":"employeeId","description":"The associate OID of the employee","vendorDataType":"string","source":"request","type":"path","vendorName":"employeeId","required":true},{"vendorType":"body","dataType":"string","name":"{   \"events\": [     {       \"serviceCategoryCode\": {         \"codeValue\": \"hr\"       },       \"eventNameCode\": {         \"codeValue\": \"worker.personalContact.add\"       },       \"data\": {         \"eventContext\": {           \"worker\": {             \"associateOID\": \"{id}\"           }         },         \"transform\": {contact}     }   }] }","description":"The object body","vendorDataType":"string","source":"request","type":"value","vendorName":"vendorBody","required":true},{"vendorType":"no-op","dataType":"employeeContacts","name":"contact","description":"The object body","vendorDataType":"employeeContacts","source":"request","type":"body","vendorName":"contact","required":false}],"vendorPath":"/events/hr/v1/worker.personal-contact.add","rootKey":"events[0].data.output.personalContact"},{"path":"/hubs/general/employees/{employeeId}/contacts/{contactId}","vendorMethod":"POST","method":"DELETE","kind":"eb","response":{"contentType":"application/json"},"description":"Remove a personal contact for an employee (worker)","type":"api","hooks":[{"isLegacy":false,"mimeType":"application/javascript","body":"let body = request_vendor_body.replace(\"{employeeId}\", request_path_variables.employeeId).replace(\"{contactId}\", request_path_variables.contactId); \n\ndone({request_vendor_body: body, continue: true});","type":"preRequest"}],"modelMigrated":false,"parameters":[{"vendorType":"body","dataType":"string","name":"{   \"events\": [     {       \"serviceCategoryCode\": {         \"codeValue\": \"hr\"       },       \"eventNameCode\": {         \"codeValue\": \"worker.personalContact.remove\"       },       \"data\": {         \"eventContext\": {           \"worker\": {             \"associateOID\": \"{employeeId}\"           },           \"personalContact\": {             \"itemID\": \"{contactId}\"           }         }       }     }   ] }","description":"The object body","vendorDataType":"string","source":"request","type":"value","vendorName":"body","required":true},{"vendorType":"path","dataType":"string","name":"contactId","description":"The Object ID","vendorDataType":"string","source":"request","type":"path","vendorName":"contactId","required":true},{"vendorType":"path","dataType":"string","name":"employeeId","description":"The Object ID","vendorDataType":"string","source":"request","type":"path","vendorName":"itemID","required":true}],"vendorPath":"/events/hr/v1/worker.personal-contact.remove"},{"path":"/hubs/general/employees/{employeeId}/contacts/{contactId}","vendorMethod":"POST","method":"PATCH","kind":"eb","response":{"contentType":"application/json"},"description":"Update a personal  contact for an employee (worker)","type":"api","hooks":[{"isLegacy":false,"mimeType":"application/javascript","body":"let vendorBody = request_vendor_body.replace(\"{employeeId}\", request_path_variables.employeeId).replace(\"{contact}\", request_body).replace(\"{contactId}\", request_path_variables.contactId);\n\ndone({request_vendor_body: vendorBody, continue: true})","type":"preRequest"}],"modelMigrated":false,"parameters":[{"vendorType":"no-op","dataType":"employeeContacts","name":"contact","description":"The contact body","vendorDataType":"employeeContacts","source":"request","type":"body","vendorName":"contact","required":false},{"vendorType":"body","dataType":"string","name":"{   \"events\": [     {       \"serviceCategoryCode\": {         \"codeValue\": \"hr\"       },       \"eventNameCode\": {         \"codeValue\": \"worker.personalContact.change\"       },       \"data\": {         \"eventContext\": {           \"worker\": {             \"associateOID\": \"{employeeId}\"           },           \"personalContact\": {             \"itemID\": \"{contactId}\"           }         },         \"transform\": {contact}     } }   ] }","description":"The vendor Body","vendorDataType":"string","source":"request","type":"value","vendorName":"vendorBody","required":true},{"vendorType":"path","dataType":"string","name":"employeeId","description":"The Object ID","vendorDataType":"string","source":"request","type":"path","vendorName":"employeeId","required":true},{"vendorType":"path","dataType":"string","name":"contactId","description":"The Object ID","vendorDataType":"string","source":"request","type":"path","vendorName":"contactId","required":true}],"vendorPath":"/events/hr/v1/worker.personal-contact.change"},{"path":"/hubs/general/employees/{employeeId}/legal-address","vendorMethod":"POST","method":"PATCH","kind":"eb","response":{"contentType":"application/json"},"description":"Update the legal address for an employee (worker)","type":"api","hooks":[{"isLegacy":false,"mimeType":"application/javascript","body":"let vendorBody = request_vendor_body.replace(\"{employeeId}\", request_path_variables.employeeId).replace(\"{address}\", request_body);\n\ndone({request_vendor_body: vendorBody, continue: true})","type":"preRequest"}],"modelMigrated":false,"parameters":[{"vendorType":"no-op","dataType":"employeesAddress","name":"address","description":"The object body","vendorDataType":"employeesAddress","source":"request","type":"body","vendorName":"address","required":true},{"vendorType":"path","dataType":"string","name":"employeeId","description":"The employeeId ID","vendorDataType":"string","source":"request","type":"path","vendorName":"employeeId","required":true},{"vendorType":"body","dataType":"string","name":"{   \"events\": [     {       \"serviceCategoryCode\": {         \"codeValue\": \"hr\"       },       \"eventNameCode\": {         \"codeValue\": \"worker.legalAddress.add\"       },       \"data\": {         \"eventContext\": {           \"worker\": {             \"associateOID\": \"{employeeId}\"           }         },         \"transform\": {           \"effectiveDateTime\": \"2014-01-01T00:00:00Z\",           \"worker\": {             \"person\": {               \"legalAddress\": {address}             }           }         }       }     }   ] }","description":"The object body","vendorDataType":"string","source":"request","type":"value","vendorName":"vendorBody","required":true}],"vendorPath":"/events/hr/v1/worker.legal-address.change","rootKey":".events[*]"},{"path":"/hubs/general/employees/{employeeId}/legal-address","vendorMethod":"POST","method":"POST","kind":"eb","response":{"contentType":"application/json"},"description":"Update the legal address for an employee (worker)","type":"api","hooks":[{"isLegacy":false,"mimeType":"application/javascript","body":"let vendorBody = request_vendor_body.replace(\"{employeeId}\", request_path_variables.employeeId).replace(\"{address}\", request_body);\n\ndone({request_vendor_body: vendorBody, continue: true})","type":"preRequest"}],"modelMigrated":false,"parameters":[{"vendorType":"no-op","dataType":"employeesAddress","name":"address","description":"The object body","vendorDataType":"employeesAddress","source":"request","type":"body","vendorName":"address","required":true},{"vendorType":"path","dataType":"string","name":"employeeId","description":"The employeeId ID","vendorDataType":"string","source":"request","type":"path","vendorName":"employeeId","required":true},{"vendorType":"body","dataType":"string","name":"{   \"events\": [     {       \"serviceCategoryCode\": {         \"codeValue\": \"hr\"       },       \"eventNameCode\": {         \"codeValue\": \"worker.legalAddress.add\"       },       \"data\": {         \"eventContext\": {           \"worker\": {             \"associateOID\": \"{employeeId}\"           }         },         \"transform\": {           \"effectiveDateTime\": \"2014-01-01T00:00:00Z\",           \"worker\": {             \"person\": {               \"legalAddress\": {address}             }           }         }       }     }   ] }","description":"The object body","vendorDataType":"string","source":"request","type":"value","vendorName":"vendorBody","required":true}],"vendorPath":"/events/hr/v1/worker.legal-address.add","rootKey":".events[*]"},{"path":"/hubs/general/employees/{employeeId}/pay-distributions","vendorMethod":"GET","method":"GET","kind":"eb","response":{"contentType":"application/json"},"description":"Retrieve the current pay distributions for an employee","type":"api","hooks":[{"isLegacy":false,"mimeType":"application/javascript","body":"done({\n 'request_vendor_headers': {\n   'Content-Type': null\n }\n})","type":"preRequest"}],"modelMigrated":false,"parameters":[{"vendorType":"path","dataType":"string","name":"employeeId","description":"The employeeId ID","vendorDataType":"string","source":"request","type":"path","vendorName":"employeeId","required":true}],"vendorPath":"/payroll/v2/workers/{employeeId}/pay-distributions","rootKey":"payDistributions[*]"},{"path":"/hubs/general/employees/{employeeId}/pay-distributions/{payItemId}","vendorMethod":"POST","method":"POST","kind":"eb","response":{"contentType":"application/json"},"description":"Add or update the pay for an employee (worker)","type":"api","hooks":[{"isLegacy":false,"mimeType":"application/javascript","body":"let body = request_vendor_body.replace(\"{employeeId}\", request_path_variables.employeeId)\n  .replace(\"{payItemId}\", request_path_variables.payItemId)\n  .replace(\"{payrollFileId}\", request_parameters.payrollFileId)\n  .replace(\"{payDistribution}\", request_body);\n\nconsole.log(body)\ndone({request_vendor_body: body, continue: true});","type":"preRequest"}],"modelMigrated":false,"parameters":[{"vendorType":"path","dataType":"string","name":"payItemId","description":"The Object ID","vendorDataType":"string","source":"request","type":"path","vendorName":"payItemId","required":true},{"vendorType":"path","dataType":"string","name":"employeeId","description":"The Object ID","vendorDataType":"string","source":"request","type":"path","vendorName":"employeeId","required":true},{"vendorType":"no-op","dataType":"employeesPayDistributions","name":"payDistribution","description":"The object body","vendorDataType":"employeesPayDistributions","source":"request","type":"body","vendorName":"payDistribution","required":true},{"vendorType":"query","dataType":"string","name":"payrollFileId","description":"The Object ID","vendorDataType":"string","source":"request","type":"query","vendorName":"payrollFileId","required":true},{"vendorType":"body","dataType":"string","name":"{   \"events\": [{     \"serviceCategoryCode\": {       \"codeValue\": \"payroll\"     },     \"eventNameCode\": {       \"codeValue\": \"worker.payDistribution.change\"     },     \"data\": {       \"transform\": {payDistribution},       \"eventContext\": {         \"worker\": {           \"associateOID\": \"{employeeId}\"         },         \"payrollFileNumber\": \"{payrollFileId}\",         \"payDistribution\": {           \"itemID\": \"{payItemId}\",           \"payrollGroupCode\": {             \"codeValue\": \"BOQ\",             \"shortName\": \"BOQ\"           }         }       }     }   }] }","description":"The object body","vendorDataType":"string","source":"request","type":"value","vendorName":"body","required":true}],"vendorPath":"/events/payroll/v1/worker.pay-distribution.change"},{"path":"/hubs/general/employees/{employeeId}/personal-address","vendorMethod":"POST","method":"POST","kind":"eb","response":{"contentType":"application/json"},"description":"Add a personal address for an employee (worker)","type":"api","hooks":[{"isLegacy":false,"mimeType":"application/javascript","body":"let vendorBody = request_vendor_body.replace(\"{employeeId}\", request_path_variables.employeeId).replace(\"{personalAddress}\", request_body);\n\ndone({request_vendor_body: vendorBody, continue: true})","type":"preRequest"}],"modelMigrated":false,"parameters":[{"vendorType":"body","dataType":"employeesPersonalAddressRequest","name":"{   \"events\": [     {       \"serviceCategoryCode\": {         \"codeValue\": \"hr\"       },       \"eventNameCode\": {         \"codeValue\": \"worker.personalAddress.change\"       },       \"data\": {         \"eventContext\": {           \"worker\": {             \"associateOID\": \"{employeeId}\"           }         },         \"transform\": {           \"effectiveDateTime\": \"2014-01-01T00:00:00Z\",           \"worker\": {             \"person\": {               \"personalAddress\": {personalAddress}             }           }         }       }     }   ] }","description":"The object body","vendorDataType":"employeesPersonalAddressRequest","source":"request","type":"body","vendorName":"body","required":true},{"vendorType":"path","dataType":"string","name":"employeeId","description":"The employeeId ID","vendorDataType":"string","source":"request","type":"path","vendorName":"employeeId","required":true}],"vendorPath":"/events/hr/v1/worker.personal-address.add"},{"path":"/hubs/general/employees/{id}","vendorMethod":"POST","method":"DELETE","kind":"eb","response":{"contentType":"application/json"},"description":"Terminate an employee (worker) ","type":"api","hooks":[{"isLegacy":false,"mimeType":"application/javascript","body":"let body = request_vendor_body.replace(\"{id}\", request_path_variables.id).replace(\"{timestamp}\", new Date(Date.now()).toISOString());\n\ndone({request_vendor_body: body, continue: true});","type":"preRequest"}],"modelMigrated":false,"parameters":[{"vendorType":"body","dataType":"string","name":"{   \"events\": [{     \"serviceCategoryCode\": {       \"codeValue\": \"hr\"     },     \"eventNameCode\": {       \"codeValue\": \"worker.terminate\"     },     \"data\": {       \"eventContext\": {         \"worker\": {           \"associateOID\": \"{id}\"         }       },       \"transform\": {         \"eventReasonCode\": {           \"shortName\": \"Terminate\",           \"codeValue\": \"A\"         },         \"worker\": {           \"workerDates\": {             \"terminationDate\": \"{timestamp}\"           }         }       }     }   }] }","description":"The body","vendorDataType":"string","source":"request","type":"value","vendorName":"body","required":false},{"vendorType":"path","dataType":"string","name":"id","description":"The Object ID","vendorDataType":"string","source":"request","type":"path","vendorName":"id","required":true}],"vendorPath":"/events/hr/v1/worker.terminate"},{"path":"/hubs/general/employees/{id}","vendorMethod":"GET","method":"GET","kind":"eb","response":{"contentType":"application/json"},"description":"Retrieve a given employee","type":"api","hooks":[{"isLegacy":false,"mimeType":"application/javascript","body":"done({\n 'request_vendor_headers': {\n   'Accept': null,\n   'Content-Type': null\n }\n})","type":"preRequest"}],"modelMigrated":false,"parameters":[{"vendorType":"path","dataType":"string","name":"id","description":"The id ID","vendorDataType":"string","source":"request","type":"path","vendorName":"id","required":true}],"vendorPath":"/hr/v2/workers/{id}","rootKey":".workers[*]"},{"path":"/hubs/general/employees/{id}","vendorMethod":"POST","method":"PATCH","kind":"eb","response":{"contentType":"application/json"},"description":"Rehire an employee (worker)","type":"api","hooks":[{"isLegacy":false,"mimeType":"application/javascript","body":"let myBody = {\"workerStatus\":{\"reasonCode\":{\"codeValue\":\"Existing Position\",\"shortName\":\"CURR\"}},\"workerDates\":{\"rehireDate\":\"2012-08-12\"}};\nmyBody.associateOID = request_path_variables.id\nlet finalBody = myBody\nlet parsed_vendor = JSON.parse(request_vendor_body)\nparsed_vendor.events[0].data.transform.worker = finalBody\nconsole.log(\"parsed vendor\"+JSON.stringify(parsed_vendor))\ndone({request_vendor_body: parsed_vendor})","type":"preRequest"}],"modelMigrated":false,"parameters":[{"vendorType":"body","dataType":"string","name":"{ \t\"events\": [{ \t\t\"serviceCategoryCode\": { \t\t\t\"codeValue\": \"hr\" \t\t}, \t\t\"eventNameCode\": { \t\t\t\"codeValue\": \"worker.rehire\" \t\t}, \t\t\"data\": { \t\t\t\"transform\": { \t\t\t\t\"worker\": \"{worker}\" \t\t\t} \t\t} \t}] }","description":"The object body","vendorDataType":"string","source":"request","type":"value","vendorName":"body","required":false},{"vendorType":"no-op","dataType":"employee","name":"worker","description":"The object body","vendorDataType":"employee","source":"request","type":"body","vendorName":"worker","required":false},{"vendorType":"path","dataType":"string","name":"id","description":"The Object ID","vendorDataType":"string","source":"request","type":"path","vendorName":"id","required":true}],"vendorPath":"/events/hr/v1/worker.rehire"},{"path":"/hubs/general/objects/{objectName}/metadata","vendorMethod":"GET","method":"GET","kind":"eb","response":{"contentType":"application/json"},"description":"Search for /hubs/general/objects/{objectName}/metadatas","type":"api","hooks":[{"isLegacy":false,"mimeType":"application/javascript","body":"let newPath\nlet newHeaders = request_vendor_headers\n\nif (request_path_variables.objectName === 'employees') {\n  newPath  = '/events/hr/v1/worker.hire/meta'\n  done({\"request_vendor_path\": newPath,\n  'request_vendor_headers': {\n    'Content-Type': null\n    },\n  continue: true})\n}\n\nif (request_path_variables.objectName === 'employeesContacts') {\n  newPath  = '/events/hr/v1/worker.personal-contact.add/meta'\n  done({\"request_vendor_path\": newPath,\n  'request_vendor_headers': {\n  'Content-Type': null\n  },\n  continue: true})\n}\n\nif (request_path_variables.objectName === 'employeesPayDistributions') {\n  newPath  = '/events/payroll/v1/worker.pay-distribution.change/meta'\n  done({\"request_vendor_path\": newPath,\n  'request_vendor_headers': {\n  'Content-Type': null\n  },\n  continue: true})\n}\nif (request_path_variables.objectName === 'employeesAddress') {\n  newPath  = '/events/hr/v1/worker.legal-address.add/meta'\n  done({\"request_vendor_path\": newPath,\n  'request_vendor_headers': {\n  'Content-Type': null\n  },\n  continue: true})\n}\n\nelse {\n  done({continue: false})\n}","type":"preRequest"},{"isLegacy":false,"mimeType":"application/javascript","body":"\nlet metadata = response_body.meta\nlet allObjects = metadata['/data/transforms'][0]\n//if (request_path_variables.id === \"employees\"\n  let fieldMappings = {\n    \"hidden\": \"hidden\",\n    \"maxLength\": \"length\",\n    \"minLength\": \"minLength\",\n    \"optional\": \"vendorRequired\",\n    \"pattern\": \"mask\",\n    \"readOnly\": \"vendorReadOnly\",\n    \"shortLabelName\": \"description\",\n    \"path\": \"vendorPath\",\n    \"dependencies\": \"relations\",\n    \"maxItems\": \"length\",\n    \"pickListItems\": \"picklistValues\",\n    \"reference\" : \"reference\",\n    \"longLabelName\":\"description\",\n    //\"codeList\" :\"picklistValues\",\n    \"codeValue\":\"value\",\n    \"shortName\":\"description\",\n    \"longName\" : \"description\",\n    \"valueDescription\": \"description\"\n  }\n\n  let altFieldMappings = {\n      \"codeList\" : \"picklistValues\"\n  }\n//Identify which entries in allObjects are fields, (some are arrays/objs and we don't want those for now)\nconst identifyFields = key => {\n    if (\"pattern\" in allObjects[key] === true || key.includes('codeValue') === true || key.includes('shortName') === true || key.includes('idValue') === true || key.includes('itemID') === true || \"shortLabelName\" in allObjects[key] === true ){return key}}\nlet fields = Object.keys(allObjects).filter(identifyFields)\n\n\n//kick off function for the recursive path finding. \nconst getParentPath1 = key => {\n    let path = getParentPath(key, '')\n    return {key, path}\n}\n\n// recursive function to identify the paths. Start with known fields, traverse up the path identifying parent object types on the way up til done\nconst getParentPath = (key, path) => {\n\tlet parentPath = key.substring(0, key.lastIndexOf('/'))\n\tlet lastKey = key.split('/').pop()\n    let parentObject = allObjects[parentPath]\n    if (typeof parentObject == \"undefined\"){\n        if (parentPath.length < 1){\n            path = lastKey + path\n            return path\n        }\n    }\n\tif (parentPath.length > 1){\n        //null check\n\t\tif (typeof parentObject != \"undefined\"){\n            //properties that identify arrays\n\t\t\tif (parentObject.hasOwnProperty('maxItems') && parentObject.hasOwnProperty('minItems')) {\n\t\t\t\tpath = '[*].' + lastKey + path\n            }\n            // properties that identify objects\n\t\t\telse if (parentObject.hasOwnProperty('maxItems') !== true && parentObject.hasOwnProperty('pattern') !== true){\n\t\t\t\tpath = '.' + lastKey + path\n            }\n        }\n        //handle for when no more objects above current object\n        else if (typeof parentObject == \"undefined\"){\n            path = '.' + lastKey + path\n        }\n        return getParentPath(parentPath, path)\n    }\n    return path\n}\n\n// Result/kickoff for recursive path finding. Kicks off the kick off function \nlet findAllPaths = fields.map(getParentPath1)\n\n// This function hydrates paths  with their respective metadata properties\nconst hydrator = x => {\n    let fieldData;\n    let parentPath = x.key.substring(0, x.key.lastIndexOf('/'))\n    //special handling for codeValue fields, doesn't follow the same structure\n    if (x.key.includes('codeValue')){\n        fieldData = allObjects[parentPath]\n       if  (allObjects[parentPath].hasOwnProperty('codeList') === true || allObjects[x.key].hasOwnProperty('codeList')){\n            if (allObjects[parentPath].codeList.hasOwnProperty('listItems') === true){\n                let listData = allObjects[parentPath].codeList.listItems\n                listData.map(obj => {\n                    //Map the deep fields to CE standards\n                    Object.keys(obj).map(field => { if(fieldMappings.hasOwnProperty(field)){\n                        let mappedValue = fieldMappings[field]\n                        if (field !== fieldMappings[field]){\n                        obj[mappedValue] = obj[field]\n                        delete obj[field]\n                        }\n                    } })\n                   });\n                delete fieldData.codeList\n                fieldData = Object.assign({path: x.path, picklistValues: listData}, fieldData)\n            }\n            // more special handling for links/relations\n            else if (allObjects[parentPath].codeList.hasOwnProperty('links') === true){\n                fieldData = allObjects[parentPath]\n                delete fieldData.codeList\n                fieldData = Object.assign({path: x.path}, fieldData)\n            }\n       }\n       //generic handling in case codeValue exists but no other props do. \n       else {\n           fieldData = allObjects[parentPath]\n           fieldData.path = x.path\n       }\n        let out = JSON.stringify(fieldData)\n    }\n    //Generic handling in case codeValue does not exist\n    else {\n        fieldData = allObjects[x.key];\n        fieldData.path = x.path\n    }\n    //Special handling for dependencies that are not existent in codeValue properties\n    if (allObjects[x.key].hasOwnProperty('dependencies') === true){\n        //fieldData = allObjects[x.key]\n        delete fieldData.dependencies\n}\n    if (allObjects[x.key].hasOwnProperty('maxAmountValue') === true){\n       // fieldData = allObjects[x.key]\n        delete fieldData.maxAmountValue\n    }\n    if (allObjects[x.key].hasOwnProperty('minAmountValue') === true){\n        //fieldData = allObjects[x.key]\n        delete fieldData.minAmountValue\n    }\n    if (allObjects[x.key].hasOwnProperty('sequence') === true){\n       // fieldData = allObjects[x.key]\n        delete fieldData.sequence\n    }\n    if (allObjects[x.key].hasOwnProperty('lessThan') === true){\n        // fieldData = allObjects[x.key]\n         delete fieldData.lessThan\n     }\n    if (allObjects[x.key].hasOwnProperty('greaterThan') === true){\n        // fieldData = allObjects[x.key]\n         delete fieldData.greaterThan\n     }\n    //return resulting field Object data\n\n    //Map the fields to CE names\n    Object.keys(fieldData).map(field => {\n        if(fieldMappings.hasOwnProperty(field)){\n        let mappedValue = fieldMappings[field]\n            if (field !== fieldMappings[field]){\n            fieldData[mappedValue] = fieldData[field]\n            delete fieldData[field]\n            }\n        } });\n\n    //delete fieldData[\"pickListValues\"]\n    //delete fieldData[\"references\"]\n    delete fieldData[\"relations\"]\n    if (!fieldData[\"vendorPath\"] || fieldData[\"vendorPath\"] === null){\n        console.log(x)\n        fieldData[\"vendorPath\"] = \"unable to set path\"\n    }\n    fieldData.vendorRequired = !fieldData.vendorRequired\n    return fieldData\n}\n \n//kick off hydrator to populate paths with metadata\nlet finalResult = findAllPaths.map(hydrator)\nlet finalResultClean = finalResult.map(obj => {\n    let newArr = obj.vendorPath.split('.');\n    newArr.shift()\n    let newPath = newArr.join('.')\n    obj.vendorPath = newPath\n    return obj\n})\n\nlet fixExtraCodeListsFinal = finalResultClean.map(obj => {\n    Object.keys(obj).map(field => {\n        if(altFieldMappings.hasOwnProperty(field)){\n        let mappedValue = altFieldMappings[field]\n        let listData = obj.codeList.listItems\n        listData.map(obj => {\n            //Map the deep fields to CE standards\n            Object.keys(obj).map(field => { if(fieldMappings.hasOwnProperty(field)){\n                let mappedValue = fieldMappings[field]\n                if (field !== fieldMappings[field]){\n                obj[mappedValue] = obj[field]\n                delete obj[field]\n                }\n            } })\n           });\n        delete obj.codeList\n            obj = Object.assign({path: obj.vendorPath, picklistValues: listData}, obj)\n            \n        } return obj\n    });\nreturn obj})\n\ndone({response_body: {fields: fixExtraCodeListsFinal}})\n//out.map(x => x.replace(/\\./g, '/').replace(/\\[\\*\\]/g, '/'))\n\n\n","type":"postRequest"}],"modelMigrated":false,"parameters":[{"vendorType":"path","dataType":"string","name":"objectName","description":"The objectName ID","vendorDataType":"string","source":"request","type":"path","vendorName":"objectName","required":true}],"vendorPath":"/"},{"path":"/hubs/general/serviceTest","vendorMethod":"GET","method":"GET","kind":"eb","response":{"contentType":"application/json"},"description":"Search for serviceTest","type":"api","hooks":[{"isLegacy":false,"mimeType":"application/javascript","body":"done({request_vendor_path: request_parameters.path,  'request_vendor_headers': {\n   'Accept': null,\n   'Content-Type': null\n }})","type":"preRequest"}],"modelMigrated":false,"parameters":[{"vendorType":"no-op","dataType":"string","name":"path","description":"path","vendorDataType":"string","source":"request","type":"query","vendorName":"path","required":false},{"vendorType":"query","converter":"toQueryParameters","dataType":"string","name":"where","description":"The CEQL search expression","vendorDataType":"string","source":"request","type":"query","vendorName":"converter:toQueryParameters","required":false}],"vendorPath":"/"},{"path":"/hubs/general/TEMP/meta/change-personalContact-employee","vendorMethod":"GET","method":"GET","kind":"eb","response":{"contentType":"application/json"},"description":"Retrieve the metadata to modify a personal contact for a given employee","type":"apiNoDocumentation","hooks":[{"isLegacy":false,"mimeType":"application/javascript","body":"done({\n 'request_vendor_headers': {\n   'Content-Type': null\n }\n})","type":"preRequest"}],"modelMigrated":false,"parameters":[{"vendorType":"query","converter":"toQueryParameters","dataType":"string","name":"where","description":"The CEQL search expression","vendorDataType":"string","source":"request","type":"query","vendorName":"converter:toQueryParameters","required":false}],"vendorPath":"/events/hr/v1/worker.personal-contact.change/meta"},{"path":"/hubs/general/TEMP/meta/delete-employee","vendorMethod":"GET","method":"GET","kind":"eb","response":{"contentType":"application/json"},"description":"Retrieve the metadata to terminate an employee","type":"apiNoDocumentation","hooks":[{"isLegacy":false,"mimeType":"application/javascript","body":"done({\n 'request_vendor_headers': {\n   'Accept': null,\n   'Content-Type': null\n }\n})","type":"preRequest"}],"modelMigrated":false,"parameters":[{"vendorType":"header","dataType":"string","name":"employee","description":"roleCode","vendorDataType":"string","source":"request","type":"value","vendorName":"roleCode","required":false}],"vendorPath":"/events/hr/v1/worker.terminate/meta"},{"path":"/hubs/general/TEMP/meta/payDistribution-employee","vendorMethod":"GET","method":"GET","kind":"eb","response":{"contentType":"application/json"},"description":"Retrieve the metadata to add a pay distribution change to an employee","type":"apiNoDocumentation","hooks":[{"isLegacy":false,"mimeType":"application/javascript","body":"done({\n 'request_vendor_headers': {\n   'Content-Type': null\n }\n})","type":"preRequest"}],"modelMigrated":false,"parameters":[{"vendorType":"query","converter":"toQueryParameters","dataType":"string","name":"where","description":"The CEQL search expression","vendorDataType":"string","source":"request","type":"query","vendorName":"converter:toQueryParameters","required":false}],"vendorPath":"/events/payroll/v1/worker.pay-distribution.change/meta"},{"path":"/hubs/general/TEMP/meta/personalContact-employee","vendorMethod":"GET","method":"GET","kind":"eb","response":{"contentType":"application/json"},"description":"Retrieve the metadata to create a personal contact for a worker","type":"apiNoDocumentation","hooks":[{"isLegacy":false,"mimeType":"application/javascript","body":"done({\n 'request_vendor_headers': {\n   'Content-Type': null\n }\n})","type":"preRequest"}],"modelMigrated":false,"parameters":[{"vendorType":"query","converter":"toQueryParameters","dataType":"string","name":"where","description":"The CEQL search expression","vendorDataType":"string","source":"request","type":"query","vendorName":"converter:toQueryParameters","required":false}],"vendorPath":"/events/hr/v1/worker.personal-contact.add/meta"},{"path":"/hubs/general/TEMP/meta/post-employee","vendorMethod":"GET","method":"GET","kind":"eb","response":{"contentType":"application/json"},"description":"Retrieve the metadata for creating a new employee record","type":"apiNoDocumentation","hooks":[{"isLegacy":false,"mimeType":"application/javascript","body":"done({\n 'request_vendor_headers': {\n   'Content-Type': null\n }\n})","type":"preRequest"}],"modelMigrated":false,"parameters":[{"vendorType":"query","converter":"toQueryParameters","dataType":"string","name":"where","description":"The CEQL search expression","vendorDataType":"string","source":"request","type":"query","vendorName":"converter:toQueryParameters","required":false}],"vendorPath":"/events/hr/v1/worker.hire/meta"},{"path":"/hubs/general/TEMP/meta/rehire-employee","vendorMethod":"GET","method":"GET","kind":"eb","response":{"contentType":"application/json"},"description":"Retrieve metadata to rehire an existing employee record","type":"apiNoDocumentation","hooks":[{"isLegacy":false,"mimeType":"application/javascript","body":"done({\n 'request_vendor_headers': {\n   'Content-Type': null\n }\n})","type":"preRequest"}],"modelMigrated":false,"parameters":[{"vendorType":"query","converter":"toQueryParameters","dataType":"string","name":"where","description":"The CEQL search expression","vendorDataType":"string","source":"request","type":"query","vendorName":"converter:toQueryParameters","required":false}],"vendorPath":"/events/hr/v1/worker.rehire/meta"}],"modelType":"basic","protocolType":"http","transformationsEnabled":true,"deleted":false,"hub":"general","typeOauth":false,"name":"ADP WorkForce Now","extendable":true,"parameters":[{"vendorType":"header","name":"application/json","source":"request","type":"value","vendorName":"Accept","required":false},{"vendorType":"header","name":"application/json","source":"request","type":"value","vendorName":"Content-Type","required":false}]}