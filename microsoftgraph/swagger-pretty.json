{
  "basePath" : "/elements/api-v2",
  "paths" : {
    "/calendars" : {
      "post" : {
        "summary" : "Create a calendar",
        "operationId" : "createCalendar",
        "responses" : {
          "200" : {
            "description" : "OK - Everything worked as expected",
            "schema" : {
              "$ref" : "#/definitions/calendars"
            }
          },
          "400" : {
            "description" : "Bad Request - Often due to a missing request parameter"
          },
          "401" : {
            "description" : "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500" : {
            "description" : "Server error - Something went wrong on the Cloud Elements server"
          },
          "403" : {
            "description" : "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502" : {
            "description" : "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404" : {
            "description" : "Not found - The requested resource is not found"
          },
          "415" : {
            "description" : "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405" : {
            "description" : "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406" : {
            "description" : "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409" : {
            "description" : "Conflict - If a resource being created already exists"
          }
        },
        "parameters" : [ {
          "in" : "header",
          "name" : "Authorization",
          "description" : "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
          "type" : "string",
          "required" : true
        }, {
          "schema" : {
            "$ref" : "#/definitions/calendarsPost"
          },
          "in" : "body",
          "name" : "body",
          "description" : "The calendar body",
          "required" : true
        } ],
        "tags" : [ "calendars" ]
      },
      "get" : {
        "summary" : "Search all calendars an user has access to",
        "operationId" : "getCalendars",
        "responses" : {
          "200" : {
            "description" : "OK - Everything worked as expected",
            "schema" : {
              "$ref" : "#/definitions/calendarsList"
            }
          },
          "400" : {
            "description" : "Bad Request - Often due to a missing request parameter"
          },
          "401" : {
            "description" : "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500" : {
            "description" : "Server error - Something went wrong on the Cloud Elements server"
          },
          "403" : {
            "description" : "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502" : {
            "description" : "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404" : {
            "description" : "Not found - The requested resource is not found"
          },
          "415" : {
            "description" : "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405" : {
            "description" : "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406" : {
            "description" : "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409" : {
            "description" : "Conflict - If a resource being created already exists"
          }
        },
        "parameters" : [ {
          "in" : "header",
          "name" : "Authorization",
          "description" : "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
          "type" : "string",
          "required" : true
        }, {
          "in" : "query",
          "name" : "where",
          "description" : "The CEQL search expression. For example: name like 'test'",
          "type" : "string",
          "required" : false
        }, {
          "in" : "query",
          "name" : "orderBy",
          "description" : "Specifies the order of the result set, a valid order by query would be: name desc",
          "type" : "string",
          "required" : false
        }, {
          "in" : "query",
          "name" : "pageSize",
          "format" : "int64",
          "description" : "The page size. Defaults to 200 if not provided. Maximum of 2000",
          "type" : "string",
          "required" : false
        }, {
          "description" : "The next page cursor, taken from the response header: `elements-next-page-token`",
          "in" : "query",
          "name" : "nextPage",
          "required" : false,
          "type" : "string"
        }, {
          "description" : "The fields to return on the response. Can be a single field or a comma-separated list of fields",
          "in" : "query",
          "name" : "fields",
          "required" : false,
          "type" : "string"
        } ],
        "tags" : [ "calendars" ]
      }
    },
    "/calendars/{calendarId}" : {
      "patch" : {
        "summary" : "Update a calendar",
        "operationId" : "updateCalendarByCalendarId",
        "responses" : {
          "200" : {
            "description" : "OK - Everything worked as expected",
            "schema" : {
              "$ref" : "#/definitions/calendars"
            }
          },
          "400" : {
            "description" : "Bad Request - Often due to a missing request parameter"
          },
          "401" : {
            "description" : "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500" : {
            "description" : "Server error - Something went wrong on the Cloud Elements server"
          },
          "403" : {
            "description" : "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502" : {
            "description" : "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404" : {
            "description" : "Not found - The requested resource is not found"
          },
          "415" : {
            "description" : "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405" : {
            "description" : "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406" : {
            "description" : "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409" : {
            "description" : "Conflict - If a resource being created already exists"
          }
        },
        "parameters" : [ {
          "in" : "header",
          "name" : "Authorization",
          "description" : "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
          "type" : "string",
          "required" : true
        }, {
          "in" : "path",
          "name" : "calendarId",
          "description" : "The id of the calendar",
          "type" : "string",
          "required" : true
        }, {
          "schema" : {
            "$ref" : "#/definitions/calendarsPatch"
          },
          "in" : "body",
          "name" : "body",
          "description" : "The calendar body",
          "required" : true
        } ],
        "tags" : [ "calendars" ]
      },
      "get" : {
        "summary" : "Retrieve a calendar an user has access to",
        "operationId" : "getCalendarByCalendarId",
        "responses" : {
          "200" : {
            "description" : "OK - Everything worked as expected",
            "schema" : {
              "$ref" : "#/definitions/calendar"
            }
          },
          "400" : {
            "description" : "Bad Request - Often due to a missing request parameter"
          },
          "401" : {
            "description" : "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500" : {
            "description" : "Server error - Something went wrong on the Cloud Elements server"
          },
          "403" : {
            "description" : "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502" : {
            "description" : "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404" : {
            "description" : "Not found - The requested resource is not found"
          },
          "415" : {
            "description" : "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405" : {
            "description" : "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406" : {
            "description" : "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409" : {
            "description" : "Conflict - If a resource being created already exists"
          }
        },
        "parameters" : [ {
          "in" : "header",
          "name" : "Authorization",
          "description" : "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
          "type" : "string",
          "required" : true
        }, {
          "in" : "path",
          "name" : "calendarId",
          "description" : "path",
          "type" : "string",
          "required" : true
        } ],
        "tags" : [ "calendars" ]
      },
      "delete" : {
        "summary" : "Delete a calendar by id",
        "operationId" : "deleteCalendarByCalendarId",
        "responses" : {
          "200" : {
            "description" : "OK - Everything worked as expected"
          },
          "400" : {
            "description" : "Bad Request - Often due to a missing request parameter"
          },
          "401" : {
            "description" : "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500" : {
            "description" : "Server error - Something went wrong on the Cloud Elements server"
          },
          "403" : {
            "description" : "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502" : {
            "description" : "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404" : {
            "description" : "Not found - The requested resource is not found"
          },
          "415" : {
            "description" : "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405" : {
            "description" : "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406" : {
            "description" : "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409" : {
            "description" : "Conflict - If a resource being created already exists"
          }
        },
        "parameters" : [ {
          "in" : "header",
          "name" : "Authorization",
          "description" : "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
          "type" : "string",
          "required" : true
        }, {
          "in" : "path",
          "name" : "calendarId",
          "description" : "deletes a calendar by id",
          "type" : "string",
          "required" : true
        } ],
        "tags" : [ "calendars" ]
      }
    },
    "/calendars/{calendarId}/events" : {
      "post" : {
        "summary" : "Create an event on a calendar",
        "operationId" : "createCalendarEvent",
        "responses" : {
          "200" : {
            "description" : "OK - Everything worked as expected",
            "schema" : {
              "$ref" : "#/definitions/calendarsEvents"
            }
          },
          "400" : {
            "description" : "Bad Request - Often due to a missing request parameter"
          },
          "401" : {
            "description" : "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500" : {
            "description" : "Server error - Something went wrong on the Cloud Elements server"
          },
          "403" : {
            "description" : "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502" : {
            "description" : "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404" : {
            "description" : "Not found - The requested resource is not found"
          },
          "415" : {
            "description" : "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405" : {
            "description" : "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406" : {
            "description" : "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409" : {
            "description" : "Conflict - If a resource being created already exists"
          }
        },
        "parameters" : [ {
          "in" : "header",
          "name" : "Authorization",
          "description" : "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
          "type" : "string",
          "required" : true
        }, {
          "in" : "path",
          "name" : "calendarId",
          "description" : "The id of the calendar",
          "type" : "string",
          "required" : true
        }, {
          "schema" : {
            "$ref" : "#/definitions/eventsPost"
          },
          "in" : "body",
          "name" : "body",
          "description" : "The event body",
          "required" : true
        } ],
        "tags" : [ "calendars" ]
      },
      "get" : {
        "summary" : "Search for events on a calendar",
        "operationId" : "getCalendarsEvents",
        "responses" : {
          "200" : {
            "description" : "OK - Everything worked as expected",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/calendarsEventsListGet"
              }
            }
          },
          "400" : {
            "description" : "Bad Request - Often due to a missing request parameter"
          },
          "401" : {
            "description" : "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500" : {
            "description" : "Server error - Something went wrong on the Cloud Elements server"
          },
          "403" : {
            "description" : "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502" : {
            "description" : "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404" : {
            "description" : "Not found - The requested resource is not found"
          },
          "415" : {
            "description" : "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405" : {
            "description" : "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406" : {
            "description" : "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409" : {
            "description" : "Conflict - If a resource being created already exists"
          }
        },
        "parameters" : [ {
          "in" : "header",
          "name" : "Authorization",
          "description" : "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
          "type" : "string",
          "required" : true
        }, {
          "in" : "path",
          "name" : "calendarId",
          "description" : "The id of the calendar you want to see events on",
          "type" : "string",
          "required" : true
        }, {
          "in" : "query",
          "name" : "pageSize",
          "format" : "int64",
          "description" : "The page size. Defaults to 200 if not provided. Maximum of 2000",
          "type" : "string",
          "required" : false
        }, {
          "in" : "query",
          "name" : "where",
          "description" : "The CEQL search expression.  A valid query would be: subject like 'tax'",
          "type" : "string",
          "required" : false
        }, {
          "in" : "query",
          "name" : "orderBy",
          "description" : "Specifies the order of the result set, a valid order by query would be: name desc",
          "type" : "string",
          "required" : false
        }, {
          "description" : "The next page cursor, taken from the response header: `elements-next-page-token`",
          "in" : "query",
          "name" : "nextPage",
          "required" : false,
          "type" : "string"
        }, {
          "description" : "The fields to return on the response. Can be a single field or a comma-separated list of fields",
          "in" : "query",
          "name" : "fields",
          "required" : false,
          "type" : "string"
        } ],
        "tags" : [ "calendars" ]
      }
    },
    "/calendars/{calendarId}/events/{eventId}" : {
      "patch" : {
        "summary" : "Update an event on a calendar",
        "operationId" : "updateCalendarsEventByEventId",
        "responses" : {
          "200" : {
            "description" : "OK - Everything worked as expected",
            "schema" : {
              "$ref" : "#/definitions/calendarsEvents"
            }
          },
          "400" : {
            "description" : "Bad Request - Often due to a missing request parameter"
          },
          "401" : {
            "description" : "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500" : {
            "description" : "Server error - Something went wrong on the Cloud Elements server"
          },
          "403" : {
            "description" : "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502" : {
            "description" : "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404" : {
            "description" : "Not found - The requested resource is not found"
          },
          "415" : {
            "description" : "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405" : {
            "description" : "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406" : {
            "description" : "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409" : {
            "description" : "Conflict - If a resource being created already exists"
          }
        },
        "parameters" : [ {
          "in" : "header",
          "name" : "Authorization",
          "description" : "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
          "type" : "string",
          "required" : true
        }, {
          "in" : "path",
          "name" : "calendarId",
          "description" : "The calendar id",
          "type" : "string",
          "required" : true
        }, {
          "in" : "path",
          "name" : "eventId",
          "description" : "The id of the event you are updating",
          "type" : "string",
          "required" : true
        }, {
          "schema" : {
            "$ref" : "#/definitions/patchBody"
          },
          "in" : "body",
          "name" : "body",
          "description" : "the body of the event to patch",
          "required" : true
        } ],
        "tags" : [ "calendars" ]
      },
      "get" : {
        "summary" : "Retrieve an event from a calendar",
        "operationId" : "getCalendarsEventByEventId",
        "responses" : {
          "200" : {
            "description" : "OK - Everything worked as expected",
            "schema" : {
              "$ref" : "#/definitions/calendarsEvents"
            }
          },
          "400" : {
            "description" : "Bad Request - Often due to a missing request parameter"
          },
          "401" : {
            "description" : "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500" : {
            "description" : "Server error - Something went wrong on the Cloud Elements server"
          },
          "403" : {
            "description" : "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502" : {
            "description" : "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404" : {
            "description" : "Not found - The requested resource is not found"
          },
          "415" : {
            "description" : "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405" : {
            "description" : "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406" : {
            "description" : "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409" : {
            "description" : "Conflict - If a resource being created already exists"
          }
        },
        "parameters" : [ {
          "in" : "header",
          "name" : "Authorization",
          "description" : "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
          "type" : "string",
          "required" : true
        }, {
          "in" : "path",
          "name" : "calendarId",
          "description" : "The id of the calendar",
          "type" : "string",
          "required" : true
        }, {
          "in" : "path",
          "name" : "eventId",
          "description" : "The id of the event",
          "type" : "string",
          "required" : true
        } ],
        "tags" : [ "calendars" ]
      },
      "delete" : {
        "summary" : "Delete an event on a calendar",
        "operationId" : "deleteCalendarsEventByEventId",
        "responses" : {
          "200" : {
            "description" : "OK - Everything worked as expected"
          },
          "400" : {
            "description" : "Bad Request - Often due to a missing request parameter"
          },
          "401" : {
            "description" : "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500" : {
            "description" : "Server error - Something went wrong on the Cloud Elements server"
          },
          "403" : {
            "description" : "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502" : {
            "description" : "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404" : {
            "description" : "Not found - The requested resource is not found"
          },
          "415" : {
            "description" : "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405" : {
            "description" : "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406" : {
            "description" : "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409" : {
            "description" : "Conflict - If a resource being created already exists"
          }
        },
        "parameters" : [ {
          "in" : "header",
          "name" : "Authorization",
          "description" : "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
          "type" : "string",
          "required" : true
        }, {
          "in" : "path",
          "name" : "calendarId",
          "description" : "the id of the calendar ",
          "type" : "string",
          "required" : true
        }, {
          "in" : "path",
          "name" : "eventId",
          "description" : "the id of the event you want to delete",
          "type" : "string",
          "required" : true
        } ],
        "tags" : [ "calendars" ]
      }
    },
    "/contacts" : {
      "post" : {
        "summary" : "Create a contact",
        "operationId" : "createContact",
        "responses" : {
          "200" : {
            "description" : "OK - Everything worked as expected",
            "schema" : {
              "$ref" : "#/definitions/contactsPostRes"
            }
          },
          "400" : {
            "description" : "Bad Request - Often due to a missing request parameter"
          },
          "401" : {
            "description" : "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500" : {
            "description" : "Server error - Something went wrong on the Cloud Elements server"
          },
          "403" : {
            "description" : "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502" : {
            "description" : "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404" : {
            "description" : "Not found - The requested resource is not found"
          },
          "415" : {
            "description" : "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405" : {
            "description" : "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406" : {
            "description" : "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409" : {
            "description" : "Conflict - If a resource being created already exists"
          }
        },
        "parameters" : [ {
          "in" : "header",
          "name" : "Authorization",
          "description" : "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
          "type" : "string",
          "required" : true
        }, {
          "schema" : {
            "$ref" : "#/definitions/contactsPostReq"
          },
          "in" : "body",
          "name" : "body",
          "description" : "The contact object",
          "required" : true
        } ],
        "tags" : [ "contacts" ]
      },
      "get" : {
        "summary" : "Search for contacts",
        "operationId" : "getContacts",
        "responses" : {
          "200" : {
            "description" : "OK - Everything worked as expected",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/contacts"
              }
            }
          },
          "400" : {
            "description" : "Bad Request - Often due to a missing request parameter"
          },
          "401" : {
            "description" : "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500" : {
            "description" : "Server error - Something went wrong on the Cloud Elements server"
          },
          "403" : {
            "description" : "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502" : {
            "description" : "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404" : {
            "description" : "Not found - The requested resource is not found"
          },
          "415" : {
            "description" : "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405" : {
            "description" : "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406" : {
            "description" : "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409" : {
            "description" : "Conflict - If a resource being created already exists"
          }
        },
        "parameters" : [ {
          "in" : "header",
          "name" : "Authorization",
          "description" : "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
          "type" : "string",
          "required" : true
        }, {
          "in" : "query",
          "name" : "pageSize",
          "format" : "int64",
          "description" : "The page size. Defaults to 100 if not provided",
          "type" : "string",
          "required" : false
        }, {
          "in" : "query",
          "name" : "orderBy",
          "description" : "Specifies the order of the result set, a valid order by query would be: GivenName desc",
          "type" : "string",
          "required" : false
        }, {
          "in" : "query",
          "name" : "where",
          "description" : "The CEQL search expression. For example: DisplayName = 'Peter'",
          "type" : "string",
          "required" : false
        }, {
          "description" : "The next page cursor, taken from the response header: `elements-next-page-token`",
          "in" : "query",
          "name" : "nextPage",
          "required" : false,
          "type" : "string"
        }, {
          "description" : "The fields to return on the response. Can be a single field or a comma-separated list of fields",
          "in" : "query",
          "name" : "fields",
          "required" : false,
          "type" : "string"
        } ],
        "tags" : [ "contacts" ]
      }
    },
    "/contacts/{id}" : {
      "patch" : {
        "summary" : "Update a contact",
        "operationId" : "updateContactById",
        "responses" : {
          "200" : {
            "description" : "OK - Everything worked as expected",
            "schema" : {
              "$ref" : "#/definitions/contactsPatchRes"
            }
          },
          "400" : {
            "description" : "Bad Request - Often due to a missing request parameter"
          },
          "401" : {
            "description" : "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500" : {
            "description" : "Server error - Something went wrong on the Cloud Elements server"
          },
          "403" : {
            "description" : "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502" : {
            "description" : "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404" : {
            "description" : "Not found - The requested resource is not found"
          },
          "415" : {
            "description" : "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405" : {
            "description" : "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406" : {
            "description" : "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409" : {
            "description" : "Conflict - If a resource being created already exists"
          }
        },
        "parameters" : [ {
          "in" : "header",
          "name" : "Authorization",
          "description" : "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
          "type" : "string",
          "required" : true
        }, {
          "in" : "path",
          "name" : "id",
          "description" : "The contact ID",
          "type" : "string",
          "required" : true
        }, {
          "schema" : {
            "$ref" : "#/definitions/contactsPatchReq"
          },
          "in" : "body",
          "name" : "body",
          "description" : "The contact object",
          "required" : true
        } ],
        "tags" : [ "contacts" ]
      },
      "get" : {
        "summary" : "Retrieve a contact",
        "operationId" : "getContactById",
        "responses" : {
          "200" : {
            "description" : "OK - Everything worked as expected",
            "schema" : {
              "$ref" : "#/definitions/contacts"
            }
          },
          "400" : {
            "description" : "Bad Request - Often due to a missing request parameter"
          },
          "401" : {
            "description" : "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500" : {
            "description" : "Server error - Something went wrong on the Cloud Elements server"
          },
          "403" : {
            "description" : "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502" : {
            "description" : "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404" : {
            "description" : "Not found - The requested resource is not found"
          },
          "415" : {
            "description" : "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405" : {
            "description" : "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406" : {
            "description" : "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409" : {
            "description" : "Conflict - If a resource being created already exists"
          }
        },
        "parameters" : [ {
          "in" : "header",
          "name" : "Authorization",
          "description" : "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
          "type" : "string",
          "required" : true
        }, {
          "in" : "path",
          "name" : "id",
          "description" : "The contact ID",
          "type" : "string",
          "required" : true
        } ],
        "tags" : [ "contacts" ]
      },
      "delete" : {
        "summary" : "Delete a contact",
        "operationId" : "deleteContactById",
        "responses" : {
          "200" : {
            "description" : "OK - Everything worked as expected"
          },
          "400" : {
            "description" : "Bad Request - Often due to a missing request parameter"
          },
          "401" : {
            "description" : "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500" : {
            "description" : "Server error - Something went wrong on the Cloud Elements server"
          },
          "403" : {
            "description" : "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502" : {
            "description" : "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404" : {
            "description" : "Not found - The requested resource is not found"
          },
          "415" : {
            "description" : "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405" : {
            "description" : "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406" : {
            "description" : "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409" : {
            "description" : "Conflict - If a resource being created already exists"
          }
        },
        "parameters" : [ {
          "in" : "header",
          "name" : "Authorization",
          "description" : "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
          "type" : "string",
          "required" : true
        }, {
          "in" : "path",
          "name" : "id",
          "description" : "The contact ID",
          "type" : "string",
          "required" : true
        } ],
        "tags" : [ "contacts" ]
      }
    },
    "/messages" : {
      "post" : {
        "summary" : "Create a message",
        "operationId" : "createMessage",
        "responses" : {
          "200" : {
            "description" : "OK - Everything worked as expected",
            "schema" : {
              "$ref" : "#/definitions/messagesResponse"
            }
          },
          "400" : {
            "description" : "Bad Request - Often due to a missing request parameter"
          },
          "401" : {
            "description" : "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500" : {
            "description" : "Server error - Something went wrong on the Cloud Elements server"
          },
          "403" : {
            "description" : "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502" : {
            "description" : "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404" : {
            "description" : "Not found - The requested resource is not found"
          },
          "415" : {
            "description" : "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405" : {
            "description" : "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406" : {
            "description" : "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409" : {
            "description" : "Conflict - If a resource being created already exists"
          }
        },
        "parameters" : [ {
          "in" : "header",
          "name" : "Authorization",
          "description" : "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
          "type" : "string",
          "required" : true
        }, {
          "schema" : {
            "$ref" : "#/definitions/CreateMessage"
          },
          "in" : "body",
          "name" : "body",
          "description" : "The message object",
          "required" : true
        } ],
        "tags" : [ "messages" ]
      },
      "get" : {
        "summary" : "Search for messages",
        "operationId" : "getMessages",
        "responses" : {
          "200" : {
            "description" : "OK - Everything worked as expected",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/messagesListObject"
              }
            }
          },
          "400" : {
            "description" : "Bad Request - Often due to a missing request parameter"
          },
          "401" : {
            "description" : "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500" : {
            "description" : "Server error - Something went wrong on the Cloud Elements server"
          },
          "403" : {
            "description" : "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502" : {
            "description" : "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404" : {
            "description" : "Not found - The requested resource is not found"
          },
          "415" : {
            "description" : "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405" : {
            "description" : "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406" : {
            "description" : "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409" : {
            "description" : "Conflict - If a resource being created already exists"
          }
        },
        "parameters" : [ {
          "in" : "header",
          "name" : "Authorization",
          "description" : "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
          "type" : "string",
          "required" : true
        }, {
          "in" : "query",
          "name" : "pageSize",
          "format" : "int64",
          "description" : "The page size. Defaults to 100",
          "type" : "string",
          "required" : false
        }, {
          "in" : "query",
          "name" : "orderBy",
          "description" : "The orderBy parameter. For example, lastModifiedDateTime desc",
          "type" : "string",
          "required" : false
        }, {
          "in" : "query",
          "name" : "where",
          "description" : "The CEQL search expression. The operators available are \"LIKE\", \"=\", \"!=\", \">\", \">=\", \"<\", \"<=\", “AND” and \"OR\". For example, from=’acb@g.com’ or subject = ‘Hi’",
          "type" : "string",
          "required" : false
        }, {
          "description" : "The next page cursor, taken from the response header: `elements-next-page-token`",
          "in" : "query",
          "name" : "nextPage",
          "required" : false,
          "type" : "string"
        }, {
          "description" : "The fields to return on the response. Can be a single field or a comma-separated list of fields",
          "in" : "query",
          "name" : "fields",
          "required" : false,
          "type" : "string"
        } ],
        "tags" : [ "messages" ]
      }
    },
    "/messages/{id}" : {
      "patch" : {
        "summary" : "Update a message",
        "operationId" : "updateMessageById",
        "responses" : {
          "200" : {
            "description" : "OK - Everything worked as expected",
            "schema" : {
              "$ref" : "#/definitions/messages"
            }
          },
          "400" : {
            "description" : "Bad Request - Often due to a missing request parameter"
          },
          "401" : {
            "description" : "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500" : {
            "description" : "Server error - Something went wrong on the Cloud Elements server"
          },
          "403" : {
            "description" : "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502" : {
            "description" : "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404" : {
            "description" : "Not found - The requested resource is not found"
          },
          "415" : {
            "description" : "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405" : {
            "description" : "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406" : {
            "description" : "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409" : {
            "description" : "Conflict - If a resource being created already exists"
          }
        },
        "parameters" : [ {
          "in" : "header",
          "name" : "Authorization",
          "description" : "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
          "type" : "string",
          "required" : true
        }, {
          "in" : "path",
          "name" : "id",
          "description" : "The message ID",
          "type" : "string",
          "required" : true
        }, {
          "schema" : {
            "$ref" : "#/definitions/UpdateMessage"
          },
          "in" : "body",
          "name" : "body",
          "description" : "The message object",
          "required" : true
        } ],
        "tags" : [ "messages" ]
      },
      "get" : {
        "summary" : "Retrieve a message",
        "operationId" : "getMessageById",
        "responses" : {
          "200" : {
            "description" : "OK - Everything worked as expected",
            "schema" : {
              "$ref" : "#/definitions/messages"
            }
          },
          "400" : {
            "description" : "Bad Request - Often due to a missing request parameter"
          },
          "401" : {
            "description" : "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500" : {
            "description" : "Server error - Something went wrong on the Cloud Elements server"
          },
          "403" : {
            "description" : "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502" : {
            "description" : "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404" : {
            "description" : "Not found - The requested resource is not found"
          },
          "415" : {
            "description" : "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405" : {
            "description" : "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406" : {
            "description" : "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409" : {
            "description" : "Conflict - If a resource being created already exists"
          }
        },
        "parameters" : [ {
          "in" : "header",
          "name" : "Authorization",
          "description" : "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
          "type" : "string",
          "required" : true
        }, {
          "in" : "path",
          "name" : "id",
          "description" : "The message ID",
          "type" : "string",
          "required" : true
        } ],
        "tags" : [ "messages" ]
      },
      "delete" : {
        "summary" : "Delete a message",
        "operationId" : "deleteMessageById",
        "responses" : {
          "200" : {
            "description" : "OK - Everything worked as expected"
          },
          "400" : {
            "description" : "Bad Request - Often due to a missing request parameter"
          },
          "401" : {
            "description" : "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500" : {
            "description" : "Server error - Something went wrong on the Cloud Elements server"
          },
          "403" : {
            "description" : "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502" : {
            "description" : "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404" : {
            "description" : "Not found - The requested resource is not found"
          },
          "415" : {
            "description" : "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405" : {
            "description" : "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406" : {
            "description" : "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409" : {
            "description" : "Conflict - If a resource being created already exists"
          }
        },
        "parameters" : [ {
          "in" : "header",
          "name" : "Authorization",
          "description" : "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
          "type" : "string",
          "required" : true
        }, {
          "in" : "path",
          "name" : "id",
          "description" : "The message ID",
          "type" : "string",
          "required" : true
        } ],
        "tags" : [ "messages" ]
      }
    },
    "/messages/{id}/attachments" : {
      "post" : {
        "summary" : "Create an attachment for a message",
        "operationId" : "createMessageAttachment",
        "responses" : {
          "200" : {
            "description" : "OK - Everything worked as expected",
            "schema" : {
              "$ref" : "#/definitions/messagesAttachments"
            }
          },
          "400" : {
            "description" : "Bad Request - Often due to a missing request parameter"
          },
          "401" : {
            "description" : "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500" : {
            "description" : "Server error - Something went wrong on the Cloud Elements server"
          },
          "403" : {
            "description" : "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502" : {
            "description" : "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404" : {
            "description" : "Not found - The requested resource is not found"
          },
          "415" : {
            "description" : "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405" : {
            "description" : "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406" : {
            "description" : "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409" : {
            "description" : "Conflict - If a resource being created already exists"
          }
        },
        "parameters" : [ {
          "in" : "header",
          "name" : "Authorization",
          "description" : "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
          "type" : "string",
          "required" : true
        }, {
          "in" : "path",
          "name" : "id",
          "description" : "The message ID",
          "type" : "string",
          "required" : true
        }, {
          "schema" : {
            "$ref" : "#/definitions/CreateMessagesAttachments"
          },
          "in" : "body",
          "name" : "body",
          "description" : "The attachment body",
          "required" : true
        } ],
        "tags" : [ "messages" ]
      },
      "get" : {
        "summary" : "List attachments for a message",
        "operationId" : "getMessagesAttachments",
        "responses" : {
          "200" : {
            "description" : "OK - Everything worked as expected",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/messagesAttachmentsListObject"
              }
            }
          },
          "400" : {
            "description" : "Bad Request - Often due to a missing request parameter"
          },
          "401" : {
            "description" : "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500" : {
            "description" : "Server error - Something went wrong on the Cloud Elements server"
          },
          "403" : {
            "description" : "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502" : {
            "description" : "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404" : {
            "description" : "Not found - The requested resource is not found"
          },
          "415" : {
            "description" : "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405" : {
            "description" : "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406" : {
            "description" : "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409" : {
            "description" : "Conflict - If a resource being created already exists"
          }
        },
        "parameters" : [ {
          "in" : "header",
          "name" : "Authorization",
          "description" : "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
          "type" : "string",
          "required" : true
        }, {
          "in" : "path",
          "name" : "id",
          "description" : "The message ID",
          "type" : "string",
          "required" : true
        }, {
          "in" : "query",
          "name" : "pageSize",
          "format" : "int64",
          "description" : "The number of resources to return in a given page. Defaults to 100",
          "type" : "string",
          "required" : false
        }, {
          "description" : "The next page cursor, taken from the response header: `elements-next-page-token`",
          "in" : "query",
          "name" : "nextPage",
          "required" : false,
          "type" : "string"
        }, {
          "description" : "The fields to return on the response. Can be a single field or a comma-separated list of fields",
          "in" : "query",
          "name" : "fields",
          "required" : false,
          "type" : "string"
        } ],
        "tags" : [ "messages" ]
      }
    },
    "/messages/{id}/attachments/{attachmentId}" : {
      "delete" : {
        "summary" : "Delete an attachment for a message",
        "operationId" : "deleteMessagesAttachmentByAttachmentId",
        "responses" : {
          "200" : {
            "description" : "OK - Everything worked as expected"
          },
          "400" : {
            "description" : "Bad Request - Often due to a missing request parameter"
          },
          "401" : {
            "description" : "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500" : {
            "description" : "Server error - Something went wrong on the Cloud Elements server"
          },
          "403" : {
            "description" : "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502" : {
            "description" : "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404" : {
            "description" : "Not found - The requested resource is not found"
          },
          "415" : {
            "description" : "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405" : {
            "description" : "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406" : {
            "description" : "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409" : {
            "description" : "Conflict - If a resource being created already exists"
          }
        },
        "parameters" : [ {
          "in" : "header",
          "name" : "Authorization",
          "description" : "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
          "type" : "string",
          "required" : true
        }, {
          "in" : "path",
          "name" : "id",
          "description" : "The message ID",
          "type" : "string",
          "required" : true
        }, {
          "in" : "path",
          "name" : "attachmentId",
          "description" : "The attachment ID",
          "type" : "string",
          "required" : true
        } ],
        "tags" : [ "messages" ]
      }
    },
    "/messages/{id}/forward" : {
      "post" : {
        "summary" : "Forward a message",
        "operationId" : "createMessageForward",
        "responses" : {
          "200" : {
            "description" : "OK - Everything worked as expected",
            "schema" : {
              "$ref" : "#/definitions/messagesForwardResponse"
            }
          },
          "400" : {
            "description" : "Bad Request - Often due to a missing request parameter"
          },
          "401" : {
            "description" : "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500" : {
            "description" : "Server error - Something went wrong on the Cloud Elements server"
          },
          "403" : {
            "description" : "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502" : {
            "description" : "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404" : {
            "description" : "Not found - The requested resource is not found"
          },
          "415" : {
            "description" : "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405" : {
            "description" : "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406" : {
            "description" : "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409" : {
            "description" : "Conflict - If a resource being created already exists"
          }
        },
        "parameters" : [ {
          "in" : "header",
          "name" : "Authorization",
          "description" : "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
          "type" : "string",
          "required" : true
        }, {
          "in" : "path",
          "name" : "id",
          "description" : "The message ID",
          "type" : "string",
          "required" : true
        }, {
          "schema" : {
            "$ref" : "#/definitions/messagesForward"
          },
          "in" : "body",
          "name" : "body",
          "description" : "The message body",
          "required" : true
        } ],
        "tags" : [ "messages" ]
      }
    },
    "/messages/{id}/reply" : {
      "post" : {
        "summary" : "Reply to sender of the message",
        "operationId" : "createMessageReply",
        "responses" : {
          "200" : {
            "description" : "OK - Everything worked as expected",
            "schema" : {
              "$ref" : "#/definitions/messagesReplyResponse"
            }
          },
          "400" : {
            "description" : "Bad Request - Often due to a missing request parameter"
          },
          "401" : {
            "description" : "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500" : {
            "description" : "Server error - Something went wrong on the Cloud Elements server"
          },
          "403" : {
            "description" : "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502" : {
            "description" : "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404" : {
            "description" : "Not found - The requested resource is not found"
          },
          "415" : {
            "description" : "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405" : {
            "description" : "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406" : {
            "description" : "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409" : {
            "description" : "Conflict - If a resource being created already exists"
          }
        },
        "parameters" : [ {
          "in" : "header",
          "name" : "Authorization",
          "description" : "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
          "type" : "string",
          "required" : true
        }, {
          "in" : "path",
          "name" : "id",
          "description" : "The message ID",
          "type" : "string",
          "required" : true
        }, {
          "schema" : {
            "$ref" : "#/definitions/messagesReply"
          },
          "in" : "body",
          "name" : "body",
          "description" : "The reply body",
          "required" : true
        } ],
        "tags" : [ "messages" ]
      }
    },
    "/messages/{id}/replyall" : {
      "post" : {
        "summary" : "Reply to all the message receipients",
        "operationId" : "createMessageReplyall",
        "responses" : {
          "200" : {
            "description" : "OK - Everything worked as expected",
            "schema" : {
              "$ref" : "#/definitions/messagesReplyallResponse"
            }
          },
          "400" : {
            "description" : "Bad Request - Often due to a missing request parameter"
          },
          "401" : {
            "description" : "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500" : {
            "description" : "Server error - Something went wrong on the Cloud Elements server"
          },
          "403" : {
            "description" : "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502" : {
            "description" : "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404" : {
            "description" : "Not found - The requested resource is not found"
          },
          "415" : {
            "description" : "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405" : {
            "description" : "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406" : {
            "description" : "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409" : {
            "description" : "Conflict - If a resource being created already exists"
          }
        },
        "parameters" : [ {
          "in" : "header",
          "name" : "Authorization",
          "description" : "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
          "type" : "string",
          "required" : true
        }, {
          "in" : "path",
          "name" : "id",
          "description" : "The message ID",
          "type" : "string",
          "required" : true
        }, {
          "schema" : {
            "$ref" : "#/definitions/messagesReplyall"
          },
          "in" : "body",
          "name" : "body",
          "description" : "The reply body",
          "required" : true
        } ],
        "tags" : [ "messages" ]
      }
    },
    "/objects" : {
      "get" : {
        "operationId" : "getObjects",
        "parameters" : [ {
          "description" : "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
          "in" : "header",
          "name" : "Authorization",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK - Everything worked as expected",
            "schema" : {
              "items" : {
                "type" : "string"
              },
              "type" : "array"
            }
          },
          "400" : {
            "description" : "Bad Request - Often due to a missing request parameter"
          },
          "401" : {
            "description" : "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "403" : {
            "description" : "Forbidden - Access to the resource by the provider is forbidden"
          },
          "404" : {
            "description" : "Not found - The requested resource is not found"
          },
          "405" : {
            "description" : "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406" : {
            "description" : "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409" : {
            "description" : "Conflict - If a resource being created already exists"
          },
          "415" : {
            "description" : "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "500" : {
            "description" : "Server error - Something went wrong on the Cloud Elements server"
          },
          "502" : {
            "description" : "Provider server error - Something went wrong on the Provider or Endpoint's server"
          }
        },
        "summary" : "Get a list of all the available objects.",
        "tags" : [ "objects" ]
      }
    },
    "/objects/{objectName}/docs" : {
      "get" : {
        "operationId" : "getObjectsObjectNameDocs",
        "parameters" : [ {
          "description" : "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
          "in" : "header",
          "name" : "Authorization",
          "required" : true,
          "type" : "string"
        }, {
          "description" : "The name of the object",
          "in" : "path",
          "name" : "objectName",
          "required" : true,
          "type" : "string"
        }, {
          "description" : "Include discovery metadata in definitions",
          "in" : "query",
          "name" : "discovery",
          "required" : false,
          "type" : "boolean"
        }, {
          "description" : "Optionally resolve swagger references for an inline object definition",
          "in" : "query",
          "name" : "resolveReferences",
          "required" : false,
          "type" : "boolean"
        }, {
          "description" : "Include only OpenAPI / Swagger properties in definitions",
          "in" : "query",
          "name" : "basic",
          "required" : false,
          "type" : "boolean"
        }, {
          "description" : "The element swagger version to get the corresponding element swagger, Passing in \"-1\" gives latest element swagger",
          "in" : "query",
          "name" : "version",
          "required" : false,
          "default" : "-1",
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK - Everything worked as expected",
            "schema" : {
              "$ref" : "#/definitions/swaggerDocs"
            }
          },
          "400" : {
            "description" : "Bad Request - Often due to a missing request parameter"
          },
          "401" : {
            "description" : "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "403" : {
            "description" : "Forbidden - Access to the resource by the provider is forbidden"
          },
          "404" : {
            "description" : "Not found - The requested resource is not found"
          },
          "405" : {
            "description" : "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406" : {
            "description" : "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409" : {
            "description" : "Conflict - If a resource being created already exists"
          },
          "415" : {
            "description" : "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "500" : {
            "description" : "Server error - Something went wrong on the Cloud Elements server"
          },
          "502" : {
            "description" : "Provider server error - Something went wrong on the Provider or Endpoint's server"
          }
        },
        "summary" : "Get swagger docs for an object.",
        "tags" : [ "objects" ]
      }
    },
    "/objects/{objectName}/metadata" : {
      "get" : {
        "operationId" : "getObjectsObjectNameMetadata",
        "parameters" : [ {
          "description" : "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
          "in" : "header",
          "name" : "Authorization",
          "required" : true,
          "type" : "string"
        }, {
          "description" : "The name of the object",
          "in" : "path",
          "name" : "objectName",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK - Everything worked as expected",
            "schema" : {
              "$ref" : "#/definitions/objectsMetadata"
            }
          },
          "400" : {
            "description" : "Bad Request - Often due to a missing request parameter"
          },
          "401" : {
            "description" : "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "403" : {
            "description" : "Forbidden - Access to the resource by the provider is forbidden"
          },
          "404" : {
            "description" : "Not found - The requested resource is not found"
          },
          "405" : {
            "description" : "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406" : {
            "description" : "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409" : {
            "description" : "Conflict - If a resource being created already exists"
          },
          "415" : {
            "description" : "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "500" : {
            "description" : "Server error - Something went wrong on the Cloud Elements server"
          },
          "502" : {
            "description" : "Provider server error - Something went wrong on the Provider or Endpoint's server"
          }
        },
        "summary" : "Get a list of all the field for an object.",
        "tags" : [ "objects" ]
      }
    },
    "/ping" : {
      "get" : {
        "operationId" : "getPing",
        "parameters" : [ {
          "description" : "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
          "in" : "header",
          "name" : "Authorization",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK - Everything worked as expected",
            "schema" : {
              "$ref" : "#/definitions/Pong"
            }
          },
          "400" : {
            "description" : "Bad Request - Often due to a missing request parameter"
          },
          "401" : {
            "description" : "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "403" : {
            "description" : "Forbidden - Access to the resource by the provider is forbidden"
          },
          "404" : {
            "description" : "Not found - The requested resource is not found"
          },
          "405" : {
            "description" : "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406" : {
            "description" : "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409" : {
            "description" : "Conflict - If a resource being created already exists"
          },
          "415" : {
            "description" : "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "500" : {
            "description" : "Server error - Something went wrong on the Cloud Elements server"
          },
          "502" : {
            "description" : "Provider server error - Something went wrong on the Provider or Endpoint's server"
          }
        },
        "summary" : "Ping the Element to confirm that the Hub Element has a heartbeat.  If the Element does not have a heartbeat, an error message will be returned.",
        "tags" : [ "ping" ]
      }
    },
    "/teams" : {
      "get" : {
        "summary" : "Search all calendars an user has access to",
        "operationId" : "getTeams",
        "responses" : {
          "200" : {
            "description" : "OK - Everything worked as expected"
          },
          "400" : {
            "description" : "Bad Request - Often due to a missing request parameter"
          },
          "401" : {
            "description" : "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500" : {
            "description" : "Server error - Something went wrong on the Cloud Elements server"
          },
          "403" : {
            "description" : "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502" : {
            "description" : "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404" : {
            "description" : "Not found - The requested resource is not found"
          },
          "415" : {
            "description" : "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405" : {
            "description" : "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406" : {
            "description" : "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409" : {
            "description" : "Conflict - If a resource being created already exists"
          }
        },
        "parameters" : [ {
          "in" : "header",
          "name" : "Authorization",
          "description" : "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
          "type" : "string",
          "required" : true
        } ],
        "tags" : [ "teams" ]
      }
    },
    "/teams/{id}/channels" : {
      "get" : {
        "summary" : "Search all calendars an user has access to",
        "operationId" : "getTeamsChannels",
        "responses" : {
          "200" : {
            "description" : "OK - Everything worked as expected"
          },
          "400" : {
            "description" : "Bad Request - Often due to a missing request parameter"
          },
          "401" : {
            "description" : "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500" : {
            "description" : "Server error - Something went wrong on the Cloud Elements server"
          },
          "403" : {
            "description" : "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502" : {
            "description" : "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404" : {
            "description" : "Not found - The requested resource is not found"
          },
          "415" : {
            "description" : "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405" : {
            "description" : "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406" : {
            "description" : "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409" : {
            "description" : "Conflict - If a resource being created already exists"
          }
        },
        "parameters" : [ {
          "in" : "header",
          "name" : "Authorization",
          "description" : "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
          "type" : "string",
          "required" : true
        }, {
          "in" : "path",
          "name" : "id",
          "description" : "The Object ID",
          "type" : "string",
          "required" : true
        }, {
          "in" : "query",
          "name" : "pageSize",
          "format" : "int64",
          "description" : "The number of resources to return in a given page",
          "type" : "string",
          "required" : false
        }, {
          "in" : "query",
          "name" : "where",
          "description" : "The CEQL search expression",
          "type" : "string",
          "required" : false
        }, {
          "description" : "The next page cursor, taken from the response header: `elements-next-page-token`",
          "in" : "query",
          "name" : "nextPage",
          "required" : false,
          "type" : "string"
        }, {
          "description" : "The fields to return on the response. Can be a single field or a comma-separated list of fields",
          "in" : "query",
          "name" : "fields",
          "required" : false,
          "type" : "string"
        } ],
        "tags" : [ "teams" ]
      }
    },
    "/teams/{id}/channels/{channelId}/messages" : {
      "get" : {
        "summary" : "Search all calendars an user has access to",
        "operationId" : "getTeamsChannelsMessages",
        "responses" : {
          "200" : {
            "description" : "OK - Everything worked as expected"
          },
          "400" : {
            "description" : "Bad Request - Often due to a missing request parameter"
          },
          "401" : {
            "description" : "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500" : {
            "description" : "Server error - Something went wrong on the Cloud Elements server"
          },
          "403" : {
            "description" : "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502" : {
            "description" : "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404" : {
            "description" : "Not found - The requested resource is not found"
          },
          "415" : {
            "description" : "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405" : {
            "description" : "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406" : {
            "description" : "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409" : {
            "description" : "Conflict - If a resource being created already exists"
          }
        },
        "parameters" : [ {
          "in" : "header",
          "name" : "Authorization",
          "description" : "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
          "type" : "string",
          "required" : true
        }, {
          "in" : "path",
          "name" : "id",
          "description" : "The Object ID",
          "type" : "string",
          "required" : true
        }, {
          "in" : "path",
          "name" : "channelId",
          "description" : "The Object ID",
          "type" : "string",
          "required" : true
        }, {
          "in" : "query",
          "name" : "where",
          "description" : "The CEQL search expression",
          "type" : "string",
          "required" : false
        }, {
          "in" : "query",
          "name" : "pageSize",
          "format" : "int64",
          "description" : "The number of resources to return in a given page",
          "type" : "string",
          "required" : false
        }, {
          "description" : "The next page cursor, taken from the response header: `elements-next-page-token`",
          "in" : "query",
          "name" : "nextPage",
          "required" : false,
          "type" : "string"
        }, {
          "description" : "The fields to return on the response. Can be a single field or a comma-separated list of fields",
          "in" : "query",
          "name" : "fields",
          "required" : false,
          "type" : "string"
        } ],
        "tags" : [ "teams" ]
      }
    },
    "/{objectName}" : {
      "get" : {
        "operationId" : "getByObjectName",
        "parameters" : [ {
          "description" : "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
          "in" : "header",
          "name" : "Authorization",
          "required" : true,
          "type" : "string"
        }, {
          "description" : "The name of the object",
          "in" : "path",
          "name" : "objectName",
          "required" : true,
          "type" : "string"
        }, {
          "description" : "The CEQL search expression.",
          "in" : "query",
          "name" : "where",
          "required" : false,
          "type" : "string"
        }, {
          "description" : "The page size. Defaults to 200 if not provided. Maximum of 5000.",
          "format" : "int64",
          "in" : "query",
          "name" : "pageSize",
          "required" : false,
          "type" : "integer"
        }, {
          "description" : "The next page cursor, taken from the response header: `elements-next-page-token`",
          "in" : "query",
          "name" : "nextPage",
          "required" : false,
          "type" : "string"
        }, {
          "description" : "The fields to return on the response. Can be a single field or a comma-separated list of fields",
          "in" : "query",
          "name" : "fields",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK - Everything worked as expected",
            "schema" : {
              "items" : {
                "$ref" : "#/definitions/Object"
              },
              "type" : "array"
            }
          },
          "400" : {
            "description" : "Bad Request - Often due to a missing request parameter"
          },
          "401" : {
            "description" : "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "403" : {
            "description" : "Forbidden - Access to the resource by the provider is forbidden"
          },
          "404" : {
            "description" : "Not found - The requested resource is not found"
          },
          "405" : {
            "description" : "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406" : {
            "description" : "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409" : {
            "description" : "Conflict - If a resource being created already exists"
          },
          "415" : {
            "description" : "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "500" : {
            "description" : "Server error - Something went wrong on the Cloud Elements server"
          },
          "502" : {
            "description" : "Provider server error - Something went wrong on the Provider or Endpoint's server"
          }
        },
        "summary" : "Search for {objectName}",
        "tags" : [ "objectName" ]
      },
      "post" : {
        "operationId" : "createByObjectName",
        "parameters" : [ {
          "description" : "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
          "in" : "header",
          "name" : "Authorization",
          "required" : true,
          "type" : "string"
        }, {
          "description" : "The name of the object",
          "in" : "path",
          "name" : "objectName",
          "required" : true,
          "type" : "string"
        }, {
          "description" : "The {objectName}",
          "in" : "body",
          "name" : "Body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/Object"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK - Everything worked as expected"
          },
          "400" : {
            "description" : "Bad Request - Often due to a missing request parameter"
          },
          "401" : {
            "description" : "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "403" : {
            "description" : "Forbidden - Access to the resource by the provider is forbidden"
          },
          "404" : {
            "description" : "Not found - The requested resource is not found"
          },
          "405" : {
            "description" : "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406" : {
            "description" : "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409" : {
            "description" : "Conflict - If a resource being created already exists"
          },
          "415" : {
            "description" : "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "500" : {
            "description" : "Server error - Something went wrong on the Cloud Elements server"
          },
          "502" : {
            "description" : "Provider server error - Something went wrong on the Provider or Endpoint's server"
          }
        },
        "summary" : "Create an {objectName}",
        "tags" : [ "objectName" ]
      }
    },
    "/{objectName}/{objectId}" : {
      "delete" : {
        "operationId" : "deleteObjectNameByObjectId",
        "parameters" : [ {
          "description" : "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
          "in" : "header",
          "name" : "Authorization",
          "required" : true,
          "type" : "string"
        }, {
          "description" : "The name of the object",
          "in" : "path",
          "name" : "objectName",
          "required" : true,
          "type" : "string"
        }, {
          "description" : "The {objectName} ID",
          "in" : "path",
          "name" : "objectId",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK - Everything worked as expected"
          },
          "400" : {
            "description" : "Bad Request - Often due to a missing request parameter"
          },
          "401" : {
            "description" : "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "403" : {
            "description" : "Forbidden - Access to the resource by the provider is forbidden"
          },
          "404" : {
            "description" : "Not found - The requested resource is not found"
          },
          "405" : {
            "description" : "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406" : {
            "description" : "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409" : {
            "description" : "Conflict - If a resource being created already exists"
          },
          "415" : {
            "description" : "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "500" : {
            "description" : "Server error - Something went wrong on the Cloud Elements server"
          },
          "502" : {
            "description" : "Provider server error - Something went wrong on the Provider or Endpoint's server"
          }
        },
        "summary" : "Delete an {objectName}",
        "tags" : [ "objectName" ]
      },
      "get" : {
        "operationId" : "getObjectNameByObjectId",
        "parameters" : [ {
          "description" : "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
          "in" : "header",
          "name" : "Authorization",
          "required" : true,
          "type" : "string"
        }, {
          "description" : "The name of the object",
          "in" : "path",
          "name" : "objectName",
          "required" : true,
          "type" : "string"
        }, {
          "description" : "The {objectName} ID",
          "in" : "path",
          "name" : "objectId",
          "required" : true,
          "type" : "string"
        } ],
        "produces" : [ "application/json", "application/pdf" ],
        "responses" : {
          "200" : {
            "description" : "OK - Everything worked as expected",
            "schema" : {
              "$ref" : "#/definitions/Object"
            }
          },
          "400" : {
            "description" : "Bad Request - Often due to a missing request parameter"
          },
          "401" : {
            "description" : "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "403" : {
            "description" : "Forbidden - Access to the resource by the provider is forbidden"
          },
          "404" : {
            "description" : "Not found - The requested resource is not found"
          },
          "405" : {
            "description" : "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406" : {
            "description" : "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409" : {
            "description" : "Conflict - If a resource being created already exists"
          },
          "415" : {
            "description" : "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "500" : {
            "description" : "Server error - Something went wrong on the Cloud Elements server"
          },
          "502" : {
            "description" : "Provider server error - Something went wrong on the Provider or Endpoint's server"
          }
        },
        "summary" : "Retrieve an {objectName}",
        "tags" : [ "objectName" ]
      },
      "patch" : {
        "operationId" : "updateObjectNameByObjectId",
        "parameters" : [ {
          "description" : "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
          "in" : "header",
          "name" : "Authorization",
          "required" : true,
          "type" : "string"
        }, {
          "description" : "The name of the object",
          "in" : "path",
          "name" : "objectName",
          "required" : true,
          "type" : "string"
        }, {
          "description" : "The {objectName} ID",
          "in" : "path",
          "name" : "objectId",
          "required" : true,
          "type" : "string"
        }, {
          "description" : "The {objectName}",
          "in" : "body",
          "name" : "Body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/Object"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK - Everything worked as expected",
            "schema" : {
              "$ref" : "#/definitions/Object"
            }
          },
          "400" : {
            "description" : "Bad Request - Often due to a missing request parameter"
          },
          "401" : {
            "description" : "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "403" : {
            "description" : "Forbidden - Access to the resource by the provider is forbidden"
          },
          "404" : {
            "description" : "Not found - The requested resource is not found"
          },
          "405" : {
            "description" : "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406" : {
            "description" : "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409" : {
            "description" : "Conflict - If a resource being created already exists"
          },
          "415" : {
            "description" : "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "500" : {
            "description" : "Server error - Something went wrong on the Cloud Elements server"
          },
          "502" : {
            "description" : "Provider server error - Something went wrong on the Provider or Endpoint's server"
          }
        },
        "summary" : "Update an {objectName}",
        "tags" : [ "objectName" ]
      },
      "put" : {
        "operationId" : "replaceObjectNameByObjectId",
        "parameters" : [ {
          "description" : "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
          "in" : "header",
          "name" : "Authorization",
          "required" : true,
          "type" : "string"
        }, {
          "description" : "The name of the object",
          "in" : "path",
          "name" : "objectName",
          "required" : true,
          "type" : "string"
        }, {
          "description" : "The {objectName} ID",
          "in" : "path",
          "name" : "objectId",
          "required" : true,
          "type" : "string"
        }, {
          "description" : "The {objectName}",
          "in" : "body",
          "name" : "Body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/Object"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK - Everything worked as expected",
            "schema" : {
              "$ref" : "#/definitions/Object"
            }
          },
          "400" : {
            "description" : "Bad Request - Often due to a missing request parameter"
          },
          "401" : {
            "description" : "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "403" : {
            "description" : "Forbidden - Access to the resource by the provider is forbidden"
          },
          "404" : {
            "description" : "Not found - The requested resource is not found"
          },
          "405" : {
            "description" : "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406" : {
            "description" : "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409" : {
            "description" : "Conflict - If a resource being created already exists"
          },
          "415" : {
            "description" : "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "500" : {
            "description" : "Server error - Something went wrong on the Cloud Elements server"
          },
          "502" : {
            "description" : "Provider server error - Something went wrong on the Provider or Endpoint's server"
          }
        },
        "summary" : "Update an {objectName}",
        "tags" : [ "objectName" ]
      }
    },
    "/{objectName}/{objectId}/{childObjectName}" : {
      "get" : {
        "operationId" : "getObjectNameByChildObjectName",
        "parameters" : [ {
          "description" : "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
          "in" : "header",
          "name" : "Authorization",
          "required" : true,
          "type" : "string"
        }, {
          "description" : "The name of the object",
          "in" : "path",
          "name" : "objectName",
          "required" : true,
          "type" : "string"
        }, {
          "description" : "The {objectName} ID",
          "in" : "path",
          "name" : "objectId",
          "required" : true,
          "type" : "string"
        }, {
          "description" : "The name of the childObjectName",
          "in" : "path",
          "name" : "childObjectName",
          "required" : true,
          "type" : "string"
        }, {
          "description" : "The CEQL search expression.",
          "in" : "query",
          "name" : "where",
          "required" : false,
          "type" : "string"
        }, {
          "description" : "The page size. Defaults to 200 if not provided. Maximum of 5000.",
          "format" : "int64",
          "in" : "query",
          "name" : "pageSize",
          "required" : false,
          "type" : "integer"
        }, {
          "description" : "The next page cursor, taken from the response header: `elements-next-page-token`",
          "in" : "query",
          "name" : "nextPage",
          "required" : false,
          "type" : "string"
        }, {
          "description" : "The fields to return on the response. Can be a single field or a comma-separated list of fields",
          "in" : "query",
          "name" : "fields",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK - Everything worked as expected",
            "schema" : {
              "items" : {
                "$ref" : "#/definitions/Object"
              },
              "type" : "array"
            }
          },
          "400" : {
            "description" : "Bad Request - Often due to a missing request parameter"
          },
          "401" : {
            "description" : "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "403" : {
            "description" : "Forbidden - Access to the resource by the provider is forbidden"
          },
          "404" : {
            "description" : "Not found - The requested resource is not found"
          },
          "405" : {
            "description" : "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406" : {
            "description" : "Not acceptable - The response content type does not match the &quot;Accept&quot; header value"
          },
          "409" : {
            "description" : "Conflict - If a resource being created already exists"
          },
          "415" : {
            "description" : "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "500" : {
            "description" : "Server error - Something went wrong on the Cloud Elements server"
          },
          "502" : {
            "description" : "Provider server error - Something went wrong on the Provider or Endpoint's server"
          }
        },
        "summary" : "Search for {childObjectName}",
        "tags" : [ "objectName" ]
      },
      "post" : {
        "operationId" : "createObjectNameByChildObjectName",
        "parameters" : [ {
          "description" : "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
          "in" : "header",
          "name" : "Authorization",
          "required" : true,
          "type" : "string"
        }, {
          "description" : "The name of the object",
          "in" : "path",
          "name" : "objectName",
          "required" : true,
          "type" : "string"
        }, {
          "description" : "The {objectName} ID",
          "in" : "path",
          "name" : "objectId",
          "required" : true,
          "type" : "string"
        }, {
          "description" : "The name of the object",
          "in" : "path",
          "name" : "childObjectName",
          "required" : true,
          "type" : "string"
        }, {
          "description" : "The {childObjectName}",
          "in" : "body",
          "name" : "Body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/Object"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK - Everything worked as expected"
          },
          "400" : {
            "description" : "Bad Request - Often due to a missing request parameter"
          },
          "401" : {
            "description" : "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "403" : {
            "description" : "Forbidden - Access to the resource by the provider is forbidden"
          },
          "404" : {
            "description" : "Not found - The requested resource is not found"
          },
          "405" : {
            "description" : "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406" : {
            "description" : "Not acceptable - The response content type does not match the &quot;Accept&quot; header value"
          },
          "409" : {
            "description" : "Conflict - If a resource being created already exists"
          },
          "415" : {
            "description" : "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "500" : {
            "description" : "Server error - Something went wrong on the Cloud Elements server"
          },
          "502" : {
            "description" : "Provider server error - Something went wrong on the Provider or Endpoint's server"
          }
        },
        "summary" : "Create an {childObjectName}",
        "tags" : [ "objectName" ]
      }
    },
    "/{objectName}/{objectId}/{childObjectName}/{childObjectId}" : {
      "delete" : {
        "operationId" : "deleteObjectNameByChildObjectId",
        "parameters" : [ {
          "description" : "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
          "in" : "header",
          "name" : "Authorization",
          "required" : true,
          "type" : "string"
        }, {
          "description" : "The name of the object",
          "in" : "path",
          "name" : "objectName",
          "required" : true,
          "type" : "string"
        }, {
          "description" : "The name of the childObjectName",
          "in" : "path",
          "name" : "childObjectName",
          "required" : true,
          "type" : "string"
        }, {
          "description" : "The {objectName} ID",
          "in" : "path",
          "name" : "objectId",
          "required" : true,
          "type" : "string"
        }, {
          "description" : "The {childObjectName} ID",
          "in" : "path",
          "name" : "childObjectId",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK - Everything worked as expected"
          },
          "400" : {
            "description" : "Bad Request - Often due to a missing request parameter"
          },
          "401" : {
            "description" : "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "403" : {
            "description" : "Forbidden - Access to the resource by the provider is forbidden"
          },
          "404" : {
            "description" : "Not found - The requested resource is not found"
          },
          "405" : {
            "description" : "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406" : {
            "description" : "Not acceptable - The response content type does not match the &quot;Accept&quot; header value"
          },
          "409" : {
            "description" : "Conflict - If a resource being created already exists"
          },
          "415" : {
            "description" : "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "500" : {
            "description" : "Server error - Something went wrong on the Cloud Elements server"
          },
          "502" : {
            "description" : "Provider server error - Something went wrong on the Provider or Endpoint's server"
          }
        },
        "summary" : "Delete an {childObjectName}",
        "tags" : [ "objectName" ]
      },
      "get" : {
        "operationId" : "getObjectNameByChildObjectId",
        "parameters" : [ {
          "description" : "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
          "in" : "header",
          "name" : "Authorization",
          "required" : true,
          "type" : "string"
        }, {
          "description" : "The name of the object",
          "in" : "path",
          "name" : "objectName",
          "required" : true,
          "type" : "string"
        }, {
          "description" : "The name of the childObjectName",
          "in" : "path",
          "name" : "childObjectName",
          "required" : true,
          "type" : "string"
        }, {
          "description" : "The {objectName} ID",
          "in" : "path",
          "name" : "objectId",
          "required" : true,
          "type" : "string"
        }, {
          "description" : "The {childObjectName} ID",
          "in" : "path",
          "name" : "childObjectId",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK - Everything worked as expected",
            "schema" : {
              "$ref" : "#/definitions/Object"
            }
          },
          "400" : {
            "description" : "Bad Request - Often due to a missing request parameter"
          },
          "401" : {
            "description" : "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "403" : {
            "description" : "Forbidden - Access to the resource by the provider is forbidden"
          },
          "404" : {
            "description" : "Not found - The requested resource is not found"
          },
          "405" : {
            "description" : "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406" : {
            "description" : "Not acceptable - The response content type does not match the &quot;Accept&quot; header value"
          },
          "409" : {
            "description" : "Conflict - If a resource being created already exists"
          },
          "415" : {
            "description" : "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "500" : {
            "description" : "Server error - Something went wrong on the Cloud Elements server"
          },
          "502" : {
            "description" : "Provider server error - Something went wrong on the Provider or Endpoint's server"
          }
        },
        "summary" : "Retrieve an {childObjectName}",
        "tags" : [ "objectName" ]
      },
      "patch" : {
        "operationId" : "updateObjectNameByChildObjectId",
        "parameters" : [ {
          "description" : "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
          "in" : "header",
          "name" : "Authorization",
          "required" : true,
          "type" : "string"
        }, {
          "description" : "The name of the object",
          "in" : "path",
          "name" : "objectName",
          "required" : true,
          "type" : "string"
        }, {
          "description" : "The name of the childObjectName",
          "in" : "path",
          "name" : "childObjectName",
          "required" : true,
          "type" : "string"
        }, {
          "description" : "The {objectName} ID",
          "in" : "path",
          "name" : "objectId",
          "required" : true,
          "type" : "string"
        }, {
          "description" : "The {childObjectName} ID",
          "in" : "path",
          "name" : "childObjectId",
          "required" : true,
          "type" : "string"
        }, {
          "description" : "The {objectName}",
          "in" : "body",
          "name" : "Body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/Object"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK - Everything worked as expected",
            "schema" : {
              "$ref" : "#/definitions/Object"
            }
          },
          "400" : {
            "description" : "Bad Request - Often due to a missing request parameter"
          },
          "401" : {
            "description" : "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "403" : {
            "description" : "Forbidden - Access to the resource by the provider is forbidden"
          },
          "404" : {
            "description" : "Not found - The requested resource is not found"
          },
          "405" : {
            "description" : "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406" : {
            "description" : "Not acceptable - The response content type does not match the &quot;Accept&quot; header value"
          },
          "409" : {
            "description" : "Conflict - If a resource being created already exists"
          },
          "415" : {
            "description" : "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "500" : {
            "description" : "Server error - Something went wrong on the Cloud Elements server"
          },
          "502" : {
            "description" : "Provider server error - Something went wrong on the Provider or Endpoint's server"
          }
        },
        "summary" : "Update an {childObjectName}",
        "tags" : [ "objectName" ]
      },
      "put" : {
        "operationId" : "replaceObjectNameByChildObjectId",
        "parameters" : [ {
          "description" : "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
          "in" : "header",
          "name" : "Authorization",
          "required" : true,
          "type" : "string"
        }, {
          "description" : "The name of the object",
          "in" : "path",
          "name" : "objectName",
          "required" : true,
          "type" : "string"
        }, {
          "description" : "The name of the childObjectName",
          "in" : "path",
          "name" : "childObjectName",
          "required" : true,
          "type" : "string"
        }, {
          "description" : "The {objectName} ID",
          "in" : "path",
          "name" : "objectId",
          "required" : true,
          "type" : "string"
        }, {
          "description" : "The {childObjectName} ID",
          "in" : "path",
          "name" : "childObjectId",
          "required" : true,
          "type" : "string"
        }, {
          "description" : "The {objectName}",
          "in" : "body",
          "name" : "Body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/Object"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK - Everything worked as expected",
            "schema" : {
              "$ref" : "#/definitions/Object"
            }
          },
          "400" : {
            "description" : "Bad Request - Often due to a missing request parameter"
          },
          "401" : {
            "description" : "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "403" : {
            "description" : "Forbidden - Access to the resource by the provider is forbidden"
          },
          "404" : {
            "description" : "Not found - The requested resource is not found"
          },
          "405" : {
            "description" : "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406" : {
            "description" : "Not acceptable - The response content type does not match the &quot;Accept&quot; header value"
          },
          "409" : {
            "description" : "Conflict - If a resource being created already exists"
          },
          "415" : {
            "description" : "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "500" : {
            "description" : "Server error - Something went wrong on the Cloud Elements server"
          },
          "502" : {
            "description" : "Provider server error - Something went wrong on the Provider or Endpoint's server"
          }
        },
        "summary" : "Update an {childObjectName}",
        "tags" : [ "objectName" ]
      }
    }
  },
  "host" : "localhost:8080",
  "schemes" : [ "http" ],
  "definitions" : {
    "SingleValueExtendedProperties" : {
      "properties" : {
        "propertyId" : {
          "type" : "string",
          "x-samplevalue" : "String {66f5a359-4659-4830-9070-00047ec6ac6e} Name Color"
        },
        "value" : {
          "type" : "string",
          "x-samplevalue" : "Green"
        }
      },
      "title" : "SingleValueExtendedProperties",
      "x-has-customfields" : false,
      "type" : "object"
    },
    "HomeAddress" : {
      "properties" : {
        "City" : {
          "description" : "The City",
          "type" : "string",
          "x-displayName" : "City",
          "x-samplevalue" : "Boston",
          "x-sub-format" : "City"
        },
        "CountryOrRegion" : {
          "description" : "The country or region",
          "type" : "string",
          "x-displayName" : "CountryOrRegion",
          "x-samplevalue" : "United States",
          "x-sub-format" : "Country"
        },
        "PostalCode" : {
          "description" : "The postal code",
          "type" : "string",
          "x-displayName" : "PostalCode",
          "x-samplevalue" : "411045",
          "x-sub-format" : "Postal Code"
        },
        "State" : {
          "description" : "The State",
          "type" : "string",
          "x-displayName" : "State",
          "x-samplevalue" : "Maharashtra",
          "x-sub-format" : "State"
        },
        "Street" : {
          "description" : "The street",
          "type" : "string",
          "x-displayName" : "Street",
          "x-samplevalue" : "Carter Street",
          "x-sub-format" : "Street Name"
        }
      },
      "title" : "HomeAddress",
      "x-has-customfields" : false,
      "x-vendor-objectname" : "HomeAddress",
      "type" : "object"
    },
    "swaggerdefinitions" : {
      "x-has-customfields" : false,
      "type" : "object",
      "title" : "definitions",
      "properties" : {
        "definition-name" : {
          "$ref" : "#/definitions/swaggerdefinition-name"
        }
      }
    },
    "FromEmailAddressCreateMessage" : {
      "properties" : {
        "address" : {
          "type" : "string",
          "x-samplevalue" : "mayur.dhandegs@outlook.com",
          "x-sub-format" : "email"
        },
        "name" : {
          "type" : "string",
          "x-samplevalue" : "Mayur Dhande Outlook"
        }
      },
      "title" : "EmailAddress",
      "type" : "object",
      "x-has-customfields" : false
    },
    "MultiValueExtendedProperties" : {
      "properties" : {
        "propertyId" : {
          "type" : "string",
          "x-samplevalue" : "String {66f5a359-4659-4830-9070-00047ec6ac6e} Name Color"
        },
        "value" : {
          "items" : {
            "type" : "string"
          },
          "type" : "array",
          "x-samplevalue" : [ "Green", "Aqua", "Blue" ]
        }
      },
      "title" : "MultiValueExtendedProperties",
      "x-has-customfields" : false,
      "type" : "object"
    },
    "swaggerdefinition-name" : {
      "x-has-customfields" : false,
      "type" : "object",
      "title" : "definition-name",
      "properties" : {
        "properties" : {
          "$ref" : "#/definitions/swaggerproperties"
        }
      }
    },
    "messagesReplyResponse" : {
      "properties" : { },
      "title" : "messagesReplyResponse",
      "x-has-customfields" : false,
      "x-vendor-objectname" : "Reply",
      "type" : "object"
    },
    "CcRecipientsEmailAddress" : {
      "properties" : {
        "address" : {
          "type" : "string",
          "x-samplevalue" : "afrin.chakure@gslab.com",
          "x-sub-format" : "email"
        },
        "name" : {
          "type" : "string",
          "x-samplevalue" : "Afrin Chakure"
        }
      },
      "title" : "CcRecipientsEmailAddress",
      "type" : "object",
      "x-has-customfields" : false
    },
    "CcRecipients" : {
      "properties" : {
        "emailAddress" : {
          "$ref" : "#/definitions/CcRecipientsEmailAddress"
        }
      },
      "title" : "CcRecipients",
      "x-has-customfields" : false,
      "type" : "object"
    },
    "messagesForward" : {
      "properties" : {
        "comment" : {
          "type" : "string",
          "x-samplevalue" : "FYI"
        },
        "toRecipients" : {
          "items" : {
            "$ref" : "#/definitions/ToRecipientsForward"
          },
          "type" : "array"
        }
      },
      "required" : [ "toRecipients" ],
      "title" : "messagesForward",
      "x-has-customfields" : false,
      "x-vendor-objectname" : "Forward",
      "type" : "object"
    },
    "SenderEmailAddressCreateMessage" : {
      "properties" : {
        "address" : {
          "type" : "string",
          "x-samplevalue" : "mayur.dhandegs@outlook.com",
          "x-sub-format" : "email"
        },
        "name" : {
          "type" : "string",
          "x-samplevalue" : "Mayur Dhande Outlook"
        }
      },
      "title" : "EmailAddress",
      "type" : "object",
      "x-has-customfields" : false
    },
    "messagesReply" : {
      "properties" : {
        "comment" : {
          "type" : "string",
          "x-samplevalue" : "FYI"
        }
      },
      "title" : "messagesReply",
      "x-has-customfields" : false,
      "x-vendor-objectname" : "Reply",
      "type" : "object"
    },
    "swagger-contacts-path" : {
      "x-has-customfields" : false,
      "type" : "object",
      "title" : "/contacts",
      "properties" : {
        "post" : {
          "$ref" : "#/definitions/swaggerpost"
        }
      }
    },
    "FromEmailAddress" : {
      "properties" : {
        "address" : {
          "type" : "string",
          "x-samplevalue" : "mayur.dhandegs@outlook.com",
          "x-sub-format" : "email"
        },
        "name" : {
          "type" : "string",
          "x-samplevalue" : "Mayur Dhande"
        }
      },
      "title" : "FromEmailAddress",
      "type" : "object",
      "x-has-customfields" : false
    },
    "messagesReplyallResponse" : {
      "properties" : { },
      "title" : "messagesReplyallResponse",
      "x-has-customfields" : false,
      "x-vendor-objectname" : "Reply",
      "type" : "object"
    },
    "swagger400" : {
      "x-has-customfields" : false,
      "type" : "object",
      "title" : "400",
      "properties" : {
        "description" : {
          "x-samplevalue" : "Bad Request - Often due to a missing request parameter",
          "type" : "string"
        }
      }
    },
    "swagger401" : {
      "x-has-customfields" : false,
      "type" : "object",
      "title" : "401",
      "properties" : {
        "description" : {
          "x-samplevalue" : "Unauthorized - An invalid element token, user secret and/or org secret provided",
          "type" : "string"
        }
      }
    },
    "swagger403" : {
      "x-has-customfields" : false,
      "type" : "object",
      "title" : "403",
      "properties" : {
        "description" : {
          "x-samplevalue" : "Forbidden - Access to the resource by the provider is forbidden",
          "type" : "string"
        }
      }
    },
    "attendees" : {
      "properties" : {
        "emailAddress" : {
          "$ref" : "#/definitions/emailAddress"
        },
        "status" : {
          "$ref" : "#/definitions/status"
        },
        "type" : {
          "type" : "string",
          "x-samplevalue" : "required"
        }
      },
      "title" : "attendees",
      "x-has-customfields" : false,
      "x-vendor-objectname" : "attendees",
      "type" : "object"
    },
    "swagger404" : {
      "x-has-customfields" : false,
      "type" : "object",
      "title" : "404",
      "properties" : {
        "description" : {
          "x-samplevalue" : "Not found - The requested resource is not found",
          "type" : "string"
        }
      }
    },
    "swagger405" : {
      "x-has-customfields" : false,
      "type" : "object",
      "title" : "405",
      "properties" : {
        "description" : {
          "x-samplevalue" : "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected",
          "type" : "string"
        }
      }
    },
    "calendarsEvents" : {
      "properties" : {
        "attendees" : {
          "items" : {
            "$ref" : "#/definitions/attendees"
          },
          "type" : "array"
        },
        "body" : {
          "$ref" : "#/definitions/body"
        },
        "bodyPreview" : {
          "type" : "string",
          "x-samplevalue" : "Dana, this is the time you selected for our orientation. Please bring the notes I sent you."
        },
        "categories" : {
          "items" : {
            "$ref" : "#/definitions/categories"
          },
          "type" : "array"
        },
        "end" : {
          "$ref" : "#/definitions/end"
        },
        "id" : {
          "type" : "string",
          "x-samplevalue" : "AAMkAGIAAAoZDOFAAA="
        },
        "location" : {
          "$ref" : "#/definitions/location"
        },
        "organizer" : {
          "$ref" : "#/definitions/organizer"
        },
        "start" : {
          "$ref" : "#/definitions/start"
        },
        "subject" : {
          "type" : "string",
          "x-samplevalue" : "Orientation "
        }
      },
      "title" : "calendarsEvents",
      "x-has-customfields" : false,
      "type" : "object"
    },
    "responseStatus" : {
      "properties" : {
        "response" : {
          "type" : "string",
          "x-samplevalue" : "organizer"
        },
        "time" : {
          "format" : "date-time",
          "type" : "string",
          "x-mask" : "yyyy-MM-dd'T'HH:mm:ssZ",
          "x-samplevalue" : "0001-01-01T00:00:00Z"
        }
      },
      "title" : "responseStatus",
      "type" : "object",
      "x-has-customfields" : false,
      "x-vendor-objectname" : "responseStatus"
    },
    "swaggerDocs" : {
      "x-has-customfields" : false,
      "title" : "swaggerDocs",
      "properties" : {
        "basePath" : {
          "x-samplevalue" : "/elements/api-v2/hubs/crm",
          "type" : "string"
        },
        "paths" : {
          "$ref" : "#/definitions/swaggerpaths"
        },
        "host" : {
          "x-samplevalue" : "localhost:5050",
          "type" : "string"
        },
        "schemes" : {
          "x-samplevalue" : [ "http" ],
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        },
        "definitions" : {
          "$ref" : "#/definitions/swaggerdefinitions"
        },
        "swagger" : {
          "x-samplevalue" : "2.0",
          "type" : "string"
        },
        "info" : {
          "$ref" : "#/definitions/swaggerinfo"
        },
        "tags" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/swaggertags"
          }
        }
      },
      "type" : "object"
    },
    "EmailAddress" : {
      "properties" : {
        "address" : {
          "type" : "string",
          "x-samplevalue" : "afrin.chakure@gslab.com",
          "x-sub-format" : "email"
        },
        "name" : {
          "type" : "string",
          "x-samplevalue" : "Afrin Chakure"
        }
      },
      "title" : "EmailAddress",
      "type" : "object",
      "x-has-customfields" : false
    },
    "SenderEmailAddress" : {
      "properties" : {
        "address" : {
          "type" : "string",
          "x-samplevalue" : "mayur.dhandegs@outlook.com",
          "x-sub-format" : "email"
        },
        "name" : {
          "type" : "string",
          "x-samplevalue" : "Mayur Dhande"
        }
      },
      "title" : "SenderEmailAddress",
      "type" : "object",
      "x-has-customfields" : false
    },
    "Sender" : {
      "properties" : {
        "emailAddress" : {
          "$ref" : "#/definitions/SenderEmailAddress"
        }
      },
      "title" : "Sender",
      "type" : "object",
      "x-has-customfields" : false
    },
    "swaggercontact" : {
      "x-has-customfields" : false,
      "type" : "object",
      "title" : "contact",
      "properties" : {
        "email" : {
          "x-samplevalue" : "support@cloud-elements.com",
          "type" : "string"
        }
      }
    },
    "BccRecipients" : {
      "properties" : {
        "emailAddress" : {
          "$ref" : "#/definitions/BccRecipientsEmailAddress"
        }
      },
      "title" : "BccRecipients",
      "x-has-customfields" : false,
      "type" : "object"
    },
    "calendarsList" : {
      "properties" : {
        "canEdit" : {
          "type" : "boolean",
          "x-samplevalue" : true
        },
        "canShare" : {
          "type" : "boolean",
          "x-samplevalue" : true
        },
        "canViewPrivateItems" : {
          "type" : "boolean",
          "x-samplevalue" : true
        },
        "changeKey" : {
          "type" : "string",
          "x-samplevalue" : "x85BSBCCkk21rS4rXhnI2QAAAqr6zQ=="
        },
        "color" : {
          "type" : "string",
          "x-samplevalue" : "auto"
        },
        "id" : {
          "type" : "string",
          "x-samplevalue" : "AAMkAGY4MDgzNjBkLWRmZTEtNGRjYy05MTgyLTQzNjZlYjIxZThhMQBGAAAAAADgOYA3opc2TKP4lKdcSZilBwDHzkFIEIKSTbWtLiteGcjZAAAAAAEGAADHzkFIEIKSTbWtLiteGcjZAAACqtQaAAA="
        },
        "name" : {
          "type" : "string",
          "x-samplevalue" : "Calendar"
        },
        "owner" : {
          "$ref" : "#/definitions/owner"
        }
      },
      "title" : "calendarsList",
      "x-has-customfields" : false,
      "type" : "object"
    },
    "swagger406" : {
      "x-has-customfields" : false,
      "type" : "object",
      "title" : "406",
      "properties" : {
        "description" : {
          "x-samplevalue" : "Not acceptable - The response content type does not match the 'Accept' header value",
          "type" : "string"
        }
      }
    },
    "calendarsPost" : {
      "properties" : {
        "name" : {
          "type" : "string",
          "x-samplevalue" : "test"
        }
      },
      "required" : [ "name" ],
      "title" : "calendarsPost",
      "x-has-customfields" : false,
      "type" : "object"
    },
    "messages" : {
      "properties" : {
        "@odata.context" : {
          "type" : "string"
        },
        "@odata.etag" : {
          "type" : "string",
          "x-samplevalue" : "W/\"CQAAABYAAAD3oQn2LIgZSpCft4VRrD56AAACZU/q\""
        },
        "@odata.id" : {
          "type" : "string",
          "x-samplevalue" : "https://outlook.office.com/api/v2.0/Users('0003bffd-11e0-5f61-0000-000000000000@84df9e7f-e9f6-40af-b435-aaaaaaaaaaaa')/Messages('AQMkADAwATNiZmYAZC0xMQBlMC01ZjYxLTAwAi0wMAoARgAAA3ptkzmErVtFol1E09_uAQwHAPehCfYsiBlKkJ_3hVGsPnoAAAIBCQAAAPehCfYsiBlKkJ_3hVGsPnoAAAACZcN0AAAA')"
        },
        "@odata.type" : {
          "type" : "string",
          "x-samplevalue" : "#Microsoft.OutlookServices.FileAttachment"
        },
        "attachments" : {
          "items" : {
            "$ref" : "#/definitions/Attachments"
          },
          "type" : "array"
        },
        "bccRecipients" : {
          "items" : {
            "$ref" : "#/definitions/BccRecipients"
          },
          "type" : "array"
        },
        "body" : {
          "$ref" : "#/definitions/Body"
        },
        "bodyPreview" : {
          "type" : "string",
          "x-samplevalue" : "copy that.\r\n________________________________\r\nFrom: Mayur Dhande <mayur.dhande@gslab.com>\r\nSent: Tuesday, May 22, 2018 10:23:59 AM\r\nTo: Mayur Dhande\r\nSubject: Re: Meet for lunch?1\r\n\r\nokay ?\r\n\r\nThanks and Regards,\r\nMayur Dhande\r\nSoftware Engineer | Mobile:"
        },
        "categories" : {
          "items" : {
            "type" : "string"
          },
          "type" : "array",
          "x-samplevalue" : [ "Snacks" ]
        },
        "ccRecipients" : {
          "items" : {
            "$ref" : "#/definitions/CcRecipients"
          },
          "type" : "array"
        },
        "changeKey" : {
          "type" : "string",
          "x-samplevalue" : "CQAAABYAAAD3oQn2LIgZSpCft4VRrD56AAACZU/q"
        },
        "conversationId" : {
          "type" : "string",
          "x-samplevalue" : "AQQkADAwATNiZmYAZC0xMQBlMC01ZjYxLTAwAi0wMAoAEAA7_l28bBLhRJTV5BK3JGxa"
        },
        "createdDateTime" : {
          "format" : "date-time",
          "type" : "string",
          "x-mask" : "yyyy-MM-dd'T'HH:mm:ssZ",
          "x-samplevalue" : "2018-05-22T10:44:27Z"
        },
        "extensions" : {
          "items" : {
            "$ref" : "#/definitions/ExtensionsResponse"
          },
          "type" : "array"
        },
        "flag" : {
          "$ref" : "#/definitions/Flag"
        },
        "from" : {
          "$ref" : "#/definitions/From"
        },
        "hasAttachments" : {
          "type" : "boolean",
          "x-samplevalue" : false
        },
        "id" : {
          "type" : "string",
          "x-samplevalue" : "AQMkADAwATNiZmYAZC0xMQBlMC01ZjYxLTAwAi0wMAoARgAAA3ptkzmErVtFol1E09_uAQwHAPehCfYsiBlKkJ_3hVGsPnoAAAIBCQAAAPehCfYsiBlKkJ_3hVGsPnoAAAACZcN0AAAA"
        },
        "importance" : {
          "enum" : [ "low", "normal", "high" ],
          "type" : "string",
          "x-samplevalue" : "Normal"
        },
        "inferenceClassification" : {
          "enum" : [ "focused", "other" ],
          "type" : "string",
          "x-samplevalue" : "Focused"
        },
        "internetMessageId" : {
          "type" : "string",
          "x-samplevalue" : "<PN1PR0101MB14088778111755D914EC81AD96940@PN1PR0101MB1408.INDPRD01.PROD.OUTLOOK.COM>"
        },
        "isDeliveryReceiptRequested" : {
          "type" : "boolean",
          "x-samplevalue" : false
        },
        "isDraft" : {
          "type" : "boolean",
          "x-samplevalue" : false
        },
        "isRead" : {
          "type" : "boolean",
          "x-samplevalue" : true
        },
        "isReadReceiptRequested" : {
          "type" : "boolean",
          "x-samplevalue" : false
        },
        "lastModifiedDateTime" : {
          "format" : "date-time",
          "type" : "string",
          "x-mask" : "yyyy-MM-dd'T'HH:mm:ssZ",
          "x-samplevalue" : "2018-05-22T10:44:31Z"
        },
        "meetingMessageType" : {
          "type" : "string",
          "x-samplevalue" : "MeetingRequest"
        },
        "parentFolderId" : {
          "type" : "string",
          "x-samplevalue" : "AQMkADAwATNiZmYAZC0xMQBlMC01ZjYxLTAwAi0wMAoALgAAA3ptkzmErVtFol1E09_uAQwBAPehCfYsiBlKkJ_3hVGsPnoAAAIBCQAAAA=="
        },
        "receivedDateTime" : {
          "format" : "date-time",
          "type" : "string",
          "x-mask" : "yyyy-MM-dd'T'HH:mm:ssZ",
          "x-samplevalue" : "2018-05-22T10:44:31Z"
        },
        "replyTo" : {
          "items" : {
            "$ref" : "#/definitions/ReplyTo"
          },
          "type" : "array"
        },
        "sender" : {
          "$ref" : "#/definitions/Sender"
        },
        "sentDateTime" : {
          "format" : "date-time",
          "type" : "string",
          "x-mask" : "yyyy-MM-dd'T'HH:mm:ssZ",
          "x-samplevalue" : "2018-05-22T10:44:29Z"
        },
        "subject" : {
          "type" : "string",
          "x-name" : true,
          "x-samplevalue" : "RE: Meet for lunch?1"
        },
        "toRecipients" : {
          "items" : {
            "$ref" : "#/definitions/ToRecipients"
          },
          "type" : "array"
        },
        "uniqueBody" : {
          "$ref" : "#/definitions/Body"
        },
        "webLink" : {
          "type" : "string",
          "x-samplevalue" : "https://outlook.live.com/owa/?ItemID=AQMkADAwATNiZmYAZC0xMQBlMC01ZjYxLTAwAi0wMAoARgAAA3ptkzmErVtFol1E09%2BuAQwHAPehCfYsiBlKkJ%2B3hVGsPnoAAAIBCQAAAPehCfYsiBlKkJ%2B3hVGsPnoAAAACZcN0AAAA&exvsurl=1&viewmodel=ReadMessageItem"
        }
      },
      "title" : "messages",
      "type" : "object",
      "x-has-customfields" : false,
      "x-primary-key" : [ "id" ],
      "x-vendor-objectname" : "Message"
    },
    "CreateMessage" : {
      "properties" : {
        "attachments" : {
          "items" : {
            "$ref" : "#/definitions/Attachments"
          },
          "type" : "array"
        },
        "bccRecipients" : {
          "items" : {
            "$ref" : "#/definitions/BccRecipients"
          },
          "type" : "array",
          "x-conditional-required" : "Required when CcRecipients or ToRecipients is not provided"
        },
        "body" : {
          "$ref" : "#/definitions/Body"
        },
        "categories" : {
          "items" : {
            "type" : "string"
          },
          "type" : "array",
          "x-samplevalue" : [ "Snacks" ]
        },
        "ccRecipients" : {
          "items" : {
            "$ref" : "#/definitions/CcRecipients"
          },
          "type" : "array",
          "x-conditional-required" : "Required when ToRecipients or BccRecipients is not provided"
        },
        "extensions" : {
          "items" : {
            "$ref" : "#/definitions/ExtensionsRequest"
          },
          "type" : "array"
        },
        "from" : {
          "$ref" : "#/definitions/FromCreateMessage"
        },
        "importance" : {
          "enum" : [ "0", "1", "2" ],
          "type" : "string",
          "x-samplevalue" : "Normal"
        },
        "inferenceClassification" : {
          "enum" : [ "Focused", "Other" ],
          "type" : "string",
          "x-samplevalue" : "Focused"
        },
        "internetMessageId" : {
          "type" : "string",
          "x-samplevalue" : "<PN1PR0101MB14088778111755D914EC81AD96940@PN1PR0101MB1408.INDPRD01.PROD.OUTLOOK.COM>"
        },
        "isDeliveryReceiptRequested" : {
          "type" : "boolean",
          "x-samplevalue" : false
        },
        "isRead" : {
          "type" : "boolean",
          "x-samplevalue" : true
        },
        "isReadReceiptRequested" : {
          "type" : "boolean",
          "x-samplevalue" : false
        },
        "multiValueExtendedProperties" : {
          "items" : {
            "$ref" : "#/definitions/MultiValueExtendedProperties"
          },
          "type" : "array"
        },
        "sender" : {
          "$ref" : "#/definitions/SenderCreateMessage"
        },
        "singleValueExtendedProperties" : {
          "items" : {
            "$ref" : "#/definitions/SingleValueExtendedProperties"
          },
          "type" : "array"
        },
        "subject" : {
          "type" : "string",
          "x-name" : true,
          "x-samplevalue" : "RE: Meet for lunch?1"
        },
        "toRecipients" : {
          "items" : {
            "$ref" : "#/definitions/ToRecipients"
          },
          "type" : "array",
          "x-conditional-required" : "Required when CcRecipients or BccRecipients is not provided"
        }
      },
      "x-has-customfields" : false,
      "x-vendor-objectname" : "Message",
      "type" : "object"
    },
    "swaggerdefinition-property" : {
      "x-has-customfields" : false,
      "type" : "object",
      "title" : "#/definitions/definition-property",
      "properties" : {
        "type" : {
          "x-samplevalue" : "string",
          "type" : "string"
        }
      }
    },
    "Object" : {
      "description" : "Fields for the object. There will be fields associated with an Object, which are not all described here.",
      "properties" : {
        "objectField" : {
          "type" : "string"
        }
      },
      "type" : "object"
    },
    "swagger409" : {
      "x-has-customfields" : false,
      "type" : "object",
      "title" : "409",
      "properties" : {
        "description" : {
          "x-samplevalue" : "Conflict - If a resource being created already exists",
          "type" : "string"
        }
      }
    },
    "ExtensionsResponse" : {
      "properties" : {
        "@odata.id" : {
          "type" : "string",
          "x-samplevalue" : "https://outlook.office.com/api/v2.0/Users('ddfc984d-b826-40d7-b48b-57002df800e5@1717f226-49d1-4d0c-9d74-709fad664b77')/Messages\r\n('AAMkAGEbs88AAB84uLuAAA=')/extensions('Microsoft.OutlookServices.OpenTypeExtension.Com.Contoso.Referral')"
        },
        "@odata.type" : {
          "type" : "string",
          "x-samplevalue" : "#Microsoft.OutlookServices.OpenTypeExtension"
        },
        "extensionName" : {
          "type" : "string",
          "x-samplevalue" : "Com.Contoso.Referral"
        },
        "id" : {
          "type" : "string",
          "x-samplevalue" : "Microsoft.OutlookServices.OpenTypeExtension.Com.Contoso.Referral"
        }
      },
      "title" : "ExtensionsResponse",
      "x-has-customfields" : true,
      "type" : "object"
    },
    "Pong" : {
      "properties" : {
        "dateTime" : {
          "format" : "date-time",
          "type" : "string"
        },
        "endpoint" : {
          "type" : "string"
        }
      },
      "type" : "object"
    },
    "status" : {
      "properties" : {
        "response" : {
          "type" : "string",
          "x-samplevalue" : "none"
        },
        "time" : {
          "format" : "date-time",
          "type" : "string",
          "x-mask" : "yyyy-MM-dd'T'HH:mm:ssZ",
          "x-samplevalue" : "0001-01-01T00:00:00Z"
        }
      },
      "title" : "status",
      "type" : "object",
      "x-has-customfields" : false,
      "x-vendor-objectname" : "events"
    },
    "ExtensionsRequest" : {
      "properties" : {
        "@odata.type" : {
          "type" : "string",
          "x-samplevalue" : "#Microsoft.OutlookServices.OpenTypeExtension"
        },
        "extensionName" : {
          "type" : "string",
          "x-samplevalue" : "Com.Contoso.Referral"
        }
      },
      "title" : "ExtensionsRequest",
      "x-has-customfields" : true,
      "type" : "object"
    },
    "patchBody" : {
      "properties" : {
        "subject" : {
          "type" : "string",
          "x-samplevalue" : "updateEvent"
        }
      },
      "title" : "patchBody",
      "x-has-customfields" : false,
      "type" : "object"
    },
    "categories" : {
      "type" : "string",
      "x-samplevalue" : "example",
      "x-vendor-objectname" : "categories"
    },
    "calendar" : {
      "properties" : {
        "canEdit" : {
          "type" : "boolean",
          "x-samplevalue" : false
        },
        "canShare" : {
          "type" : "boolean",
          "x-samplevalue" : false
        },
        "canViewPrivateItems" : {
          "type" : "boolean",
          "x-samplevalue" : true
        },
        "changeKey" : {
          "type" : "string",
          "x-samplevalue" : "x85BSBCCkk21rS4rXhnI2QAAAqr6zg=="
        },
        "color" : {
          "type" : "string",
          "x-samplevalue" : "auto"
        },
        "id" : {
          "type" : "string",
          "x-samplevalue" : "AAMkAGY4MDgzNjBkLWRmZTEtNGRjYy05MTgyLTQzNjZlYjIxZThhMQBGAAAAAADgOYA3opc2TKP4lKdcSZilBwDHzkFIEIKSTbWtLiteGcjZAAAAAAEGAADHzkFIEIKSTbWtLiteGcjZAAACqtQbAAA="
        },
        "name" : {
          "type" : "string",
          "x-samplevalue" : "United States holidays"
        },
        "owner" : {
          "$ref" : "#/definitions/owner"
        }
      },
      "title" : "calendar",
      "x-has-customfields" : false,
      "type" : "object"
    },
    "messagesListObject" : {
      "properties" : {
        "@odata.etag" : {
          "type" : "string",
          "x-samplevalue" : "W/\"CQAAABYAAAD3oQn2LIgZSpCft4VRrD56AAACZU/q\""
        },
        "@odata.id" : {
          "type" : "string",
          "x-samplevalue" : "https://outlook.office.com/api/v2.0/Users('0003bffd-11e0-5f61-0000-000000000000@84df9e7f-e9f6-40af-b435-aaaaaaaaaaaa')/Messages('AQMkADAwATNiZmYAZC0xMQBlMC01ZjYxLTAwAi0wMAoARgAAA3ptkzmErVtFol1E09_uAQwHAPehCfYsiBlKkJ_3hVGsPnoAAAIBCQAAAPehCfYsiBlKkJ_3hVGsPnoAAAACZcN0AAAA')"
        },
        "@odata.type" : {
          "type" : "string",
          "x-samplevalue" : "#Microsoft.OutlookServices.OpenTypeExtension"
        },
        "attachments" : {
          "items" : {
            "$ref" : "#/definitions/Attachments"
          },
          "type" : "array"
        },
        "bccRecipients" : {
          "items" : {
            "$ref" : "#/definitions/BccRecipients"
          },
          "type" : "array"
        },
        "body" : {
          "$ref" : "#/definitions/Body"
        },
        "bodyPreview" : {
          "type" : "string",
          "x-samplevalue" : "copy that.\r\n________________________________\r\nFrom: Mayur Dhande <mayur.dhande@gslab.com>\r\nSent: Tuesday, May 22, 2018 10:23:59 AM\r\nTo: Mayur Dhande\r\nSubject: Re: Meet for lunch?1\r\n\r\nokay ?\r\n\r\nThanks and Regards,\r\nMayur Dhande\r\nSoftware Engineer | Mobile:"
        },
        "categories" : {
          "items" : {
            "type" : "string"
          },
          "type" : "array",
          "x-samplevalue" : [ "Snacks" ]
        },
        "ccRecipients" : {
          "items" : {
            "$ref" : "#/definitions/CcRecipients"
          },
          "type" : "array"
        },
        "changeKey" : {
          "type" : "string",
          "x-samplevalue" : "CQAAABYAAAD3oQn2LIgZSpCft4VRrD56AAACZU/q"
        },
        "conversationId" : {
          "type" : "string",
          "x-samplevalue" : "AQQkADAwATNiZmYAZC0xMQBlMC01ZjYxLTAwAi0wMAoAEAA7_l28bBLhRJTV5BK3JGxa"
        },
        "createdDateTime" : {
          "format" : "date-time",
          "type" : "string",
          "x-mask" : "yyyy-MM-dd'T'HH:mm:ssZ",
          "x-samplevalue" : "2018-05-22T10:44:27Z"
        },
        "extensions" : {
          "items" : {
            "$ref" : "#/definitions/ExtensionsResponse"
          },
          "type" : "array"
        },
        "flag" : {
          "$ref" : "#/definitions/Flag"
        },
        "from" : {
          "$ref" : "#/definitions/From"
        },
        "hasAttachments" : {
          "type" : "boolean",
          "x-samplevalue" : false
        },
        "id" : {
          "type" : "string",
          "x-samplevalue" : "AQMkADAwATNiZmYAZC0xMQBlMC01ZjYxLTAwAi0wMAoARgAAA3ptkzmErVtFol1E09_uAQwHAPehCfYsiBlKkJ_3hVGsPnoAAAIBCQAAAPehCfYsiBlKkJ_3hVGsPnoAAAACZcN0AAAA"
        },
        "importance" : {
          "enum" : [ "low", "normal", "high" ],
          "type" : "string",
          "x-samplevalue" : "Normal"
        },
        "inferenceClassification" : {
          "enum" : [ "focused", "other" ],
          "type" : "string",
          "x-samplevalue" : "Focused"
        },
        "internetMessageId" : {
          "type" : "string",
          "x-samplevalue" : "<PN1PR0101MB14088778111755D914EC81AD96940@PN1PR0101MB1408.INDPRD01.PROD.OUTLOOK.COM>"
        },
        "isDeliveryReceiptRequested" : {
          "type" : "boolean",
          "x-samplevalue" : false
        },
        "isDraft" : {
          "type" : "boolean",
          "x-samplevalue" : false
        },
        "isRead" : {
          "type" : "boolean",
          "x-samplevalue" : true
        },
        "isReadReceiptRequested" : {
          "type" : "boolean",
          "x-samplevalue" : false
        },
        "lastModifiedDateTime" : {
          "format" : "date-time",
          "type" : "string",
          "x-mask" : "yyyy-MM-dd'T'HH:mm:ssZ",
          "x-samplevalue" : "2018-05-22T10:44:31Z"
        },
        "meetingMessageType" : {
          "type" : "string",
          "x-samplevalue" : "MeetingRequest"
        },
        "parentFolderId" : {
          "type" : "string",
          "x-samplevalue" : "AQMkADAwATNiZmYAZC0xMQBlMC01ZjYxLTAwAi0wMAoALgAAA3ptkzmErVtFol1E09_uAQwBAPehCfYsiBlKkJ_3hVGsPnoAAAIBCQAAAA=="
        },
        "receivedDateTime" : {
          "format" : "date-time",
          "type" : "string",
          "x-mask" : "yyyy-MM-dd'T'HH:mm:ssZ",
          "x-samplevalue" : "2018-05-22T10:44:31Z"
        },
        "replyTo" : {
          "items" : {
            "$ref" : "#/definitions/ReplyTo"
          },
          "type" : "array"
        },
        "sender" : {
          "$ref" : "#/definitions/Sender"
        },
        "sentDateTime" : {
          "format" : "date-time",
          "type" : "string",
          "x-mask" : "yyyy-MM-dd'T'HH:mm:ssZ",
          "x-samplevalue" : "2018-05-22T10:44:29Z"
        },
        "subject" : {
          "type" : "string",
          "x-name" : true,
          "x-samplevalue" : "RE: Meet for lunch?1"
        },
        "toRecipients" : {
          "items" : {
            "$ref" : "#/definitions/ToRecipients"
          },
          "type" : "array"
        },
        "uniqueBody" : {
          "$ref" : "#/definitions/Body"
        },
        "webLink" : {
          "type" : "string",
          "x-samplevalue" : "https://outlook.live.com/owa/?ItemID=AQMkADAwATNiZmYAZC0xMQBlMC01ZjYxLTAwAi0wMAoARgAAA3ptkzmErVtFol1E09%2BuAQwHAPehCfYsiBlKkJ%2B3hVGsPnoAAAIBCQAAAPehCfYsiBlKkJ%2B3hVGsPnoAAAACZcN0AAAA&exvsurl=1&viewmodel=ReadMessageItem"
        }
      },
      "title" : "messagesListObject",
      "type" : "object",
      "x-has-customfields" : false,
      "x-primary-key" : [ "id" ],
      "x-vendor-objectname" : "Message"
    },
    "swagger500" : {
      "x-has-customfields" : false,
      "type" : "object",
      "title" : "500",
      "properties" : {
        "description" : {
          "x-samplevalue" : "Server error - Something went wrong on the Cloud Elements server",
          "type" : "string"
        }
      }
    },
    "swaggerpaths" : {
      "x-has-customfields" : false,
      "type" : "object",
      "title" : "paths",
      "properties" : {
        "/contacts" : {
          "$ref" : "#/definitions/swagger-contacts-path"
        }
      }
    },
    "swagger502" : {
      "x-has-customfields" : false,
      "type" : "object",
      "title" : "502",
      "properties" : {
        "description" : {
          "x-samplevalue" : "Provider server error - Something went wrong on the Provider or Endpoint's server",
          "type" : "string"
        }
      }
    },
    "objectsMetadataFields" : {
      "properties" : {
        "mask" : {
          "type" : "string"
        },
        "type" : {
          "type" : "string"
        },
        "vendorDisplayName" : {
          "type" : "string"
        },
        "vendorPath" : {
          "type" : "string"
        },
        "vendorReadOnly" : {
          "type" : "boolean"
        },
        "vendorRequired" : {
          "type" : "boolean"
        }
      },
      "type" : "object"
    },
    "messagesResponse" : {
      "properties" : {
        "@odata.context" : {
          "type" : "string"
        },
        "@odata.etag" : {
          "type" : "string",
          "x-samplevalue" : "W/\"CQAAABYAAAD3oQn2LIgZSpCft4VRrD56AAACZU/q\""
        },
        "@odata.id" : {
          "type" : "string",
          "x-samplevalue" : "https://outlook.office.com/api/v2.0/Users('0003bffd-11e0-5f61-0000-000000000000@84df9e7f-e9f6-40af-b435-aaaaaaaaaaaa')/Messages('AQMkADAwATNiZmYAZC0xMQBlMC01ZjYxLTAwAi0wMAoARgAAA3ptkzmErVtFol1E09_uAQwHAPehCfYsiBlKkJ_3hVGsPnoAAAIBCQAAAPehCfYsiBlKkJ_3hVGsPnoAAAACZcN0AAAA')"
        },
        "@odata.type" : {
          "type" : "string",
          "x-samplevalue" : "#Microsoft.OutlookServices.FileAttachment"
        },
        "attachments" : {
          "items" : {
            "$ref" : "#/definitions/AttachmentsResponse"
          },
          "type" : "array"
        },
        "attachments@odata.context" : {
          "type" : "string",
          "x-samplevalue" : "#Microsoft.OutlookServices.FileAttachment"
        },
        "bccRecipients" : {
          "items" : {
            "$ref" : "#/definitions/BccRecipients"
          },
          "type" : "array"
        },
        "body" : {
          "$ref" : "#/definitions/Body"
        },
        "bodyPreview" : {
          "type" : "string",
          "x-samplevalue" : "copy that.\r\n________________________________\r\nFrom: Mayur Dhande <mayur.dhande@gslab.com>\r\nSent: Tuesday, May 22, 2018 10:23:59 AM\r\nTo: Mayur Dhande\r\nSubject: Re: Meet for lunch?1\r\n\r\nokay ?\r\n\r\nThanks and Regards,\r\nMayur Dhande\r\nSoftware Engineer | Mobile:"
        },
        "categories" : {
          "items" : {
            "type" : "string"
          },
          "type" : "array",
          "x-samplevalue" : [ "Snacks" ]
        },
        "ccRecipients" : {
          "items" : {
            "$ref" : "#/definitions/CcRecipients"
          },
          "type" : "array"
        },
        "changeKey" : {
          "type" : "string",
          "x-samplevalue" : "CQAAABYAAAD3oQn2LIgZSpCft4VRrD56AAACZU/q"
        },
        "conversationId" : {
          "type" : "string",
          "x-samplevalue" : "AQQkADAwATNiZmYAZC0xMQBlMC01ZjYxLTAwAi0wMAoAEAA7_l28bBLhRJTV5BK3JGxa"
        },
        "createdDateTime" : {
          "format" : "date-time",
          "type" : "string",
          "x-mask" : "yyyy-MM-dd'T'HH:mm:ssZ",
          "x-samplevalue" : "2018-05-22T10:44:27Z"
        },
        "extensions" : {
          "items" : {
            "$ref" : "#/definitions/ExtensionsResponse"
          },
          "type" : "array"
        },
        "flag" : {
          "$ref" : "#/definitions/Flag"
        },
        "from" : {
          "$ref" : "#/definitions/From"
        },
        "hasAttachments" : {
          "type" : "boolean",
          "x-samplevalue" : false
        },
        "id" : {
          "type" : "string",
          "x-samplevalue" : "AQMkADAwATNiZmYAZC0xMQBlMC01ZjYxLTAwAi0wMAoARgAAA3ptkzmErVtFol1E09_uAQwHAPehCfYsiBlKkJ_3hVGsPnoAAAIBCQAAAPehCfYsiBlKkJ_3hVGsPnoAAAACZcN0AAAA"
        },
        "importance" : {
          "enum" : [ "low", "normal", "high" ],
          "type" : "string",
          "x-samplevalue" : "Normal"
        },
        "inferenceClassification" : {
          "enum" : [ "focused", "other" ],
          "type" : "string",
          "x-samplevalue" : "Focused"
        },
        "internetMessageId" : {
          "type" : "string",
          "x-samplevalue" : "<PN1PR0101MB14088778111755D914EC81AD96940@PN1PR0101MB1408.INDPRD01.PROD.OUTLOOK.COM>"
        },
        "isDeliveryReceiptRequested" : {
          "type" : "boolean",
          "x-samplevalue" : false
        },
        "isDraft" : {
          "type" : "boolean",
          "x-samplevalue" : false
        },
        "isRead" : {
          "type" : "boolean",
          "x-samplevalue" : true
        },
        "isReadReceiptRequested" : {
          "type" : "boolean",
          "x-samplevalue" : false
        },
        "lastModifiedDateTime" : {
          "format" : "date-time",
          "type" : "string",
          "x-mask" : "yyyy-MM-dd'T'HH:mm:ssZ",
          "x-samplevalue" : "2018-05-22T10:44:31Z"
        },
        "meetingMessageType" : {
          "type" : "string",
          "x-samplevalue" : "MeetingRequest"
        },
        "parentFolderId" : {
          "type" : "string",
          "x-samplevalue" : "AQMkADAwATNiZmYAZC0xMQBlMC01ZjYxLTAwAi0wMAoALgAAA3ptkzmErVtFol1E09_uAQwBAPehCfYsiBlKkJ_3hVGsPnoAAAIBCQAAAA=="
        },
        "receivedDateTime" : {
          "format" : "date-time",
          "type" : "string",
          "x-mask" : "yyyy-MM-dd'T'HH:mm:ssZ",
          "x-samplevalue" : "2018-05-22T10:44:31Z"
        },
        "replyTo" : {
          "items" : {
            "$ref" : "#/definitions/ReplyTo"
          },
          "type" : "array"
        },
        "sender" : {
          "$ref" : "#/definitions/Sender"
        },
        "sentDateTime" : {
          "format" : "date-time",
          "type" : "string",
          "x-mask" : "yyyy-MM-dd'T'HH:mm:ssZ",
          "x-samplevalue" : "2018-05-22T10:44:29Z"
        },
        "subject" : {
          "type" : "string",
          "x-name" : true,
          "x-samplevalue" : "RE: Meet for lunch?1"
        },
        "toRecipients" : {
          "items" : {
            "$ref" : "#/definitions/ToRecipients"
          },
          "type" : "array"
        },
        "uniqueBody" : {
          "$ref" : "#/definitions/Body"
        },
        "webLink" : {
          "type" : "string",
          "x-samplevalue" : "https://outlook.live.com/owa/?ItemID=AQMkADAwATNiZmYAZC0xMQBlMC01ZjYxLTAwAi0wMAoARgAAA3ptkzmErVtFol1E09%2BuAQwHAPehCfYsiBlKkJ%2B3hVGsPnoAAAIBCQAAAPehCfYsiBlKkJ%2B3hVGsPnoAAAACZcN0AAAA&exvsurl=1&viewmodel=ReadMessageItem"
        }
      },
      "title" : "messagesResponse",
      "type" : "object",
      "x-has-customfields" : false,
      "x-primary-key" : [ "id" ],
      "x-vendor-objectname" : "Message"
    },
    "BusinessAddress" : {
      "properties" : {
        "City" : {
          "description" : "The City",
          "type" : "string",
          "x-displayName" : "City",
          "x-samplevalue" : "Boston",
          "x-sub-format" : "City"
        },
        "CountryOrRegion" : {
          "description" : "The country or region",
          "type" : "string",
          "x-displayName" : "CountryOrRegion",
          "x-samplevalue" : "United States",
          "x-sub-format" : "Country"
        },
        "PostalCode" : {
          "description" : "The postal code",
          "type" : "string",
          "x-displayName" : "PostalCode",
          "x-samplevalue" : "411045",
          "x-sub-format" : "Postal Code"
        },
        "State" : {
          "description" : "The State",
          "type" : "string",
          "x-displayName" : "State",
          "x-samplevalue" : "Maharashtra",
          "x-sub-format" : "State"
        },
        "Street" : {
          "description" : "The street",
          "type" : "string",
          "x-displayName" : "Street",
          "x-samplevalue" : "Carter Street",
          "x-sub-format" : "Street Name"
        }
      },
      "title" : "BusinessAddress",
      "x-has-customfields" : false,
      "x-vendor-objectname" : "Business Address",
      "type" : "object"
    },
    "calendars" : {
      "properties" : {
        "canEdit" : {
          "type" : "boolean",
          "x-samplevalue" : true
        },
        "canShare" : {
          "type" : "boolean",
          "x-samplevalue" : true
        },
        "canViewPrivateItems" : {
          "type" : "boolean",
          "x-samplevalue" : true
        },
        "changeKey" : {
          "type" : "string",
          "x-samplevalue" : "DxYSthXJXEWwAQSYQnXvIgAAIxGttg=="
        },
        "color" : {
          "type" : "string",
          "x-samplevalue" : "auto"
        },
        "id" : {
          "type" : "string",
          "x-samplevalue" : "AAMkADJmMVAAA="
        },
        "name" : {
          "type" : "string",
          "x-samplevalue" : "Volunteer"
        },
        "owner" : {
          "$ref" : "#/definitions/owner"
        }
      },
      "title" : "calendars",
      "x-has-customfields" : false,
      "x-vendor-object" : "calendars",
      "type" : "object"
    },
    "organizer" : {
      "properties" : {
        "emailAddress" : {
          "$ref" : "#/definitions/organizeremailAddress"
        }
      },
      "title" : "organizer",
      "type" : "object",
      "x-has-customfields" : false,
      "x-vendor-objectname" : "organizer"
    },
    "swaggertags" : {
      "x-has-customfields" : false,
      "title" : "tags",
      "properties" : {
        "name" : {
          "x-samplevalue" : "contacts",
          "type" : "string"
        }
      },
      "type" : "object"
    },
    "contacts" : {
      "properties" : {
        "@odata.etag" : {
          "type" : "string"
        },
        "@odata.id" : {
          "type" : "string"
        },
        "AssistantName" : {
          "description" : "The name of the contact's assistant",
          "type" : "string",
          "x-displayName" : "AssistantName",
          "x-samplevalue" : "Peter"
        },
        "Birthday" : {
          "description" : "The contact's birthday",
          "format" : "date-time",
          "type" : "string",
          "x-displayName" : "Birthday",
          "x-mask" : "yyyy-mm-dd'T'hh:mm:ssZ",
          "x-sub-format" : "Date Time - ISO 8601 +Offset"
        },
        "BusinessAddress" : {
          "description" : "The contact's business address",
          "$ref" : "#/definitions/BusinessAddress"
        },
        "BusinessHomePage" : {
          "description" : "The business home page of the contact",
          "type" : "string",
          "x-displayName" : "BusinessHomePage"
        },
        "BusinessPhones" : {
          "description" : "The contact's business phone numbers",
          "items" : {
            "type" : "string"
          },
          "type" : "array",
          "x-samplevalue" : [ "+1 732 555 0102" ],
          "x-sub-format" : "Phone"
        },
        "Categories" : {
          "description" : "The categories associated with the contact",
          "items" : {
            "type" : "string"
          },
          "type" : "array",
          "x-samplevalue" : [ "HOME" ]
        },
        "ChangeKey" : {
          "description" : "Identifies the version of the contact. Every time the contact is changed, ChangeKey changes as well. This allows Exchange to apply changes to the correct version of the object",
          "type" : "string"
        },
        "Children" : {
          "description" : "The names of the contact's children",
          "items" : {
            "type" : "string"
          },
          "type" : "array",
          "x-samplevalue" : [ "OLIVIA" ]
        },
        "CompanyName" : {
          "description" : "The name of the contact's company",
          "type" : "string",
          "x-samplevalue" : "Alister Co.",
          "x-sub-format" : "Company Name"
        },
        "Department" : {
          "description" : "The contact's department",
          "type" : "string",
          "x-samplevalue" : "Sales"
        },
        "DisplayName" : {
          "description" : "The contact's display name",
          "type" : "string",
          "x-samplevalue" : "Peter"
        },
        "EmailAddresses" : {
          "description" : "The contact's email addresses",
          "items" : {
            "$ref" : "#/definitions/EmailAddresses"
          },
          "type" : "array"
        },
        "FileAs" : {
          "description" : "The name the contact is filed under",
          "type" : "string"
        },
        "Generation" : {
          "description" : "The contact's generation",
          "type" : "string"
        },
        "GivenName" : {
          "description" : "The contact's given name",
          "type" : "string",
          "x-name" : true,
          "x-samplevalue" : "Pavel",
          "x-sub-format" : "Full Name"
        },
        "HomeAddress" : {
          "description" : "The contact's home address",
          "$ref" : "#/definitions/HomeAddress"
        },
        "HomePhones" : {
          "description" : "The contact's home phone numbers",
          "items" : {
            "type" : "string"
          },
          "type" : "array",
          "x-samplevalue" : [ "+1 732 555 0102" ],
          "x-sub-format" : "Phone"
        },
        "Id" : {
          "description" : "The contact's unique identifier",
          "type" : "string",
          "x-readOnly" : true
        },
        "ImAddresses" : {
          "description" : "The contact's instant messaging (IM) addresses",
          "items" : {
            "type" : "string"
          },
          "type" : "array",
          "x-samplevalue" : [ "Peter12" ]
        },
        "Initials" : {
          "description" : "The contact's initials",
          "type" : "string",
          "x-samplevalue" : "Mr."
        },
        "JobTitle" : {
          "description" : "The contact's job title",
          "type" : "string",
          "x-samplevalue" : "SSE",
          "x-sub-format" : "Job Title"
        },
        "Manager" : {
          "description" : "The name of the contact's manager",
          "type" : "string",
          "x-samplevalue" : "Walter B.",
          "x-sub-format" : "Full Name"
        },
        "MiddleName" : {
          "description" : "The contact's middle name",
          "type" : "string",
          "x-samplevalue" : "John"
        },
        "MobilePhone1" : {
          "type" : "string",
          "x-description" : "The contact's mobile phone number",
          "x-samplevalue" : "9876785436",
          "x-sub-format" : "Phone"
        },
        "NickName" : {
          "description" : "The contact's nickname",
          "type" : "string",
          "x-samplevalue" : "PB"
        },
        "OfficeLocation" : {
          "description" : "The location of the contact's office",
          "type" : "string",
          "x-samplevalue" : "Street 1, NY"
        },
        "OtherAddress" : {
          "description" : "Other addresses for the contact",
          "$ref" : "#/definitions/OtherAddress"
        },
        "ParentFolderId" : {
          "description" : "The ID of the contact's parent folder",
          "type" : "string"
        },
        "PersonalNotes" : {
          "description" : "The user's notes about the contact",
          "type" : "string",
          "x-samplevalue" : "Sample notes"
        },
        "Profession" : {
          "description" : "The contact's profession",
          "type" : "string",
          "x-sub-format" : "Doctor"
        },
        "SpouseName" : {
          "description" : "The name of the contact's spouse",
          "type" : "string",
          "x-samplevalue" : "Olivia",
          "x-sub-format" : "Full Name"
        },
        "Surname" : {
          "description" : "The contact's surname",
          "type" : "string",
          "x-samplevalue" : "Bansky",
          "x-sub-format" : "Last Name"
        },
        "Title" : {
          "description" : "The contact's title",
          "type" : "string",
          "x-samplevalue" : "Title"
        },
        "YomiCompanyName" : {
          "description" : "The phonetic Japanese company name of the contact",
          "type" : "string",
          "x-sub-format" : "Company Name"
        },
        "YomiGivenName" : {
          "description" : "The phonetic Japanese given name (first name) of the contact",
          "type" : "string",
          "x-sub-format" : "Full Name"
        },
        "YomiSurname" : {
          "description" : "The phonetic Japanese surname (last name) of the contact",
          "type" : "string",
          "x-sub-format" : "Last Name"
        },
        "createdDateTime" : {
          "description" : "The time the contact was created",
          "format" : "date-time",
          "type" : "string",
          "x-mask" : "yyyy-mm-dd'T'hh:mm:ssZ",
          "x-samplevalue" : "2014-10-22T20:38:18Z",
          "x-sub-format" : "Date Time - ISO 8601 +Offset"
        },
        "lastModifiedDateTime" : {
          "description" : "The time the contact was created",
          "format" : "date-time",
          "type" : "string",
          "x-mask" : "yyyy-mm-dd'T'hh:mm:ssZ",
          "x-samplevalue" : "2014-10-22T20:38:18Z",
          "x-sub-format" : "Date Time - ISO 8601 +Offset"
        }
      },
      "title" : "contacts",
      "x-has-customfields" : false,
      "x-primary-key" : [ "Id" ],
      "x-vendor-objectname" : "Contacts",
      "type" : "object"
    },
    "ToRecipientsForward" : {
      "properties" : {
        "emailAddress" : {
          "$ref" : "#/definitions/EmailAddressForward"
        }
      },
      "title" : "ToRecipientsForward",
      "x-has-customfields" : false,
      "type" : "object"
    },
    "BccRecipientsCreateMessage" : {
      "properties" : {
        "emailAddress" : {
          "$ref" : "#/definitions/EmailAddressMessageCreate"
        }
      },
      "required" : [ "emailAddress" ],
      "title" : "BccRecipients",
      "x-has-customfields" : false,
      "type" : "object"
    },
    "UpdateMessage" : {
      "properties" : {
        "attachments" : {
          "items" : {
            "$ref" : "#/definitions/Attachments"
          },
          "type" : "array"
        },
        "bccRecipients" : {
          "items" : {
            "$ref" : "#/definitions/BccRecipients"
          },
          "type" : "array"
        },
        "body" : {
          "$ref" : "#/definitions/Body"
        },
        "categories" : {
          "items" : {
            "type" : "string"
          },
          "type" : "array",
          "x-samplevalue" : [ "Snacks" ]
        },
        "ccRecipients" : {
          "items" : {
            "$ref" : "#/definitions/CcRecipients"
          },
          "type" : "array"
        },
        "extensions" : {
          "items" : {
            "$ref" : "#/definitions/ExtensionsRequest"
          },
          "type" : "array"
        },
        "importance" : {
          "enum" : [ "0", "1", "2" ],
          "type" : "string",
          "x-samplevalue" : "Normal"
        },
        "inferenceClassification" : {
          "enum" : [ "Focused", "Other" ],
          "type" : "string",
          "x-samplevalue" : "Focused"
        },
        "isDeliveryReceiptRequested" : {
          "type" : "boolean",
          "x-samplevalue" : false
        },
        "isRead" : {
          "type" : "boolean",
          "x-samplevalue" : true
        },
        "isReadReceiptRequested" : {
          "type" : "boolean",
          "x-samplevalue" : false
        },
        "subject" : {
          "type" : "string",
          "x-name" : true,
          "x-samplevalue" : "RE: Meet for lunch?1"
        },
        "toRecipients" : {
          "items" : {
            "$ref" : "#/definitions/ToRecipientsUpdateMessage"
          },
          "type" : "array"
        }
      },
      "title" : "UpdateMessage",
      "x-has-customfields" : false,
      "x-vendor-objectname" : "Message",
      "type" : "object"
    },
    "ToRecipientsEmailAddress" : {
      "properties" : {
        "address" : {
          "type" : "string",
          "x-samplevalue" : "mayur.dhande@gslab.com",
          "x-sub-format" : "email"
        },
        "name" : {
          "type" : "string",
          "x-samplevalue" : "Mayur Dhande"
        }
      },
      "title" : "ToRecipientsEmailAddress",
      "type" : "object",
      "x-has-customfields" : false
    },
    "contactsPatchReq" : {
      "properties" : {
        "AssistantName" : {
          "description" : "The name of the contact's assistant",
          "type" : "string",
          "x-displayName" : "AssistantName",
          "x-samplevalue" : "Peter"
        },
        "Birthday" : {
          "description" : "The contact's birthday",
          "format" : "date-time",
          "type" : "string",
          "x-displayName" : "Birthday",
          "x-sub-format" : "Date Time - ISO 8601 +Offset"
        },
        "BusinessAddress" : {
          "description" : "The contact's business address",
          "$ref" : "#/definitions/BusinessAddress"
        },
        "BusinessHomePage" : {
          "description" : "The business home page of the contact",
          "type" : "string",
          "x-displayName" : "BusinessHomePage"
        },
        "BusinessPhones" : {
          "description" : "The contact's business phone numbers",
          "items" : {
            "type" : "string"
          },
          "type" : "array",
          "x-samplevalue" : [ "+1 732 555 0102" ],
          "x-sub-format" : "Phone"
        },
        "Categories" : {
          "description" : "The categories associated with the contact",
          "items" : {
            "type" : "string"
          },
          "type" : "array",
          "x-samplevalue" : [ "HOME" ]
        },
        "Children" : {
          "description" : "The names of the contact's children",
          "items" : {
            "type" : "string"
          },
          "type" : "array",
          "x-samplevalue" : [ "OLIVIA" ]
        },
        "CompanyName" : {
          "description" : "The name of the contact's company",
          "type" : "string",
          "x-samplevalue" : "Alister Co.",
          "x-sub-format" : "Company Name"
        },
        "Department" : {
          "description" : "The contact's department",
          "type" : "string",
          "x-samplevalue" : "Sales"
        },
        "DisplayName" : {
          "description" : "The contact's display name",
          "type" : "string",
          "x-samplevalue" : "Peter"
        },
        "EmailAddresses" : {
          "description" : "The contact's email addresses",
          "items" : {
            "$ref" : "#/definitions/EmailAddresses"
          },
          "type" : "array"
        },
        "FileAs" : {
          "description" : "The name the contact is filed under",
          "type" : "string"
        },
        "Generation" : {
          "description" : "The contact's generation",
          "type" : "string"
        },
        "GivenName" : {
          "description" : "The contact's given name",
          "type" : "string",
          "x-name" : true,
          "x-samplevalue" : "Pavel",
          "x-sub-format" : "Full Name"
        },
        "HomeAddress" : {
          "description" : "The contact's home address",
          "$ref" : "#/definitions/HomeAddress"
        },
        "HomePhones" : {
          "description" : "The contact's home phone numbers",
          "items" : {
            "type" : "string"
          },
          "type" : "array",
          "x-samplevalue" : [ "+1 732 555 0102" ],
          "x-sub-format" : "Phone"
        },
        "ImAddresses" : {
          "description" : "The contact's instant messaging (IM) addresses",
          "items" : {
            "type" : "string"
          },
          "type" : "array",
          "x-samplevalue" : [ "Peter12" ]
        },
        "Initials" : {
          "description" : "The contact's initials",
          "type" : "string",
          "x-samplevalue" : "Mr."
        },
        "JobTitle" : {
          "description" : "The contact's job title",
          "type" : "string",
          "x-samplevalue" : "SSE",
          "x-sub-format" : "Job Title"
        },
        "Manager" : {
          "description" : "The name of the contact's manager",
          "type" : "string",
          "x-samplevalue" : "Walter B.",
          "x-sub-format" : "Full Name"
        },
        "MiddleName" : {
          "description" : "The contact's middle name",
          "type" : "string",
          "x-samplevalue" : "John"
        },
        "MobilePhone1" : {
          "type" : "string",
          "x-description" : "The contact's mobile phone number",
          "x-samplevalue" : "9876785436",
          "x-sub-format" : "Phone"
        },
        "NickName" : {
          "description" : "The contact's nickname",
          "type" : "string",
          "x-samplevalue" : "PB"
        },
        "OfficeLocation" : {
          "description" : "The location of the contact's office",
          "type" : "string",
          "x-samplevalue" : "Street 1, NY"
        },
        "OtherAddress" : {
          "description" : "Other addresses for the contact",
          "$ref" : "#/definitions/OtherAddress"
        },
        "PersonalNotes" : {
          "description" : "The user's notes about the contact",
          "type" : "string",
          "x-samplevalue" : "Sample notes"
        },
        "Profession" : {
          "description" : "The contact's profession",
          "type" : "string",
          "x-sub-format" : "Doctor"
        },
        "SpouseName" : {
          "description" : "The name of the contact's spouse",
          "type" : "string",
          "x-samplevalue" : "Olivia",
          "x-sub-format" : "Full Name"
        },
        "Surname" : {
          "description" : "The contact's surname",
          "type" : "string",
          "x-samplevalue" : "Bansky",
          "x-sub-format" : "Last Name"
        },
        "Title" : {
          "description" : "The contact's title",
          "type" : "string",
          "x-samplevalue" : "Title"
        },
        "YomiCompanyName" : {
          "description" : "The phonetic Japanese company name of the contact",
          "type" : "string",
          "x-sub-format" : "Company Name"
        },
        "YomiGivenName" : {
          "description" : "The phonetic Japanese given name (first name) of the contact",
          "type" : "string",
          "x-sub-format" : "Full Name"
        },
        "YomiSurname" : {
          "description" : "The phonetic Japanese surname (last name) of the contact",
          "type" : "string",
          "x-sub-format" : "Last Name"
        }
      },
      "title" : "contactsPatchReq",
      "x-has-customfields" : false,
      "x-vendor-objectname" : "Contacts",
      "type" : "object"
    },
    "messagesAttachmentsListObject" : {
      "properties" : {
        "@odata.context" : {
          "type" : "string"
        },
        "@odata.id" : {
          "type" : "string",
          "x-samplevalue" : "https://outlook.office.com/api/v2.0/Users('0003bffd-11e0-5f61-0000-000000000000@84df9e7f-e9f6-40af-b435-aaaaaaaaaaaa')/Messages('AQMkADAwATNiZmYAZC0xMQBlMC01ZjYxLTAwAi0wMAoARgAAA3ptkzmErVtFol1E09_uAQwHAPehCfYsiBlKkJ_3hVGsPnoAAAIBDAAAAPehCfYsiBlKkJ_3hVGsPnoAAAAC120UAAAA')/Attachments('AQMkADAwATNiZmYAZC0xMQBlMC01ZjYxLTAwAi0wMAoARgAAA3ptkzmErVtFol1E09_uAQwHAPehCfYsiBlKkJ_3hVGsPnoAAAIBDAAAAPehCfYsiBlKkJ_3hVGsPnoAAAAC120UAAAAARIAEADESDY7rnA_SZzdcCR54yPp')"
        },
        "@odata.type" : {
          "type" : "string",
          "x-samplevalue" : "#Microsoft.OutlookServices.FileAttachment"
        },
        "contentBytes" : {
          "type" : "string",
          "x-samplevalue" : "/9j/4AAQSkZJRgABAQEAYABgAAD//hCx9odHRwOi8vbnMuYWRvYmUuY29tL3hhcC8xLjAvADw/eHBhY2tldCBiZWdpbj0n77u/JyBpZD0nVzVNME1wQ2VoaUh6cmVTek5UY3prYzlkJKeM4JrM0PQtGvfhFHeDw9qGp6pNrv2Q/YbgCZwsDSAJ+6fCBScqASSNxbAAE+2j0K9m+p5zRXo3gf4cWXiKx00a1cPYzaABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFAH1n8FB/wAWj0T/AHZ//SiWu92ruLbRuIAJxyQOg/U/nRRXgVf4kvVnrU/gXoed+Nv+Rkuv+vW0/wDQrmiiisyz/9k="
        },
        "contentId" : {
          "type" : "string",
          "x-samplevalue" : "ii_jhiwqs880_1638c559b4465942"
        },
        "contentLocation" : {
          "type" : "string"
        },
        "contentType" : {
          "type" : "string",
          "x-samplevalue" : "image/jpeg"
        },
        "id" : {
          "type" : "string",
          "x-samplevalue" : "AQMkADAwATNiZmYAZC0xMQBlMC01ZjYxLTAwAi0wMAoARgAAA3ptkzmErVtFol1E09_uAQwHAPehCfYsiBlKkJ_3hVGsPnoAAAIBDAAAAPehCfYsiBlKkJ_3hVGsPnoAAAAC120UAAAAARIAEADESDY7rnA_SZzdcCR54yPp"
        },
        "isFolder" : {
          "type" : "boolean",
          "x-samplevalue" : false
        },
        "isInline" : {
          "type" : "boolean",
          "x-samplevalue" : true
        },
        "lastModifiedDateTime" : {
          "format" : "date-time",
          "type" : "string",
          "x-mask" : "yyyy-MM-dd'T'HH:mm:ssZ",
          "x-samplevalue" : "2018-05-23T09:30:19Z"
        },
        "name" : {
          "type" : "string",
          "x-samplevalue" : "fail 2.JPG"
        },
        "permission" : {
          "type" : "string"
        },
        "providerType" : {
          "type" : "string"
        },
        "size" : {
          "format" : "int32",
          "type" : "integer",
          "x-samplevalue" : 231962
        },
        "sourceUrl" : {
          "type" : "string"
        }
      },
      "title" : "messagesAttachmentsListObject",
      "type" : "object",
      "x-has-customfields" : false,
      "x-primary-key" : [ "id" ],
      "x-vendor-objectname" : "Attachment"
    },
    "contactsPatchRes" : {
      "properties" : {
        "@odata.context" : {
          "type" : "string"
        },
        "@odata.etag" : {
          "type" : "string"
        },
        "@odata.id" : {
          "type" : "string"
        },
        "AssistantName" : {
          "description" : "The name of the contact's assistant",
          "type" : "string",
          "x-displayName" : "AssistantName",
          "x-samplevalue" : "Peter"
        },
        "Birthday" : {
          "description" : "The contact's birthday",
          "format" : "date-time",
          "type" : "string",
          "x-displayName" : "Birthday",
          "x-mask" : "yyyy-mm-dd'T'hh:mm:ssZ",
          "x-sub-format" : "Date Time - ISO 8601 +Offset"
        },
        "BusinessAddress" : {
          "description" : "The contact's business address",
          "$ref" : "#/definitions/BusinessAddress"
        },
        "BusinessHomePage" : {
          "description" : "The business home page of the contact",
          "type" : "string",
          "x-displayName" : "BusinessHomePage"
        },
        "BusinessPhones" : {
          "description" : "The contact's business phone numbers",
          "items" : {
            "type" : "string"
          },
          "type" : "array",
          "x-samplevalue" : [ "+1 732 555 0102" ],
          "x-sub-format" : "Phone"
        },
        "Categories" : {
          "description" : "The categories associated with the contact",
          "items" : {
            "type" : "string"
          },
          "type" : "array",
          "x-samplevalue" : [ "HOME" ]
        },
        "ChangeKey" : {
          "description" : "Identifies the version of the contact. Every time the contact is changed, ChangeKey changes as well. This allows Exchange to apply changes to the correct version of the object",
          "type" : "string"
        },
        "Children" : {
          "description" : "The names of the contact's children",
          "items" : {
            "type" : "string"
          },
          "type" : "array",
          "x-samplevalue" : [ "OLIVIA" ]
        },
        "CompanyName" : {
          "description" : "The name of the contact's company",
          "type" : "string",
          "x-samplevalue" : "Alister Co.",
          "x-sub-format" : "Company Name"
        },
        "Department" : {
          "description" : "The contact's department",
          "type" : "string",
          "x-samplevalue" : "Sales"
        },
        "DisplayName" : {
          "description" : "The contact's display name",
          "type" : "string",
          "x-samplevalue" : "Peter"
        },
        "EmailAddresses" : {
          "description" : "The contact's email addresses",
          "items" : {
            "$ref" : "#/definitions/EmailAddresses"
          },
          "type" : "array"
        },
        "FileAs" : {
          "description" : "The name the contact is filed under",
          "type" : "string"
        },
        "Generation" : {
          "description" : "The contact's generation",
          "type" : "string"
        },
        "GivenName" : {
          "description" : "The contact's given name",
          "type" : "string",
          "x-name" : true,
          "x-samplevalue" : "Pavel",
          "x-sub-format" : "Full Name"
        },
        "HomeAddress" : {
          "description" : "The contact's home address",
          "$ref" : "#/definitions/HomeAddress"
        },
        "HomePhones" : {
          "description" : "The contact's home phone numbers",
          "items" : {
            "type" : "string"
          },
          "type" : "array",
          "x-samplevalue" : [ "+1 732 555 0102" ],
          "x-sub-format" : "Phone"
        },
        "Id" : {
          "description" : "The contact's unique identifier",
          "type" : "string",
          "x-readOnly" : true
        },
        "ImAddresses" : {
          "description" : "The contact's instant messaging (IM) addresses",
          "items" : {
            "type" : "string"
          },
          "type" : "array",
          "x-samplevalue" : [ "Peter12" ]
        },
        "Initials" : {
          "description" : "The contact's initials",
          "type" : "string",
          "x-samplevalue" : "Mr."
        },
        "JobTitle" : {
          "description" : "The contact's job title",
          "type" : "string",
          "x-samplevalue" : "SSE",
          "x-sub-format" : "Job Title"
        },
        "Manager" : {
          "description" : "The name of the contact's manager",
          "type" : "string",
          "x-samplevalue" : "Walter B.",
          "x-sub-format" : "Full Name"
        },
        "MiddleName" : {
          "description" : "The contact's middle name",
          "type" : "string",
          "x-samplevalue" : "John"
        },
        "MobilePhone1" : {
          "type" : "string",
          "x-description" : "The contact's mobile phone number",
          "x-samplevalue" : "9876785436",
          "x-sub-format" : "Phone"
        },
        "NickName" : {
          "description" : "The contact's nickname",
          "type" : "string",
          "x-samplevalue" : "PB"
        },
        "OfficeLocation" : {
          "description" : "The location of the contact's office",
          "type" : "string",
          "x-samplevalue" : "Street 1, NY"
        },
        "OtherAddress" : {
          "description" : "Other addresses for the contact",
          "$ref" : "#/definitions/OtherAddress"
        },
        "ParentFolderId" : {
          "description" : "The ID of the contact's parent folder",
          "type" : "string"
        },
        "PersonalNotes" : {
          "description" : "The user's notes about the contact",
          "type" : "string",
          "x-samplevalue" : "Sample notes"
        },
        "Profession" : {
          "description" : "The contact's profession",
          "type" : "string",
          "x-sub-format" : "Doctor"
        },
        "SpouseName" : {
          "description" : "The name of the contact's spouse",
          "type" : "string",
          "x-samplevalue" : "Olivia",
          "x-sub-format" : "Full Name"
        },
        "Surname" : {
          "description" : "The contact's surname",
          "type" : "string",
          "x-samplevalue" : "Bansky",
          "x-sub-format" : "Last Name"
        },
        "Title" : {
          "description" : "The contact's title",
          "type" : "string",
          "x-samplevalue" : "Title"
        },
        "YomiCompanyName" : {
          "description" : "The phonetic Japanese company name of the contact",
          "type" : "string",
          "x-sub-format" : "Company Name"
        },
        "YomiGivenName" : {
          "description" : "The phonetic Japanese given name (first name) of the contact",
          "type" : "string",
          "x-sub-format" : "Full Name"
        },
        "YomiSurname" : {
          "description" : "The phonetic Japanese surname (last name) of the contact",
          "type" : "string",
          "x-sub-format" : "Last Name"
        },
        "createdDateTime" : {
          "description" : "The time the contact was created",
          "format" : "date-time",
          "type" : "string",
          "x-mask" : "yyyy-mm-dd'T'hh:mm:ssZ",
          "x-samplevalue" : "2014-10-22T20:38:18Z",
          "x-sub-format" : "Date Time - ISO 8601 +Offset"
        },
        "lastModifiedDateTime" : {
          "description" : "The time the contact was created",
          "format" : "date-time",
          "type" : "string",
          "x-mask" : "yyyy-mm-dd'T'hh:mm:ssZ",
          "x-samplevalue" : "2014-10-22T20:38:18Z",
          "x-sub-format" : "Date Time - ISO 8601 +Offset"
        }
      },
      "title" : "contactsPatchRes",
      "x-has-customfields" : false,
      "x-primary-key" : [ "Id" ],
      "x-vendor-objectname" : "Contacts",
      "type" : "object"
    },
    "body" : {
      "properties" : {
        "content" : {
          "type" : "string",
          "x-samplevalue" : "<html><head></head><body><p>Dana, this is the time you selected for our orientation. Please bring the notes I sent you.</p></body></html>"
        },
        "contentType" : {
          "type" : "string",
          "x-samplevalue" : "html"
        }
      },
      "title" : "body",
      "type" : "object",
      "x-has-customfields" : false,
      "x-vendor-objectname" : "body"
    },
    "CcRecipientsCreateMessage" : {
      "properties" : {
        "emailAddress" : {
          "$ref" : "#/definitions/EmailAddressMessageCreate"
        }
      },
      "required" : [ "emailAddress" ],
      "title" : "CcRecipients",
      "x-has-customfields" : false,
      "type" : "object"
    },
    "EmailAddressForward" : {
      "properties" : {
        "address" : {
          "type" : "string",
          "x-samplevalue" : "katiej@a830edad9050849NDA1.onmicrosoft.com"
        },
        "name" : {
          "type" : "string",
          "x-samplevalue" : "Mayur Dhande"
        }
      },
      "required" : [ "address" ],
      "title" : "EmailAddressForward",
      "type" : "object",
      "x-has-customfields" : false
    },
    "calendarsEventsListGet" : {
      "properties" : {
        "attendees" : {
          "items" : {
            "$ref" : "#/definitions/attendees"
          },
          "type" : "array"
        },
        "body" : {
          "$ref" : "#/definitions/body"
        },
        "bodyPreview" : {
          "type" : "string",
          "x-samplevalue" : "Dana, this is the time you selected for our orientation. Please bring the notes I sent you."
        },
        "end" : {
          "$ref" : "#/definitions/end"
        },
        "id" : {
          "type" : "string",
          "x-samplevalue" : "AAMkAGIAAAoZDOFAAA="
        },
        "location" : {
          "$ref" : "#/definitions/location"
        },
        "organizer" : {
          "$ref" : "#/definitions/organizer"
        },
        "start" : {
          "$ref" : "#/definitions/start"
        },
        "subject" : {
          "type" : "string",
          "x-samplevalue" : "Orientation "
        }
      },
      "title" : "calendarsEventsList",
      "x-has-customfields" : false,
      "x-vendor-objectname" : "events",
      "type" : "object"
    },
    "swaggerparameters" : {
      "x-has-customfields" : false,
      "title" : "parameters",
      "properties" : {
        "schema" : {
          "$ref" : "#/definitions/swaggerparametersschema"
        },
        "in" : {
          "x-samplevalue" : "header",
          "type" : "string"
        },
        "name" : {
          "x-samplevalue" : "Authorization",
          "type" : "string"
        },
        "description" : {
          "x-samplevalue" : "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
          "type" : "string"
        },
        "type" : {
          "x-samplevalue" : "string",
          "type" : "string"
        },
        "required" : {
          "x-samplevalue" : true,
          "type" : "boolean"
        }
      },
      "type" : "object"
    },
    "ReplyTo" : {
      "properties" : {
        "emailAddress" : {
          "$ref" : "#/definitions/EmailAddress"
        }
      },
      "title" : "ReplyTo",
      "x-has-customfields" : false,
      "type" : "object"
    },
    "messagesReplyall" : {
      "properties" : {
        "comment" : {
          "type" : "string",
          "x-samplevalue" : "FYI"
        }
      },
      "title" : "messagesReplyall",
      "x-has-customfields" : false,
      "x-vendor-objectname" : "Replyall",
      "type" : "object"
    },
    "emailAddress" : {
      "properties" : {
        "address" : {
          "type" : "string",
          "x-samplevalue" : "samanthab@a830edad905084922E17020313.onmicrosoft.com"
        },
        "name" : {
          "type" : "string",
          "x-samplevalue" : "Samantha Booth"
        }
      },
      "title" : "emailAddress",
      "type" : "object",
      "x-has-customfields" : false,
      "x-vendor-objectname" : "emailAddress"
    },
    "CreateMessagesAttachments" : {
      "properties" : {
        "@odata.type" : {
          "type" : "string",
          "x-samplevalue" : "#Microsoft.OutlookServices.FileAttachment"
        },
        "contentBytes" : {
          "type" : "string",
          "x-conditional-required" : "Required when @odata.type is #Microsoft.OutlookServices.FileAttachment"
        },
        "isFolder" : {
          "type" : "boolean"
        },
        "name" : {
          "type" : "string",
          "x-samplevalue" : "fail 2.JPG"
        },
        "permission" : {
          "type" : "string"
        },
        "providerType" : {
          "type" : "string"
        },
        "sourceUrl" : {
          "type" : "string",
          "x-conditional-required" : "Required when @odata.type is #Microsoft.OutlookServices.ReferenceAttachment",
          "x-samplevalue" : "https://contoso-my.spoppe.com/personal/danas_contoso_onmicrosoft_com/Documents/Pics/koala.jpg"
        }
      },
      "required" : [ "@odata.type", "name" ],
      "title" : "CreateMessagesAttachments",
      "x-has-customfields" : false,
      "x-vendor-objectname" : "Attachment",
      "type" : "object"
    },
    "BccRecipientsEmailAddress" : {
      "properties" : {
        "address" : {
          "type" : "string",
          "x-samplevalue" : "afrin.chakure@gslab.com",
          "x-sub-format" : "email"
        },
        "name" : {
          "type" : "string",
          "x-samplevalue" : "Afrin Chakure"
        }
      },
      "title" : "BccRecipientsEmailAddress",
      "type" : "object",
      "x-has-customfields" : false
    },
    "SenderCreateMessage" : {
      "properties" : {
        "emailAddress" : {
          "$ref" : "#/definitions/SenderEmailAddressCreateMessage"
        }
      },
      "title" : "Sender",
      "type" : "object",
      "x-has-customfields" : false
    },
    "swagger200" : {
      "x-has-customfields" : false,
      "type" : "object",
      "title" : "200",
      "properties" : {
        "schema" : {
          "$ref" : "#/definitions/swaggerschema"
        },
        "description" : {
          "x-samplevalue" : "OK - Everything worked as expected",
          "type" : "string"
        }
      }
    },
    "EmailAddressMessageCreate" : {
      "properties" : {
        "address" : {
          "type" : "string",
          "x-samplevalue" : "mayur.dhande@gslab.com",
          "x-sub-format" : "email"
        },
        "name" : {
          "type" : "string",
          "x-samplevalue" : "Mayur Dhande"
        }
      },
      "required" : [ "address" ],
      "title" : "EmailAddressMessageCreate",
      "type" : "object",
      "x-has-customfields" : false
    },
    "FromCreateMessage" : {
      "properties" : {
        "emailAddress" : {
          "$ref" : "#/definitions/FromEmailAddressCreateMessage"
        }
      },
      "title" : "From",
      "type" : "object",
      "x-has-customfields" : false
    },
    "Flag" : {
      "properties" : {
        "flagStatus" : {
          "type" : "string",
          "x-samplevalue" : "NotFlagged"
        }
      },
      "title" : "Flag",
      "type" : "object",
      "x-has-customfields" : false
    },
    "ToRecipientsCreateMessage" : {
      "properties" : {
        "emailAddress" : {
          "$ref" : "#/definitions/EmailAddressMessageCreate"
        }
      },
      "required" : [ "emailAddress" ],
      "title" : "ToRecipients",
      "x-has-customfields" : false,
      "type" : "object"
    },
    "EmailAddresses" : {
      "properties" : {
        "Address" : {
          "description" : "The email address of the person or entity",
          "type" : "string",
          "x-samplevalue" : "pavelb@a830edad9050849NDA1.onmicrosoft.com"
        },
        "Name" : {
          "description" : "The display name of the person or entity",
          "type" : "string",
          "x-samplevalue" : "Pavel Bansky"
        }
      },
      "title" : "EmailAddresses",
      "x-has-customfields" : false,
      "x-vendor-objectname" : "EmailAddress",
      "type" : "object"
    },
    "OtherAddress" : {
      "properties" : {
        "City" : {
          "description" : "The City",
          "type" : "string",
          "x-displayName" : "City",
          "x-samplevalue" : "Boston",
          "x-sub-format" : "City"
        },
        "CountryOrRegion" : {
          "description" : "The country or region",
          "type" : "string",
          "x-displayName" : "CountryOrRegion",
          "x-samplevalue" : "United States",
          "x-sub-format" : "Country"
        },
        "PostalCode" : {
          "description" : "The postal code",
          "type" : "string",
          "x-displayName" : "PostalCode",
          "x-samplevalue" : "411045",
          "x-sub-format" : "Postal Code"
        },
        "State" : {
          "description" : "The State",
          "type" : "string",
          "x-displayName" : "State",
          "x-samplevalue" : "Maharashtra",
          "x-sub-format" : "State"
        },
        "Street" : {
          "description" : "The street",
          "type" : "string",
          "x-displayName" : "Street",
          "x-samplevalue" : "Carter Street",
          "x-sub-format" : "Street Name"
        }
      },
      "title" : "OtherAddress",
      "x-has-customfields" : false,
      "x-vendor-objectname" : "OtherAddress",
      "type" : "object"
    },
    "ToRecipientsUpdateMessage" : {
      "properties" : {
        "emailAddress" : {
          "$ref" : "#/definitions/EmailAddress"
        }
      },
      "title" : "ToRecipientsUpdateMessage",
      "x-has-customfields" : false,
      "type" : "object"
    },
    "AttachmentsResponse" : {
      "properties" : {
        "@odata.context" : {
          "type" : "string"
        },
        "@odata.type" : {
          "type" : "string",
          "x-samplevalue" : "#Microsoft.OutlookServices.FileAttachment"
        },
        "contentBytes" : {
          "type" : "string",
          "x-samplevalue" : "01001000 01101001 00100000 01001000 01101111 01110111 00100000 01100001 01110010 01100101 00100000 01111001 01101111 01110101"
        },
        "id" : {
          "type" : "string",
          "x-samplevalue" : "AQMkADAwATNiZmYAZC0xMQBlMC01ZjYxLTAwAi0wMAoARgAAA3ptkzmErVtFol1E09_uAQwHAPehCfYsiBlKkJ_3hVGsPnoAAAIBCQAAAPehCfYsiBlKkJ_3hVGsPnoAAAACZcN0AAAA"
        },
        "isInline" : {
          "type" : "boolean",
          "x-samplevalue" : false
        },
        "name" : {
          "type" : "string",
          "x-samplevalue" : "menu.txt"
        },
        "size" : {
          "format" : "int32",
          "type" : "integer"
        }
      },
      "title" : "AttachmentsResponse",
      "x-has-customfields" : false,
      "type" : "object"
    },
    "objectsMetadata" : {
      "properties" : {
        "fields" : {
          "items" : {
            "$ref" : "#/definitions/objectsMetadataFields"
          },
          "type" : "array"
        }
      },
      "type" : "object"
    },
    "swaggerschema" : {
      "x-has-customfields" : false,
      "type" : "object",
      "title" : "schema",
      "properties" : {
        "$ref" : {
          "x-samplevalue" : "#/definitions/Contact-POST-Response",
          "type" : "string"
        }
      }
    },
    "swagger415" : {
      "x-has-customfields" : false,
      "type" : "object",
      "title" : "415",
      "properties" : {
        "description" : {
          "x-samplevalue" : "Unsupported media type - The server cannot handle the requested Content-Type",
          "type" : "string"
        }
      }
    },
    "Attachments" : {
      "properties" : {
        "@odata.type" : {
          "type" : "string",
          "x-samplevalue" : "#Microsoft.OutlookServices.FileAttachment"
        },
        "contentBytes" : {
          "type" : "string",
          "x-samplevalue" : "01001000 01101001 00100000 01001000 01101111 01110111 00100000 01100001 01110010 01100101 00100000 01111001 01101111 01110101"
        },
        "name" : {
          "type" : "string",
          "x-samplevalue" : "menu.txt"
        }
      },
      "title" : "Attachments",
      "x-has-customfields" : false,
      "type" : "object"
    },
    "swaggerparametersschema" : {
      "x-has-customfields" : false,
      "type" : "object",
      "title" : "schema",
      "properties" : {
        "$ref" : {
          "x-samplevalue" : "#/definitions/Contact",
          "type" : "string"
        }
      }
    },
    "swaggerresponses" : {
      "x-has-customfields" : false,
      "type" : "object",
      "title" : "responses",
      "properties" : {
        "200" : {
          "$ref" : "#/definitions/swagger200"
        },
        "400" : {
          "$ref" : "#/definitions/swagger400"
        },
        "401" : {
          "$ref" : "#/definitions/swagger401"
        },
        "403" : {
          "$ref" : "#/definitions/swagger403"
        },
        "404" : {
          "$ref" : "#/definitions/swagger404"
        },
        "405" : {
          "$ref" : "#/definitions/swagger405"
        },
        "406" : {
          "$ref" : "#/definitions/swagger406"
        },
        "409" : {
          "$ref" : "#/definitions/swagger409"
        },
        "415" : {
          "$ref" : "#/definitions/swagger415"
        },
        "500" : {
          "$ref" : "#/definitions/swagger500"
        },
        "502" : {
          "$ref" : "#/definitions/swagger502"
        }
      }
    },
    "swaggerproperties" : {
      "x-has-customfields" : false,
      "type" : "object",
      "title" : "properties",
      "properties" : {
        "definition-property" : {
          "$ref" : "#/definitions/swaggerdefinition-property"
        }
      }
    },
    "calendarsPatch" : {
      "properties" : {
        "name" : {
          "type" : "string",
          "x-samplevalue" : "example"
        }
      },
      "required" : [ "name" ],
      "title" : "calendarsPatch",
      "x-has-customfields" : false,
      "type" : "object"
    },
    "end" : {
      "properties" : {
        "dateTime" : {
          "type" : "string",
          "x-samplevalue" : "2017-04-21T12:00:00.0000000"
        },
        "timeZone" : {
          "type" : "string",
          "x-samplevalue" : "Pacific Standard Time"
        }
      },
      "title" : "end",
      "type" : "object",
      "x-has-customfields" : false,
      "x-vendor-objectname" : "end"
    },
    "Body" : {
      "properties" : {
        "content" : {
          "type" : "string",
          "x-samplevalue" : "<html>\r\n<head>\r\n<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\">\r\n<meta content=\"text/html; charset=us-ascii\">\r\n<meta content=\"text/html; charset=utf-8\">\r\n</head>\r\n<body>\r\ncopy that.\r\n<hr tabindex=\"-1\" style=\"display:inline-block; width:98%\">\r\n<div id=\"divRplyFwdMsg\" dir=\"ltr\">\r\n<div>&nbsp;</div>\r\n</div>\r\n<div>\r\n<div dir=\"ltr\">okay ?</div><div><span style=\"color:rgb(136,136,136); font-size:12.8px\">Thanks and Regards,</span></div>\r\n<div dir=\"ltr\"><b style=\"color:rgb(136,136,136); font-size:12.8px\">Jamws S</b> wrote:<br>\r\n<blockquote class=\"gmail_quote\" style=\"margin:0 0 0 .8ex; border-left:1px #ccc solid; padding-left:1ex\">\r\nThe new cafeteria is open.</blockquote>\r\n</div>\r\n<br>\r\n</div>\r\n</blockquote>\r\n</div>\r\n<br>\r\n</div>\r\n</div>\r\n</body>\r\n</html>\r\n"
        },
        "contentType" : {
          "type" : "string",
          "x-samplevalue" : "HTML"
        }
      },
      "title" : "Body",
      "type" : "object",
      "x-has-customfields" : false
    },
    "owner" : {
      "properties" : {
        "address" : {
          "type" : "string",
          "x-samplevalue" : "samanthab@adatum.onmicrosoft.com"
        },
        "name" : {
          "type" : "string",
          "x-samplevalue" : "Samantha Booth"
        }
      },
      "title" : "owner",
      "type" : "object",
      "x-has-customfields" : false,
      "x-vendor-object" : "owner"
    },
    "contactsPostRes" : {
      "properties" : {
        "@odata.context" : {
          "type" : "string"
        },
        "@odata.etag" : {
          "type" : "string"
        },
        "@odata.id" : {
          "type" : "string"
        },
        "AssistantName" : {
          "description" : "The name of the contact's assistant",
          "type" : "string",
          "x-displayName" : "AssistantName",
          "x-samplevalue" : "Peter"
        },
        "Birthday" : {
          "description" : "The contact's birthday",
          "format" : "date-time",
          "type" : "string",
          "x-displayName" : "Birthday",
          "x-mask" : "yyyy-mm-ddThh:mm:ssZ",
          "x-sub-format" : "Date Time - ISO 8601 +Offset"
        },
        "BusinessAddress" : {
          "description" : "The contact's business address",
          "$ref" : "#/definitions/BusinessAddress"
        },
        "BusinessHomePage" : {
          "description" : "The business home page of the contact",
          "type" : "string",
          "x-displayName" : "BusinessHomePage"
        },
        "BusinessPhones" : {
          "description" : "The contact's business phone numbers",
          "items" : {
            "type" : "string"
          },
          "type" : "array",
          "x-samplevalue" : [ "+1 732 555 0102" ],
          "x-sub-format" : "Phone"
        },
        "Categories" : {
          "description" : "The categories associated with the contact",
          "items" : {
            "type" : "string"
          },
          "type" : "array",
          "x-samplevalue" : [ "HOME" ]
        },
        "ChangeKey" : {
          "description" : "Identifies the version of the contact. Every time the contact is changed, ChangeKey changes as well. This allows Exchange to apply changes to the correct version of the object",
          "type" : "string"
        },
        "Children" : {
          "description" : "The names of the contact's children",
          "items" : {
            "type" : "string"
          },
          "type" : "array",
          "x-samplevalue" : [ "OLIVIA" ]
        },
        "CompanyName" : {
          "description" : "The name of the contact's company",
          "type" : "string",
          "x-samplevalue" : "Alister Co.",
          "x-sub-format" : "Company Name"
        },
        "Department" : {
          "description" : "The contact's department",
          "type" : "string",
          "x-samplevalue" : "Sales"
        },
        "DisplayName" : {
          "description" : "The contact's display name",
          "type" : "string",
          "x-samplevalue" : "Peter"
        },
        "EmailAddresses" : {
          "description" : "The contact's email addresses",
          "items" : {
            "$ref" : "#/definitions/EmailAddresses"
          },
          "type" : "array"
        },
        "FileAs" : {
          "description" : "The name the contact is filed under",
          "type" : "string"
        },
        "Generation" : {
          "description" : "The contact's generation",
          "type" : "string"
        },
        "GivenName" : {
          "description" : "The contact's given name",
          "type" : "string",
          "x-name" : true,
          "x-samplevalue" : "Pavel",
          "x-sub-format" : "Full Name"
        },
        "HomeAddress" : {
          "description" : "The contact's home address",
          "$ref" : "#/definitions/HomeAddress"
        },
        "HomePhones" : {
          "description" : "The contact's home phone numbers",
          "items" : {
            "type" : "string"
          },
          "type" : "array",
          "x-samplevalue" : [ "+1 732 555 0102" ],
          "x-sub-format" : "Phone"
        },
        "Id" : {
          "description" : "The contact's unique identifier",
          "type" : "string",
          "x-readOnly" : true
        },
        "ImAddresses" : {
          "description" : "The contact's instant messaging (IM) addresses",
          "items" : {
            "type" : "string"
          },
          "type" : "array",
          "x-samplevalue" : [ "Peter12" ]
        },
        "Initials" : {
          "description" : "The contact's initials",
          "type" : "string",
          "x-samplevalue" : "Mr."
        },
        "JobTitle" : {
          "description" : "The contact's job title",
          "type" : "string",
          "x-samplevalue" : "SSE",
          "x-sub-format" : "Job Title"
        },
        "Manager" : {
          "description" : "The name of the contact's manager",
          "type" : "string",
          "x-samplevalue" : "Walter B.",
          "x-sub-format" : "Full Name"
        },
        "MiddleName" : {
          "description" : "The contact's middle name",
          "type" : "string",
          "x-samplevalue" : "John"
        },
        "MobilePhone1" : {
          "type" : "string",
          "x-description" : "The contact's mobile phone number",
          "x-samplevalue" : "9876785436",
          "x-sub-format" : "Phone"
        },
        "NickName" : {
          "description" : "The contact's nickname",
          "type" : "string",
          "x-samplevalue" : "PB"
        },
        "OfficeLocation" : {
          "description" : "The location of the contact's office",
          "type" : "string",
          "x-samplevalue" : "Street 1, NY"
        },
        "OtherAddress" : {
          "description" : "Other addresses for the contact",
          "$ref" : "#/definitions/OtherAddress"
        },
        "ParentFolderId" : {
          "description" : "The ID of the contact's parent folder",
          "type" : "string"
        },
        "PersonalNotes" : {
          "description" : "The user's notes about the contact",
          "type" : "string",
          "x-samplevalue" : "Sample notes"
        },
        "Profession" : {
          "description" : "The contact's profession",
          "type" : "string",
          "x-sub-format" : "Doctor"
        },
        "SpouseName" : {
          "description" : "The name of the contact's spouse",
          "type" : "string",
          "x-samplevalue" : "Olivia",
          "x-sub-format" : "Full Name"
        },
        "Surname" : {
          "description" : "The contact's surname",
          "type" : "string",
          "x-samplevalue" : "Bansky",
          "x-sub-format" : "Last Name"
        },
        "Title" : {
          "description" : "The contact's title",
          "type" : "string",
          "x-samplevalue" : "Title"
        },
        "YomiCompanyName" : {
          "description" : "The phonetic Japanese company name of the contact",
          "type" : "string",
          "x-sub-format" : "Company Name"
        },
        "YomiGivenName" : {
          "description" : "The phonetic Japanese given name (first name) of the contact",
          "type" : "string",
          "x-sub-format" : "Full Name"
        },
        "YomiSurname" : {
          "description" : "The phonetic Japanese surname (last name) of the contact",
          "type" : "string",
          "x-sub-format" : "Last Name"
        },
        "createdDateTime" : {
          "description" : "The time the contact was created",
          "format" : "date-time",
          "type" : "string",
          "x-mask" : "yyyy-mm-dd'T'hh:mm:ssZ",
          "x-samplevalue" : "2014-10-22T20:38:18Z",
          "x-sub-format" : "Date Time - ISO 8601 +Offset"
        },
        "lastModifiedDateTime" : {
          "description" : "The time the contact was created",
          "format" : "date-time",
          "type" : "string",
          "x-mask" : "yyyy-mm-dd'T'hh:mm:ssZ",
          "x-samplevalue" : "2014-10-22T20:38:18Z",
          "x-sub-format" : "Date Time - ISO 8601 +Offset"
        }
      },
      "title" : "contactsPostRes",
      "x-has-customfields" : false,
      "x-primary-key" : [ "Id" ],
      "x-vendor-objectname" : "Contacts",
      "type" : "object"
    },
    "swaggerinfo" : {
      "x-has-customfields" : false,
      "type" : "object",
      "title" : "info",
      "properties" : {
        "contact" : {
          "$ref" : "#/definitions/swaggercontact"
        },
        "title" : {
          "x-samplevalue" : "hubspotcrm",
          "type" : "string"
        },
        "version" : {
          "x-samplevalue" : "api-v2",
          "type" : "string"
        }
      }
    },
    "contactsPostReq" : {
      "properties" : {
        "AssistantName" : {
          "description" : "The name of the contact's assistant",
          "type" : "string",
          "x-displayName" : "AssistantName",
          "x-samplevalue" : "Peter"
        },
        "Birthday" : {
          "description" : "The contact's birthday",
          "format" : "date-time",
          "type" : "string",
          "x-displayName" : "Birthday",
          "x-mask" : "yyyy-mm-ddThh:mm:ssZ",
          "x-samplevalue" : "2018-08-07T06:45:27Z",
          "x-sub-format" : "Date Time - ISO 8601 +Offset"
        },
        "BusinessAddress" : {
          "description" : "The contact's business address",
          "$ref" : "#/definitions/BusinessAddress"
        },
        "BusinessHomePage" : {
          "description" : "The business home page of the contact",
          "type" : "string",
          "x-displayName" : "BusinessHomePage"
        },
        "BusinessPhones" : {
          "description" : "The contact's business phone numbers",
          "items" : {
            "type" : "string"
          },
          "type" : "array",
          "x-samplevalue" : [ "+1 732 555 0102" ],
          "x-sub-format" : "Phone"
        },
        "Categories" : {
          "description" : "The categories associated with the contact",
          "items" : {
            "type" : "string"
          },
          "type" : "array",
          "x-samplevalue" : [ "HOME" ]
        },
        "Children" : {
          "description" : "The names of the contact's children",
          "items" : {
            "type" : "string"
          },
          "type" : "array",
          "x-samplevalue" : [ "OLIVIA" ]
        },
        "CompanyName" : {
          "description" : "The name of the contact's company",
          "type" : "string",
          "x-samplevalue" : "Alister Co.",
          "x-sub-format" : "Company Name"
        },
        "Department" : {
          "description" : "The contact's department",
          "type" : "string",
          "x-samplevalue" : "Sales"
        },
        "DisplayName" : {
          "description" : "The contact's display name",
          "type" : "string",
          "x-samplevalue" : "Peter"
        },
        "EmailAddresses" : {
          "description" : "The contact's email addresses",
          "items" : {
            "$ref" : "#/definitions/EmailAddresses"
          },
          "type" : "array"
        },
        "FileAs" : {
          "description" : "The name the contact is filed under",
          "type" : "string"
        },
        "Generation" : {
          "description" : "The contact's generation",
          "type" : "string"
        },
        "GivenName" : {
          "description" : "The contact's given name",
          "type" : "string",
          "x-name" : true,
          "x-samplevalue" : "Pavel",
          "x-sub-format" : "Full Name"
        },
        "HomeAddress" : {
          "description" : "The contact's home address",
          "$ref" : "#/definitions/HomeAddress"
        },
        "HomePhones" : {
          "description" : "The contact's home phone numbers",
          "items" : {
            "type" : "string"
          },
          "type" : "array",
          "x-samplevalue" : [ "+1 732 555 0102" ],
          "x-sub-format" : "Phone"
        },
        "ImAddresses" : {
          "description" : "The contact's instant messaging (IM) addresses",
          "items" : {
            "type" : "string"
          },
          "type" : "array",
          "x-samplevalue" : [ "Peter12" ]
        },
        "Initials" : {
          "description" : "The contact's initials",
          "type" : "string",
          "x-samplevalue" : "Mr."
        },
        "JobTitle" : {
          "description" : "The contact's job title",
          "type" : "string",
          "x-samplevalue" : "SSE",
          "x-sub-format" : "Job Title"
        },
        "Manager" : {
          "description" : "The name of the contact's manager",
          "type" : "string",
          "x-samplevalue" : "Walter B.",
          "x-sub-format" : "Full Name"
        },
        "MiddleName" : {
          "description" : "The contact's middle name",
          "type" : "string",
          "x-samplevalue" : "John"
        },
        "MobilePhone1" : {
          "type" : "string",
          "x-description" : "The contact's mobile phone number",
          "x-samplevalue" : "9876785436",
          "x-sub-format" : "Phone"
        },
        "NickName" : {
          "description" : "The contact's nickname",
          "type" : "string",
          "x-samplevalue" : "PB"
        },
        "OfficeLocation" : {
          "description" : "The location of the contact's office",
          "type" : "string",
          "x-samplevalue" : "Street 1, NY"
        },
        "OtherAddress" : {
          "description" : "Other addresses for the contact",
          "$ref" : "#/definitions/OtherAddress"
        },
        "PersonalNotes" : {
          "description" : "The user's notes about the contact",
          "type" : "string",
          "x-samplevalue" : "Sample notes"
        },
        "Profession" : {
          "description" : "The contact's profession",
          "type" : "string",
          "x-sub-format" : "Doctor"
        },
        "SpouseName" : {
          "description" : "The name of the contact's spouse",
          "type" : "string",
          "x-samplevalue" : "Olivia",
          "x-sub-format" : "Full Name"
        },
        "Surname" : {
          "description" : "The contact's surname",
          "type" : "string",
          "x-samplevalue" : "Bansky",
          "x-sub-format" : "Last Name"
        },
        "Title" : {
          "description" : "The contact's title",
          "type" : "string",
          "x-samplevalue" : "Title"
        },
        "YomiCompanyName" : {
          "description" : "The phonetic Japanese company name of the contact",
          "type" : "string",
          "x-sub-format" : "Company Name"
        },
        "YomiGivenName" : {
          "description" : "The phonetic Japanese given name (first name) of the contact",
          "type" : "string",
          "x-sub-format" : "Full Name"
        },
        "YomiSurname" : {
          "description" : "The phonetic Japanese surname (last name) of the contact",
          "type" : "string",
          "x-sub-format" : "Last Name"
        }
      },
      "required" : [ "GivenName" ],
      "title" : "contactsPostReq",
      "x-has-customfields" : false,
      "x-vendor-objectname" : "Contacts",
      "type" : "object"
    },
    "ToRecipients" : {
      "properties" : {
        "emailAddress" : {
          "$ref" : "#/definitions/ToRecipientsEmailAddress"
        }
      },
      "title" : "ToRecipients",
      "x-has-customfields" : false,
      "type" : "object"
    },
    "start" : {
      "properties" : {
        "dateTime" : {
          "type" : "string",
          "x-samplevalue" : "2017-04-21T10:00:00.0000000"
        },
        "timeZone" : {
          "type" : "string",
          "x-samplevalue" : "Pacific Standard Time"
        }
      },
      "title" : "start",
      "type" : "object",
      "x-has-customfields" : false,
      "x-vendor-objectname" : "start"
    },
    "From" : {
      "properties" : {
        "emailAddress" : {
          "$ref" : "#/definitions/FromEmailAddress"
        }
      },
      "title" : "From",
      "type" : "object",
      "x-has-customfields" : false
    },
    "eventsPost" : {
      "properties" : {
        "subject" : {
          "type" : "string",
          "x-samplevalue" : "event"
        }
      },
      "title" : "eventsPost",
      "x-has-customfields" : false,
      "type" : "object"
    },
    "messagesAttachments" : {
      "properties" : {
        "@odata.context" : {
          "type" : "string"
        },
        "@odata.id" : {
          "type" : "string",
          "x-samplevalue" : "https://outlook.office.com/api/v2.0/Users('0003bffd-11e0-5f61-0000-000000000000@84df9e7f-e9f6-40af-b435-aaaaaaaaaaaa')/Messages('AQMkADAwATNiZmYAZC0xMQBlMC01ZjYxLTAwAi0wMAoARgAAA3ptkzmErVtFol1E09_uAQwHAPehCfYsiBlKkJ_3hVGsPnoAAAIBDAAAAPehCfYsiBlKkJ_3hVGsPnoAAAAC120UAAAA')/Attachments('AQMkADAwATNiZmYAZC0xMQBlMC01ZjYxLTAwAi0wMAoARgAAA3ptkzmErVtFol1E09_uAQwHAPehCfYsiBlKkJ_3hVGsPnoAAAIBDAAAAPehCfYsiBlKkJ_3hVGsPnoAAAAC120UAAAAARIAEADESDY7rnA_SZzdcCR54yPp')"
        },
        "@odata.type" : {
          "type" : "string",
          "x-samplevalue" : "#Microsoft.OutlookServices.FileAttachment"
        },
        "contentBytes" : {
          "type" : "string",
          "x-samplevalue" : "/9j/4AAQSkZJRgABAQEAYABgAAD/4RDyRXhpZgAATU0AKgAAAAgABAE7AAIAAAANAAAISodpAdU1ibTR4f1i1lgfZK9zHCET3yJTkY5yM5BGM5FeBV/iS9WetT+Behz3jb/kY7n/AK9bT/0K5oo8bf8AIx3P/Xraf+hXNFZlnzn48/5KBrn/AF+yf+hVz9FFe/S/hx9EeTU+N+oUUUVoQFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFAH1n8FB/wAWj0T/AHZ//SiWu92ruLbRuIAJxyQOg/U/nRRXgVf4kvVnrU/gXoed+Nv+Rkuv+vW0/wDQrmiiisyz/9k="
        },
        "contentId" : {
          "type" : "string",
          "x-samplevalue" : "ii_jhiwqs880_1638c559b4465942"
        },
        "contentLocation" : {
          "type" : "string"
        },
        "contentType" : {
          "type" : "string",
          "x-samplevalue" : "image/jpeg"
        },
        "id" : {
          "type" : "string",
          "x-samplevalue" : "AQMkADAwATNiZmYAZC0xMQBlMC01ZjYxLTAwAi0wMAoARgAAA3ptkzmErVtFol1E09_uAQwHAPehCfYsiBlKkJ_3hVGsPnoAAAIBDAAAAPehCfYsiBlKkJ_3hVGsPnoAAAAC120UAAAAARIAEADESDY7rnA_SZzdcCR54yPp"
        },
        "isFolder" : {
          "type" : "boolean",
          "x-samplevalue" : false
        },
        "isInline" : {
          "type" : "boolean",
          "x-samplevalue" : true
        },
        "lastModifiedDateTime" : {
          "format" : "date-time",
          "type" : "string",
          "x-mask" : "yyyy-MM-dd'T'HH:mm:ssZ",
          "x-samplevalue" : "2018-05-23T09:30:19Z"
        },
        "name" : {
          "type" : "string",
          "x-samplevalue" : "fail 2.JPG"
        },
        "permission" : {
          "type" : "string"
        },
        "providerType" : {
          "type" : "string"
        },
        "size" : {
          "format" : "int32",
          "type" : "integer",
          "x-samplevalue" : 231962
        },
        "sourceUrl" : {
          "type" : "string"
        }
      },
      "title" : "messagesAttachments",
      "type" : "object",
      "x-has-customfields" : false,
      "x-primary-key" : [ "id" ],
      "x-vendor-objectname" : "Attachment"
    },
    "messagesForwardResponse" : {
      "properties" : { },
      "title" : "messagesForwardResponse",
      "x-has-customfields" : false,
      "x-vendor-objectname" : "Forward",
      "type" : "object"
    },
    "swaggerpost" : {
      "x-has-customfields" : false,
      "type" : "object",
      "title" : "post",
      "properties" : {
        "summary" : {
          "x-samplevalue" : "Create a new contact in the CRM service. Contact creation will flow through Cloud Elements to your CRM service. With the exception of the 'id' field, the required fields indicated in the 'Contact' model are those required to create a new contact.",
          "type" : "string"
        },
        "operationId" : {
          "x-samplevalue" : "createContact",
          "type" : "string"
        },
        "responses" : {
          "$ref" : "#/definitions/swaggerresponses"
        },
        "parameters" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/swaggerparameters"
          }
        },
        "tags" : {
          "x-samplevalue" : [ "contacts" ],
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        }
      }
    },
    "organizeremailAddress" : {
      "properties" : {
        "address" : {
          "type" : "string",
          "x-samplevalue" : "samanthab@a830edad905084922E17020313.onmicrosoft.com"
        },
        "name" : {
          "type" : "string",
          "x-samplevalue" : "Samantha Booth"
        }
      },
      "title" : "emailAddress",
      "type" : "object",
      "x-has-customfields" : false,
      "x-vendor-objectname" : "organizeremailAddress"
    },
    "location" : {
      "properties" : {
        "displayName" : {
          "type" : "string",
          "x-samplevalue" : "Assembly Hall"
        }
      },
      "title" : "location",
      "type" : "object",
      "x-has-customfields" : false,
      "x-vendor-objectname" : "location"
    }
  },
  "swagger" : "2.0",
  "info" : {
    "contact" : {
      "email" : "support@cloud-elements.com"
    },
    "title" : "microsoftgraph",
    "version" : "api-v2"
  },
  "tags" : [ {
    "name" : "teams"
  }, {
    "name" : "calendars"
  }, {
    "name" : "ping"
  }, {
    "name" : "objects"
  }, {
    "name" : "messages"
  }, {
    "name" : "objectName"
  }, {
    "name" : "contacts"
  } ]
}