{
  "basePath": "/elements/api-v2",
  "paths": {
    "/contacts/{division}": {
      "get": {
        "summary": "Search for customers",
        "operationId": "getContactByDivision",
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/customersGetResObject"
              }
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          }
        },
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "type": "string",
            "required": true
          },
          {
            "in": "path",
            "name": "division",
            "description": "The division ID",
            "type": "integer",
            "required": true
          }
        ],
        "tags": [
          "contacts"
        ]
      }
    },
    "/invoices/{division}": {
      "get": {
        "summary": "Search for invoices",
        "operationId": "getInvoiceByDivision",
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "$ref": "#/definitions/invoices"
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          }
        },
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "type": "string",
            "required": true
          },
          {
            "in": "path",
            "name": "division",
            "description": "The division ID",
            "type": "string",
            "required": true
          }
        ],
        "tags": [
          "invoices"
        ]
      }
    },
    "/my-division": {
      "get": {
        "summary": "Search for me",
        "operationId": "getMyDivision",
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected"
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          }
        },
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "type": "string",
            "required": true
          }
        ],
        "tags": [
          "my-division"
        ]
      }
    },
    "/objects": {
      "get": {
        "operationId": "getObjects",
        "parameters": [
          {
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "in": "header",
            "name": "Authorization",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          }
        },
        "summary": "Get a list of all the available objects.",
        "tags": [
          "objects"
        ]
      }
    },
    "/objects/{objectName}/docs": {
      "get": {
        "operationId": "getObjectsObjectNameDocs",
        "parameters": [
          {
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "in": "header",
            "name": "Authorization",
            "required": true,
            "type": "string"
          },
          {
            "description": "The name of the object",
            "in": "path",
            "name": "objectName",
            "required": true,
            "type": "string"
          },
          {
            "description": "Include discovery metadata in definitions",
            "in": "query",
            "name": "discovery",
            "required": false,
            "type": "boolean"
          },
          {
            "description": "Optionally resolve swagger references for an inline object definition",
            "in": "query",
            "name": "resolveReferences",
            "required": false,
            "type": "boolean"
          },
          {
            "description": "Include only OpenAPI / Swagger properties in definitions",
            "in": "query",
            "name": "basic",
            "required": false,
            "type": "boolean"
          },
          {
            "description": "The element swagger version to get the corresponding element swagger, Passing in \"-1\" gives latest element swagger",
            "in": "query",
            "name": "version",
            "required": false,
            "default": "-1",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "$ref": "#/definitions/swaggerDocs"
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          }
        },
        "summary": "Get swagger docs for an object.",
        "tags": [
          "objects"
        ]
      }
    },
    "/objects/{objectName}/metadata": {
      "get": {
        "operationId": "getObjectsObjectNameMetadata",
        "parameters": [
          {
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "in": "header",
            "name": "Authorization",
            "required": true,
            "type": "string"
          },
          {
            "description": "The name of the object",
            "in": "path",
            "name": "objectName",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "$ref": "#/definitions/objectsMetadata"
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          }
        },
        "summary": "Get a list of all the field for an object.",
        "tags": [
          "objects"
        ]
      }
    },
    "/ping": {
      "get": {
        "operationId": "getPing",
        "parameters": [
          {
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "in": "header",
            "name": "Authorization",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "$ref": "#/definitions/Pong"
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          }
        },
        "summary": "Ping the Element to confirm that the Hub Element has a heartbeat.  If the Element does not have a heartbeat, an error message will be returned.",
        "tags": [
          "ping"
        ]
      }
    },
    "/products/{division}": {
      "get": {
        "summary": "Search for products",
        "operationId": "getProductByDivision",
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "$ref": "#/definitions/productsGetRes"
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          }
        },
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "type": "string",
            "required": true
          },
          {
            "in": "path",
            "name": "division",
            "description": "The division ID",
            "type": "integer",
            "required": true
          }
        ],
        "tags": [
          "products"
        ]
      }
    },
    "/purchase-orders/{division}": {
      "get": {
        "summary": "Search for purchase-orders",
        "operationId": "getPurchaseOrderByDivision",
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/purchaseordersGetResObject"
              }
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          }
        },
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "type": "string",
            "required": true
          },
          {
            "in": "path",
            "name": "division",
            "description": "The division ID",
            "type": "integer",
            "required": true
          }
        ],
        "tags": [
          "purchase-orders"
        ]
      }
    },
    "/vendors/{division}": {
      "get": {
        "summary": "Search for vendors",
        "operationId": "getVendorByDivision",
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "$ref": "#/definitions/vendorsGetRes"
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          }
        },
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "type": "string",
            "required": true
          },
          {
            "in": "path",
            "name": "division",
            "description": "The division ID",
            "type": "integer",
            "required": true
          }
        ],
        "tags": [
          "vendors"
        ]
      }
    },
    "/{objectName}": {
      "get": {
        "operationId": "getByObjectName",
        "parameters": [
          {
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "in": "header",
            "name": "Authorization",
            "required": true,
            "type": "string"
          },
          {
            "description": "The name of the object",
            "in": "path",
            "name": "objectName",
            "required": true,
            "type": "string"
          },
          {
            "description": "The CEQL search expression.",
            "in": "query",
            "name": "where",
            "required": false,
            "type": "string"
          },
          {
            "description": "The page size. Defaults to 200 if not provided. Maximum of 5000.",
            "format": "int64",
            "in": "query",
            "name": "pageSize",
            "required": false,
            "type": "integer"
          },
          {
            "description": "The next page cursor, taken from the response header: `elements-next-page-token`",
            "in": "query",
            "name": "nextPage",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "items": {
                "$ref": "#/definitions/Object"
              },
              "type": "array"
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          }
        },
        "summary": "Search for {objectName}",
        "tags": [
          "objectName"
        ]
      },
      "post": {
        "operationId": "createByObjectName",
        "parameters": [
          {
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "in": "header",
            "name": "Authorization",
            "required": true,
            "type": "string"
          },
          {
            "description": "The name of the object",
            "in": "path",
            "name": "objectName",
            "required": true,
            "type": "string"
          },
          {
            "description": "The {objectName}",
            "in": "body",
            "name": "Body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected"
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          }
        },
        "summary": "Create an {objectName}",
        "tags": [
          "objectName"
        ]
      }
    },
    "/{objectName}/{objectId}": {
      "delete": {
        "operationId": "deleteObjectNameByObjectId",
        "parameters": [
          {
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "in": "header",
            "name": "Authorization",
            "required": true,
            "type": "string"
          },
          {
            "description": "The name of the object",
            "in": "path",
            "name": "objectName",
            "required": true,
            "type": "string"
          },
          {
            "description": "The {objectName} ID",
            "in": "path",
            "name": "objectId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected"
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          }
        },
        "summary": "Delete an {objectName}",
        "tags": [
          "objectName"
        ]
      },
      "get": {
        "operationId": "getObjectNameByObjectId",
        "parameters": [
          {
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "in": "header",
            "name": "Authorization",
            "required": true,
            "type": "string"
          },
          {
            "description": "The name of the object",
            "in": "path",
            "name": "objectName",
            "required": true,
            "type": "string"
          },
          {
            "description": "The {objectName} ID",
            "in": "path",
            "name": "objectId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json",
          "application/pdf"
        ],
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "$ref": "#/definitions/Object"
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          }
        },
        "summary": "Retrieve an {objectName}",
        "tags": [
          "objectName"
        ]
      },
      "patch": {
        "operationId": "updateObjectNameByObjectId",
        "parameters": [
          {
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "in": "header",
            "name": "Authorization",
            "required": true,
            "type": "string"
          },
          {
            "description": "The name of the object",
            "in": "path",
            "name": "objectName",
            "required": true,
            "type": "string"
          },
          {
            "description": "The {objectName} ID",
            "in": "path",
            "name": "objectId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The {objectName}",
            "in": "body",
            "name": "Body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "$ref": "#/definitions/Object"
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          }
        },
        "summary": "Update an {objectName}",
        "tags": [
          "objectName"
        ]
      },
      "put": {
        "operationId": "replaceObjectNameByObjectId",
        "parameters": [
          {
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "in": "header",
            "name": "Authorization",
            "required": true,
            "type": "string"
          },
          {
            "description": "The name of the object",
            "in": "path",
            "name": "objectName",
            "required": true,
            "type": "string"
          },
          {
            "description": "The {objectName} ID",
            "in": "path",
            "name": "objectId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The {objectName}",
            "in": "body",
            "name": "Body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "$ref": "#/definitions/Object"
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          }
        },
        "summary": "Update an {objectName}",
        "tags": [
          "objectName"
        ]
      }
    },
    "/{objectName}/{objectId}/{childObjectName}": {
      "get": {
        "operationId": "getObjectNameByChildObjectName",
        "parameters": [
          {
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "in": "header",
            "name": "Authorization",
            "required": true,
            "type": "string"
          },
          {
            "description": "The name of the object",
            "in": "path",
            "name": "objectName",
            "required": true,
            "type": "string"
          },
          {
            "description": "The {objectName} ID",
            "in": "path",
            "name": "objectId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The name of the childObjectName",
            "in": "path",
            "name": "childObjectName",
            "required": true,
            "type": "string"
          },
          {
            "description": "The CEQL search expression.",
            "in": "query",
            "name": "where",
            "required": false,
            "type": "string"
          },
          {
            "description": "The page size. Defaults to 200 if not provided. Maximum of 5000.",
            "format": "int64",
            "in": "query",
            "name": "pageSize",
            "required": false,
            "type": "integer"
          },
          {
            "description": "The next page cursor, taken from the response header: `elements-next-page-token`",
            "in": "query",
            "name": "nextPage",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "items": {
                "$ref": "#/definitions/Object"
              },
              "type": "array"
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the &quot;Accept&quot; header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          }
        },
        "summary": "Search for {childObjectName}",
        "tags": [
          "objectName"
        ]
      },
      "post": {
        "operationId": "createObjectNameByChildObjectName",
        "parameters": [
          {
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "in": "header",
            "name": "Authorization",
            "required": true,
            "type": "string"
          },
          {
            "description": "The name of the object",
            "in": "path",
            "name": "objectName",
            "required": true,
            "type": "string"
          },
          {
            "description": "The {objectName} ID",
            "in": "path",
            "name": "objectId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The name of the object",
            "in": "path",
            "name": "childObjectName",
            "required": true,
            "type": "string"
          },
          {
            "description": "The {childObjectName}",
            "in": "body",
            "name": "Body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected"
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the &quot;Accept&quot; header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          }
        },
        "summary": "Create an {objectName}",
        "tags": [
          "objectName"
        ]
      }
    },
    "/{objectName}/{objectId}/{childObjectName}/{childObjectId}": {
      "delete": {
        "operationId": "deleteObjectNameByChildObjectId",
        "parameters": [
          {
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "in": "header",
            "name": "Authorization",
            "required": true,
            "type": "string"
          },
          {
            "description": "The name of the object",
            "in": "path",
            "name": "objectName",
            "required": true,
            "type": "string"
          },
          {
            "description": "The name of the childObjectName",
            "in": "path",
            "name": "childObjectName",
            "required": true,
            "type": "string"
          },
          {
            "description": "The {objectName} ID",
            "in": "path",
            "name": "objectId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The {childObjectName} ID",
            "in": "path",
            "name": "childObjectId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected"
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the &quot;Accept&quot; header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          }
        },
        "summary": "Delete an {childObjectName}",
        "tags": [
          "objectName"
        ]
      },
      "get": {
        "operationId": "getObjectNameByChildObjectId",
        "parameters": [
          {
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "in": "header",
            "name": "Authorization",
            "required": true,
            "type": "string"
          },
          {
            "description": "The name of the object",
            "in": "path",
            "name": "objectName",
            "required": true,
            "type": "string"
          },
          {
            "description": "The name of the childObjectName",
            "in": "path",
            "name": "childObjectName",
            "required": true,
            "type": "string"
          },
          {
            "description": "The {objectName} ID",
            "in": "path",
            "name": "objectId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The {childObjectName} ID",
            "in": "path",
            "name": "childObjectId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "$ref": "#/definitions/Object"
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the &quot;Accept&quot; header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          }
        },
        "summary": "Retrieve an {childObjectName}",
        "tags": [
          "objectName"
        ]
      },
      "patch": {
        "operationId": "updateObjectNameByChildObjectId",
        "parameters": [
          {
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "in": "header",
            "name": "Authorization",
            "required": true,
            "type": "string"
          },
          {
            "description": "The name of the object",
            "in": "path",
            "name": "objectName",
            "required": true,
            "type": "string"
          },
          {
            "description": "The name of the childObjectName",
            "in": "path",
            "name": "childObjectName",
            "required": true,
            "type": "string"
          },
          {
            "description": "The {objectName} ID",
            "in": "path",
            "name": "objectId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The {childObjectName} ID",
            "in": "path",
            "name": "childObjectId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The {objectName}",
            "in": "body",
            "name": "Body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "$ref": "#/definitions/Object"
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the &quot;Accept&quot; header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          }
        },
        "summary": "Update an {childObjectName}",
        "tags": [
          "objectName"
        ]
      },
      "put": {
        "operationId": "replaceObjectNameByChildObjectId",
        "parameters": [
          {
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "in": "header",
            "name": "Authorization",
            "required": true,
            "type": "string"
          },
          {
            "description": "The name of the object",
            "in": "path",
            "name": "objectName",
            "required": true,
            "type": "string"
          },
          {
            "description": "The name of the childObjectName",
            "in": "path",
            "name": "childObjectName",
            "required": true,
            "type": "string"
          },
          {
            "description": "The {objectName} ID",
            "in": "path",
            "name": "objectId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The {childObjectName} ID",
            "in": "path",
            "name": "childObjectId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The {objectName}",
            "in": "body",
            "name": "Body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "$ref": "#/definitions/Object"
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the &quot;Accept&quot; header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          }
        },
        "summary": "Update an {childObjectName}",
        "tags": [
          "objectName"
        ]
      }
    }
  },
  "host": "api.cloud-elements.co.uk",
  "schemes": [
    "https"
  ],
  "definitions": {
    "swaggerschema": {
      "x-has-customfields": false,
      "type": "object",
      "title": "schema",
      "properties": {
        "$ref": {
          "x-samplevalue": "#/definitions/Contact-POST-Response",
          "type": "string"
        }
      }
    },
    "swaggerdefinitions": {
      "x-has-customfields": false,
      "type": "object",
      "title": "definitions",
      "properties": {
        "definition-name": {
          "$ref": "#/definitions/swaggerdefinition-name"
        }
      }
    },
    "invoicesSalesInvoiceLines": {
      "properties": {
        "__deferred": {
          "$ref": "#/definitions/invoicesSalesInvoiceLines__deferred"
        }
      },
      "title": "SalesInvoiceLines",
      "type": "object"
    },
    "swagger415": {
      "x-has-customfields": false,
      "type": "object",
      "title": "415",
      "properties": {
        "description": {
          "x-samplevalue": "Unsupported media type - The server cannot handle the requested Content-Type",
          "type": "string"
        }
      }
    },
    "productsGetRes": {
      "properties": {
        "Code": {
          "type": "string",
          "x-samplevalue": "CONSULT"
        },
        "CopyRemarks": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 0
        },
        "CostPriceCurrency": {
          "type": "string",
          "x-samplevalue": "EUR"
        },
        "CostPriceStandard": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 0
        },
        "Created": {
          "type": "string",
          "x-samplevalue": "/Date(1561090080777)/"
        },
        "Creator": {
          "type": "string",
          "x-samplevalue": "7f5568d0-0c2d-4280-9276-64da8839fa31"
        },
        "Description": {
          "type": "string",
          "x-samplevalue": "Consultancy per uur"
        },
        "Division": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 2672983
        },
        "FreeBoolField_01": {
          "type": "boolean",
          "x-samplevalue": false
        },
        "FreeBoolField_02": {
          "type": "boolean",
          "x-samplevalue": false
        },
        "FreeBoolField_03": {
          "type": "boolean",
          "x-samplevalue": false
        },
        "FreeBoolField_04": {
          "type": "boolean",
          "x-samplevalue": false
        },
        "FreeBoolField_05": {
          "type": "boolean",
          "x-samplevalue": false
        },
        "ID": {
          "type": "string",
          "x-samplevalue": "4cf633b0-190b-41b3-9ce0-0e1e3bb70b78"
        },
        "IsBatchItem": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 0
        },
        "IsBatchNumberItem": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 0
        },
        "IsFractionAllowedItem": {
          "type": "boolean",
          "x-samplevalue": true
        },
        "IsMakeItem": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 0
        },
        "IsNewContract": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 0
        },
        "IsOnDemandItem": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 0
        },
        "IsPackageItem": {
          "type": "boolean",
          "x-samplevalue": false
        },
        "IsPurchaseItem": {
          "type": "boolean",
          "x-samplevalue": false
        },
        "IsRegistrationCodeItem": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 0
        },
        "IsSalesItem": {
          "type": "boolean",
          "x-samplevalue": true
        },
        "IsSerialItem": {
          "type": "boolean",
          "x-samplevalue": false
        },
        "IsStockItem": {
          "type": "boolean",
          "x-samplevalue": false
        },
        "IsSubcontractedItem": {
          "type": "boolean",
          "x-samplevalue": false
        },
        "IsTime": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 1
        },
        "IsWebshopItem": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 0
        },
        "ItemGroup": {
          "type": "string",
          "x-samplevalue": "f77b3282-b453-462e-8527-586ef75f8867"
        },
        "ItemGroupCode": {
          "type": "string",
          "x-samplevalue": "DIENSTEN"
        },
        "ItemGroupDescription": {
          "type": "string",
          "x-samplevalue": "Diensten"
        },
        "Modified": {
          "type": "string",
          "x-samplevalue": "/Date(1561090080777)/"
        },
        "Modifier": {
          "type": "string",
          "x-samplevalue": "7f5568d0-0c2d-4280-9276-64da8839fa31"
        },
        "PictureThumbnailUrl": {
          "type": "string",
          "x-samplevalue": "https://start.exactonline.nl//docs/images/placeholder_item.png"
        },
        "PictureUrl": {
          "type": "string",
          "x-samplevalue": "https://start.exactonline.nl//docs/images/placeholder_item.png"
        },
        "SalesVatCode": {
          "type": "string",
          "x-samplevalue": "2  "
        },
        "SalesVatCodeDescription": {
          "type": "string",
          "x-samplevalue": "BTW hoog tarief, exclusief"
        },
        "SecurityLevel": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 10
        },
        "StartDate": {
          "type": "string",
          "x-samplevalue": "/Date(1183248000000)/"
        },
        "Unit": {
          "type": "string",
          "x-samplevalue": "hour    "
        },
        "UnitDescription": {
          "type": "string",
          "x-samplevalue": "Hour"
        },
        "UnitType": {
          "type": "string",
          "x-samplevalue": "T"
        },
        "__metadata": {
          "$ref": "#/definitions/productsGetRes__metadata"
        }
      },
      "title": "productsGetRes",
      "type": "object"
    },
    "vendorsGetRes": {
      "properties": {
        "AddressLine1": {
          "type": "string",
          "x-samplevalue": "UnknownStreet"
        },
        "BankAccounts": {
          "$ref": "#/definitions/vendorsGetResBankAccounts"
        },
        "Blocked": {
          "type": "boolean",
          "x-samplevalue": false
        },
        "CanDropShip": {
          "type": "boolean",
          "x-samplevalue": false
        },
        "City": {
          "type": "string",
          "x-samplevalue": "Delft"
        },
        "Code": {
          "type": "string",
          "x-samplevalue": "                 4"
        },
        "ConsolidationScenario": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 4
        },
        "CostPaid": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 0
        },
        "Country": {
          "type": "string",
          "x-samplevalue": "NL "
        },
        "CountryName": {
          "type": "string",
          "x-samplevalue": "Nederland"
        },
        "Created": {
          "type": "string",
          "x-samplevalue": "/Date(1579638319393)/"
        },
        "Creator": {
          "type": "string",
          "x-samplevalue": "fce38844-897a-42d1-a87c-171ccdcdb124"
        },
        "CreatorFullName": {
          "type": "string",
          "x-samplevalue": "Guy Van Wert"
        },
        "CreditLinePurchase": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 0
        },
        "CreditLineSales": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 0
        },
        "CustomerSince": {
          "type": "string",
          "x-samplevalue": "/Date(1579564800000)/"
        },
        "DiscountPurchase": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 0
        },
        "DiscountSales": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 0
        },
        "Division": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 2672983
        },
        "Email": {
          "type": "string",
          "x-samplevalue": "info@unknown.nl",
          "x-sub-format": "email"
        },
        "ID": {
          "type": "string",
          "x-samplevalue": "dfc2f245-9284-4dde-b36b-02a9a5328c76"
        },
        "IgnoreDatevWarningMessage": {
          "type": "boolean",
          "x-samplevalue": false
        },
        "InvoiceAttachmentType": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 1
        },
        "InvoicingMethod": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 0
        },
        "IsAccountant": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 0
        },
        "IsAgency": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 0
        },
        "IsAnonymised": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 0
        },
        "IsBank": {
          "type": "boolean",
          "x-samplevalue": false
        },
        "IsCompetitor": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 0
        },
        "IsMailing": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 0
        },
        "IsMember": {
          "type": "boolean",
          "x-samplevalue": false
        },
        "IsPilot": {
          "type": "boolean",
          "x-samplevalue": false
        },
        "IsPurchase": {
          "type": "boolean",
          "x-samplevalue": true
        },
        "IsReseller": {
          "type": "boolean",
          "x-samplevalue": false
        },
        "IsSales": {
          "type": "boolean",
          "x-samplevalue": true
        },
        "IsSupplier": {
          "type": "boolean",
          "x-samplevalue": false
        },
        "LogoThumbnailUrl": {
          "type": "string",
          "x-samplevalue": "https://start.exactonline.nl//docs/images/placeholder_account_myeol.png"
        },
        "LogoUrl": {
          "type": "string",
          "x-samplevalue": "https://start.exactonline.nl//docs/images/placeholder_account_myeol.png"
        },
        "Modified": {
          "type": "string",
          "x-samplevalue": "/Date(1579638319393)/"
        },
        "Modifier": {
          "type": "string",
          "x-samplevalue": "fce38844-897a-42d1-a87c-171ccdcdb124"
        },
        "ModifierFullName": {
          "type": "string",
          "x-samplevalue": "Guy Van Wert"
        },
        "Name": {
          "type": "string",
          "x-samplevalue": "MyCustomerNr1"
        },
        "Postcode": {
          "type": "string",
          "x-samplevalue": "2600"
        },
        "PurchaseCurrency": {
          "type": "string",
          "x-samplevalue": "EUR"
        },
        "PurchaseCurrencyDescription": {
          "type": "string",
          "x-samplevalue": "Euro"
        },
        "PurchaseLeadDays": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 0
        },
        "RecepientOfCommissions": {
          "type": "boolean",
          "x-samplevalue": false
        },
        "SalesCurrency": {
          "type": "string",
          "x-samplevalue": "EUR"
        },
        "SalesCurrencyDescription": {
          "type": "string",
          "x-samplevalue": "Euro"
        },
        "SecurityLevel": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 10
        },
        "SeparateInvPerProject": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 0
        },
        "SeparateInvPerSubscription": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 0
        },
        "ShippingLeadDays": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 0
        },
        "StartDate": {
          "type": "string",
          "x-samplevalue": "/Date(1579564800000)/"
        },
        "State": {
          "type": "string",
          "x-samplevalue": "ZH "
        },
        "StateName": {
          "type": "string",
          "x-samplevalue": "Zuid-Holland"
        },
        "Status": {
          "type": "string",
          "x-samplevalue": "C"
        },
        "StatusSince": {
          "type": "string",
          "x-samplevalue": "/Date(1579564800000)/"
        },
        "Type": {
          "type": "string",
          "x-samplevalue": "A"
        },
        "__metadata": {
          "$ref": "#/definitions/vendorsGetRes__metadata"
        }
      },
      "title": "vendorsGetRes",
      "type": "object"
    },
    "swaggerdefinition-name": {
      "x-has-customfields": false,
      "type": "object",
      "title": "definition-name",
      "properties": {
        "properties": {
          "$ref": "#/definitions/swaggerproperties"
        }
      }
    },
    "swaggerparameters": {
      "x-has-customfields": false,
      "title": "parameters",
      "properties": {
        "schema": {
          "$ref": "#/definitions/swaggerparametersschema"
        },
        "in": {
          "x-samplevalue": "header",
          "type": "string"
        },
        "name": {
          "x-samplevalue": "Authorization",
          "type": "string"
        },
        "description": {
          "x-samplevalue": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
          "type": "string"
        },
        "type": {
          "x-samplevalue": "string",
          "type": "string"
        },
        "required": {
          "x-samplevalue": true,
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "invoices__metadata": {
      "properties": {
        "type": {
          "type": "string",
          "x-samplevalue": "Exact.Web.Api.Models.SalesInvoice"
        },
        "uri": {
          "type": "string",
          "x-samplevalue": "https://start.exactonline.nl/api/v1/2672983/salesinvoice/SalesInvoices(guid'866b2a3d-9615-4f0c-aa5a-6081c4824fe8')"
        }
      },
      "title": "__metadata",
      "type": "object"
    },
    "swaggerparametersschema": {
      "x-has-customfields": false,
      "type": "object",
      "title": "schema",
      "properties": {
        "$ref": {
          "x-samplevalue": "#/definitions/Contact",
          "type": "string"
        }
      }
    },
    "swaggerresponses": {
      "x-has-customfields": false,
      "type": "object",
      "title": "responses",
      "properties": {
        "200": {
          "$ref": "#/definitions/swagger200"
        },
        "400": {
          "$ref": "#/definitions/swagger400"
        },
        "401": {
          "$ref": "#/definitions/swagger401"
        },
        "403": {
          "$ref": "#/definitions/swagger403"
        },
        "404": {
          "$ref": "#/definitions/swagger404"
        },
        "405": {
          "$ref": "#/definitions/swagger405"
        },
        "406": {
          "$ref": "#/definitions/swagger406"
        },
        "409": {
          "$ref": "#/definitions/swagger409"
        },
        "415": {
          "$ref": "#/definitions/swagger415"
        },
        "500": {
          "$ref": "#/definitions/swagger500"
        },
        "502": {
          "$ref": "#/definitions/swagger502"
        }
      }
    },
    "swaggerproperties": {
      "x-has-customfields": false,
      "type": "object",
      "title": "properties",
      "properties": {
        "definition-property": {
          "$ref": "#/definitions/swaggerdefinition-property"
        }
      }
    },
    "invoices": {
      "properties": {
        "AmountDC": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 1000
        },
        "AmountDiscount": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 0
        },
        "AmountDiscountExclVat": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 0
        },
        "AmountFC": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 1000
        },
        "AmountFCExclVat": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 1000
        },
        "Created": {
          "type": "string",
          "x-samplevalue": "/Date(1579638357580)/"
        },
        "Creator": {
          "type": "string",
          "x-samplevalue": "fce38844-897a-42d1-a87c-171ccdcdb124"
        },
        "CreatorFullName": {
          "type": "string",
          "x-samplevalue": "Guy Van Wert"
        },
        "Currency": {
          "type": "string",
          "x-samplevalue": "EUR"
        },
        "DeliverTo": {
          "type": "string",
          "x-samplevalue": "dfc2f245-9284-4dde-b36b-02a9a5328c76"
        },
        "DeliverToAddress": {
          "type": "string",
          "x-samplevalue": "249ae973-3462-4f29-9248-c2ab18b7d0d6"
        },
        "DeliverToName": {
          "type": "string",
          "x-samplevalue": "MyCustomerNr1"
        },
        "Description": {
          "type": "string",
          "x-samplevalue": "Nieuwe factuur"
        },
        "Discount": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 0
        },
        "DiscountType": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 1
        },
        "Division": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 2672983
        },
        "DueDate": {
          "type": "string",
          "x-samplevalue": "/Date(1581379200000)/"
        },
        "InvoiceDate": {
          "type": "string",
          "x-samplevalue": "/Date(1579564800000)/"
        },
        "InvoiceID": {
          "type": "string",
          "x-samplevalue": "866b2a3d-9615-4f0c-aa5a-6081c4824fe8"
        },
        "InvoiceTo": {
          "type": "string",
          "x-samplevalue": "dfc2f245-9284-4dde-b36b-02a9a5328c76"
        },
        "InvoiceToName": {
          "type": "string",
          "x-samplevalue": "MyCustomerNr1"
        },
        "Journal": {
          "type": "string",
          "x-samplevalue": "70"
        },
        "JournalDescription": {
          "type": "string",
          "x-samplevalue": "Verkoopboek"
        },
        "Modified": {
          "type": "string",
          "x-samplevalue": "/Date(1579638357580)/"
        },
        "Modifier": {
          "type": "string",
          "x-samplevalue": "fce38844-897a-42d1-a87c-171ccdcdb124"
        },
        "ModifierFullName": {
          "type": "string",
          "x-samplevalue": "Guy Van Wert"
        },
        "OrderDate": {
          "type": "string",
          "x-samplevalue": "/Date(1579564800000)/"
        },
        "OrderNumber": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 1
        },
        "OrderedBy": {
          "type": "string",
          "x-samplevalue": "dfc2f245-9284-4dde-b36b-02a9a5328c76"
        },
        "OrderedByName": {
          "type": "string",
          "x-samplevalue": "MyCustomerNr1"
        },
        "PaymentCondition": {
          "type": "string",
          "x-samplevalue": "21"
        },
        "PaymentConditionDescription": {
          "type": "string",
          "x-samplevalue": "21 dagen"
        },
        "SalesInvoiceLines": {
          "$ref": "#/definitions/invoicesSalesInvoiceLines"
        },
        "Salesperson": {
          "type": "string",
          "x-samplevalue": "fce38844-897a-42d1-a87c-171ccdcdb124"
        },
        "SalespersonFullName": {
          "type": "string",
          "x-samplevalue": "Guy Van Wert"
        },
        "StarterSalesInvoiceStatus": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 0
        },
        "StarterSalesInvoiceStatusDescription": {
          "type": "string",
          "x-samplevalue": "Concept"
        },
        "Status": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 20
        },
        "StatusDescription": {
          "type": "string",
          "x-samplevalue": "Open"
        },
        "Type": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 8020
        },
        "TypeDescription": {
          "type": "string",
          "x-samplevalue": "Factuur"
        },
        "VATAmountDC": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 0
        },
        "VATAmountFC": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 0
        },
        "__metadata": {
          "$ref": "#/definitions/invoices__metadata"
        }
      },
      "title": "invoices",
      "type": "object"
    },
    "invoicesSalesInvoiceLines__deferred": {
      "properties": {
        "uri": {
          "type": "string",
          "x-samplevalue": "https://start.exactonline.nl/api/v1/2672983/salesinvoice/SalesInvoices(guid'866b2a3d-9615-4f0c-aa5a-6081c4824fe8')/SalesInvoiceLines"
        }
      },
      "title": "__deferred",
      "type": "object"
    },
    "productsGetRes__metadata": {
      "properties": {
        "type": {
          "type": "string",
          "x-samplevalue": "Exact.Web.Api.Models.Item"
        },
        "uri": {
          "type": "string",
          "x-samplevalue": "https://start.exactonline.nl/api/v1/2672983/logistics/Items(guid'4cf633b0-190b-41b3-9ce0-0e1e3bb70b78')"
        }
      },
      "title": "__metadata",
      "type": "object"
    },
    "swagger-contacts-path": {
      "x-has-customfields": false,
      "type": "object",
      "title": "/contacts",
      "properties": {
        "post": {
          "$ref": "#/definitions/swaggerpost"
        }
      }
    },
    "vendorsGetRes__metadata": {
      "properties": {
        "type": {
          "type": "string",
          "x-samplevalue": "Exact.Web.Api.Models.Account"
        },
        "uri": {
          "type": "string",
          "x-samplevalue": "https://start.exactonline.nl/api/v1/2672983/crm/Accounts(guid'dfc2f245-9284-4dde-b36b-02a9a5328c76')"
        }
      },
      "title": "__metadata",
      "type": "object"
    },
    "swagger200": {
      "x-has-customfields": false,
      "type": "object",
      "title": "200",
      "properties": {
        "schema": {
          "$ref": "#/definitions/swaggerschema"
        },
        "description": {
          "x-samplevalue": "OK - Everything worked as expected",
          "type": "string"
        }
      }
    },
    "swagger400": {
      "x-has-customfields": false,
      "type": "object",
      "title": "400",
      "properties": {
        "description": {
          "x-samplevalue": "Bad Request - Often due to a missing request parameter",
          "type": "string"
        }
      }
    },
    "swaggerinfo": {
      "x-has-customfields": false,
      "type": "object",
      "title": "info",
      "properties": {
        "contact": {
          "$ref": "#/definitions/swaggercontact"
        },
        "title": {
          "x-samplevalue": "hubspotcrm",
          "type": "string"
        },
        "version": {
          "x-samplevalue": "api-v2",
          "type": "string"
        }
      }
    },
    "swagger401": {
      "x-has-customfields": false,
      "type": "object",
      "title": "401",
      "properties": {
        "description": {
          "x-samplevalue": "Unauthorized - An invalid element token, user secret and/or org secret provided",
          "type": "string"
        }
      }
    },
    "swagger500": {
      "x-has-customfields": false,
      "type": "object",
      "title": "500",
      "properties": {
        "description": {
          "x-samplevalue": "Server error - Something went wrong on the Cloud Elements server",
          "type": "string"
        }
      }
    },
    "swaggerpaths": {
      "x-has-customfields": false,
      "type": "object",
      "title": "paths",
      "properties": {
        "/contacts": {
          "$ref": "#/definitions/swagger-contacts-path"
        }
      }
    },
    "swagger403": {
      "x-has-customfields": false,
      "type": "object",
      "title": "403",
      "properties": {
        "description": {
          "x-samplevalue": "Forbidden - Access to the resource by the provider is forbidden",
          "type": "string"
        }
      }
    },
    "swagger502": {
      "x-has-customfields": false,
      "type": "object",
      "title": "502",
      "properties": {
        "description": {
          "x-samplevalue": "Provider server error - Something went wrong on the Provider or Endpoint's server",
          "type": "string"
        }
      }
    },
    "swagger404": {
      "x-has-customfields": false,
      "type": "object",
      "title": "404",
      "properties": {
        "description": {
          "x-samplevalue": "Not found - The requested resource is not found",
          "type": "string"
        }
      }
    },
    "purchaseordersGetResObject": {
      "properties": {
        "id": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 123
        }
      },
      "title": "purchaseordersGetRes",
      "type": "object"
    },
    "swagger405": {
      "x-has-customfields": false,
      "type": "object",
      "title": "405",
      "properties": {
        "description": {
          "x-samplevalue": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected",
          "type": "string"
        }
      }
    },
    "objectsMetadataFields": {
      "properties": {
        "mask": {
          "type": "string"
        },
        "type": {
          "type": "string"
        },
        "vendorDisplayName": {
          "type": "string"
        },
        "vendorPath": {
          "type": "string"
        },
        "vendorReadOnly": {
          "type": "boolean"
        },
        "vendorRequired": {
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "swaggerDocs": {
      "x-has-customfields": false,
      "title": "swaggerDocs",
      "properties": {
        "basePath": {
          "x-samplevalue": "/elements/api-v2/hubs/crm",
          "type": "string"
        },
        "paths": {
          "$ref": "#/definitions/swaggerpaths"
        },
        "host": {
          "x-samplevalue": "localhost:5050",
          "type": "string"
        },
        "schemes": {
          "x-samplevalue": [
            "http"
          ],
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "definitions": {
          "$ref": "#/definitions/swaggerdefinitions"
        },
        "swagger": {
          "x-samplevalue": "2.0",
          "type": "string"
        },
        "info": {
          "$ref": "#/definitions/swaggerinfo"
        },
        "tags": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/swaggertags"
          }
        }
      },
      "type": "object"
    },
    "customersGetResObject": {
      "properties": {
        "id": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 123
        }
      },
      "title": "customersGetRes",
      "type": "object"
    },
    "swaggercontact": {
      "x-has-customfields": false,
      "type": "object",
      "title": "contact",
      "properties": {
        "email": {
          "x-samplevalue": "support@cloud-elements.com",
          "type": "string"
        }
      }
    },
    "vendorsGetResBankAccounts__deferred": {
      "properties": {
        "uri": {
          "type": "string",
          "x-samplevalue": "https://start.exactonline.nl/api/v1/2672983/crm/Accounts(guid'dfc2f245-9284-4dde-b36b-02a9a5328c76')/BankAccounts"
        }
      },
      "title": "__deferred",
      "type": "object"
    },
    "swaggerpost": {
      "x-has-customfields": false,
      "type": "object",
      "title": "post",
      "properties": {
        "summary": {
          "x-samplevalue": "Create a new contact in the CRM service. Contact creation will flow through Cloud Elements to your CRM service. With the exception of the 'id' field, the required fields indicated in the 'Contact' model are those required to create a new contact.",
          "type": "string"
        },
        "operationId": {
          "x-samplevalue": "createContact",
          "type": "string"
        },
        "responses": {
          "$ref": "#/definitions/swaggerresponses"
        },
        "parameters": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/swaggerparameters"
          }
        },
        "tags": {
          "x-samplevalue": [
            "contacts"
          ],
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "swagger406": {
      "x-has-customfields": false,
      "type": "object",
      "title": "406",
      "properties": {
        "description": {
          "x-samplevalue": "Not acceptable - The response content type does not match the 'Accept' header value",
          "type": "string"
        }
      }
    },
    "swaggerdefinition-property": {
      "x-has-customfields": false,
      "type": "object",
      "title": "#/definitions/definition-property",
      "properties": {
        "type": {
          "x-samplevalue": "string",
          "type": "string"
        }
      }
    },
    "Object": {
      "description": "Fields for the object. There will be fields associated with an Object, which are not all described here.",
      "properties": {
        "objectField": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "swagger409": {
      "x-has-customfields": false,
      "type": "object",
      "title": "409",
      "properties": {
        "description": {
          "x-samplevalue": "Conflict - If a resource being created already exists",
          "type": "string"
        }
      }
    },
    "objectsMetadata": {
      "properties": {
        "fields": {
          "items": {
            "$ref": "#/definitions/objectsMetadataFields"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "swaggertags": {
      "x-has-customfields": false,
      "title": "tags",
      "properties": {
        "name": {
          "x-samplevalue": "contacts",
          "type": "string"
        }
      },
      "type": "object"
    },
    "Pong": {
      "properties": {
        "dateTime": {
          "format": "date-time",
          "type": "string"
        },
        "endpoint": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "vendorsGetResBankAccounts": {
      "properties": {
        "__deferred": {
          "$ref": "#/definitions/vendorsGetResBankAccounts__deferred"
        }
      },
      "title": "BankAccounts",
      "type": "object"
    }
  },
  "swagger": "2.0",
  "info": {
    "x-element-name": "ExactOnline",
    "x-element-hub": "erp",
    "x-element-key": "exactonline",
    "contact": {
      "email": "support@cloud-elements.com"
    },
    "title": "exactonline",
    "x-element-id": 1206,
    "version": "api-v2"
  },
  "tags": [
    {
      "name": "purchase-orders"
    },
    {
      "name": "invoices"
    },
    {
      "name": "my-division"
    },
    {
      "name": "ping"
    },
    {
      "name": "objects"
    },
    {
      "name": "objectName"
    },
    {
      "name": "vendors"
    },
    {
      "name": "contacts"
    },
    {
      "name": "products"
    }
  ]
}