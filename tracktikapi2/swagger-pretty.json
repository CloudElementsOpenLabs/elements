{
  "basePath" : "/elements/api-v2",
  "paths" : {
    "/accounts" : {
      "post" : {
        "summary" : "Create a Accounts",
        "operationId" : "createAccount",
        "responses" : {
          "200" : {
            "description" : "OK - Everything worked as expected",
            "schema" : {
              "$ref" : "#/definitions/AccountsItem"
            }
          },
          "400" : {
            "description" : "Bad Request - Often due to a missing request parameter"
          },
          "401" : {
            "description" : "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500" : {
            "description" : "Server error - Something went wrong on the Cloud Elements server"
          },
          "403" : {
            "description" : "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502" : {
            "description" : "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404" : {
            "description" : "Not found - The requested resource is not found"
          },
          "415" : {
            "description" : "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405" : {
            "description" : "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406" : {
            "description" : "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409" : {
            "description" : "Conflict - If a resource being created already exists"
          }
        },
        "parameters" : [ {
          "in" : "header",
          "name" : "Authorization",
          "description" : "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
          "type" : "string",
          "required" : true
        }, {
          "schema" : {
            "$ref" : "#/definitions/AccountsPost"
          },
          "in" : "body",
          "name" : "Body",
          "description" : "Body",
          "required" : true
        } ],
        "tags" : [ "accounts" ]
      },
      "get" : {
        "summary" : "Retrieve a list of Accounts",
        "operationId" : "getAccounts",
        "responses" : {
          "200" : {
            "description" : "OK - Everything worked as expected",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/AccountsCollection"
              }
            }
          },
          "400" : {
            "description" : "Bad Request - Often due to a missing request parameter"
          },
          "401" : {
            "description" : "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500" : {
            "description" : "Server error - Something went wrong on the Cloud Elements server"
          },
          "403" : {
            "description" : "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502" : {
            "description" : "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404" : {
            "description" : "Not found - The requested resource is not found"
          },
          "415" : {
            "description" : "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405" : {
            "description" : "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406" : {
            "description" : "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409" : {
            "description" : "Conflict - If a resource being created already exists"
          }
        },
        "parameters" : [ {
          "in" : "header",
          "name" : "Authorization",
          "description" : "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
          "type" : "string",
          "required" : true
        }, {
          "in" : "query",
          "name" : "[att]",
          "description" : "Filter any attribute by its value. You can search subobjects by using the qualified attribute name. ",
          "type" : "string",
          "required" : false
        }, {
          "in" : "query",
          "name" : "q",
          "description" : "Global search for the object",
          "type" : "string",
          "required" : false
        }, {
          "in" : "query",
          "name" : "offset",
          "description" : "The collection items offset",
          "type" : "integer",
          "required" : false
        }, {
          "in" : "query",
          "name" : "includeInactive",
          "description" : "Return the list of inactive objects in the results. By default only active objects are returned",
          "type" : "string",
          "required" : false
        }, {
          "in" : "query",
          "name" : "[att]:contains",
          "description" : "Search a specific attribute partially",
          "type" : "string",
          "required" : false
        }, {
          "schema" : {
            "$ref" : "#/definitions/array"
          },
          "in" : "query",
          "name" : "sort",
          "description" : "The collection items sort field and order (prefix with \"-\" for descending sort].",
          "required" : false
        }, {
          "in" : "query",
          "name" : "include",
          "description" : "Expand response to get full related object intead of ID. See the expand guide for more info.",
          "type" : "string",
          "required" : false
        }, {
          "in" : "query",
          "name" : "fields",
          "description" : "List of fields you want returned separated by a coma. You can alias the returned field by adding the alias after a column",
          "type" : "string",
          "required" : false
        }, {
          "in" : "query",
          "name" : "limit",
          "description" : "The collection items limit",
          "type" : "integer",
          "required" : false
        }, {
          "in" : "query",
          "name" : "[att]:in",
          "description" : "Filter the collection by attribute list. ",
          "type" : "string",
          "required" : false
        } ],
        "tags" : [ "accounts" ]
      }
    },
    "/accounts/{id}" : {
      "patch" : {
        "summary" : "Partially edit a Accounts",
        "operationId" : "updateAccountById",
        "responses" : {
          "200" : {
            "description" : "OK - Everything worked as expected",
            "schema" : {
              "$ref" : "#/definitions/AccountsItem"
            }
          },
          "400" : {
            "description" : "Bad Request - Often due to a missing request parameter"
          },
          "401" : {
            "description" : "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500" : {
            "description" : "Server error - Something went wrong on the Cloud Elements server"
          },
          "403" : {
            "description" : "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502" : {
            "description" : "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404" : {
            "description" : "Not found - The requested resource is not found"
          },
          "415" : {
            "description" : "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405" : {
            "description" : "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406" : {
            "description" : "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409" : {
            "description" : "Conflict - If a resource being created already exists"
          }
        },
        "parameters" : [ {
          "in" : "header",
          "name" : "Authorization",
          "description" : "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
          "type" : "string",
          "required" : true
        }, {
          "in" : "path",
          "name" : "id",
          "description" : "The resource identifier",
          "type" : "string",
          "required" : true
        }, {
          "schema" : {
            "$ref" : "#/definitions/AccountsPatch"
          },
          "in" : "body",
          "name" : "JSON",
          "description" : "JSON",
          "required" : true
        } ],
        "tags" : [ "accounts" ]
      },
      "get" : {
        "summary" : "Retrieve a Accounts",
        "operationId" : "getAccountById",
        "responses" : {
          "200" : {
            "description" : "OK - Everything worked as expected",
            "schema" : {
              "$ref" : "#/definitions/AccountsItem"
            }
          },
          "400" : {
            "description" : "Bad Request - Often due to a missing request parameter"
          },
          "401" : {
            "description" : "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500" : {
            "description" : "Server error - Something went wrong on the Cloud Elements server"
          },
          "403" : {
            "description" : "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502" : {
            "description" : "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404" : {
            "description" : "Not found - The requested resource is not found"
          },
          "415" : {
            "description" : "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405" : {
            "description" : "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406" : {
            "description" : "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409" : {
            "description" : "Conflict - If a resource being created already exists"
          }
        },
        "parameters" : [ {
          "in" : "header",
          "name" : "Authorization",
          "description" : "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
          "type" : "string",
          "required" : true
        }, {
          "in" : "path",
          "name" : "id",
          "description" : "The resource identifier",
          "type" : "string",
          "required" : true
        } ],
        "tags" : [ "accounts" ]
      },
      "put" : {
        "summary" : "Update a Accounts",
        "operationId" : "replaceAccountById",
        "responses" : {
          "200" : {
            "description" : "OK - Everything worked as expected",
            "schema" : {
              "$ref" : "#/definitions/AccountsPut"
            }
          },
          "400" : {
            "description" : "Bad Request - Often due to a missing request parameter"
          },
          "401" : {
            "description" : "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500" : {
            "description" : "Server error - Something went wrong on the Cloud Elements server"
          },
          "403" : {
            "description" : "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502" : {
            "description" : "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404" : {
            "description" : "Not found - The requested resource is not found"
          },
          "415" : {
            "description" : "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405" : {
            "description" : "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406" : {
            "description" : "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409" : {
            "description" : "Conflict - If a resource being created already exists"
          }
        },
        "parameters" : [ {
          "in" : "header",
          "name" : "Authorization",
          "description" : "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
          "type" : "string",
          "required" : true
        }, {
          "in" : "path",
          "name" : "id",
          "description" : "The resource identifier",
          "type" : "string",
          "required" : true
        }, {
          "schema" : {
            "$ref" : "#/definitions/AccountsPut"
          },
          "in" : "body",
          "name" : "JSON",
          "description" : "JSON",
          "required" : true
        } ],
        "tags" : [ "accounts" ]
      }
    },
    "/addresses" : {
      "post" : {
        "summary" : "Create a Addresses",
        "operationId" : "createAddresse",
        "responses" : {
          "200" : {
            "description" : "OK - Everything worked as expected",
            "schema" : {
              "$ref" : "#/definitions/AddressesItem"
            }
          },
          "400" : {
            "description" : "Bad Request - Often due to a missing request parameter"
          },
          "401" : {
            "description" : "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500" : {
            "description" : "Server error - Something went wrong on the Cloud Elements server"
          },
          "403" : {
            "description" : "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502" : {
            "description" : "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404" : {
            "description" : "Not found - The requested resource is not found"
          },
          "415" : {
            "description" : "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405" : {
            "description" : "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406" : {
            "description" : "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409" : {
            "description" : "Conflict - If a resource being created already exists"
          }
        },
        "parameters" : [ {
          "in" : "header",
          "name" : "Authorization",
          "description" : "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
          "type" : "string",
          "required" : true
        }, {
          "schema" : {
            "$ref" : "#/definitions/AddressesPost"
          },
          "in" : "body",
          "name" : "Body",
          "description" : "Body",
          "required" : true
        } ],
        "tags" : [ "addresses" ]
      },
      "get" : {
        "summary" : "Retrieve a list of Addresses",
        "operationId" : "getAddresses",
        "responses" : {
          "200" : {
            "description" : "OK - Everything worked as expected",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/AddressesCollection"
              }
            }
          },
          "400" : {
            "description" : "Bad Request - Often due to a missing request parameter"
          },
          "401" : {
            "description" : "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500" : {
            "description" : "Server error - Something went wrong on the Cloud Elements server"
          },
          "403" : {
            "description" : "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502" : {
            "description" : "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404" : {
            "description" : "Not found - The requested resource is not found"
          },
          "415" : {
            "description" : "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405" : {
            "description" : "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406" : {
            "description" : "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409" : {
            "description" : "Conflict - If a resource being created already exists"
          }
        },
        "parameters" : [ {
          "in" : "header",
          "name" : "Authorization",
          "description" : "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
          "type" : "string",
          "required" : true
        }, {
          "in" : "query",
          "name" : "includeInactive",
          "description" : "Return the list of inactive objects in the results. By default only active objects are returned",
          "type" : "string",
          "required" : false
        }, {
          "in" : "query",
          "name" : "[att]:contains",
          "description" : "Search a specific attribute partially",
          "type" : "string",
          "required" : false
        }, {
          "in" : "query",
          "name" : "[att]:in",
          "description" : "Filter the collection by attribute list. ",
          "type" : "string",
          "required" : false
        }, {
          "in" : "query",
          "name" : "[att]",
          "description" : "Filter any attribute by its value. You can search subobjects by using the qualified attribute name. ",
          "type" : "string",
          "required" : false
        }, {
          "in" : "query",
          "name" : "q",
          "description" : "Global search for the object",
          "type" : "string",
          "required" : false
        }, {
          "schema" : {
            "$ref" : "#/definitions/array"
          },
          "in" : "query",
          "name" : "sort",
          "description" : "The collection items sort field and order (prefix with \"-\" for descending sort].",
          "required" : false
        }, {
          "in" : "query",
          "name" : "include",
          "description" : "Expand response to get full related object intead of ID. See the expand guide for more info.",
          "type" : "string",
          "required" : false
        }, {
          "in" : "query",
          "name" : "fields",
          "description" : "List of fields you want returned separated by a coma. You can alias the returned field by adding the alias after a column",
          "type" : "string",
          "required" : false
        }, {
          "in" : "query",
          "name" : "offset",
          "description" : "The collection items offset",
          "type" : "integer",
          "required" : false
        }, {
          "in" : "query",
          "name" : "limit",
          "description" : "The collection items limit",
          "type" : "integer",
          "required" : false
        } ],
        "tags" : [ "addresses" ]
      }
    },
    "/addresses/{id}" : {
      "patch" : {
        "summary" : "Partially edit a Addresses",
        "operationId" : "updateAddresseById",
        "responses" : {
          "200" : {
            "description" : "OK - Everything worked as expected",
            "schema" : {
              "$ref" : "#/definitions/AddressesItem"
            }
          },
          "400" : {
            "description" : "Bad Request - Often due to a missing request parameter"
          },
          "401" : {
            "description" : "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500" : {
            "description" : "Server error - Something went wrong on the Cloud Elements server"
          },
          "403" : {
            "description" : "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502" : {
            "description" : "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404" : {
            "description" : "Not found - The requested resource is not found"
          },
          "415" : {
            "description" : "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405" : {
            "description" : "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406" : {
            "description" : "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409" : {
            "description" : "Conflict - If a resource being created already exists"
          }
        },
        "parameters" : [ {
          "in" : "header",
          "name" : "Authorization",
          "description" : "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
          "type" : "string",
          "required" : true
        }, {
          "in" : "path",
          "name" : "id",
          "description" : "The resource identifier",
          "type" : "string",
          "required" : true
        }, {
          "schema" : {
            "$ref" : "#/definitions/AddressesPatch"
          },
          "in" : "body",
          "name" : "JSON",
          "description" : "JSON",
          "required" : true
        } ],
        "tags" : [ "addresses" ]
      },
      "get" : {
        "summary" : "Retrieve a Addresses",
        "operationId" : "getAddresseById",
        "responses" : {
          "200" : {
            "description" : "OK - Everything worked as expected",
            "schema" : {
              "$ref" : "#/definitions/AddressesItem"
            }
          },
          "400" : {
            "description" : "Bad Request - Often due to a missing request parameter"
          },
          "401" : {
            "description" : "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500" : {
            "description" : "Server error - Something went wrong on the Cloud Elements server"
          },
          "403" : {
            "description" : "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502" : {
            "description" : "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404" : {
            "description" : "Not found - The requested resource is not found"
          },
          "415" : {
            "description" : "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405" : {
            "description" : "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406" : {
            "description" : "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409" : {
            "description" : "Conflict - If a resource being created already exists"
          }
        },
        "parameters" : [ {
          "in" : "header",
          "name" : "Authorization",
          "description" : "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
          "type" : "string",
          "required" : true
        }, {
          "in" : "path",
          "name" : "id",
          "description" : "The resource identifier",
          "type" : "string",
          "required" : true
        } ],
        "tags" : [ "addresses" ]
      },
      "put" : {
        "summary" : "Update a Addresses",
        "operationId" : "replaceAddresseById",
        "responses" : {
          "200" : {
            "description" : "OK - Everything worked as expected",
            "schema" : {
              "$ref" : "#/definitions/AddressesPut"
            }
          },
          "400" : {
            "description" : "Bad Request - Often due to a missing request parameter"
          },
          "401" : {
            "description" : "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500" : {
            "description" : "Server error - Something went wrong on the Cloud Elements server"
          },
          "403" : {
            "description" : "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502" : {
            "description" : "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404" : {
            "description" : "Not found - The requested resource is not found"
          },
          "415" : {
            "description" : "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405" : {
            "description" : "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406" : {
            "description" : "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409" : {
            "description" : "Conflict - If a resource being created already exists"
          }
        },
        "parameters" : [ {
          "in" : "header",
          "name" : "Authorization",
          "description" : "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
          "type" : "string",
          "required" : true
        }, {
          "in" : "path",
          "name" : "id",
          "description" : "The resource identifier",
          "type" : "string",
          "required" : true
        }, {
          "schema" : {
            "$ref" : "#/definitions/AddressesPut"
          },
          "in" : "body",
          "name" : "JSON",
          "description" : "JSON",
          "required" : true
        } ],
        "tags" : [ "addresses" ]
      }
    },
    "/auth" : {
      "post" : {
        "summary" : "Authenticate to the system and receive a JWT",
        "operationId" : "createAuth",
        "responses" : {
          "200" : {
            "description" : "OK - Everything worked as expected"
          },
          "400" : {
            "description" : "Bad Request - Often due to a missing request parameter"
          },
          "401" : {
            "description" : "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500" : {
            "description" : "Server error - Something went wrong on the Cloud Elements server"
          },
          "403" : {
            "description" : "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502" : {
            "description" : "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404" : {
            "description" : "Not found - The requested resource is not found"
          },
          "415" : {
            "description" : "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405" : {
            "description" : "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406" : {
            "description" : "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409" : {
            "description" : "Conflict - If a resource being created already exists"
          }
        },
        "parameters" : [ {
          "in" : "header",
          "name" : "Authorization",
          "description" : "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
          "type" : "string",
          "required" : true
        }, {
          "in" : "formData",
          "name" : "username",
          "description" : "username",
          "type" : "string",
          "required" : true
        }, {
          "in" : "formData",
          "name" : "password",
          "description" : "password",
          "type" : "string",
          "required" : true
        } ],
        "tags" : [ "auth" ],
        "consumes" : [ "multipart/form-data" ]
      }
    },
    "/batch/file" : {
      "post" : {
        "summary" : "Create a(n) /batch/file",
        "operationId" : "createBatchFile",
        "responses" : {
          "200" : {
            "description" : "OK - Everything worked as expected",
            "schema" : {
              "$ref" : "#/definitions/batchFile"
            }
          },
          "400" : {
            "description" : "Bad Request - Often due to a missing request parameter"
          },
          "401" : {
            "description" : "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500" : {
            "description" : "Server error - Something went wrong on the Cloud Elements server"
          },
          "403" : {
            "description" : "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502" : {
            "description" : "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404" : {
            "description" : "Not found - The requested resource is not found"
          },
          "415" : {
            "description" : "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405" : {
            "description" : "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406" : {
            "description" : "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409" : {
            "description" : "Conflict - If a resource being created already exists"
          }
        },
        "parameters" : [ {
          "in" : "header",
          "name" : "Authorization",
          "description" : "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
          "type" : "string",
          "required" : true
        }, {
          "schema" : {
            "$ref" : "#/definitions/application/json"
          },
          "in" : "body",
          "name" : "body",
          "description" : "JSON representation of the object structure to create",
          "required" : true
        } ],
        "tags" : [ "batch" ]
      }
    },
    "/bill-items" : {
      "post" : {
        "summary" : "Create a BillItems",
        "operationId" : "createBillItem",
        "responses" : {
          "200" : {
            "description" : "OK - Everything worked as expected",
            "schema" : {
              "$ref" : "#/definitions/BillItemsItem"
            }
          },
          "400" : {
            "description" : "Bad Request - Often due to a missing request parameter"
          },
          "401" : {
            "description" : "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500" : {
            "description" : "Server error - Something went wrong on the Cloud Elements server"
          },
          "403" : {
            "description" : "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502" : {
            "description" : "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404" : {
            "description" : "Not found - The requested resource is not found"
          },
          "415" : {
            "description" : "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405" : {
            "description" : "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406" : {
            "description" : "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409" : {
            "description" : "Conflict - If a resource being created already exists"
          }
        },
        "parameters" : [ {
          "in" : "header",
          "name" : "Authorization",
          "description" : "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
          "type" : "string",
          "required" : true
        }, {
          "schema" : {
            "$ref" : "#/definitions/BillItemsPost"
          },
          "in" : "body",
          "name" : "Body",
          "description" : "Body",
          "required" : true
        } ],
        "tags" : [ "bill-items" ]
      },
      "get" : {
        "summary" : "Retrieve a list of BillItems",
        "operationId" : "getBillItems",
        "responses" : {
          "200" : {
            "description" : "OK - Everything worked as expected",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/BillItemsCollection"
              }
            }
          },
          "400" : {
            "description" : "Bad Request - Often due to a missing request parameter"
          },
          "401" : {
            "description" : "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500" : {
            "description" : "Server error - Something went wrong on the Cloud Elements server"
          },
          "403" : {
            "description" : "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502" : {
            "description" : "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404" : {
            "description" : "Not found - The requested resource is not found"
          },
          "415" : {
            "description" : "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405" : {
            "description" : "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406" : {
            "description" : "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409" : {
            "description" : "Conflict - If a resource being created already exists"
          }
        },
        "parameters" : [ {
          "in" : "header",
          "name" : "Authorization",
          "description" : "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
          "type" : "string",
          "required" : true
        }, {
          "in" : "query",
          "name" : "include",
          "description" : "Expand response to get full related object intead of ID. See the expand guide for more info.",
          "type" : "string",
          "required" : false
        }, {
          "in" : "query",
          "name" : "includeInactive",
          "description" : "Return the list of inactive objects in the results. By default only active objects are returned",
          "type" : "string",
          "required" : false
        }, {
          "schema" : {
            "$ref" : "#/definitions/array"
          },
          "in" : "query",
          "name" : "sort",
          "description" : "The collection items sort field and order (prefix with \"-\" for descending sort].",
          "required" : false
        }, {
          "in" : "query",
          "name" : "q",
          "description" : "Global search for the object",
          "type" : "string",
          "required" : false
        }, {
          "in" : "query",
          "name" : "[att]",
          "description" : "Filter any attribute by its value. You can search subobjects by using the qualified attribute name. ",
          "type" : "string",
          "required" : false
        }, {
          "in" : "query",
          "name" : "[att]:in",
          "description" : "Filter the collection by attribute list. ",
          "type" : "string",
          "required" : false
        }, {
          "in" : "query",
          "name" : "[att]:contains",
          "description" : "Search a specific attribute partially",
          "type" : "string",
          "required" : false
        }, {
          "in" : "query",
          "name" : "offset",
          "description" : "The collection items offset",
          "type" : "integer",
          "required" : false
        }, {
          "in" : "query",
          "name" : "fields",
          "description" : "List of fields you want returned separated by a coma. You can alias the returned field by adding the alias after a column",
          "type" : "string",
          "required" : false
        }, {
          "in" : "query",
          "name" : "limit",
          "description" : "The collection items limit",
          "type" : "integer",
          "required" : false
        } ],
        "tags" : [ "bill-items" ]
      }
    },
    "/bill-items/{id}" : {
      "patch" : {
        "summary" : "Partially edit a BillItems",
        "operationId" : "updateBillItemById",
        "responses" : {
          "200" : {
            "description" : "OK - Everything worked as expected",
            "schema" : {
              "$ref" : "#/definitions/BillItemsItem"
            }
          },
          "400" : {
            "description" : "Bad Request - Often due to a missing request parameter"
          },
          "401" : {
            "description" : "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500" : {
            "description" : "Server error - Something went wrong on the Cloud Elements server"
          },
          "403" : {
            "description" : "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502" : {
            "description" : "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404" : {
            "description" : "Not found - The requested resource is not found"
          },
          "415" : {
            "description" : "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405" : {
            "description" : "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406" : {
            "description" : "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409" : {
            "description" : "Conflict - If a resource being created already exists"
          }
        },
        "parameters" : [ {
          "in" : "header",
          "name" : "Authorization",
          "description" : "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
          "type" : "string",
          "required" : true
        }, {
          "in" : "path",
          "name" : "id",
          "description" : "The resource identifier",
          "type" : "string",
          "required" : true
        }, {
          "schema" : {
            "$ref" : "#/definitions/BillItemsPatch"
          },
          "in" : "body",
          "name" : "JSON",
          "description" : "JSON",
          "required" : true
        } ],
        "tags" : [ "bill-items" ]
      },
      "get" : {
        "summary" : "Retrieve a BillItems",
        "operationId" : "getBillItemById",
        "responses" : {
          "200" : {
            "description" : "OK - Everything worked as expected",
            "schema" : {
              "$ref" : "#/definitions/BillItemsItem"
            }
          },
          "400" : {
            "description" : "Bad Request - Often due to a missing request parameter"
          },
          "401" : {
            "description" : "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500" : {
            "description" : "Server error - Something went wrong on the Cloud Elements server"
          },
          "403" : {
            "description" : "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502" : {
            "description" : "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404" : {
            "description" : "Not found - The requested resource is not found"
          },
          "415" : {
            "description" : "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405" : {
            "description" : "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406" : {
            "description" : "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409" : {
            "description" : "Conflict - If a resource being created already exists"
          }
        },
        "parameters" : [ {
          "in" : "header",
          "name" : "Authorization",
          "description" : "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
          "type" : "string",
          "required" : true
        }, {
          "in" : "path",
          "name" : "id",
          "description" : "The resource identifier",
          "type" : "string",
          "required" : true
        } ],
        "tags" : [ "bill-items" ]
      },
      "put" : {
        "summary" : "Update a BillItems",
        "operationId" : "replaceBillItemById",
        "responses" : {
          "200" : {
            "description" : "OK - Everything worked as expected",
            "schema" : {
              "$ref" : "#/definitions/BillItemsPut"
            }
          },
          "400" : {
            "description" : "Bad Request - Often due to a missing request parameter"
          },
          "401" : {
            "description" : "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500" : {
            "description" : "Server error - Something went wrong on the Cloud Elements server"
          },
          "403" : {
            "description" : "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502" : {
            "description" : "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404" : {
            "description" : "Not found - The requested resource is not found"
          },
          "415" : {
            "description" : "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405" : {
            "description" : "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406" : {
            "description" : "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409" : {
            "description" : "Conflict - If a resource being created already exists"
          }
        },
        "parameters" : [ {
          "in" : "header",
          "name" : "Authorization",
          "description" : "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
          "type" : "string",
          "required" : true
        }, {
          "in" : "path",
          "name" : "id",
          "description" : "The resource identifier",
          "type" : "string",
          "required" : true
        }, {
          "schema" : {
            "$ref" : "#/definitions/BillItemsPut"
          },
          "in" : "body",
          "name" : "JSON",
          "description" : "JSON",
          "required" : true
        } ],
        "tags" : [ "bill-items" ]
      }
    },
    "/billable-items" : {
      "post" : {
        "summary" : "Create a BillableItems",
        "operationId" : "createBillableItem",
        "responses" : {
          "200" : {
            "description" : "OK - Everything worked as expected",
            "schema" : {
              "$ref" : "#/definitions/BillableItemsItem"
            }
          },
          "400" : {
            "description" : "Bad Request - Often due to a missing request parameter"
          },
          "401" : {
            "description" : "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500" : {
            "description" : "Server error - Something went wrong on the Cloud Elements server"
          },
          "403" : {
            "description" : "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502" : {
            "description" : "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404" : {
            "description" : "Not found - The requested resource is not found"
          },
          "415" : {
            "description" : "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405" : {
            "description" : "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406" : {
            "description" : "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409" : {
            "description" : "Conflict - If a resource being created already exists"
          }
        },
        "parameters" : [ {
          "in" : "header",
          "name" : "Authorization",
          "description" : "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
          "type" : "string",
          "required" : true
        }, {
          "schema" : {
            "$ref" : "#/definitions/BillableItemsPost"
          },
          "in" : "body",
          "name" : "Body",
          "description" : "Body",
          "required" : true
        } ],
        "tags" : [ "billable-items" ]
      },
      "get" : {
        "summary" : "Retrieve a list of BillableItems",
        "operationId" : "getBillableItems",
        "responses" : {
          "200" : {
            "description" : "OK - Everything worked as expected",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/BillableItemsCollection"
              }
            }
          },
          "400" : {
            "description" : "Bad Request - Often due to a missing request parameter"
          },
          "401" : {
            "description" : "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500" : {
            "description" : "Server error - Something went wrong on the Cloud Elements server"
          },
          "403" : {
            "description" : "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502" : {
            "description" : "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404" : {
            "description" : "Not found - The requested resource is not found"
          },
          "415" : {
            "description" : "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405" : {
            "description" : "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406" : {
            "description" : "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409" : {
            "description" : "Conflict - If a resource being created already exists"
          }
        },
        "parameters" : [ {
          "in" : "header",
          "name" : "Authorization",
          "description" : "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
          "type" : "string",
          "required" : true
        }, {
          "in" : "query",
          "name" : "includeInactive",
          "description" : "Return the list of inactive objects in the results. By default only active objects are returned",
          "type" : "string",
          "required" : false
        }, {
          "in" : "query",
          "name" : "[att]:contains",
          "description" : "Search a specific attribute partially",
          "type" : "string",
          "required" : false
        }, {
          "in" : "query",
          "name" : "[att]:in",
          "description" : "Filter the collection by attribute list. ",
          "type" : "string",
          "required" : false
        }, {
          "in" : "query",
          "name" : "[att]",
          "description" : "Filter any attribute by its value. You can search subobjects by using the qualified attribute name. ",
          "type" : "string",
          "required" : false
        }, {
          "in" : "query",
          "name" : "q",
          "description" : "Global search for the object",
          "type" : "string",
          "required" : false
        }, {
          "schema" : {
            "$ref" : "#/definitions/array"
          },
          "in" : "query",
          "name" : "sort",
          "description" : "The collection items sort field and order (prefix with \"-\" for descending sort].",
          "required" : false
        }, {
          "in" : "query",
          "name" : "include",
          "description" : "Expand response to get full related object intead of ID. See the expand guide for more info.",
          "type" : "string",
          "required" : false
        }, {
          "in" : "query",
          "name" : "fields",
          "description" : "List of fields you want returned separated by a coma. You can alias the returned field by adding the alias after a column",
          "type" : "string",
          "required" : false
        }, {
          "in" : "query",
          "name" : "offset",
          "description" : "The collection items offset",
          "type" : "integer",
          "required" : false
        }, {
          "in" : "query",
          "name" : "limit",
          "description" : "The collection items limit",
          "type" : "integer",
          "required" : false
        } ],
        "tags" : [ "billable-items" ]
      }
    },
    "/billable-items/{id}" : {
      "patch" : {
        "summary" : "Partially edit a BillableItems",
        "operationId" : "updateBillableItemById",
        "responses" : {
          "200" : {
            "description" : "OK - Everything worked as expected",
            "schema" : {
              "$ref" : "#/definitions/BillableItemsItem"
            }
          },
          "400" : {
            "description" : "Bad Request - Often due to a missing request parameter"
          },
          "401" : {
            "description" : "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500" : {
            "description" : "Server error - Something went wrong on the Cloud Elements server"
          },
          "403" : {
            "description" : "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502" : {
            "description" : "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404" : {
            "description" : "Not found - The requested resource is not found"
          },
          "415" : {
            "description" : "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405" : {
            "description" : "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406" : {
            "description" : "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409" : {
            "description" : "Conflict - If a resource being created already exists"
          }
        },
        "parameters" : [ {
          "in" : "header",
          "name" : "Authorization",
          "description" : "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
          "type" : "string",
          "required" : true
        }, {
          "in" : "path",
          "name" : "id",
          "description" : "The resource identifier",
          "type" : "string",
          "required" : true
        }, {
          "schema" : {
            "$ref" : "#/definitions/BillableItemsPatch"
          },
          "in" : "body",
          "name" : "JSON",
          "description" : "JSON",
          "required" : true
        } ],
        "tags" : [ "billable-items" ]
      },
      "get" : {
        "summary" : "Retrieve a BillableItems",
        "operationId" : "getBillableItemById",
        "responses" : {
          "200" : {
            "description" : "OK - Everything worked as expected",
            "schema" : {
              "$ref" : "#/definitions/BillableItemsItem"
            }
          },
          "400" : {
            "description" : "Bad Request - Often due to a missing request parameter"
          },
          "401" : {
            "description" : "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500" : {
            "description" : "Server error - Something went wrong on the Cloud Elements server"
          },
          "403" : {
            "description" : "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502" : {
            "description" : "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404" : {
            "description" : "Not found - The requested resource is not found"
          },
          "415" : {
            "description" : "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405" : {
            "description" : "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406" : {
            "description" : "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409" : {
            "description" : "Conflict - If a resource being created already exists"
          }
        },
        "parameters" : [ {
          "in" : "header",
          "name" : "Authorization",
          "description" : "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
          "type" : "string",
          "required" : true
        }, {
          "in" : "path",
          "name" : "id",
          "description" : "The resource identifier",
          "type" : "string",
          "required" : true
        } ],
        "tags" : [ "billable-items" ]
      },
      "put" : {
        "summary" : "Update a BillableItems",
        "operationId" : "replaceBillableItemById",
        "responses" : {
          "200" : {
            "description" : "OK - Everything worked as expected",
            "schema" : {
              "$ref" : "#/definitions/BillableItemsPut"
            }
          },
          "400" : {
            "description" : "Bad Request - Often due to a missing request parameter"
          },
          "401" : {
            "description" : "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500" : {
            "description" : "Server error - Something went wrong on the Cloud Elements server"
          },
          "403" : {
            "description" : "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502" : {
            "description" : "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404" : {
            "description" : "Not found - The requested resource is not found"
          },
          "415" : {
            "description" : "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405" : {
            "description" : "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406" : {
            "description" : "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409" : {
            "description" : "Conflict - If a resource being created already exists"
          }
        },
        "parameters" : [ {
          "in" : "header",
          "name" : "Authorization",
          "description" : "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
          "type" : "string",
          "required" : true
        }, {
          "in" : "path",
          "name" : "id",
          "description" : "The resource identifier",
          "type" : "string",
          "required" : true
        }, {
          "schema" : {
            "$ref" : "#/definitions/BillableItemsPut"
          },
          "in" : "body",
          "name" : "JSON",
          "description" : "JSON",
          "required" : true
        } ],
        "tags" : [ "billable-items" ]
      }
    },
    "/break-sessions" : {
      "post" : {
        "summary" : "Create a BreakSessions",
        "operationId" : "createBreakSession",
        "responses" : {
          "200" : {
            "description" : "OK - Everything worked as expected",
            "schema" : {
              "$ref" : "#/definitions/BreakSessionsItem"
            }
          },
          "400" : {
            "description" : "Bad Request - Often due to a missing request parameter"
          },
          "401" : {
            "description" : "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500" : {
            "description" : "Server error - Something went wrong on the Cloud Elements server"
          },
          "403" : {
            "description" : "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502" : {
            "description" : "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404" : {
            "description" : "Not found - The requested resource is not found"
          },
          "415" : {
            "description" : "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405" : {
            "description" : "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406" : {
            "description" : "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409" : {
            "description" : "Conflict - If a resource being created already exists"
          }
        },
        "parameters" : [ {
          "in" : "header",
          "name" : "Authorization",
          "description" : "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
          "type" : "string",
          "required" : true
        }, {
          "schema" : {
            "$ref" : "#/definitions/BreakSessionsPost"
          },
          "in" : "body",
          "name" : "Body",
          "description" : "Body",
          "required" : true
        } ],
        "tags" : [ "break-sessions" ]
      },
      "get" : {
        "summary" : "Retrieve a list of BreakSessions",
        "operationId" : "getBreakSessions",
        "responses" : {
          "200" : {
            "description" : "OK - Everything worked as expected",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/BreakSessionsCollection"
              }
            }
          },
          "400" : {
            "description" : "Bad Request - Often due to a missing request parameter"
          },
          "401" : {
            "description" : "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500" : {
            "description" : "Server error - Something went wrong on the Cloud Elements server"
          },
          "403" : {
            "description" : "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502" : {
            "description" : "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404" : {
            "description" : "Not found - The requested resource is not found"
          },
          "415" : {
            "description" : "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405" : {
            "description" : "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406" : {
            "description" : "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409" : {
            "description" : "Conflict - If a resource being created already exists"
          }
        },
        "parameters" : [ {
          "in" : "header",
          "name" : "Authorization",
          "description" : "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
          "type" : "string",
          "required" : true
        }, {
          "in" : "query",
          "name" : "limit",
          "description" : "The collection items limit",
          "type" : "integer",
          "required" : false
        }, {
          "in" : "query",
          "name" : "offset",
          "description" : "The collection items offset",
          "type" : "integer",
          "required" : false
        }, {
          "in" : "query",
          "name" : "includeInactive",
          "description" : "Return the list of inactive objects in the results. By default only active objects are returned",
          "type" : "string",
          "required" : false
        }, {
          "in" : "query",
          "name" : "[att]:contains",
          "description" : "Search a specific attribute partially",
          "type" : "string",
          "required" : false
        }, {
          "in" : "query",
          "name" : "[att]:in",
          "description" : "Filter the collection by attribute list. ",
          "type" : "string",
          "required" : false
        }, {
          "in" : "query",
          "name" : "[att]",
          "description" : "Filter any attribute by its value. You can search subobjects by using the qualified attribute name. ",
          "type" : "string",
          "required" : false
        }, {
          "in" : "query",
          "name" : "q",
          "description" : "Global search for the object",
          "type" : "string",
          "required" : false
        }, {
          "in" : "query",
          "name" : "include",
          "description" : "Expand response to get full related object intead of ID. See the expand guide for more info.",
          "type" : "string",
          "required" : false
        }, {
          "in" : "query",
          "name" : "fields",
          "description" : "List of fields you want returned separated by a coma. You can alias the returned field by adding the alias after a column",
          "type" : "string",
          "required" : false
        }, {
          "schema" : {
            "$ref" : "#/definitions/array"
          },
          "in" : "query",
          "name" : "sort",
          "description" : "The collection items sort field and order (prefix with \"-\" for descending sort].",
          "required" : false
        } ],
        "tags" : [ "break-sessions" ]
      }
    },
    "/break-sessions/{id}" : {
      "patch" : {
        "summary" : "Partially edit a BreakSessions",
        "operationId" : "updateBreakSessionById",
        "responses" : {
          "200" : {
            "description" : "OK - Everything worked as expected",
            "schema" : {
              "$ref" : "#/definitions/BreakSessionsItem"
            }
          },
          "400" : {
            "description" : "Bad Request - Often due to a missing request parameter"
          },
          "401" : {
            "description" : "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500" : {
            "description" : "Server error - Something went wrong on the Cloud Elements server"
          },
          "403" : {
            "description" : "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502" : {
            "description" : "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404" : {
            "description" : "Not found - The requested resource is not found"
          },
          "415" : {
            "description" : "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405" : {
            "description" : "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406" : {
            "description" : "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409" : {
            "description" : "Conflict - If a resource being created already exists"
          }
        },
        "parameters" : [ {
          "in" : "header",
          "name" : "Authorization",
          "description" : "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
          "type" : "string",
          "required" : true
        }, {
          "in" : "path",
          "name" : "id",
          "description" : "The resource identifier",
          "type" : "string",
          "required" : true
        }, {
          "schema" : {
            "$ref" : "#/definitions/BreakSessionsPatch"
          },
          "in" : "body",
          "name" : "JSON",
          "description" : "JSON",
          "required" : true
        } ],
        "tags" : [ "break-sessions" ]
      },
      "get" : {
        "summary" : "Retrieve a BreakSessions",
        "operationId" : "getBreakSessionById",
        "responses" : {
          "200" : {
            "description" : "OK - Everything worked as expected",
            "schema" : {
              "$ref" : "#/definitions/BreakSessionsItem"
            }
          },
          "400" : {
            "description" : "Bad Request - Often due to a missing request parameter"
          },
          "401" : {
            "description" : "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500" : {
            "description" : "Server error - Something went wrong on the Cloud Elements server"
          },
          "403" : {
            "description" : "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502" : {
            "description" : "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404" : {
            "description" : "Not found - The requested resource is not found"
          },
          "415" : {
            "description" : "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405" : {
            "description" : "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406" : {
            "description" : "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409" : {
            "description" : "Conflict - If a resource being created already exists"
          }
        },
        "parameters" : [ {
          "in" : "header",
          "name" : "Authorization",
          "description" : "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
          "type" : "string",
          "required" : true
        }, {
          "in" : "path",
          "name" : "id",
          "description" : "The resource identifier",
          "type" : "string",
          "required" : true
        } ],
        "tags" : [ "break-sessions" ]
      },
      "put" : {
        "summary" : "Update a BreakSessions",
        "operationId" : "replaceBreakSessionById",
        "responses" : {
          "200" : {
            "description" : "OK - Everything worked as expected",
            "schema" : {
              "$ref" : "#/definitions/BreakSessionsPut"
            }
          },
          "400" : {
            "description" : "Bad Request - Often due to a missing request parameter"
          },
          "401" : {
            "description" : "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500" : {
            "description" : "Server error - Something went wrong on the Cloud Elements server"
          },
          "403" : {
            "description" : "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502" : {
            "description" : "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404" : {
            "description" : "Not found - The requested resource is not found"
          },
          "415" : {
            "description" : "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405" : {
            "description" : "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406" : {
            "description" : "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409" : {
            "description" : "Conflict - If a resource being created already exists"
          }
        },
        "parameters" : [ {
          "in" : "header",
          "name" : "Authorization",
          "description" : "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
          "type" : "string",
          "required" : true
        }, {
          "in" : "path",
          "name" : "id",
          "description" : "The resource identifier",
          "type" : "string",
          "required" : true
        }, {
          "schema" : {
            "$ref" : "#/definitions/BreakSessionsPut"
          },
          "in" : "body",
          "name" : "JSON",
          "description" : "JSON",
          "required" : true
        } ],
        "tags" : [ "break-sessions" ]
      }
    },
    "/bulk/jobs" : {
      "get" : {
        "operationId" : "getBulkJobs",
        "parameters" : [ {
          "description" : "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
          "in" : "header",
          "name" : "Authorization",
          "required" : true,
          "type" : "string"
        }, {
          "description" : "The CEQL search expression, or the where clause, without the WHERE keyword, in a typical SQL query. For example to get all upload jobs the expression would be where=job_direction='UPLOAD'. The following fields are valid search fields 'object_name', 'job_status', 'job_direction', 'record_count'",
          "in" : "query",
          "name" : "where",
          "required" : false,
          "type" : "string"
        }, {
          "description" : "The next page cursor, taken from the response header: `elements-next-page-token`",
          "in" : "query",
          "name" : "nextPage",
          "required" : false,
          "type" : "string"
        }, {
          "description" : "The page size for pagination, which defaults to 200 if not supplied",
          "format" : "int64",
          "in" : "query",
          "name" : "pageSize",
          "required" : false,
          "type" : "integer"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK - Everything worked as expected",
            "schema" : {
              "$ref" : "#/definitions/BulkJobList"
            }
          },
          "400" : {
            "description" : "Bad Request - Often due to a missing request parameter"
          },
          "401" : {
            "description" : "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "403" : {
            "description" : "Forbidden - Access to the resource by the provider is forbidden"
          },
          "404" : {
            "description" : "Not found - The requested resource is not found"
          },
          "405" : {
            "description" : "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406" : {
            "description" : "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409" : {
            "description" : "Conflict - If a resource being created already exists"
          },
          "415" : {
            "description" : "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "500" : {
            "description" : "Server error - Something went wrong on the Cloud Elements server"
          },
          "502" : {
            "description" : "Provider server error - Something went wrong on the Provider or Endpoint's server"
          }
        },
        "summary" : "Fetch all the bulk jobs for an instance",
        "tags" : [ "bulk" ]
      }
    },
    "/bulk/query" : {
      "post" : {
        "operationId" : "createBulkQuery",
        "parameters" : [ {
          "description" : "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
          "in" : "header",
          "name" : "Authorization",
          "required" : true,
          "type" : "string"
        }, {
          "description" : "The Url to send the notification to when the Job is completed",
          "in" : "header",
          "name" : "Elements-Async-Callback-Url",
          "required" : false,
          "type" : "string"
        }, {
          "description" : "The CEQL query. When this parameter is omitted, all objects of the given type are returned via the bulk job. Endpoint limiters may still apply.",
          "in" : "query",
          "name" : "q",
          "required" : false,
          "type" : "string"
        }, {
          "description" : "The last time this query was run. This is optional. You can also have this parameter in the query and leave this blank - optional eg. '2014-10-06T13:22:17-08:00'",
          "in" : "query",
          "name" : "lastRunDate",
          "required" : false,
          "type" : "string"
        }, {
          "description" : "The created/updated date of the object to filter on - optional eg. '2014-10-06T13:22:17-08:00'",
          "in" : "query",
          "name" : "from",
          "required" : false,
          "type" : "string"
        }, {
          "description" : "The created/updated date of the object to filter on - optional eg. '2014-10-06T13:22:17-08:00'",
          "in" : "query",
          "name" : "to",
          "required" : false,
          "type" : "string"
        }, {
          "description" : "Optional JSON MetaData that contains callback-payload, ex: {\"callback-payload\" : <Json> }. callback-payload - is passed back in bulk job notification ",
          "in" : "formData",
          "name" : "metaData",
          "required" : false,
          "type" : "string"
        } ],
        "consumes" : [ "multipart/form-data" ],
        "responses" : {
          "200" : {
            "description" : "OK - Everything worked as expected",
            "schema" : {
              "$ref" : "#/definitions/BulkQuery"
            }
          },
          "400" : {
            "description" : "Bad Request - Often due to a missing request parameter"
          },
          "401" : {
            "description" : "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "403" : {
            "description" : "Forbidden - Access to the resource by the provider is forbidden"
          },
          "404" : {
            "description" : "Not found - The requested resource is not found"
          },
          "405" : {
            "description" : "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406" : {
            "description" : "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409" : {
            "description" : "Conflict - If a resource being created already exists"
          },
          "415" : {
            "description" : "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "500" : {
            "description" : "Server error - Something went wrong on the Cloud Elements server"
          },
          "502" : {
            "description" : "Provider server error - Something went wrong on the Provider or Endpoint's server"
          }
        },
        "summary" : "Create an asynchronous bulk query job.",
        "tags" : [ "bulk" ]
      }
    },
    "/bulk/{id}/cancel" : {
      "put" : {
        "operationId" : "replaceBulkCancel",
        "parameters" : [ {
          "description" : "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
          "in" : "header",
          "name" : "Authorization",
          "required" : true,
          "type" : "string"
        }, {
          "description" : "The ID of the bulk job to cancel.",
          "in" : "path",
          "name" : "id",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK - Everything worked as expected",
            "schema" : {
              "$ref" : "#/definitions/BulkStatus"
            }
          },
          "400" : {
            "description" : "Bad Request - Often due to a missing request parameter"
          },
          "401" : {
            "description" : "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "403" : {
            "description" : "Forbidden - Access to the resource by the provider is forbidden"
          },
          "404" : {
            "description" : "Not found - The requested resource is not found"
          },
          "405" : {
            "description" : "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406" : {
            "description" : "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409" : {
            "description" : "Conflict - If a resource being created already exists"
          },
          "415" : {
            "description" : "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "500" : {
            "description" : "Server error - Something went wrong on the Cloud Elements server"
          },
          "502" : {
            "description" : "Provider server error - Something went wrong on the Provider or Endpoint's server"
          }
        },
        "summary" : "Cancel an asynchronous bulk query job.",
        "tags" : [ "bulk" ]
      }
    },
    "/bulk/{id}/errors" : {
      "get" : {
        "operationId" : "getBulkErrors",
        "parameters" : [ {
          "description" : "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
          "in" : "header",
          "name" : "Authorization",
          "required" : true,
          "type" : "string"
        }, {
          "description" : "The ID of the bulk job to retrieve its errors.",
          "in" : "path",
          "name" : "id",
          "required" : true,
          "type" : "string"
        }, {
          "description" : "The page size for pagination, which defaults to 200 if not supplied",
          "format" : "int64",
          "in" : "query",
          "name" : "pageSize",
          "required" : false,
          "type" : "integer"
        }, {
          "description" : "The next page cursor, taken from the response header: `elements-next-page-token`",
          "in" : "query",
          "name" : "nextPage",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK - Everything worked as expected",
            "schema" : {
              "items" : {
                "type" : "string"
              },
              "type" : "array"
            }
          },
          "400" : {
            "description" : "Bad Request - Often due to a missing request parameter"
          },
          "401" : {
            "description" : "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "403" : {
            "description" : "Forbidden - Access to the resource by the provider is forbidden"
          },
          "404" : {
            "description" : "Not found - The requested resource is not found"
          },
          "405" : {
            "description" : "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406" : {
            "description" : "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409" : {
            "description" : "Conflict - If a resource being created already exists"
          },
          "415" : {
            "description" : "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "500" : {
            "description" : "Server error - Something went wrong on the Cloud Elements server"
          },
          "502" : {
            "description" : "Provider server error - Something went wrong on the Provider or Endpoint's server"
          }
        },
        "summary" : "Retrieve the errors of a bulk job.",
        "tags" : [ "bulk" ]
      }
    },
    "/bulk/{id}/status" : {
      "get" : {
        "operationId" : "getBulkStatus",
        "parameters" : [ {
          "description" : "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
          "in" : "header",
          "name" : "Authorization",
          "required" : true,
          "type" : "string"
        }, {
          "description" : "The ID of the bulk job to retrieve its status.",
          "in" : "path",
          "name" : "id",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK - Everything worked as expected",
            "schema" : {
              "$ref" : "#/definitions/BulkStatus"
            }
          },
          "400" : {
            "description" : "Bad Request - Often due to a missing request parameter"
          },
          "401" : {
            "description" : "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "403" : {
            "description" : "Forbidden - Access to the resource by the provider is forbidden"
          },
          "404" : {
            "description" : "Not found - The requested resource is not found"
          },
          "405" : {
            "description" : "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406" : {
            "description" : "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409" : {
            "description" : "Conflict - If a resource being created already exists"
          },
          "415" : {
            "description" : "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "500" : {
            "description" : "Server error - Something went wrong on the Cloud Elements server"
          },
          "502" : {
            "description" : "Provider server error - Something went wrong on the Provider or Endpoint's server"
          }
        },
        "summary" : "Retrieve the status of a bulk job.",
        "tags" : [ "bulk" ]
      }
    },
    "/bulk/{id}/{objectName}" : {
      "get" : {
        "operationId" : "getBulkByObjectName",
        "parameters" : [ {
          "description" : "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
          "in" : "header",
          "name" : "Authorization",
          "required" : true,
          "type" : "string"
        }, {
          "description" : "The ID of the bulk job",
          "in" : "path",
          "name" : "id",
          "required" : true,
          "type" : "string"
        }, {
          "description" : "The name of the object",
          "in" : "path",
          "name" : "objectName",
          "required" : true,
          "type" : "string"
        } ],
        "produces" : [ "text/csv", "application/json" ],
        "responses" : {
          "200" : {
            "description" : "OK - Everything worked as expected",
            "schema" : {
              "type" : "file"
            }
          },
          "400" : {
            "description" : "Bad Request - Often due to a missing request parameter"
          },
          "401" : {
            "description" : "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "403" : {
            "description" : "Forbidden - Access to the resource by the provider is forbidden"
          },
          "404" : {
            "description" : "Not found - The requested resource is not found"
          },
          "405" : {
            "description" : "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406" : {
            "description" : "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409" : {
            "description" : "Conflict - If a resource being created already exists"
          },
          "415" : {
            "description" : "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "500" : {
            "description" : "Server error - Something went wrong on the Cloud Elements server"
          },
          "502" : {
            "description" : "Provider server error - Something went wrong on the Provider or Endpoint's server"
          }
        },
        "summary" : "Retrieve the results of an asynchronous bulk query.",
        "tags" : [ "bulk" ]
      }
    },
    "/bulk/{objectName}" : {
      "post" : {
        "operationId" : "createBulkByObjectName",
        "parameters" : [ {
          "description" : "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
          "in" : "header",
          "name" : "Authorization",
          "required" : true,
          "type" : "string"
        }, {
          "description" : "The Url to send the notification to when the Job is completed",
          "in" : "header",
          "name" : "Elements-Async-Callback-Url",
          "required" : false,
          "type" : "string"
        }, {
          "description" : "The name of the object for which data needs to be uploaded.",
          "in" : "path",
          "name" : "objectName",
          "required" : true,
          "type" : "string"
        }, {
          "description" : "Optional JSON MetaData that contains callback-payload, path or format, ex: {\"path\" : <path for the sub resource>, \"format\": <json/csv>, \"callback-payload\":<json>}. path - is passed to the endpoint for bulk loading the data into a nested object. Optional JSON Metadata that contains identifierFieldName, action, listId or campaignId. The identifierField name is used for upserts and the optional fields like listId or campaignId. Example: {\"listId\":\"1014\",\"action\":\"upsert\"}. If the Upload format is JSON pass metadata as {\"format\":\"json\"}. callback-payload - is passed back in bulk job notification ",
          "in" : "formData",
          "name" : "metaData",
          "required" : false,
          "type" : "string"
        }, {
          "description" : "The file of objects to bulk load. If the JSON file upload, each JSON record should be in a single line",
          "in" : "formData",
          "name" : "file",
          "type" : "file"
        } ],
        "consumes" : [ "multipart/form-data" ],
        "responses" : {
          "200" : {
            "description" : "OK - Everything worked as expected",
            "schema" : {
              "$ref" : "#/definitions/BulkUploadResponse"
            }
          },
          "400" : {
            "description" : "Bad Request - Often due to a missing request parameter"
          },
          "401" : {
            "description" : "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "403" : {
            "description" : "Forbidden - Access to the resource by the provider is forbidden"
          },
          "404" : {
            "description" : "Not found - The requested resource is not found"
          },
          "405" : {
            "description" : "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406" : {
            "description" : "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409" : {
            "description" : "Conflict - If a resource being created already exists"
          },
          "415" : {
            "description" : "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "500" : {
            "description" : "Server error - Something went wrong on the Cloud Elements server"
          },
          "502" : {
            "description" : "Provider server error - Something went wrong on the Provider or Endpoint's server"
          }
        },
        "summary" : "Upload a file of objects to be bulk uploaded to the provider.",
        "tags" : [ "bulk" ]
      }
    },
    "/client-billing-settings" : {
      "post" : {
        "summary" : "Create a ClientBillingSettings",
        "operationId" : "createClientBillingSetting",
        "responses" : {
          "200" : {
            "description" : "OK - Everything worked as expected",
            "schema" : {
              "$ref" : "#/definitions/ClientBillingSettingsItem"
            }
          },
          "400" : {
            "description" : "Bad Request - Often due to a missing request parameter"
          },
          "401" : {
            "description" : "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500" : {
            "description" : "Server error - Something went wrong on the Cloud Elements server"
          },
          "403" : {
            "description" : "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502" : {
            "description" : "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404" : {
            "description" : "Not found - The requested resource is not found"
          },
          "415" : {
            "description" : "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405" : {
            "description" : "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406" : {
            "description" : "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409" : {
            "description" : "Conflict - If a resource being created already exists"
          }
        },
        "parameters" : [ {
          "in" : "header",
          "name" : "Authorization",
          "description" : "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
          "type" : "string",
          "required" : true
        }, {
          "schema" : {
            "$ref" : "#/definitions/ClientBillingSettingsPost"
          },
          "in" : "body",
          "name" : "Body",
          "description" : "Body",
          "required" : true
        } ],
        "tags" : [ "client-billing-settings" ]
      },
      "get" : {
        "summary" : "Retrieve a list of ClientBillingSettings",
        "operationId" : "getClientBillingSettings",
        "responses" : {
          "200" : {
            "description" : "OK - Everything worked as expected",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/ClientBillingSettingsCollection"
              }
            }
          },
          "400" : {
            "description" : "Bad Request - Often due to a missing request parameter"
          },
          "401" : {
            "description" : "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500" : {
            "description" : "Server error - Something went wrong on the Cloud Elements server"
          },
          "403" : {
            "description" : "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502" : {
            "description" : "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404" : {
            "description" : "Not found - The requested resource is not found"
          },
          "415" : {
            "description" : "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405" : {
            "description" : "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406" : {
            "description" : "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409" : {
            "description" : "Conflict - If a resource being created already exists"
          }
        },
        "parameters" : [ {
          "in" : "header",
          "name" : "Authorization",
          "description" : "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
          "type" : "string",
          "required" : true
        }, {
          "in" : "query",
          "name" : "[att]:in",
          "description" : "Filter the collection by attribute list. ",
          "type" : "string",
          "required" : false
        }, {
          "in" : "query",
          "name" : "include",
          "description" : "Expand response to get full related object intead of ID. See the expand guide for more info.",
          "type" : "string",
          "required" : false
        }, {
          "in" : "query",
          "name" : "fields",
          "description" : "List of fields you want returned separated by a coma. You can alias the returned field by adding the alias after a column",
          "type" : "string",
          "required" : false
        }, {
          "in" : "query",
          "name" : "offset",
          "description" : "The collection items offset",
          "type" : "integer",
          "required" : false
        }, {
          "in" : "query",
          "name" : "limit",
          "description" : "The collection items limit",
          "type" : "integer",
          "required" : false
        }, {
          "in" : "query",
          "name" : "includeInactive",
          "description" : "Return the list of inactive objects in the results. By default only active objects are returned",
          "type" : "string",
          "required" : false
        }, {
          "in" : "query",
          "name" : "[att]:contains",
          "description" : "Search a specific attribute partially",
          "type" : "string",
          "required" : false
        }, {
          "schema" : {
            "$ref" : "#/definitions/array"
          },
          "in" : "query",
          "name" : "sort",
          "description" : "The collection items sort field and order (prefix with \"-\" for descending sort].",
          "required" : false
        }, {
          "in" : "query",
          "name" : "q",
          "description" : "Global search for the object",
          "type" : "string",
          "required" : false
        }, {
          "in" : "query",
          "name" : "[att]",
          "description" : "Filter any attribute by its value. You can search subobjects by using the qualified attribute name. ",
          "type" : "string",
          "required" : false
        } ],
        "tags" : [ "client-billing-settings" ]
      }
    },
    "/client-billing-settings/{id}" : {
      "patch" : {
        "summary" : "Partially edit a ClientBillingSettings",
        "operationId" : "updateClientBillingSettingById",
        "responses" : {
          "200" : {
            "description" : "OK - Everything worked as expected",
            "schema" : {
              "$ref" : "#/definitions/ClientBillingSettingsItem"
            }
          },
          "400" : {
            "description" : "Bad Request - Often due to a missing request parameter"
          },
          "401" : {
            "description" : "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500" : {
            "description" : "Server error - Something went wrong on the Cloud Elements server"
          },
          "403" : {
            "description" : "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502" : {
            "description" : "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404" : {
            "description" : "Not found - The requested resource is not found"
          },
          "415" : {
            "description" : "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405" : {
            "description" : "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406" : {
            "description" : "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409" : {
            "description" : "Conflict - If a resource being created already exists"
          }
        },
        "parameters" : [ {
          "in" : "header",
          "name" : "Authorization",
          "description" : "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
          "type" : "string",
          "required" : true
        }, {
          "in" : "path",
          "name" : "id",
          "description" : "The resource identifier",
          "type" : "string",
          "required" : true
        }, {
          "schema" : {
            "$ref" : "#/definitions/ClientBillingSettingsPatch"
          },
          "in" : "body",
          "name" : "JSON",
          "description" : "JSON",
          "required" : true
        } ],
        "tags" : [ "client-billing-settings" ]
      },
      "get" : {
        "summary" : "Retrieve a ClientBillingSettings",
        "operationId" : "getClientBillingSettingById",
        "responses" : {
          "200" : {
            "description" : "OK - Everything worked as expected",
            "schema" : {
              "$ref" : "#/definitions/ClientBillingSettingsItem"
            }
          },
          "400" : {
            "description" : "Bad Request - Often due to a missing request parameter"
          },
          "401" : {
            "description" : "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500" : {
            "description" : "Server error - Something went wrong on the Cloud Elements server"
          },
          "403" : {
            "description" : "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502" : {
            "description" : "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404" : {
            "description" : "Not found - The requested resource is not found"
          },
          "415" : {
            "description" : "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405" : {
            "description" : "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406" : {
            "description" : "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409" : {
            "description" : "Conflict - If a resource being created already exists"
          }
        },
        "parameters" : [ {
          "in" : "header",
          "name" : "Authorization",
          "description" : "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
          "type" : "string",
          "required" : true
        }, {
          "in" : "path",
          "name" : "id",
          "description" : "The resource identifier",
          "type" : "string",
          "required" : true
        } ],
        "tags" : [ "client-billing-settings" ]
      },
      "put" : {
        "summary" : "Update a ClientBillingSettings",
        "operationId" : "replaceClientBillingSettingById",
        "responses" : {
          "200" : {
            "description" : "OK - Everything worked as expected",
            "schema" : {
              "$ref" : "#/definitions/ClientBillingSettingsPut"
            }
          },
          "400" : {
            "description" : "Bad Request - Often due to a missing request parameter"
          },
          "401" : {
            "description" : "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500" : {
            "description" : "Server error - Something went wrong on the Cloud Elements server"
          },
          "403" : {
            "description" : "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502" : {
            "description" : "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404" : {
            "description" : "Not found - The requested resource is not found"
          },
          "415" : {
            "description" : "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405" : {
            "description" : "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406" : {
            "description" : "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409" : {
            "description" : "Conflict - If a resource being created already exists"
          }
        },
        "parameters" : [ {
          "in" : "header",
          "name" : "Authorization",
          "description" : "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
          "type" : "string",
          "required" : true
        }, {
          "in" : "path",
          "name" : "id",
          "description" : "The resource identifier",
          "type" : "string",
          "required" : true
        }, {
          "schema" : {
            "$ref" : "#/definitions/ClientBillingSettingsPut"
          },
          "in" : "body",
          "name" : "JSON",
          "description" : "JSON",
          "required" : true
        } ],
        "tags" : [ "client-billing-settings" ]
      }
    },
    "/clients" : {
      "post" : {
        "summary" : "Create a Clients",
        "operationId" : "createClient",
        "responses" : {
          "200" : {
            "description" : "OK - Everything worked as expected",
            "schema" : {
              "$ref" : "#/definitions/ClientsItem"
            }
          },
          "400" : {
            "description" : "Bad Request - Often due to a missing request parameter"
          },
          "401" : {
            "description" : "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500" : {
            "description" : "Server error - Something went wrong on the Cloud Elements server"
          },
          "403" : {
            "description" : "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502" : {
            "description" : "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404" : {
            "description" : "Not found - The requested resource is not found"
          },
          "415" : {
            "description" : "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405" : {
            "description" : "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406" : {
            "description" : "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409" : {
            "description" : "Conflict - If a resource being created already exists"
          }
        },
        "parameters" : [ {
          "in" : "header",
          "name" : "Authorization",
          "description" : "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
          "type" : "string",
          "required" : true
        }, {
          "schema" : {
            "$ref" : "#/definitions/ClientsPost"
          },
          "in" : "body",
          "name" : "Body",
          "description" : "Body",
          "required" : true
        } ],
        "tags" : [ "clients" ]
      },
      "get" : {
        "summary" : "Retrieve a list of Clients",
        "operationId" : "getClients",
        "responses" : {
          "200" : {
            "description" : "OK - Everything worked as expected",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/ClientsCollection"
              }
            }
          },
          "400" : {
            "description" : "Bad Request - Often due to a missing request parameter"
          },
          "401" : {
            "description" : "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500" : {
            "description" : "Server error - Something went wrong on the Cloud Elements server"
          },
          "403" : {
            "description" : "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502" : {
            "description" : "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404" : {
            "description" : "Not found - The requested resource is not found"
          },
          "415" : {
            "description" : "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405" : {
            "description" : "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406" : {
            "description" : "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409" : {
            "description" : "Conflict - If a resource being created already exists"
          }
        },
        "parameters" : [ {
          "in" : "header",
          "name" : "Authorization",
          "description" : "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
          "type" : "string",
          "required" : true
        }, {
          "in" : "query",
          "name" : "includeInactive",
          "description" : "Return the list of inactive objects in the results. By default only active objects are returned",
          "type" : "string",
          "required" : false
        }, {
          "in" : "query",
          "name" : "[att]:contains",
          "description" : "Search a specific attribute partially",
          "type" : "string",
          "required" : false
        }, {
          "in" : "query",
          "name" : "[att]",
          "description" : "Filter any attribute by its value. You can search subobjects by using the qualified attribute name. ",
          "type" : "string",
          "required" : false
        }, {
          "in" : "query",
          "name" : "[att]:in",
          "description" : "Filter the collection by attribute list. ",
          "type" : "string",
          "required" : false
        }, {
          "in" : "query",
          "name" : "where",
          "description" : ".",
          "type" : "string",
          "required" : false
        }, {
          "in" : "query",
          "name" : "offset",
          "description" : "The collection items offset",
          "type" : "integer",
          "required" : false
        }, {
          "in" : "query",
          "name" : "limit",
          "description" : "The collection items limit",
          "type" : "integer",
          "required" : false
        }, {
          "in" : "query",
          "name" : "sort",
          "description" : "The collection items sort field and order (prefix with \"-\" for descending sort].",
          "type" : "string",
          "required" : false
        } ],
        "tags" : [ "clients" ]
      }
    },
    "/clients/{id}" : {
      "patch" : {
        "summary" : "Partially edit a Clients",
        "operationId" : "updateClientById",
        "responses" : {
          "200" : {
            "description" : "OK - Everything worked as expected",
            "schema" : {
              "$ref" : "#/definitions/ClientsItem"
            }
          },
          "400" : {
            "description" : "Bad Request - Often due to a missing request parameter"
          },
          "401" : {
            "description" : "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500" : {
            "description" : "Server error - Something went wrong on the Cloud Elements server"
          },
          "403" : {
            "description" : "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502" : {
            "description" : "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404" : {
            "description" : "Not found - The requested resource is not found"
          },
          "415" : {
            "description" : "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405" : {
            "description" : "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406" : {
            "description" : "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409" : {
            "description" : "Conflict - If a resource being created already exists"
          }
        },
        "parameters" : [ {
          "in" : "header",
          "name" : "Authorization",
          "description" : "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
          "type" : "string",
          "required" : true
        }, {
          "in" : "path",
          "name" : "id",
          "description" : "The resource identifier",
          "type" : "string",
          "required" : true
        }, {
          "schema" : {
            "$ref" : "#/definitions/ClientsPatch"
          },
          "in" : "body",
          "name" : "JSON",
          "description" : "JSON",
          "required" : true
        } ],
        "tags" : [ "clients" ]
      },
      "get" : {
        "summary" : "Retrieve a Clients",
        "operationId" : "getClientById",
        "responses" : {
          "200" : {
            "description" : "OK - Everything worked as expected",
            "schema" : {
              "$ref" : "#/definitions/ClientsItem"
            }
          },
          "400" : {
            "description" : "Bad Request - Often due to a missing request parameter"
          },
          "401" : {
            "description" : "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500" : {
            "description" : "Server error - Something went wrong on the Cloud Elements server"
          },
          "403" : {
            "description" : "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502" : {
            "description" : "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404" : {
            "description" : "Not found - The requested resource is not found"
          },
          "415" : {
            "description" : "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405" : {
            "description" : "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406" : {
            "description" : "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409" : {
            "description" : "Conflict - If a resource being created already exists"
          }
        },
        "parameters" : [ {
          "in" : "header",
          "name" : "Authorization",
          "description" : "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
          "type" : "string",
          "required" : true
        }, {
          "in" : "path",
          "name" : "id",
          "description" : "The resource identifier",
          "type" : "string",
          "required" : true
        } ],
        "tags" : [ "clients" ]
      },
      "put" : {
        "summary" : "Update a Clients",
        "operationId" : "replaceClientById",
        "responses" : {
          "200" : {
            "description" : "OK - Everything worked as expected",
            "schema" : {
              "$ref" : "#/definitions/ClientsPut"
            }
          },
          "400" : {
            "description" : "Bad Request - Often due to a missing request parameter"
          },
          "401" : {
            "description" : "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500" : {
            "description" : "Server error - Something went wrong on the Cloud Elements server"
          },
          "403" : {
            "description" : "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502" : {
            "description" : "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404" : {
            "description" : "Not found - The requested resource is not found"
          },
          "415" : {
            "description" : "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405" : {
            "description" : "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406" : {
            "description" : "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409" : {
            "description" : "Conflict - If a resource being created already exists"
          }
        },
        "parameters" : [ {
          "in" : "header",
          "name" : "Authorization",
          "description" : "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
          "type" : "string",
          "required" : true
        }, {
          "in" : "path",
          "name" : "id",
          "description" : "The resource identifier",
          "type" : "string",
          "required" : true
        }, {
          "schema" : {
            "$ref" : "#/definitions/ClientsPut"
          },
          "in" : "body",
          "name" : "JSON",
          "description" : "JSON",
          "required" : true
        } ],
        "tags" : [ "clients" ]
      }
    },
    "/contacts" : {
      "post" : {
        "summary" : "Create a Contacts",
        "operationId" : "createContact",
        "responses" : {
          "200" : {
            "description" : "OK - Everything worked as expected",
            "schema" : {
              "$ref" : "#/definitions/ContactsItem"
            }
          },
          "400" : {
            "description" : "Bad Request - Often due to a missing request parameter"
          },
          "401" : {
            "description" : "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500" : {
            "description" : "Server error - Something went wrong on the Cloud Elements server"
          },
          "403" : {
            "description" : "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502" : {
            "description" : "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404" : {
            "description" : "Not found - The requested resource is not found"
          },
          "415" : {
            "description" : "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405" : {
            "description" : "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406" : {
            "description" : "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409" : {
            "description" : "Conflict - If a resource being created already exists"
          }
        },
        "parameters" : [ {
          "in" : "header",
          "name" : "Authorization",
          "description" : "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
          "type" : "string",
          "required" : true
        }, {
          "schema" : {
            "$ref" : "#/definitions/ContactsPost"
          },
          "in" : "body",
          "name" : "Body",
          "description" : "Body",
          "required" : true
        } ],
        "tags" : [ "contacts" ]
      },
      "get" : {
        "summary" : "Retrieve a list of Contacts",
        "operationId" : "getContacts",
        "responses" : {
          "200" : {
            "description" : "OK - Everything worked as expected",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/ContactsCollection"
              }
            }
          },
          "400" : {
            "description" : "Bad Request - Often due to a missing request parameter"
          },
          "401" : {
            "description" : "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500" : {
            "description" : "Server error - Something went wrong on the Cloud Elements server"
          },
          "403" : {
            "description" : "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502" : {
            "description" : "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404" : {
            "description" : "Not found - The requested resource is not found"
          },
          "415" : {
            "description" : "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405" : {
            "description" : "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406" : {
            "description" : "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409" : {
            "description" : "Conflict - If a resource being created already exists"
          }
        },
        "parameters" : [ {
          "in" : "header",
          "name" : "Authorization",
          "description" : "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
          "type" : "string",
          "required" : true
        }, {
          "in" : "query",
          "name" : "q",
          "description" : "Global search for the object",
          "type" : "string",
          "required" : false
        }, {
          "schema" : {
            "$ref" : "#/definitions/array"
          },
          "in" : "query",
          "name" : "sort",
          "description" : "The collection items sort field and order (prefix with \"-\" for descending sort].",
          "required" : false
        }, {
          "in" : "query",
          "name" : "include",
          "description" : "Expand response to get full related object intead of ID. See the expand guide for more info.",
          "type" : "string",
          "required" : false
        }, {
          "in" : "query",
          "name" : "fields",
          "description" : "List of fields you want returned separated by a coma. You can alias the returned field by adding the alias after a column",
          "type" : "string",
          "required" : false
        }, {
          "in" : "query",
          "name" : "offset",
          "description" : "The collection items offset",
          "type" : "integer",
          "required" : false
        }, {
          "in" : "query",
          "name" : "limit",
          "description" : "The collection items limit",
          "type" : "integer",
          "required" : false
        }, {
          "in" : "query",
          "name" : "[att]",
          "description" : "Filter any attribute by its value. You can search subobjects by using the qualified attribute name. ",
          "type" : "string",
          "required" : false
        }, {
          "in" : "query",
          "name" : "[att]:in",
          "description" : "Filter the collection by attribute list. ",
          "type" : "string",
          "required" : false
        }, {
          "in" : "query",
          "name" : "[att]:contains",
          "description" : "Search a specific attribute partially",
          "type" : "string",
          "required" : false
        }, {
          "in" : "query",
          "name" : "includeInactive",
          "description" : "Return the list of inactive objects in the results. By default only active objects are returned",
          "type" : "string",
          "required" : false
        } ],
        "tags" : [ "contacts" ]
      }
    },
    "/contacts/{id}" : {
      "patch" : {
        "summary" : "Partially edit a Contacts",
        "operationId" : "updateContactById",
        "responses" : {
          "200" : {
            "description" : "OK - Everything worked as expected",
            "schema" : {
              "$ref" : "#/definitions/ContactsItem"
            }
          },
          "400" : {
            "description" : "Bad Request - Often due to a missing request parameter"
          },
          "401" : {
            "description" : "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500" : {
            "description" : "Server error - Something went wrong on the Cloud Elements server"
          },
          "403" : {
            "description" : "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502" : {
            "description" : "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404" : {
            "description" : "Not found - The requested resource is not found"
          },
          "415" : {
            "description" : "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405" : {
            "description" : "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406" : {
            "description" : "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409" : {
            "description" : "Conflict - If a resource being created already exists"
          }
        },
        "parameters" : [ {
          "in" : "header",
          "name" : "Authorization",
          "description" : "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
          "type" : "string",
          "required" : true
        }, {
          "in" : "path",
          "name" : "id",
          "description" : "The resource identifier",
          "type" : "string",
          "required" : true
        }, {
          "schema" : {
            "$ref" : "#/definitions/ContactsPatch"
          },
          "in" : "body",
          "name" : "JSON",
          "description" : "JSON",
          "required" : true
        } ],
        "tags" : [ "contacts" ]
      },
      "get" : {
        "summary" : "Retrieve a Contacts",
        "operationId" : "getContactById",
        "responses" : {
          "200" : {
            "description" : "OK - Everything worked as expected",
            "schema" : {
              "$ref" : "#/definitions/ContactsItem"
            }
          },
          "400" : {
            "description" : "Bad Request - Often due to a missing request parameter"
          },
          "401" : {
            "description" : "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500" : {
            "description" : "Server error - Something went wrong on the Cloud Elements server"
          },
          "403" : {
            "description" : "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502" : {
            "description" : "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404" : {
            "description" : "Not found - The requested resource is not found"
          },
          "415" : {
            "description" : "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405" : {
            "description" : "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406" : {
            "description" : "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409" : {
            "description" : "Conflict - If a resource being created already exists"
          }
        },
        "parameters" : [ {
          "in" : "header",
          "name" : "Authorization",
          "description" : "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
          "type" : "string",
          "required" : true
        }, {
          "in" : "path",
          "name" : "id",
          "description" : "The resource identifier",
          "type" : "string",
          "required" : true
        } ],
        "tags" : [ "contacts" ]
      },
      "put" : {
        "summary" : "Update a Contacts",
        "operationId" : "replaceContactById",
        "responses" : {
          "200" : {
            "description" : "OK - Everything worked as expected",
            "schema" : {
              "$ref" : "#/definitions/ContactsPut"
            }
          },
          "400" : {
            "description" : "Bad Request - Often due to a missing request parameter"
          },
          "401" : {
            "description" : "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500" : {
            "description" : "Server error - Something went wrong on the Cloud Elements server"
          },
          "403" : {
            "description" : "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502" : {
            "description" : "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404" : {
            "description" : "Not found - The requested resource is not found"
          },
          "415" : {
            "description" : "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405" : {
            "description" : "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406" : {
            "description" : "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409" : {
            "description" : "Conflict - If a resource being created already exists"
          }
        },
        "parameters" : [ {
          "in" : "header",
          "name" : "Authorization",
          "description" : "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
          "type" : "string",
          "required" : true
        }, {
          "in" : "path",
          "name" : "id",
          "description" : "The resource identifier",
          "type" : "string",
          "required" : true
        }, {
          "schema" : {
            "$ref" : "#/definitions/ContactsPut"
          },
          "in" : "body",
          "name" : "JSON",
          "description" : "JSON",
          "required" : true
        } ],
        "tags" : [ "contacts" ]
      }
    },
    "/contracts" : {
      "post" : {
        "summary" : "Create a Contracts",
        "operationId" : "createContract",
        "responses" : {
          "200" : {
            "description" : "OK - Everything worked as expected",
            "schema" : {
              "$ref" : "#/definitions/ContractsItem"
            }
          },
          "400" : {
            "description" : "Bad Request - Often due to a missing request parameter"
          },
          "401" : {
            "description" : "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500" : {
            "description" : "Server error - Something went wrong on the Cloud Elements server"
          },
          "403" : {
            "description" : "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502" : {
            "description" : "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404" : {
            "description" : "Not found - The requested resource is not found"
          },
          "415" : {
            "description" : "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405" : {
            "description" : "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406" : {
            "description" : "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409" : {
            "description" : "Conflict - If a resource being created already exists"
          }
        },
        "parameters" : [ {
          "in" : "header",
          "name" : "Authorization",
          "description" : "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
          "type" : "string",
          "required" : true
        }, {
          "schema" : {
            "$ref" : "#/definitions/ContractsPost"
          },
          "in" : "body",
          "name" : "Body",
          "description" : "Body",
          "required" : true
        } ],
        "tags" : [ "contracts" ]
      },
      "get" : {
        "summary" : "Retrieve a list of Contracts",
        "operationId" : "getContracts",
        "responses" : {
          "200" : {
            "description" : "OK - Everything worked as expected",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/ContractsCollection"
              }
            }
          },
          "400" : {
            "description" : "Bad Request - Often due to a missing request parameter"
          },
          "401" : {
            "description" : "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500" : {
            "description" : "Server error - Something went wrong on the Cloud Elements server"
          },
          "403" : {
            "description" : "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502" : {
            "description" : "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404" : {
            "description" : "Not found - The requested resource is not found"
          },
          "415" : {
            "description" : "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405" : {
            "description" : "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406" : {
            "description" : "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409" : {
            "description" : "Conflict - If a resource being created already exists"
          }
        },
        "parameters" : [ {
          "in" : "header",
          "name" : "Authorization",
          "description" : "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
          "type" : "string",
          "required" : true
        }, {
          "in" : "query",
          "name" : "includeInactive",
          "description" : "Return the list of inactive objects in the results. By default only active objects are returned",
          "type" : "string",
          "required" : false
        }, {
          "in" : "query",
          "name" : "[att]:contains",
          "description" : "Search a specific attribute partially",
          "type" : "string",
          "required" : false
        }, {
          "in" : "query",
          "name" : "[att]:in",
          "description" : "Filter the collection by attribute list. ",
          "type" : "string",
          "required" : false
        }, {
          "in" : "query",
          "name" : "[att]",
          "description" : "Filter any attribute by its value. You can search subobjects by using the qualified attribute name. ",
          "type" : "string",
          "required" : false
        }, {
          "in" : "query",
          "name" : "q",
          "description" : "Global search for the object",
          "type" : "string",
          "required" : false
        }, {
          "in" : "query",
          "name" : "limit",
          "description" : "The collection items limit",
          "type" : "integer",
          "required" : false
        }, {
          "in" : "query",
          "name" : "offset",
          "description" : "The collection items offset",
          "type" : "integer",
          "required" : false
        }, {
          "in" : "query",
          "name" : "fields",
          "description" : "List of fields you want returned separated by a coma. You can alias the returned field by adding the alias after a column",
          "type" : "string",
          "required" : false
        }, {
          "in" : "query",
          "name" : "include",
          "description" : "Expand response to get full related object intead of ID. See the expand guide for more info.",
          "type" : "string",
          "required" : false
        }, {
          "schema" : {
            "$ref" : "#/definitions/array"
          },
          "in" : "query",
          "name" : "sort",
          "description" : "The collection items sort field and order (prefix with \"-\" for descending sort].",
          "required" : false
        } ],
        "tags" : [ "contracts" ]
      }
    },
    "/contracts/{id}" : {
      "patch" : {
        "summary" : "Partially edit a Contracts",
        "operationId" : "updateContractById",
        "responses" : {
          "200" : {
            "description" : "OK - Everything worked as expected",
            "schema" : {
              "$ref" : "#/definitions/ContractsItem"
            }
          },
          "400" : {
            "description" : "Bad Request - Often due to a missing request parameter"
          },
          "401" : {
            "description" : "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500" : {
            "description" : "Server error - Something went wrong on the Cloud Elements server"
          },
          "403" : {
            "description" : "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502" : {
            "description" : "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404" : {
            "description" : "Not found - The requested resource is not found"
          },
          "415" : {
            "description" : "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405" : {
            "description" : "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406" : {
            "description" : "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409" : {
            "description" : "Conflict - If a resource being created already exists"
          }
        },
        "parameters" : [ {
          "in" : "header",
          "name" : "Authorization",
          "description" : "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
          "type" : "string",
          "required" : true
        }, {
          "in" : "path",
          "name" : "id",
          "description" : "The resource identifier",
          "type" : "string",
          "required" : true
        }, {
          "schema" : {
            "$ref" : "#/definitions/ContractsPatch"
          },
          "in" : "body",
          "name" : "JSON",
          "description" : "JSON",
          "required" : true
        } ],
        "tags" : [ "contracts" ]
      },
      "get" : {
        "summary" : "Retrieve a Contracts",
        "operationId" : "getContractById",
        "responses" : {
          "200" : {
            "description" : "OK - Everything worked as expected",
            "schema" : {
              "$ref" : "#/definitions/ContractsItem"
            }
          },
          "400" : {
            "description" : "Bad Request - Often due to a missing request parameter"
          },
          "401" : {
            "description" : "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500" : {
            "description" : "Server error - Something went wrong on the Cloud Elements server"
          },
          "403" : {
            "description" : "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502" : {
            "description" : "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404" : {
            "description" : "Not found - The requested resource is not found"
          },
          "415" : {
            "description" : "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405" : {
            "description" : "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406" : {
            "description" : "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409" : {
            "description" : "Conflict - If a resource being created already exists"
          }
        },
        "parameters" : [ {
          "in" : "header",
          "name" : "Authorization",
          "description" : "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
          "type" : "string",
          "required" : true
        }, {
          "in" : "path",
          "name" : "id",
          "description" : "The resource identifier",
          "type" : "string",
          "required" : true
        } ],
        "tags" : [ "contracts" ]
      },
      "put" : {
        "summary" : "Update a Contracts",
        "operationId" : "replaceContractById",
        "responses" : {
          "200" : {
            "description" : "OK - Everything worked as expected",
            "schema" : {
              "$ref" : "#/definitions/ContractsPut"
            }
          },
          "400" : {
            "description" : "Bad Request - Often due to a missing request parameter"
          },
          "401" : {
            "description" : "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500" : {
            "description" : "Server error - Something went wrong on the Cloud Elements server"
          },
          "403" : {
            "description" : "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502" : {
            "description" : "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404" : {
            "description" : "Not found - The requested resource is not found"
          },
          "415" : {
            "description" : "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405" : {
            "description" : "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406" : {
            "description" : "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409" : {
            "description" : "Conflict - If a resource being created already exists"
          }
        },
        "parameters" : [ {
          "in" : "header",
          "name" : "Authorization",
          "description" : "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
          "type" : "string",
          "required" : true
        }, {
          "in" : "path",
          "name" : "id",
          "description" : "The resource identifier",
          "type" : "string",
          "required" : true
        }, {
          "schema" : {
            "$ref" : "#/definitions/ContractsPut"
          },
          "in" : "body",
          "name" : "JSON",
          "description" : "JSON",
          "required" : true
        } ],
        "tags" : [ "contracts" ]
      }
    },
    "/data-view-categories" : {
      "post" : {
        "summary" : "Create a DataViewCategories",
        "operationId" : "createDataViewCategory",
        "responses" : {
          "200" : {
            "description" : "OK - Everything worked as expected",
            "schema" : {
              "$ref" : "#/definitions/DataViewCategoriesItem"
            }
          },
          "400" : {
            "description" : "Bad Request - Often due to a missing request parameter"
          },
          "401" : {
            "description" : "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500" : {
            "description" : "Server error - Something went wrong on the Cloud Elements server"
          },
          "403" : {
            "description" : "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502" : {
            "description" : "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404" : {
            "description" : "Not found - The requested resource is not found"
          },
          "415" : {
            "description" : "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405" : {
            "description" : "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406" : {
            "description" : "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409" : {
            "description" : "Conflict - If a resource being created already exists"
          }
        },
        "parameters" : [ {
          "in" : "header",
          "name" : "Authorization",
          "description" : "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
          "type" : "string",
          "required" : true
        }, {
          "schema" : {
            "$ref" : "#/definitions/DataViewCategoriesPost"
          },
          "in" : "body",
          "name" : "Body",
          "description" : "Body",
          "required" : true
        } ],
        "tags" : [ "data-view-categories" ]
      },
      "get" : {
        "summary" : "Retrieve a list of DataViewCategories",
        "operationId" : "getDataViewCategories",
        "responses" : {
          "200" : {
            "description" : "OK - Everything worked as expected",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/DataViewCategoriesCollection"
              }
            }
          },
          "400" : {
            "description" : "Bad Request - Often due to a missing request parameter"
          },
          "401" : {
            "description" : "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500" : {
            "description" : "Server error - Something went wrong on the Cloud Elements server"
          },
          "403" : {
            "description" : "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502" : {
            "description" : "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404" : {
            "description" : "Not found - The requested resource is not found"
          },
          "415" : {
            "description" : "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405" : {
            "description" : "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406" : {
            "description" : "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409" : {
            "description" : "Conflict - If a resource being created already exists"
          }
        },
        "parameters" : [ {
          "in" : "header",
          "name" : "Authorization",
          "description" : "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
          "type" : "string",
          "required" : true
        }, {
          "in" : "query",
          "name" : "q",
          "description" : "Global search for the object",
          "type" : "string",
          "required" : false
        }, {
          "in" : "query",
          "name" : "[att]:contains",
          "description" : "Search a specific attribute partially",
          "type" : "string",
          "required" : false
        }, {
          "in" : "query",
          "name" : "includeInactive",
          "description" : "Return the list of inactive objects in the results. By default only active objects are returned",
          "type" : "string",
          "required" : false
        }, {
          "in" : "query",
          "name" : "offset",
          "description" : "The collection items offset",
          "type" : "integer",
          "required" : false
        }, {
          "in" : "query",
          "name" : "[att]",
          "description" : "Filter any attribute by its value. You can search subobjects by using the qualified attribute name. ",
          "type" : "string",
          "required" : false
        }, {
          "schema" : {
            "$ref" : "#/definitions/array"
          },
          "in" : "query",
          "name" : "sort",
          "description" : "The collection items sort field and order (prefix with \"-\" for descending sort].",
          "required" : false
        }, {
          "in" : "query",
          "name" : "include",
          "description" : "Expand response to get full related object intead of ID. See the expand guide for more info.",
          "type" : "string",
          "required" : false
        }, {
          "in" : "query",
          "name" : "limit",
          "description" : "The collection items limit",
          "type" : "integer",
          "required" : false
        }, {
          "in" : "query",
          "name" : "fields",
          "description" : "List of fields you want returned separated by a coma. You can alias the returned field by adding the alias after a column",
          "type" : "string",
          "required" : false
        }, {
          "in" : "query",
          "name" : "[att]:in",
          "description" : "Filter the collection by attribute list. ",
          "type" : "string",
          "required" : false
        } ],
        "tags" : [ "data-view-categories" ]
      }
    },
    "/data-view-categories/{id}" : {
      "patch" : {
        "summary" : "Partially edit a DataViewCategories",
        "operationId" : "updateDataViewCategoryById",
        "responses" : {
          "200" : {
            "description" : "OK - Everything worked as expected",
            "schema" : {
              "$ref" : "#/definitions/DataViewCategoriesItem"
            }
          },
          "400" : {
            "description" : "Bad Request - Often due to a missing request parameter"
          },
          "401" : {
            "description" : "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500" : {
            "description" : "Server error - Something went wrong on the Cloud Elements server"
          },
          "403" : {
            "description" : "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502" : {
            "description" : "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404" : {
            "description" : "Not found - The requested resource is not found"
          },
          "415" : {
            "description" : "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405" : {
            "description" : "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406" : {
            "description" : "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409" : {
            "description" : "Conflict - If a resource being created already exists"
          }
        },
        "parameters" : [ {
          "in" : "header",
          "name" : "Authorization",
          "description" : "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
          "type" : "string",
          "required" : true
        }, {
          "in" : "path",
          "name" : "id",
          "description" : "The resource identifier",
          "type" : "string",
          "required" : true
        }, {
          "schema" : {
            "$ref" : "#/definitions/DataViewCategoriesPatch"
          },
          "in" : "body",
          "name" : "JSON",
          "description" : "JSON",
          "required" : true
        } ],
        "tags" : [ "data-view-categories" ]
      },
      "get" : {
        "summary" : "Retrieve a DataViewCategories",
        "operationId" : "getDataViewCategoryById",
        "responses" : {
          "200" : {
            "description" : "OK - Everything worked as expected",
            "schema" : {
              "$ref" : "#/definitions/DataViewCategoriesItem"
            }
          },
          "400" : {
            "description" : "Bad Request - Often due to a missing request parameter"
          },
          "401" : {
            "description" : "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500" : {
            "description" : "Server error - Something went wrong on the Cloud Elements server"
          },
          "403" : {
            "description" : "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502" : {
            "description" : "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404" : {
            "description" : "Not found - The requested resource is not found"
          },
          "415" : {
            "description" : "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405" : {
            "description" : "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406" : {
            "description" : "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409" : {
            "description" : "Conflict - If a resource being created already exists"
          }
        },
        "parameters" : [ {
          "in" : "header",
          "name" : "Authorization",
          "description" : "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
          "type" : "string",
          "required" : true
        }, {
          "in" : "path",
          "name" : "id",
          "description" : "The resource identifier",
          "type" : "string",
          "required" : true
        } ],
        "tags" : [ "data-view-categories" ]
      },
      "put" : {
        "summary" : "Update a DataViewCategories",
        "operationId" : "replaceDataViewCategoryById",
        "responses" : {
          "200" : {
            "description" : "OK - Everything worked as expected",
            "schema" : {
              "$ref" : "#/definitions/DataViewCategoriesPut"
            }
          },
          "400" : {
            "description" : "Bad Request - Often due to a missing request parameter"
          },
          "401" : {
            "description" : "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500" : {
            "description" : "Server error - Something went wrong on the Cloud Elements server"
          },
          "403" : {
            "description" : "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502" : {
            "description" : "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404" : {
            "description" : "Not found - The requested resource is not found"
          },
          "415" : {
            "description" : "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405" : {
            "description" : "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406" : {
            "description" : "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409" : {
            "description" : "Conflict - If a resource being created already exists"
          }
        },
        "parameters" : [ {
          "in" : "header",
          "name" : "Authorization",
          "description" : "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
          "type" : "string",
          "required" : true
        }, {
          "in" : "path",
          "name" : "id",
          "description" : "The resource identifier",
          "type" : "string",
          "required" : true
        }, {
          "schema" : {
            "$ref" : "#/definitions/DataViewCategoriesPut"
          },
          "in" : "body",
          "name" : "JSON",
          "description" : "JSON",
          "required" : true
        } ],
        "tags" : [ "data-view-categories" ]
      }
    },
    "/data-views" : {
      "post" : {
        "summary" : "Create a DataViews",
        "operationId" : "createDataView",
        "responses" : {
          "200" : {
            "description" : "OK - Everything worked as expected",
            "schema" : {
              "$ref" : "#/definitions/DataViewsItem"
            }
          },
          "400" : {
            "description" : "Bad Request - Often due to a missing request parameter"
          },
          "401" : {
            "description" : "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500" : {
            "description" : "Server error - Something went wrong on the Cloud Elements server"
          },
          "403" : {
            "description" : "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502" : {
            "description" : "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404" : {
            "description" : "Not found - The requested resource is not found"
          },
          "415" : {
            "description" : "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405" : {
            "description" : "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406" : {
            "description" : "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409" : {
            "description" : "Conflict - If a resource being created already exists"
          }
        },
        "parameters" : [ {
          "in" : "header",
          "name" : "Authorization",
          "description" : "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
          "type" : "string",
          "required" : true
        }, {
          "schema" : {
            "$ref" : "#/definitions/DataViewsPost"
          },
          "in" : "body",
          "name" : "Body",
          "description" : "Body",
          "required" : true
        } ],
        "tags" : [ "data-views" ]
      },
      "get" : {
        "summary" : "Retrieve a list of DataViews",
        "operationId" : "getDataViews",
        "responses" : {
          "200" : {
            "description" : "OK - Everything worked as expected",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/DataViewsCollection"
              }
            }
          },
          "400" : {
            "description" : "Bad Request - Often due to a missing request parameter"
          },
          "401" : {
            "description" : "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500" : {
            "description" : "Server error - Something went wrong on the Cloud Elements server"
          },
          "403" : {
            "description" : "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502" : {
            "description" : "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404" : {
            "description" : "Not found - The requested resource is not found"
          },
          "415" : {
            "description" : "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405" : {
            "description" : "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406" : {
            "description" : "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409" : {
            "description" : "Conflict - If a resource being created already exists"
          }
        },
        "parameters" : [ {
          "in" : "header",
          "name" : "Authorization",
          "description" : "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
          "type" : "string",
          "required" : true
        }, {
          "in" : "query",
          "name" : "[att]:in",
          "description" : "Filter the collection by attribute list. ",
          "type" : "string",
          "required" : false
        }, {
          "in" : "query",
          "name" : "[att]",
          "description" : "Filter any attribute by its value. You can search subobjects by using the qualified attribute name. ",
          "type" : "string",
          "required" : false
        }, {
          "schema" : {
            "$ref" : "#/definitions/array"
          },
          "in" : "query",
          "name" : "sort",
          "description" : "The collection items sort field and order (prefix with \"-\" for descending sort].",
          "required" : false
        }, {
          "in" : "query",
          "name" : "include",
          "description" : "Expand response to get full related object intead of ID. See the expand guide for more info.",
          "type" : "string",
          "required" : false
        }, {
          "in" : "query",
          "name" : "fields",
          "description" : "List of fields you want returned separated by a coma. You can alias the returned field by adding the alias after a column",
          "type" : "string",
          "required" : false
        }, {
          "in" : "query",
          "name" : "limit",
          "description" : "The collection items limit",
          "type" : "integer",
          "required" : false
        }, {
          "in" : "query",
          "name" : "offset",
          "description" : "The collection items offset",
          "type" : "integer",
          "required" : false
        }, {
          "in" : "query",
          "name" : "q",
          "description" : "Global search for the object",
          "type" : "string",
          "required" : false
        }, {
          "in" : "query",
          "name" : "[att]:contains",
          "description" : "Search a specific attribute partially",
          "type" : "string",
          "required" : false
        }, {
          "in" : "query",
          "name" : "includeInactive",
          "description" : "Return the list of inactive objects in the results. By default only active objects are returned",
          "type" : "string",
          "required" : false
        } ],
        "tags" : [ "data-views" ]
      }
    },
    "/data-views/{id}" : {
      "patch" : {
        "summary" : "Partially edit a DataViews",
        "operationId" : "updateDataViewById",
        "responses" : {
          "200" : {
            "description" : "OK - Everything worked as expected",
            "schema" : {
              "$ref" : "#/definitions/DataViewsItem"
            }
          },
          "400" : {
            "description" : "Bad Request - Often due to a missing request parameter"
          },
          "401" : {
            "description" : "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500" : {
            "description" : "Server error - Something went wrong on the Cloud Elements server"
          },
          "403" : {
            "description" : "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502" : {
            "description" : "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404" : {
            "description" : "Not found - The requested resource is not found"
          },
          "415" : {
            "description" : "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405" : {
            "description" : "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406" : {
            "description" : "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409" : {
            "description" : "Conflict - If a resource being created already exists"
          }
        },
        "parameters" : [ {
          "in" : "header",
          "name" : "Authorization",
          "description" : "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
          "type" : "string",
          "required" : true
        }, {
          "in" : "path",
          "name" : "id",
          "description" : "The resource identifier",
          "type" : "string",
          "required" : true
        }, {
          "schema" : {
            "$ref" : "#/definitions/DataViewsPatch"
          },
          "in" : "body",
          "name" : "JSON",
          "description" : "JSON",
          "required" : true
        } ],
        "tags" : [ "data-views" ]
      },
      "get" : {
        "summary" : "Retrieve a DataViews",
        "operationId" : "getDataViewById",
        "responses" : {
          "200" : {
            "description" : "OK - Everything worked as expected",
            "schema" : {
              "$ref" : "#/definitions/DataViewsItem"
            }
          },
          "400" : {
            "description" : "Bad Request - Often due to a missing request parameter"
          },
          "401" : {
            "description" : "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500" : {
            "description" : "Server error - Something went wrong on the Cloud Elements server"
          },
          "403" : {
            "description" : "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502" : {
            "description" : "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404" : {
            "description" : "Not found - The requested resource is not found"
          },
          "415" : {
            "description" : "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405" : {
            "description" : "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406" : {
            "description" : "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409" : {
            "description" : "Conflict - If a resource being created already exists"
          }
        },
        "parameters" : [ {
          "in" : "header",
          "name" : "Authorization",
          "description" : "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
          "type" : "string",
          "required" : true
        }, {
          "in" : "path",
          "name" : "id",
          "description" : "The resource identifier",
          "type" : "string",
          "required" : true
        } ],
        "tags" : [ "data-views" ]
      },
      "put" : {
        "summary" : "Update a DataViews",
        "operationId" : "replaceDataViewById",
        "responses" : {
          "200" : {
            "description" : "OK - Everything worked as expected",
            "schema" : {
              "$ref" : "#/definitions/DataViewsPut"
            }
          },
          "400" : {
            "description" : "Bad Request - Often due to a missing request parameter"
          },
          "401" : {
            "description" : "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500" : {
            "description" : "Server error - Something went wrong on the Cloud Elements server"
          },
          "403" : {
            "description" : "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502" : {
            "description" : "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404" : {
            "description" : "Not found - The requested resource is not found"
          },
          "415" : {
            "description" : "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405" : {
            "description" : "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406" : {
            "description" : "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409" : {
            "description" : "Conflict - If a resource being created already exists"
          }
        },
        "parameters" : [ {
          "in" : "header",
          "name" : "Authorization",
          "description" : "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
          "type" : "string",
          "required" : true
        }, {
          "in" : "path",
          "name" : "id",
          "description" : "The resource identifier",
          "type" : "string",
          "required" : true
        }, {
          "schema" : {
            "$ref" : "#/definitions/DataViewsPut"
          },
          "in" : "body",
          "name" : "JSON",
          "description" : "JSON",
          "required" : true
        } ],
        "tags" : [ "data-views" ]
      }
    },
    "/dispatch-custom-locations" : {
      "post" : {
        "summary" : "Create a DispatchCustomLocations",
        "operationId" : "createDispatchCustomLocation",
        "responses" : {
          "200" : {
            "description" : "OK - Everything worked as expected",
            "schema" : {
              "$ref" : "#/definitions/DispatchCustomLocationsItem"
            }
          },
          "400" : {
            "description" : "Bad Request - Often due to a missing request parameter"
          },
          "401" : {
            "description" : "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500" : {
            "description" : "Server error - Something went wrong on the Cloud Elements server"
          },
          "403" : {
            "description" : "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502" : {
            "description" : "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404" : {
            "description" : "Not found - The requested resource is not found"
          },
          "415" : {
            "description" : "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405" : {
            "description" : "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406" : {
            "description" : "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409" : {
            "description" : "Conflict - If a resource being created already exists"
          }
        },
        "parameters" : [ {
          "in" : "header",
          "name" : "Authorization",
          "description" : "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
          "type" : "string",
          "required" : true
        }, {
          "schema" : {
            "$ref" : "#/definitions/DispatchCustomLocationsPost"
          },
          "in" : "body",
          "name" : "Body",
          "description" : "Body",
          "required" : true
        } ],
        "tags" : [ "dispatch-custom-locations" ]
      },
      "get" : {
        "summary" : "Retrieve a list of DispatchCustomLocations",
        "operationId" : "getDispatchCustomLocations",
        "responses" : {
          "200" : {
            "description" : "OK - Everything worked as expected",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/DispatchCustomLocationsCollection"
              }
            }
          },
          "400" : {
            "description" : "Bad Request - Often due to a missing request parameter"
          },
          "401" : {
            "description" : "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500" : {
            "description" : "Server error - Something went wrong on the Cloud Elements server"
          },
          "403" : {
            "description" : "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502" : {
            "description" : "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404" : {
            "description" : "Not found - The requested resource is not found"
          },
          "415" : {
            "description" : "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405" : {
            "description" : "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406" : {
            "description" : "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409" : {
            "description" : "Conflict - If a resource being created already exists"
          }
        },
        "parameters" : [ {
          "in" : "header",
          "name" : "Authorization",
          "description" : "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
          "type" : "string",
          "required" : true
        }, {
          "in" : "query",
          "name" : "includeInactive",
          "description" : "Return the list of inactive objects in the results. By default only active objects are returned",
          "type" : "string",
          "required" : false
        }, {
          "in" : "query",
          "name" : "[att]:contains",
          "description" : "Search a specific attribute partially",
          "type" : "string",
          "required" : false
        }, {
          "in" : "query",
          "name" : "[att]",
          "description" : "Filter any attribute by its value. You can search subobjects by using the qualified attribute name. ",
          "type" : "string",
          "required" : false
        }, {
          "in" : "query",
          "name" : "q",
          "description" : "Global search for the object",
          "type" : "string",
          "required" : false
        }, {
          "schema" : {
            "$ref" : "#/definitions/array"
          },
          "in" : "query",
          "name" : "sort",
          "description" : "The collection items sort field and order (prefix with \"-\" for descending sort].",
          "required" : false
        }, {
          "in" : "query",
          "name" : "include",
          "description" : "Expand response to get full related object intead of ID. See the expand guide for more info.",
          "type" : "string",
          "required" : false
        }, {
          "in" : "query",
          "name" : "fields",
          "description" : "List of fields you want returned separated by a coma. You can alias the returned field by adding the alias after a column",
          "type" : "string",
          "required" : false
        }, {
          "in" : "query",
          "name" : "limit",
          "description" : "The collection items limit",
          "type" : "integer",
          "required" : false
        }, {
          "in" : "query",
          "name" : "offset",
          "description" : "The collection items offset",
          "type" : "integer",
          "required" : false
        }, {
          "in" : "query",
          "name" : "[att]:in",
          "description" : "Filter the collection by attribute list. ",
          "type" : "string",
          "required" : false
        } ],
        "tags" : [ "dispatch-custom-locations" ]
      }
    },
    "/dispatch-custom-locations/{id}" : {
      "patch" : {
        "summary" : "Partially edit a DispatchCustomLocations",
        "operationId" : "updateDispatchCustomLocationById",
        "responses" : {
          "200" : {
            "description" : "OK - Everything worked as expected",
            "schema" : {
              "$ref" : "#/definitions/DispatchCustomLocationsItem"
            }
          },
          "400" : {
            "description" : "Bad Request - Often due to a missing request parameter"
          },
          "401" : {
            "description" : "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500" : {
            "description" : "Server error - Something went wrong on the Cloud Elements server"
          },
          "403" : {
            "description" : "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502" : {
            "description" : "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404" : {
            "description" : "Not found - The requested resource is not found"
          },
          "415" : {
            "description" : "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405" : {
            "description" : "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406" : {
            "description" : "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409" : {
            "description" : "Conflict - If a resource being created already exists"
          }
        },
        "parameters" : [ {
          "in" : "header",
          "name" : "Authorization",
          "description" : "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
          "type" : "string",
          "required" : true
        }, {
          "in" : "path",
          "name" : "id",
          "description" : "The resource identifier",
          "type" : "string",
          "required" : true
        }, {
          "schema" : {
            "$ref" : "#/definitions/DispatchCustomLocationsPatch"
          },
          "in" : "body",
          "name" : "JSON",
          "description" : "JSON",
          "required" : true
        } ],
        "tags" : [ "dispatch-custom-locations" ]
      },
      "get" : {
        "summary" : "Retrieve a DispatchCustomLocations",
        "operationId" : "getDispatchCustomLocationById",
        "responses" : {
          "200" : {
            "description" : "OK - Everything worked as expected",
            "schema" : {
              "$ref" : "#/definitions/DispatchCustomLocationsItem"
            }
          },
          "400" : {
            "description" : "Bad Request - Often due to a missing request parameter"
          },
          "401" : {
            "description" : "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500" : {
            "description" : "Server error - Something went wrong on the Cloud Elements server"
          },
          "403" : {
            "description" : "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502" : {
            "description" : "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404" : {
            "description" : "Not found - The requested resource is not found"
          },
          "415" : {
            "description" : "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405" : {
            "description" : "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406" : {
            "description" : "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409" : {
            "description" : "Conflict - If a resource being created already exists"
          }
        },
        "parameters" : [ {
          "in" : "header",
          "name" : "Authorization",
          "description" : "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
          "type" : "string",
          "required" : true
        }, {
          "in" : "path",
          "name" : "id",
          "description" : "The resource identifier",
          "type" : "string",
          "required" : true
        } ],
        "tags" : [ "dispatch-custom-locations" ]
      },
      "put" : {
        "summary" : "Update a DispatchCustomLocations",
        "operationId" : "replaceDispatchCustomLocationById",
        "responses" : {
          "200" : {
            "description" : "OK - Everything worked as expected",
            "schema" : {
              "$ref" : "#/definitions/DispatchCustomLocationsPut"
            }
          },
          "400" : {
            "description" : "Bad Request - Often due to a missing request parameter"
          },
          "401" : {
            "description" : "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500" : {
            "description" : "Server error - Something went wrong on the Cloud Elements server"
          },
          "403" : {
            "description" : "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502" : {
            "description" : "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404" : {
            "description" : "Not found - The requested resource is not found"
          },
          "415" : {
            "description" : "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405" : {
            "description" : "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406" : {
            "description" : "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409" : {
            "description" : "Conflict - If a resource being created already exists"
          }
        },
        "parameters" : [ {
          "in" : "header",
          "name" : "Authorization",
          "description" : "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
          "type" : "string",
          "required" : true
        }, {
          "in" : "path",
          "name" : "id",
          "description" : "The resource identifier",
          "type" : "string",
          "required" : true
        }, {
          "schema" : {
            "$ref" : "#/definitions/DispatchCustomLocationsPut"
          },
          "in" : "body",
          "name" : "JSON",
          "description" : "JSON",
          "required" : true
        } ],
        "tags" : [ "dispatch-custom-locations" ]
      }
    },
    "/dispatch-tasks" : {
      "post" : {
        "summary" : "Create a DispatchTasks",
        "operationId" : "createDispatchTask",
        "responses" : {
          "200" : {
            "description" : "OK - Everything worked as expected",
            "schema" : {
              "$ref" : "#/definitions/DispatchTasksItem"
            }
          },
          "400" : {
            "description" : "Bad Request - Often due to a missing request parameter"
          },
          "401" : {
            "description" : "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500" : {
            "description" : "Server error - Something went wrong on the Cloud Elements server"
          },
          "403" : {
            "description" : "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502" : {
            "description" : "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404" : {
            "description" : "Not found - The requested resource is not found"
          },
          "415" : {
            "description" : "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405" : {
            "description" : "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406" : {
            "description" : "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409" : {
            "description" : "Conflict - If a resource being created already exists"
          }
        },
        "parameters" : [ {
          "in" : "header",
          "name" : "Authorization",
          "description" : "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
          "type" : "string",
          "required" : true
        }, {
          "schema" : {
            "$ref" : "#/definitions/DispatchTasksPost"
          },
          "in" : "body",
          "name" : "Body",
          "description" : "Body",
          "required" : true
        } ],
        "tags" : [ "dispatch-tasks" ]
      },
      "get" : {
        "summary" : "Retrieve a list of DispatchTasks",
        "operationId" : "getDispatchTasks",
        "responses" : {
          "200" : {
            "description" : "OK - Everything worked as expected",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/DispatchTasksCollection"
              }
            }
          },
          "400" : {
            "description" : "Bad Request - Often due to a missing request parameter"
          },
          "401" : {
            "description" : "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500" : {
            "description" : "Server error - Something went wrong on the Cloud Elements server"
          },
          "403" : {
            "description" : "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502" : {
            "description" : "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404" : {
            "description" : "Not found - The requested resource is not found"
          },
          "415" : {
            "description" : "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405" : {
            "description" : "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406" : {
            "description" : "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409" : {
            "description" : "Conflict - If a resource being created already exists"
          }
        },
        "parameters" : [ {
          "in" : "header",
          "name" : "Authorization",
          "description" : "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
          "type" : "string",
          "required" : true
        }, {
          "in" : "query",
          "name" : "limit",
          "description" : "The collection items limit",
          "type" : "integer",
          "required" : false
        }, {
          "in" : "query",
          "name" : "[att]",
          "description" : "Filter any attribute by its value. You can search subobjects by using the qualified attribute name. ",
          "type" : "string",
          "required" : false
        }, {
          "in" : "query",
          "name" : "includeInactive",
          "description" : "Return the list of inactive objects in the results. By default only active objects are returned",
          "type" : "string",
          "required" : false
        }, {
          "in" : "query",
          "name" : "[att]:contains",
          "description" : "Search a specific attribute partially",
          "type" : "string",
          "required" : false
        }, {
          "in" : "query",
          "name" : "include",
          "description" : "Expand response to get full related object intead of ID. See the expand guide for more info.",
          "type" : "string",
          "required" : false
        }, {
          "in" : "query",
          "name" : "offset",
          "description" : "The collection items offset",
          "type" : "integer",
          "required" : false
        }, {
          "in" : "query",
          "name" : "fields",
          "description" : "List of fields you want returned separated by a coma. You can alias the returned field by adding the alias after a column",
          "type" : "string",
          "required" : false
        }, {
          "schema" : {
            "$ref" : "#/definitions/array"
          },
          "in" : "query",
          "name" : "sort",
          "description" : "The collection items sort field and order (prefix with \"-\" for descending sort].",
          "required" : false
        }, {
          "in" : "query",
          "name" : "q",
          "description" : "Global search for the object",
          "type" : "string",
          "required" : false
        }, {
          "in" : "query",
          "name" : "[att]:in",
          "description" : "Filter the collection by attribute list. ",
          "type" : "string",
          "required" : false
        } ],
        "tags" : [ "dispatch-tasks" ]
      }
    },
    "/dispatch-tasks/{id}" : {
      "patch" : {
        "summary" : "Partially edit a DispatchTasks",
        "operationId" : "updateDispatchTaskById",
        "responses" : {
          "200" : {
            "description" : "OK - Everything worked as expected",
            "schema" : {
              "$ref" : "#/definitions/DispatchTasksItem"
            }
          },
          "400" : {
            "description" : "Bad Request - Often due to a missing request parameter"
          },
          "401" : {
            "description" : "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500" : {
            "description" : "Server error - Something went wrong on the Cloud Elements server"
          },
          "403" : {
            "description" : "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502" : {
            "description" : "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404" : {
            "description" : "Not found - The requested resource is not found"
          },
          "415" : {
            "description" : "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405" : {
            "description" : "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406" : {
            "description" : "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409" : {
            "description" : "Conflict - If a resource being created already exists"
          }
        },
        "parameters" : [ {
          "in" : "header",
          "name" : "Authorization",
          "description" : "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
          "type" : "string",
          "required" : true
        }, {
          "in" : "path",
          "name" : "id",
          "description" : "The resource identifier",
          "type" : "string",
          "required" : true
        }, {
          "schema" : {
            "$ref" : "#/definitions/DispatchTasksPatch"
          },
          "in" : "body",
          "name" : "JSON",
          "description" : "JSON",
          "required" : true
        } ],
        "tags" : [ "dispatch-tasks" ]
      },
      "get" : {
        "summary" : "Retrieve a DispatchTasks",
        "operationId" : "getDispatchTaskById",
        "responses" : {
          "200" : {
            "description" : "OK - Everything worked as expected",
            "schema" : {
              "$ref" : "#/definitions/DispatchTasksItem"
            }
          },
          "400" : {
            "description" : "Bad Request - Often due to a missing request parameter"
          },
          "401" : {
            "description" : "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500" : {
            "description" : "Server error - Something went wrong on the Cloud Elements server"
          },
          "403" : {
            "description" : "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502" : {
            "description" : "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404" : {
            "description" : "Not found - The requested resource is not found"
          },
          "415" : {
            "description" : "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405" : {
            "description" : "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406" : {
            "description" : "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409" : {
            "description" : "Conflict - If a resource being created already exists"
          }
        },
        "parameters" : [ {
          "in" : "header",
          "name" : "Authorization",
          "description" : "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
          "type" : "string",
          "required" : true
        }, {
          "in" : "path",
          "name" : "id",
          "description" : "The resource identifier",
          "type" : "string",
          "required" : true
        } ],
        "tags" : [ "dispatch-tasks" ]
      },
      "put" : {
        "summary" : "Update a DispatchTasks",
        "operationId" : "replaceDispatchTaskById",
        "responses" : {
          "200" : {
            "description" : "OK - Everything worked as expected",
            "schema" : {
              "$ref" : "#/definitions/DispatchTasksPut"
            }
          },
          "400" : {
            "description" : "Bad Request - Often due to a missing request parameter"
          },
          "401" : {
            "description" : "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500" : {
            "description" : "Server error - Something went wrong on the Cloud Elements server"
          },
          "403" : {
            "description" : "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502" : {
            "description" : "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404" : {
            "description" : "Not found - The requested resource is not found"
          },
          "415" : {
            "description" : "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405" : {
            "description" : "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406" : {
            "description" : "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409" : {
            "description" : "Conflict - If a resource being created already exists"
          }
        },
        "parameters" : [ {
          "in" : "header",
          "name" : "Authorization",
          "description" : "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
          "type" : "string",
          "required" : true
        }, {
          "in" : "path",
          "name" : "id",
          "description" : "The resource identifier",
          "type" : "string",
          "required" : true
        }, {
          "schema" : {
            "$ref" : "#/definitions/DispatchTasksPut"
          },
          "in" : "body",
          "name" : "JSON",
          "description" : "JSON",
          "required" : true
        } ],
        "tags" : [ "dispatch-tasks" ]
      }
    },
    "/dispatch-tasks/{id}/actions/assign" : {
      "post" : {
        "summary" : "assign",
        "operationId" : "createDispatchTaskActionAssign",
        "responses" : {
          "200" : {
            "description" : "OK - Everything worked as expected",
            "schema" : {
              "$ref" : "#/definitions/ActionResponse"
            }
          },
          "400" : {
            "description" : "Bad Request - Often due to a missing request parameter"
          },
          "401" : {
            "description" : "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500" : {
            "description" : "Server error - Something went wrong on the Cloud Elements server"
          },
          "403" : {
            "description" : "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502" : {
            "description" : "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404" : {
            "description" : "Not found - The requested resource is not found"
          },
          "415" : {
            "description" : "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405" : {
            "description" : "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406" : {
            "description" : "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409" : {
            "description" : "Conflict - If a resource being created already exists"
          }
        },
        "parameters" : [ {
          "in" : "header",
          "name" : "Authorization",
          "description" : "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
          "type" : "string",
          "required" : true
        }, {
          "in" : "path",
          "name" : "id",
          "description" : "The resource identifier",
          "type" : "string",
          "required" : true
        }, {
          "schema" : {
            "$ref" : "#/definitions/DispatchTasksAssign"
          },
          "in" : "body",
          "name" : "Body",
          "description" : "Body",
          "required" : true
        } ],
        "tags" : [ "dispatch-tasks" ]
      }
    },
    "/dispatch-tasks/{id}/actions/close" : {
      "post" : {
        "summary" : "close",
        "operationId" : "createDispatchTaskActionClose",
        "responses" : {
          "200" : {
            "description" : "OK - Everything worked as expected",
            "schema" : {
              "$ref" : "#/definitions/ActionResponse"
            }
          },
          "400" : {
            "description" : "Bad Request - Often due to a missing request parameter"
          },
          "401" : {
            "description" : "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500" : {
            "description" : "Server error - Something went wrong on the Cloud Elements server"
          },
          "403" : {
            "description" : "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502" : {
            "description" : "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404" : {
            "description" : "Not found - The requested resource is not found"
          },
          "415" : {
            "description" : "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405" : {
            "description" : "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406" : {
            "description" : "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409" : {
            "description" : "Conflict - If a resource being created already exists"
          }
        },
        "parameters" : [ {
          "in" : "header",
          "name" : "Authorization",
          "description" : "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
          "type" : "string",
          "required" : true
        }, {
          "in" : "path",
          "name" : "id",
          "description" : "The resource identifier",
          "type" : "string",
          "required" : true
        }, {
          "schema" : {
            "$ref" : "#/definitions/DispatchTasksClose"
          },
          "in" : "body",
          "name" : "Body",
          "description" : "Body",
          "required" : true
        } ],
        "tags" : [ "dispatch-tasks" ]
      }
    },
    "/dispatch-tasks/{id}/actions/open" : {
      "post" : {
        "summary" : "open",
        "operationId" : "createDispatchTaskActionOpen",
        "responses" : {
          "200" : {
            "description" : "OK - Everything worked as expected",
            "schema" : {
              "$ref" : "#/definitions/ActionResponse"
            }
          },
          "400" : {
            "description" : "Bad Request - Often due to a missing request parameter"
          },
          "401" : {
            "description" : "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500" : {
            "description" : "Server error - Something went wrong on the Cloud Elements server"
          },
          "403" : {
            "description" : "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502" : {
            "description" : "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404" : {
            "description" : "Not found - The requested resource is not found"
          },
          "415" : {
            "description" : "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405" : {
            "description" : "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406" : {
            "description" : "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409" : {
            "description" : "Conflict - If a resource being created already exists"
          }
        },
        "parameters" : [ {
          "in" : "header",
          "name" : "Authorization",
          "description" : "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
          "type" : "string",
          "required" : true
        }, {
          "in" : "path",
          "name" : "id",
          "description" : "The resource identifier",
          "type" : "string",
          "required" : true
        }, {
          "schema" : {
            "$ref" : "#/definitions/DispatchTasksOpen"
          },
          "in" : "body",
          "name" : "Body",
          "description" : "Body",
          "required" : true
        } ],
        "tags" : [ "dispatch-tasks" ]
      }
    },
    "/employee-account-assignments" : {
      "post" : {
        "summary" : "Create a EmployeeAccountAssignments",
        "operationId" : "createEmployeeAccountAssignment",
        "responses" : {
          "200" : {
            "description" : "OK - Everything worked as expected",
            "schema" : {
              "$ref" : "#/definitions/EmployeeAccountAssignmentsItem"
            }
          },
          "400" : {
            "description" : "Bad Request - Often due to a missing request parameter"
          },
          "401" : {
            "description" : "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500" : {
            "description" : "Server error - Something went wrong on the Cloud Elements server"
          },
          "403" : {
            "description" : "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502" : {
            "description" : "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404" : {
            "description" : "Not found - The requested resource is not found"
          },
          "415" : {
            "description" : "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405" : {
            "description" : "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406" : {
            "description" : "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409" : {
            "description" : "Conflict - If a resource being created already exists"
          }
        },
        "parameters" : [ {
          "in" : "header",
          "name" : "Authorization",
          "description" : "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
          "type" : "string",
          "required" : true
        }, {
          "schema" : {
            "$ref" : "#/definitions/EmployeeAccountAssignmentsPost"
          },
          "in" : "body",
          "name" : "Body",
          "description" : "Body",
          "required" : true
        } ],
        "tags" : [ "employee-account-assignments" ]
      },
      "get" : {
        "summary" : "Retrieve a list of EmployeeAccountAssignments",
        "operationId" : "getEmployeeAccountAssignments",
        "responses" : {
          "200" : {
            "description" : "OK - Everything worked as expected",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/EmployeeAccountAssignmentsCollection"
              }
            }
          },
          "400" : {
            "description" : "Bad Request - Often due to a missing request parameter"
          },
          "401" : {
            "description" : "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500" : {
            "description" : "Server error - Something went wrong on the Cloud Elements server"
          },
          "403" : {
            "description" : "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502" : {
            "description" : "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404" : {
            "description" : "Not found - The requested resource is not found"
          },
          "415" : {
            "description" : "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405" : {
            "description" : "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406" : {
            "description" : "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409" : {
            "description" : "Conflict - If a resource being created already exists"
          }
        },
        "parameters" : [ {
          "in" : "header",
          "name" : "Authorization",
          "description" : "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
          "type" : "string",
          "required" : true
        }, {
          "in" : "query",
          "name" : "[att]",
          "description" : "Filter any attribute by its value. You can search subobjects by using the qualified attribute name. ",
          "type" : "string",
          "required" : false
        }, {
          "schema" : {
            "$ref" : "#/definitions/array"
          },
          "in" : "query",
          "name" : "sort",
          "description" : "The collection items sort field and order (prefix with \"-\" for descending sort].",
          "required" : false
        }, {
          "in" : "query",
          "name" : "include",
          "description" : "Expand response to get full related object intead of ID. See the expand guide for more info.",
          "type" : "string",
          "required" : false
        }, {
          "in" : "query",
          "name" : "fields",
          "description" : "List of fields you want returned separated by a coma. You can alias the returned field by adding the alias after a column",
          "type" : "string",
          "required" : false
        }, {
          "in" : "query",
          "name" : "includeInactive",
          "description" : "Return the list of inactive objects in the results. By default only active objects are returned",
          "type" : "string",
          "required" : false
        }, {
          "in" : "query",
          "name" : "limit",
          "description" : "The collection items limit",
          "type" : "integer",
          "required" : false
        }, {
          "in" : "query",
          "name" : "offset",
          "description" : "The collection items offset",
          "type" : "integer",
          "required" : false
        }, {
          "in" : "query",
          "name" : "q",
          "description" : "Global search for the object",
          "type" : "string",
          "required" : false
        }, {
          "in" : "query",
          "name" : "[att]:in",
          "description" : "Filter the collection by attribute list. ",
          "type" : "string",
          "required" : false
        }, {
          "in" : "query",
          "name" : "[att]:contains",
          "description" : "Search a specific attribute partially",
          "type" : "string",
          "required" : false
        } ],
        "tags" : [ "employee-account-assignments" ]
      }
    },
    "/employee-account-assignments/{id}" : {
      "patch" : {
        "summary" : "Partially edit a EmployeeAccountAssignments",
        "operationId" : "updateEmployeeAccountAssignmentById",
        "responses" : {
          "200" : {
            "description" : "OK - Everything worked as expected",
            "schema" : {
              "$ref" : "#/definitions/EmployeeAccountAssignmentsItem"
            }
          },
          "400" : {
            "description" : "Bad Request - Often due to a missing request parameter"
          },
          "401" : {
            "description" : "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500" : {
            "description" : "Server error - Something went wrong on the Cloud Elements server"
          },
          "403" : {
            "description" : "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502" : {
            "description" : "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404" : {
            "description" : "Not found - The requested resource is not found"
          },
          "415" : {
            "description" : "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405" : {
            "description" : "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406" : {
            "description" : "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409" : {
            "description" : "Conflict - If a resource being created already exists"
          }
        },
        "parameters" : [ {
          "in" : "header",
          "name" : "Authorization",
          "description" : "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
          "type" : "string",
          "required" : true
        }, {
          "in" : "path",
          "name" : "id",
          "description" : "The resource identifier",
          "type" : "string",
          "required" : true
        }, {
          "schema" : {
            "$ref" : "#/definitions/EmployeeAccountAssignmentsPatch"
          },
          "in" : "body",
          "name" : "JSON",
          "description" : "JSON",
          "required" : true
        } ],
        "tags" : [ "employee-account-assignments" ]
      },
      "get" : {
        "summary" : "Retrieve a EmployeeAccountAssignments",
        "operationId" : "getEmployeeAccountAssignmentById",
        "responses" : {
          "200" : {
            "description" : "OK - Everything worked as expected",
            "schema" : {
              "$ref" : "#/definitions/EmployeeAccountAssignmentsItem"
            }
          },
          "400" : {
            "description" : "Bad Request - Often due to a missing request parameter"
          },
          "401" : {
            "description" : "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500" : {
            "description" : "Server error - Something went wrong on the Cloud Elements server"
          },
          "403" : {
            "description" : "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502" : {
            "description" : "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404" : {
            "description" : "Not found - The requested resource is not found"
          },
          "415" : {
            "description" : "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405" : {
            "description" : "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406" : {
            "description" : "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409" : {
            "description" : "Conflict - If a resource being created already exists"
          }
        },
        "parameters" : [ {
          "in" : "header",
          "name" : "Authorization",
          "description" : "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
          "type" : "string",
          "required" : true
        }, {
          "in" : "path",
          "name" : "id",
          "description" : "The resource identifier",
          "type" : "string",
          "required" : true
        } ],
        "tags" : [ "employee-account-assignments" ]
      },
      "put" : {
        "summary" : "Update a EmployeeAccountAssignments",
        "operationId" : "replaceEmployeeAccountAssignmentById",
        "responses" : {
          "200" : {
            "description" : "OK - Everything worked as expected",
            "schema" : {
              "$ref" : "#/definitions/EmployeeAccountAssignmentsPut"
            }
          },
          "400" : {
            "description" : "Bad Request - Often due to a missing request parameter"
          },
          "401" : {
            "description" : "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500" : {
            "description" : "Server error - Something went wrong on the Cloud Elements server"
          },
          "403" : {
            "description" : "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502" : {
            "description" : "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404" : {
            "description" : "Not found - The requested resource is not found"
          },
          "415" : {
            "description" : "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405" : {
            "description" : "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406" : {
            "description" : "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409" : {
            "description" : "Conflict - If a resource being created already exists"
          }
        },
        "parameters" : [ {
          "in" : "header",
          "name" : "Authorization",
          "description" : "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
          "type" : "string",
          "required" : true
        }, {
          "in" : "path",
          "name" : "id",
          "description" : "The resource identifier",
          "type" : "string",
          "required" : true
        }, {
          "schema" : {
            "$ref" : "#/definitions/EmployeeAccountAssignmentsPut"
          },
          "in" : "body",
          "name" : "JSON",
          "description" : "JSON",
          "required" : true
        } ],
        "tags" : [ "employee-account-assignments" ]
      }
    },
    "/employee-account-bans" : {
      "post" : {
        "summary" : "Create a EmployeeAccountBans",
        "operationId" : "createEmployeeAccountBan",
        "responses" : {
          "200" : {
            "description" : "OK - Everything worked as expected",
            "schema" : {
              "$ref" : "#/definitions/EmployeeAccountBansItem"
            }
          },
          "400" : {
            "description" : "Bad Request - Often due to a missing request parameter"
          },
          "401" : {
            "description" : "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500" : {
            "description" : "Server error - Something went wrong on the Cloud Elements server"
          },
          "403" : {
            "description" : "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502" : {
            "description" : "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404" : {
            "description" : "Not found - The requested resource is not found"
          },
          "415" : {
            "description" : "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405" : {
            "description" : "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406" : {
            "description" : "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409" : {
            "description" : "Conflict - If a resource being created already exists"
          }
        },
        "parameters" : [ {
          "in" : "header",
          "name" : "Authorization",
          "description" : "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
          "type" : "string",
          "required" : true
        }, {
          "schema" : {
            "$ref" : "#/definitions/EmployeeAccountBansPost"
          },
          "in" : "body",
          "name" : "Body",
          "description" : "Body",
          "required" : true
        } ],
        "tags" : [ "employee-account-bans" ]
      },
      "get" : {
        "summary" : "Retrieve a list of EmployeeAccountBans",
        "operationId" : "getEmployeeAccountBans",
        "responses" : {
          "200" : {
            "description" : "OK - Everything worked as expected",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/EmployeeAccountBansCollection"
              }
            }
          },
          "400" : {
            "description" : "Bad Request - Often due to a missing request parameter"
          },
          "401" : {
            "description" : "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500" : {
            "description" : "Server error - Something went wrong on the Cloud Elements server"
          },
          "403" : {
            "description" : "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502" : {
            "description" : "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404" : {
            "description" : "Not found - The requested resource is not found"
          },
          "415" : {
            "description" : "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405" : {
            "description" : "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406" : {
            "description" : "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409" : {
            "description" : "Conflict - If a resource being created already exists"
          }
        },
        "parameters" : [ {
          "in" : "header",
          "name" : "Authorization",
          "description" : "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
          "type" : "string",
          "required" : true
        }, {
          "in" : "query",
          "name" : "fields",
          "description" : "List of fields you want returned separated by a coma. You can alias the returned field by adding the alias after a column",
          "type" : "string",
          "required" : false
        }, {
          "in" : "query",
          "name" : "include",
          "description" : "Expand response to get full related object intead of ID. See the expand guide for more info.",
          "type" : "string",
          "required" : false
        }, {
          "in" : "query",
          "name" : "offset",
          "description" : "The collection items offset",
          "type" : "integer",
          "required" : false
        }, {
          "in" : "query",
          "name" : "limit",
          "description" : "The collection items limit",
          "type" : "integer",
          "required" : false
        }, {
          "in" : "query",
          "name" : "[att]:contains",
          "description" : "Search a specific attribute partially",
          "type" : "string",
          "required" : false
        }, {
          "in" : "query",
          "name" : "[att]",
          "description" : "Filter any attribute by its value. You can search subobjects by using the qualified attribute name. ",
          "type" : "string",
          "required" : false
        }, {
          "in" : "query",
          "name" : "q",
          "description" : "Global search for the object",
          "type" : "string",
          "required" : false
        }, {
          "in" : "query",
          "name" : "includeInactive",
          "description" : "Return the list of inactive objects in the results. By default only active objects are returned",
          "type" : "string",
          "required" : false
        }, {
          "in" : "query",
          "name" : "[att]:in",
          "description" : "Filter the collection by attribute list. ",
          "type" : "string",
          "required" : false
        }, {
          "schema" : {
            "$ref" : "#/definitions/array"
          },
          "in" : "query",
          "name" : "sort",
          "description" : "The collection items sort field and order (prefix with \"-\" for descending sort].",
          "required" : false
        } ],
        "tags" : [ "employee-account-bans" ]
      }
    },
    "/employee-account-bans/{id}" : {
      "patch" : {
        "summary" : "Partially edit a EmployeeAccountBans",
        "operationId" : "updateEmployeeAccountBanById",
        "responses" : {
          "200" : {
            "description" : "OK - Everything worked as expected",
            "schema" : {
              "$ref" : "#/definitions/EmployeeAccountBansItem"
            }
          },
          "400" : {
            "description" : "Bad Request - Often due to a missing request parameter"
          },
          "401" : {
            "description" : "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500" : {
            "description" : "Server error - Something went wrong on the Cloud Elements server"
          },
          "403" : {
            "description" : "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502" : {
            "description" : "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404" : {
            "description" : "Not found - The requested resource is not found"
          },
          "415" : {
            "description" : "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405" : {
            "description" : "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406" : {
            "description" : "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409" : {
            "description" : "Conflict - If a resource being created already exists"
          }
        },
        "parameters" : [ {
          "in" : "header",
          "name" : "Authorization",
          "description" : "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
          "type" : "string",
          "required" : true
        }, {
          "in" : "path",
          "name" : "id",
          "description" : "The resource identifier",
          "type" : "string",
          "required" : true
        }, {
          "schema" : {
            "$ref" : "#/definitions/EmployeeAccountBansPatch"
          },
          "in" : "body",
          "name" : "JSON",
          "description" : "JSON",
          "required" : true
        } ],
        "tags" : [ "employee-account-bans" ]
      },
      "get" : {
        "summary" : "Retrieve a EmployeeAccountBans",
        "operationId" : "getEmployeeAccountBanById",
        "responses" : {
          "200" : {
            "description" : "OK - Everything worked as expected",
            "schema" : {
              "$ref" : "#/definitions/EmployeeAccountBansItem"
            }
          },
          "400" : {
            "description" : "Bad Request - Often due to a missing request parameter"
          },
          "401" : {
            "description" : "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500" : {
            "description" : "Server error - Something went wrong on the Cloud Elements server"
          },
          "403" : {
            "description" : "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502" : {
            "description" : "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404" : {
            "description" : "Not found - The requested resource is not found"
          },
          "415" : {
            "description" : "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405" : {
            "description" : "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406" : {
            "description" : "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409" : {
            "description" : "Conflict - If a resource being created already exists"
          }
        },
        "parameters" : [ {
          "in" : "header",
          "name" : "Authorization",
          "description" : "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
          "type" : "string",
          "required" : true
        }, {
          "in" : "path",
          "name" : "id",
          "description" : "The resource identifier",
          "type" : "string",
          "required" : true
        } ],
        "tags" : [ "employee-account-bans" ]
      },
      "put" : {
        "summary" : "Update a EmployeeAccountBans",
        "operationId" : "replaceEmployeeAccountBanById",
        "responses" : {
          "200" : {
            "description" : "OK - Everything worked as expected",
            "schema" : {
              "$ref" : "#/definitions/EmployeeAccountBansPut"
            }
          },
          "400" : {
            "description" : "Bad Request - Often due to a missing request parameter"
          },
          "401" : {
            "description" : "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500" : {
            "description" : "Server error - Something went wrong on the Cloud Elements server"
          },
          "403" : {
            "description" : "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502" : {
            "description" : "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404" : {
            "description" : "Not found - The requested resource is not found"
          },
          "415" : {
            "description" : "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405" : {
            "description" : "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406" : {
            "description" : "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409" : {
            "description" : "Conflict - If a resource being created already exists"
          }
        },
        "parameters" : [ {
          "in" : "header",
          "name" : "Authorization",
          "description" : "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
          "type" : "string",
          "required" : true
        }, {
          "in" : "path",
          "name" : "id",
          "description" : "The resource identifier",
          "type" : "string",
          "required" : true
        }, {
          "schema" : {
            "$ref" : "#/definitions/EmployeeAccountBansPut"
          },
          "in" : "body",
          "name" : "JSON",
          "description" : "JSON",
          "required" : true
        } ],
        "tags" : [ "employee-account-bans" ]
      }
    },
    "/employee-availabilities" : {
      "post" : {
        "summary" : "Create a EmployeeAvailabilities",
        "operationId" : "createEmployeeAvailability",
        "responses" : {
          "200" : {
            "description" : "OK - Everything worked as expected",
            "schema" : {
              "$ref" : "#/definitions/EmployeeAvailabilitiesItem"
            }
          },
          "400" : {
            "description" : "Bad Request - Often due to a missing request parameter"
          },
          "401" : {
            "description" : "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500" : {
            "description" : "Server error - Something went wrong on the Cloud Elements server"
          },
          "403" : {
            "description" : "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502" : {
            "description" : "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404" : {
            "description" : "Not found - The requested resource is not found"
          },
          "415" : {
            "description" : "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405" : {
            "description" : "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406" : {
            "description" : "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409" : {
            "description" : "Conflict - If a resource being created already exists"
          }
        },
        "parameters" : [ {
          "in" : "header",
          "name" : "Authorization",
          "description" : "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
          "type" : "string",
          "required" : true
        }, {
          "schema" : {
            "$ref" : "#/definitions/EmployeeAvailabilitiesPost"
          },
          "in" : "body",
          "name" : "Body",
          "description" : "Body",
          "required" : true
        } ],
        "tags" : [ "employee-availabilities" ]
      },
      "get" : {
        "summary" : "Retrieve a list of EmployeeAvailabilities",
        "operationId" : "getEmployeeAvailabilities",
        "responses" : {
          "200" : {
            "description" : "OK - Everything worked as expected",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/EmployeeAvailabilitiesCollection"
              }
            }
          },
          "400" : {
            "description" : "Bad Request - Often due to a missing request parameter"
          },
          "401" : {
            "description" : "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500" : {
            "description" : "Server error - Something went wrong on the Cloud Elements server"
          },
          "403" : {
            "description" : "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502" : {
            "description" : "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404" : {
            "description" : "Not found - The requested resource is not found"
          },
          "415" : {
            "description" : "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405" : {
            "description" : "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406" : {
            "description" : "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409" : {
            "description" : "Conflict - If a resource being created already exists"
          }
        },
        "parameters" : [ {
          "in" : "header",
          "name" : "Authorization",
          "description" : "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
          "type" : "string",
          "required" : true
        }, {
          "in" : "query",
          "name" : "offset",
          "description" : "The collection items offset",
          "type" : "integer",
          "required" : false
        }, {
          "in" : "query",
          "name" : "limit",
          "description" : "The collection items limit",
          "type" : "integer",
          "required" : false
        }, {
          "in" : "query",
          "name" : "[att]:contains",
          "description" : "Search a specific attribute partially",
          "type" : "string",
          "required" : false
        }, {
          "in" : "query",
          "name" : "includeInactive",
          "description" : "Return the list of inactive objects in the results. By default only active objects are returned",
          "type" : "string",
          "required" : false
        }, {
          "in" : "query",
          "name" : "[att]:in",
          "description" : "Filter the collection by attribute list. ",
          "type" : "string",
          "required" : false
        }, {
          "in" : "query",
          "name" : "[att]",
          "description" : "Filter any attribute by its value. You can search subobjects by using the qualified attribute name. ",
          "type" : "string",
          "required" : false
        }, {
          "in" : "query",
          "name" : "q",
          "description" : "Global search for the object",
          "type" : "string",
          "required" : false
        }, {
          "schema" : {
            "$ref" : "#/definitions/array"
          },
          "in" : "query",
          "name" : "sort",
          "description" : "The collection items sort field and order (prefix with \"-\" for descending sort].",
          "required" : false
        }, {
          "in" : "query",
          "name" : "include",
          "description" : "Expand response to get full related object intead of ID. See the expand guide for more info.",
          "type" : "string",
          "required" : false
        }, {
          "in" : "query",
          "name" : "fields",
          "description" : "List of fields you want returned separated by a coma. You can alias the returned field by adding the alias after a column",
          "type" : "string",
          "required" : false
        } ],
        "tags" : [ "employee-availabilities" ]
      }
    },
    "/employee-availabilities/{id}" : {
      "patch" : {
        "summary" : "Partially edit a EmployeeAvailabilities",
        "operationId" : "updateEmployeeAvailabilityById",
        "responses" : {
          "200" : {
            "description" : "OK - Everything worked as expected",
            "schema" : {
              "$ref" : "#/definitions/EmployeeAvailabilitiesItem"
            }
          },
          "400" : {
            "description" : "Bad Request - Often due to a missing request parameter"
          },
          "401" : {
            "description" : "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500" : {
            "description" : "Server error - Something went wrong on the Cloud Elements server"
          },
          "403" : {
            "description" : "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502" : {
            "description" : "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404" : {
            "description" : "Not found - The requested resource is not found"
          },
          "415" : {
            "description" : "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405" : {
            "description" : "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406" : {
            "description" : "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409" : {
            "description" : "Conflict - If a resource being created already exists"
          }
        },
        "parameters" : [ {
          "in" : "header",
          "name" : "Authorization",
          "description" : "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
          "type" : "string",
          "required" : true
        }, {
          "in" : "path",
          "name" : "id",
          "description" : "The resource identifier",
          "type" : "string",
          "required" : true
        }, {
          "schema" : {
            "$ref" : "#/definitions/EmployeeAvailabilitiesPatch"
          },
          "in" : "body",
          "name" : "JSON",
          "description" : "JSON",
          "required" : true
        } ],
        "tags" : [ "employee-availabilities" ]
      },
      "get" : {
        "summary" : "Retrieve a EmployeeAvailabilities",
        "operationId" : "getEmployeeAvailabilityById",
        "responses" : {
          "200" : {
            "description" : "OK - Everything worked as expected",
            "schema" : {
              "$ref" : "#/definitions/EmployeeAvailabilitiesItem"
            }
          },
          "400" : {
            "description" : "Bad Request - Often due to a missing request parameter"
          },
          "401" : {
            "description" : "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500" : {
            "description" : "Server error - Something went wrong on the Cloud Elements server"
          },
          "403" : {
            "description" : "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502" : {
            "description" : "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404" : {
            "description" : "Not found - The requested resource is not found"
          },
          "415" : {
            "description" : "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405" : {
            "description" : "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406" : {
            "description" : "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409" : {
            "description" : "Conflict - If a resource being created already exists"
          }
        },
        "parameters" : [ {
          "in" : "header",
          "name" : "Authorization",
          "description" : "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
          "type" : "string",
          "required" : true
        }, {
          "in" : "path",
          "name" : "id",
          "description" : "The resource identifier",
          "type" : "string",
          "required" : true
        } ],
        "tags" : [ "employee-availabilities" ]
      },
      "put" : {
        "summary" : "Update a EmployeeAvailabilities",
        "operationId" : "replaceEmployeeAvailabilityById",
        "responses" : {
          "200" : {
            "description" : "OK - Everything worked as expected",
            "schema" : {
              "$ref" : "#/definitions/EmployeeAvailabilitiesPut"
            }
          },
          "400" : {
            "description" : "Bad Request - Often due to a missing request parameter"
          },
          "401" : {
            "description" : "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500" : {
            "description" : "Server error - Something went wrong on the Cloud Elements server"
          },
          "403" : {
            "description" : "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502" : {
            "description" : "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404" : {
            "description" : "Not found - The requested resource is not found"
          },
          "415" : {
            "description" : "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405" : {
            "description" : "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406" : {
            "description" : "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409" : {
            "description" : "Conflict - If a resource being created already exists"
          }
        },
        "parameters" : [ {
          "in" : "header",
          "name" : "Authorization",
          "description" : "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
          "type" : "string",
          "required" : true
        }, {
          "in" : "path",
          "name" : "id",
          "description" : "The resource identifier",
          "type" : "string",
          "required" : true
        }, {
          "schema" : {
            "$ref" : "#/definitions/EmployeeAvailabilitiesPut"
          },
          "in" : "body",
          "name" : "JSON",
          "description" : "JSON",
          "required" : true
        } ],
        "tags" : [ "employee-availabilities" ]
      }
    },
    "/employee-skills" : {
      "post" : {
        "summary" : "Create a EmployeeSkills",
        "operationId" : "createEmployeeSkill",
        "responses" : {
          "200" : {
            "description" : "OK - Everything worked as expected",
            "schema" : {
              "$ref" : "#/definitions/EmployeeSkillsItem"
            }
          },
          "400" : {
            "description" : "Bad Request - Often due to a missing request parameter"
          },
          "401" : {
            "description" : "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500" : {
            "description" : "Server error - Something went wrong on the Cloud Elements server"
          },
          "403" : {
            "description" : "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502" : {
            "description" : "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404" : {
            "description" : "Not found - The requested resource is not found"
          },
          "415" : {
            "description" : "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405" : {
            "description" : "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406" : {
            "description" : "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409" : {
            "description" : "Conflict - If a resource being created already exists"
          }
        },
        "parameters" : [ {
          "in" : "header",
          "name" : "Authorization",
          "description" : "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
          "type" : "string",
          "required" : true
        }, {
          "schema" : {
            "$ref" : "#/definitions/EmployeeSkillsPost"
          },
          "in" : "body",
          "name" : "Body",
          "description" : "Body",
          "required" : true
        } ],
        "tags" : [ "employee-skills" ]
      },
      "get" : {
        "summary" : "Retrieve a list of EmployeeSkills",
        "operationId" : "getEmployeeSkills",
        "responses" : {
          "200" : {
            "description" : "OK - Everything worked as expected",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/EmployeeSkillsCollection"
              }
            }
          },
          "400" : {
            "description" : "Bad Request - Often due to a missing request parameter"
          },
          "401" : {
            "description" : "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500" : {
            "description" : "Server error - Something went wrong on the Cloud Elements server"
          },
          "403" : {
            "description" : "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502" : {
            "description" : "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404" : {
            "description" : "Not found - The requested resource is not found"
          },
          "415" : {
            "description" : "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405" : {
            "description" : "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406" : {
            "description" : "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409" : {
            "description" : "Conflict - If a resource being created already exists"
          }
        },
        "parameters" : [ {
          "in" : "header",
          "name" : "Authorization",
          "description" : "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
          "type" : "string",
          "required" : true
        }, {
          "in" : "query",
          "name" : "includeInactive",
          "description" : "Return the list of inactive objects in the results. By default only active objects are returned",
          "type" : "string",
          "required" : false
        }, {
          "in" : "query",
          "name" : "[att]:in",
          "description" : "Filter the collection by attribute list. ",
          "type" : "string",
          "required" : false
        }, {
          "in" : "query",
          "name" : "[att]",
          "description" : "Filter any attribute by its value. You can search subobjects by using the qualified attribute name. ",
          "type" : "string",
          "required" : false
        }, {
          "schema" : {
            "$ref" : "#/definitions/array"
          },
          "in" : "query",
          "name" : "sort",
          "description" : "The collection items sort field and order (prefix with \"-\" for descending sort].",
          "required" : false
        }, {
          "in" : "query",
          "name" : "include",
          "description" : "Expand response to get full related object intead of ID. See the expand guide for more info.",
          "type" : "string",
          "required" : false
        }, {
          "in" : "query",
          "name" : "fields",
          "description" : "List of fields you want returned separated by a coma. You can alias the returned field by adding the alias after a column",
          "type" : "string",
          "required" : false
        }, {
          "in" : "query",
          "name" : "limit",
          "description" : "The collection items limit",
          "type" : "integer",
          "required" : false
        }, {
          "in" : "query",
          "name" : "[att]:contains",
          "description" : "Search a specific attribute partially",
          "type" : "string",
          "required" : false
        }, {
          "in" : "query",
          "name" : "q",
          "description" : "Global search for the object",
          "type" : "string",
          "required" : false
        }, {
          "in" : "query",
          "name" : "offset",
          "description" : "The collection items offset",
          "type" : "integer",
          "required" : false
        } ],
        "tags" : [ "employee-skills" ]
      }
    },
    "/employee-skills/{id}" : {
      "patch" : {
        "summary" : "Partially edit a EmployeeSkills",
        "operationId" : "updateEmployeeSkillById",
        "responses" : {
          "200" : {
            "description" : "OK - Everything worked as expected",
            "schema" : {
              "$ref" : "#/definitions/EmployeeSkillsItem"
            }
          },
          "400" : {
            "description" : "Bad Request - Often due to a missing request parameter"
          },
          "401" : {
            "description" : "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500" : {
            "description" : "Server error - Something went wrong on the Cloud Elements server"
          },
          "403" : {
            "description" : "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502" : {
            "description" : "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404" : {
            "description" : "Not found - The requested resource is not found"
          },
          "415" : {
            "description" : "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405" : {
            "description" : "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406" : {
            "description" : "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409" : {
            "description" : "Conflict - If a resource being created already exists"
          }
        },
        "parameters" : [ {
          "in" : "header",
          "name" : "Authorization",
          "description" : "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
          "type" : "string",
          "required" : true
        }, {
          "in" : "path",
          "name" : "id",
          "description" : "The resource identifier",
          "type" : "string",
          "required" : true
        }, {
          "schema" : {
            "$ref" : "#/definitions/EmployeeSkillsPatch"
          },
          "in" : "body",
          "name" : "JSON",
          "description" : "JSON",
          "required" : true
        } ],
        "tags" : [ "employee-skills" ]
      },
      "get" : {
        "summary" : "Retrieve a EmployeeSkills",
        "operationId" : "getEmployeeSkillById",
        "responses" : {
          "200" : {
            "description" : "OK - Everything worked as expected",
            "schema" : {
              "$ref" : "#/definitions/EmployeeSkillsItem"
            }
          },
          "400" : {
            "description" : "Bad Request - Often due to a missing request parameter"
          },
          "401" : {
            "description" : "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500" : {
            "description" : "Server error - Something went wrong on the Cloud Elements server"
          },
          "403" : {
            "description" : "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502" : {
            "description" : "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404" : {
            "description" : "Not found - The requested resource is not found"
          },
          "415" : {
            "description" : "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405" : {
            "description" : "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406" : {
            "description" : "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409" : {
            "description" : "Conflict - If a resource being created already exists"
          }
        },
        "parameters" : [ {
          "in" : "header",
          "name" : "Authorization",
          "description" : "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
          "type" : "string",
          "required" : true
        }, {
          "in" : "path",
          "name" : "id",
          "description" : "The resource identifier",
          "type" : "string",
          "required" : true
        } ],
        "tags" : [ "employee-skills" ]
      },
      "put" : {
        "summary" : "Update a EmployeeSkills",
        "operationId" : "replaceEmployeeSkillById",
        "responses" : {
          "200" : {
            "description" : "OK - Everything worked as expected",
            "schema" : {
              "$ref" : "#/definitions/EmployeeSkillsPut"
            }
          },
          "400" : {
            "description" : "Bad Request - Often due to a missing request parameter"
          },
          "401" : {
            "description" : "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500" : {
            "description" : "Server error - Something went wrong on the Cloud Elements server"
          },
          "403" : {
            "description" : "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502" : {
            "description" : "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404" : {
            "description" : "Not found - The requested resource is not found"
          },
          "415" : {
            "description" : "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405" : {
            "description" : "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406" : {
            "description" : "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409" : {
            "description" : "Conflict - If a resource being created already exists"
          }
        },
        "parameters" : [ {
          "in" : "header",
          "name" : "Authorization",
          "description" : "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
          "type" : "string",
          "required" : true
        }, {
          "in" : "path",
          "name" : "id",
          "description" : "The resource identifier",
          "type" : "string",
          "required" : true
        }, {
          "schema" : {
            "$ref" : "#/definitions/EmployeeSkillsPut"
          },
          "in" : "body",
          "name" : "JSON",
          "description" : "JSON",
          "required" : true
        } ],
        "tags" : [ "employee-skills" ]
      }
    },
    "/employees" : {
      "post" : {
        "summary" : "Create a Employees",
        "operationId" : "createEmployee",
        "responses" : {
          "200" : {
            "description" : "OK - Everything worked as expected",
            "schema" : {
              "$ref" : "#/definitions/EmployeesItem"
            }
          },
          "400" : {
            "description" : "Bad Request - Often due to a missing request parameter"
          },
          "401" : {
            "description" : "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500" : {
            "description" : "Server error - Something went wrong on the Cloud Elements server"
          },
          "403" : {
            "description" : "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502" : {
            "description" : "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404" : {
            "description" : "Not found - The requested resource is not found"
          },
          "415" : {
            "description" : "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405" : {
            "description" : "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406" : {
            "description" : "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409" : {
            "description" : "Conflict - If a resource being created already exists"
          }
        },
        "parameters" : [ {
          "in" : "header",
          "name" : "Authorization",
          "description" : "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
          "type" : "string",
          "required" : true
        }, {
          "schema" : {
            "$ref" : "#/definitions/EmployeesPost"
          },
          "in" : "body",
          "name" : "Body",
          "description" : "Body",
          "required" : true
        } ],
        "tags" : [ "employees" ]
      },
      "get" : {
        "summary" : "Retrieve a list of Employees",
        "operationId" : "getEmployees",
        "responses" : {
          "200" : {
            "description" : "OK - Everything worked as expected",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/EmployeesCollection"
              }
            }
          },
          "400" : {
            "description" : "Bad Request - Often due to a missing request parameter"
          },
          "401" : {
            "description" : "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500" : {
            "description" : "Server error - Something went wrong on the Cloud Elements server"
          },
          "403" : {
            "description" : "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502" : {
            "description" : "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404" : {
            "description" : "Not found - The requested resource is not found"
          },
          "415" : {
            "description" : "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405" : {
            "description" : "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406" : {
            "description" : "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409" : {
            "description" : "Conflict - If a resource being created already exists"
          }
        },
        "parameters" : [ {
          "in" : "header",
          "name" : "Authorization",
          "description" : "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
          "type" : "string",
          "required" : true
        }, {
          "in" : "query",
          "name" : "fields",
          "description" : "List of fields you want returned separated by a coma. You can alias the returned field by adding the alias after a column",
          "type" : "string",
          "required" : false
        }, {
          "in" : "query",
          "name" : "[att]:in",
          "description" : "Filter the collection by attribute list. ",
          "type" : "string",
          "required" : false
        }, {
          "in" : "query",
          "name" : "[att]",
          "description" : "Filter any attribute by its value. You can search subobjects by using the qualified attribute name. ",
          "type" : "string",
          "required" : false
        }, {
          "schema" : {
            "$ref" : "#/definitions/array"
          },
          "in" : "query",
          "name" : "sort",
          "description" : "The collection items sort field and order (prefix with \"-\" for descending sort].",
          "required" : false
        }, {
          "in" : "query",
          "name" : "include",
          "description" : "Expand response to get full related object intead of ID. See the expand guide for more info.",
          "type" : "string",
          "required" : false
        }, {
          "in" : "query",
          "name" : "[att]:contains",
          "description" : "Search a specific attribute partially",
          "type" : "string",
          "required" : false
        }, {
          "in" : "query",
          "name" : "includeInactive",
          "description" : "Return the list of inactive objects in the results. By default only active objects are returned",
          "type" : "string",
          "required" : false
        }, {
          "in" : "query",
          "name" : "limit",
          "description" : "The collection items limit",
          "type" : "integer",
          "required" : false
        }, {
          "in" : "query",
          "name" : "offset",
          "description" : "The collection items offset",
          "type" : "integer",
          "required" : false
        }, {
          "in" : "query",
          "name" : "q",
          "description" : "Global search for the object",
          "type" : "string",
          "required" : false
        } ],
        "tags" : [ "employees" ]
      }
    },
    "/employees/{id}" : {
      "patch" : {
        "summary" : "Partially edit a Employees",
        "operationId" : "updateEmployeeById",
        "responses" : {
          "200" : {
            "description" : "OK - Everything worked as expected",
            "schema" : {
              "$ref" : "#/definitions/EmployeesItem"
            }
          },
          "400" : {
            "description" : "Bad Request - Often due to a missing request parameter"
          },
          "401" : {
            "description" : "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500" : {
            "description" : "Server error - Something went wrong on the Cloud Elements server"
          },
          "403" : {
            "description" : "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502" : {
            "description" : "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404" : {
            "description" : "Not found - The requested resource is not found"
          },
          "415" : {
            "description" : "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405" : {
            "description" : "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406" : {
            "description" : "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409" : {
            "description" : "Conflict - If a resource being created already exists"
          }
        },
        "parameters" : [ {
          "in" : "header",
          "name" : "Authorization",
          "description" : "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
          "type" : "string",
          "required" : true
        }, {
          "in" : "path",
          "name" : "id",
          "description" : "The resource identifier",
          "type" : "string",
          "required" : true
        }, {
          "schema" : {
            "$ref" : "#/definitions/EmployeesPatch"
          },
          "in" : "body",
          "name" : "JSON",
          "description" : "JSON",
          "required" : true
        } ],
        "tags" : [ "employees" ]
      },
      "get" : {
        "summary" : "Retrieve a Employees",
        "operationId" : "getEmployeeById",
        "responses" : {
          "200" : {
            "description" : "OK - Everything worked as expected",
            "schema" : {
              "$ref" : "#/definitions/EmployeesItem"
            }
          },
          "400" : {
            "description" : "Bad Request - Often due to a missing request parameter"
          },
          "401" : {
            "description" : "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500" : {
            "description" : "Server error - Something went wrong on the Cloud Elements server"
          },
          "403" : {
            "description" : "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502" : {
            "description" : "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404" : {
            "description" : "Not found - The requested resource is not found"
          },
          "415" : {
            "description" : "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405" : {
            "description" : "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406" : {
            "description" : "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409" : {
            "description" : "Conflict - If a resource being created already exists"
          }
        },
        "parameters" : [ {
          "in" : "header",
          "name" : "Authorization",
          "description" : "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
          "type" : "string",
          "required" : true
        }, {
          "in" : "path",
          "name" : "id",
          "description" : "The resource identifier",
          "type" : "string",
          "required" : true
        } ],
        "tags" : [ "employees" ]
      },
      "put" : {
        "summary" : "Update a Employees",
        "operationId" : "replaceEmployeeById",
        "responses" : {
          "200" : {
            "description" : "OK - Everything worked as expected",
            "schema" : {
              "$ref" : "#/definitions/EmployeesPut"
            }
          },
          "400" : {
            "description" : "Bad Request - Often due to a missing request parameter"
          },
          "401" : {
            "description" : "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500" : {
            "description" : "Server error - Something went wrong on the Cloud Elements server"
          },
          "403" : {
            "description" : "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502" : {
            "description" : "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404" : {
            "description" : "Not found - The requested resource is not found"
          },
          "415" : {
            "description" : "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405" : {
            "description" : "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406" : {
            "description" : "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409" : {
            "description" : "Conflict - If a resource being created already exists"
          }
        },
        "parameters" : [ {
          "in" : "header",
          "name" : "Authorization",
          "description" : "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
          "type" : "string",
          "required" : true
        }, {
          "in" : "path",
          "name" : "id",
          "description" : "The resource identifier",
          "type" : "string",
          "required" : true
        }, {
          "schema" : {
            "$ref" : "#/definitions/EmployeesPut"
          },
          "in" : "body",
          "name" : "JSON",
          "description" : "JSON",
          "required" : true
        } ],
        "tags" : [ "employees" ]
      }
    },
    "/employees/{id}/actions/reset-password" : {
      "post" : {
        "summary" : "Send a temp password via email",
        "operationId" : "createEmployeeActionResetPassword",
        "responses" : {
          "200" : {
            "description" : "OK - Everything worked as expected",
            "schema" : {
              "$ref" : "#/definitions/ActionResponse"
            }
          },
          "400" : {
            "description" : "Bad Request - Often due to a missing request parameter"
          },
          "401" : {
            "description" : "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500" : {
            "description" : "Server error - Something went wrong on the Cloud Elements server"
          },
          "403" : {
            "description" : "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502" : {
            "description" : "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404" : {
            "description" : "Not found - The requested resource is not found"
          },
          "415" : {
            "description" : "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405" : {
            "description" : "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406" : {
            "description" : "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409" : {
            "description" : "Conflict - If a resource being created already exists"
          }
        },
        "parameters" : [ {
          "in" : "header",
          "name" : "Authorization",
          "description" : "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
          "type" : "string",
          "required" : true
        }, {
          "in" : "path",
          "name" : "id",
          "description" : "The resource identifier",
          "type" : "string",
          "required" : true
        }, {
          "schema" : {
            "$ref" : "#/definitions/EmployeesReset-password"
          },
          "in" : "body",
          "name" : "Body",
          "description" : "Body",
          "required" : true
        } ],
        "tags" : [ "employees" ]
      }
    },
    "/employment-profiles" : {
      "post" : {
        "summary" : "Create a EmploymentProfiles",
        "operationId" : "createEmploymentProfile",
        "responses" : {
          "200" : {
            "description" : "OK - Everything worked as expected",
            "schema" : {
              "$ref" : "#/definitions/EmploymentProfilesItem"
            }
          },
          "400" : {
            "description" : "Bad Request - Often due to a missing request parameter"
          },
          "401" : {
            "description" : "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500" : {
            "description" : "Server error - Something went wrong on the Cloud Elements server"
          },
          "403" : {
            "description" : "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502" : {
            "description" : "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404" : {
            "description" : "Not found - The requested resource is not found"
          },
          "415" : {
            "description" : "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405" : {
            "description" : "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406" : {
            "description" : "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409" : {
            "description" : "Conflict - If a resource being created already exists"
          }
        },
        "parameters" : [ {
          "in" : "header",
          "name" : "Authorization",
          "description" : "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
          "type" : "string",
          "required" : true
        }, {
          "schema" : {
            "$ref" : "#/definitions/EmploymentProfilesPost"
          },
          "in" : "body",
          "name" : "Body",
          "description" : "Body",
          "required" : true
        } ],
        "tags" : [ "employment-profiles" ]
      },
      "get" : {
        "summary" : "Retrieve a list of EmploymentProfiles",
        "operationId" : "getEmploymentProfiles",
        "responses" : {
          "200" : {
            "description" : "OK - Everything worked as expected",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/EmploymentProfilesCollection"
              }
            }
          },
          "400" : {
            "description" : "Bad Request - Often due to a missing request parameter"
          },
          "401" : {
            "description" : "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500" : {
            "description" : "Server error - Something went wrong on the Cloud Elements server"
          },
          "403" : {
            "description" : "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502" : {
            "description" : "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404" : {
            "description" : "Not found - The requested resource is not found"
          },
          "415" : {
            "description" : "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405" : {
            "description" : "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406" : {
            "description" : "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409" : {
            "description" : "Conflict - If a resource being created already exists"
          }
        },
        "parameters" : [ {
          "in" : "header",
          "name" : "Authorization",
          "description" : "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
          "type" : "string",
          "required" : true
        }, {
          "in" : "query",
          "name" : "includeInactive",
          "description" : "Return the list of inactive objects in the results. By default only active objects are returned",
          "type" : "string",
          "required" : false
        }, {
          "in" : "query",
          "name" : "[att]:contains",
          "description" : "Search a specific attribute partially",
          "type" : "string",
          "required" : false
        }, {
          "in" : "query",
          "name" : "[att]:in",
          "description" : "Filter the collection by attribute list. ",
          "type" : "string",
          "required" : false
        }, {
          "in" : "query",
          "name" : "[att]",
          "description" : "Filter any attribute by its value. You can search subobjects by using the qualified attribute name. ",
          "type" : "string",
          "required" : false
        }, {
          "schema" : {
            "$ref" : "#/definitions/array"
          },
          "in" : "query",
          "name" : "sort",
          "description" : "The collection items sort field and order (prefix with \"-\" for descending sort].",
          "required" : false
        }, {
          "in" : "query",
          "name" : "include",
          "description" : "Expand response to get full related object intead of ID. See the expand guide for more info.",
          "type" : "string",
          "required" : false
        }, {
          "in" : "query",
          "name" : "limit",
          "description" : "The collection items limit",
          "type" : "integer",
          "required" : false
        }, {
          "in" : "query",
          "name" : "offset",
          "description" : "The collection items offset",
          "type" : "integer",
          "required" : false
        }, {
          "in" : "query",
          "name" : "fields",
          "description" : "List of fields you want returned separated by a coma. You can alias the returned field by adding the alias after a column",
          "type" : "string",
          "required" : false
        }, {
          "in" : "query",
          "name" : "q",
          "description" : "Global search for the object",
          "type" : "string",
          "required" : false
        } ],
        "tags" : [ "employment-profiles" ]
      }
    },
    "/employment-profiles/{id}" : {
      "patch" : {
        "summary" : "Partially edit a EmploymentProfiles",
        "operationId" : "updateEmploymentProfileById",
        "responses" : {
          "200" : {
            "description" : "OK - Everything worked as expected",
            "schema" : {
              "$ref" : "#/definitions/EmploymentProfilesItem"
            }
          },
          "400" : {
            "description" : "Bad Request - Often due to a missing request parameter"
          },
          "401" : {
            "description" : "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500" : {
            "description" : "Server error - Something went wrong on the Cloud Elements server"
          },
          "403" : {
            "description" : "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502" : {
            "description" : "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404" : {
            "description" : "Not found - The requested resource is not found"
          },
          "415" : {
            "description" : "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405" : {
            "description" : "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406" : {
            "description" : "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409" : {
            "description" : "Conflict - If a resource being created already exists"
          }
        },
        "parameters" : [ {
          "in" : "header",
          "name" : "Authorization",
          "description" : "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
          "type" : "string",
          "required" : true
        }, {
          "in" : "path",
          "name" : "id",
          "description" : "The resource identifier",
          "type" : "string",
          "required" : true
        }, {
          "schema" : {
            "$ref" : "#/definitions/EmploymentProfilesPatch"
          },
          "in" : "body",
          "name" : "JSON",
          "description" : "JSON",
          "required" : true
        } ],
        "tags" : [ "employment-profiles" ]
      },
      "get" : {
        "summary" : "Retrieve a EmploymentProfiles",
        "operationId" : "getEmploymentProfileById",
        "responses" : {
          "200" : {
            "description" : "OK - Everything worked as expected",
            "schema" : {
              "$ref" : "#/definitions/EmploymentProfilesItem"
            }
          },
          "400" : {
            "description" : "Bad Request - Often due to a missing request parameter"
          },
          "401" : {
            "description" : "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500" : {
            "description" : "Server error - Something went wrong on the Cloud Elements server"
          },
          "403" : {
            "description" : "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502" : {
            "description" : "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404" : {
            "description" : "Not found - The requested resource is not found"
          },
          "415" : {
            "description" : "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405" : {
            "description" : "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406" : {
            "description" : "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409" : {
            "description" : "Conflict - If a resource being created already exists"
          }
        },
        "parameters" : [ {
          "in" : "header",
          "name" : "Authorization",
          "description" : "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
          "type" : "string",
          "required" : true
        }, {
          "in" : "path",
          "name" : "id",
          "description" : "The resource identifier",
          "type" : "string",
          "required" : true
        } ],
        "tags" : [ "employment-profiles" ]
      },
      "put" : {
        "summary" : "Update a EmploymentProfiles",
        "operationId" : "replaceEmploymentProfileById",
        "responses" : {
          "200" : {
            "description" : "OK - Everything worked as expected",
            "schema" : {
              "$ref" : "#/definitions/EmploymentProfilesPut"
            }
          },
          "400" : {
            "description" : "Bad Request - Often due to a missing request parameter"
          },
          "401" : {
            "description" : "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500" : {
            "description" : "Server error - Something went wrong on the Cloud Elements server"
          },
          "403" : {
            "description" : "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502" : {
            "description" : "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404" : {
            "description" : "Not found - The requested resource is not found"
          },
          "415" : {
            "description" : "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405" : {
            "description" : "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406" : {
            "description" : "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409" : {
            "description" : "Conflict - If a resource being created already exists"
          }
        },
        "parameters" : [ {
          "in" : "header",
          "name" : "Authorization",
          "description" : "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
          "type" : "string",
          "required" : true
        }, {
          "in" : "path",
          "name" : "id",
          "description" : "The resource identifier",
          "type" : "string",
          "required" : true
        }, {
          "schema" : {
            "$ref" : "#/definitions/EmploymentProfilesPut"
          },
          "in" : "body",
          "name" : "JSON",
          "description" : "JSON",
          "required" : true
        } ],
        "tags" : [ "employment-profiles" ]
      }
    },
    "/invoice-line-taxes" : {
      "post" : {
        "summary" : "Create a InvoiceLineTaxes",
        "operationId" : "createInvoiceLineTaxe",
        "responses" : {
          "200" : {
            "description" : "OK - Everything worked as expected",
            "schema" : {
              "$ref" : "#/definitions/InvoiceLineTaxesItem"
            }
          },
          "400" : {
            "description" : "Bad Request - Often due to a missing request parameter"
          },
          "401" : {
            "description" : "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500" : {
            "description" : "Server error - Something went wrong on the Cloud Elements server"
          },
          "403" : {
            "description" : "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502" : {
            "description" : "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404" : {
            "description" : "Not found - The requested resource is not found"
          },
          "415" : {
            "description" : "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405" : {
            "description" : "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406" : {
            "description" : "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409" : {
            "description" : "Conflict - If a resource being created already exists"
          }
        },
        "parameters" : [ {
          "in" : "header",
          "name" : "Authorization",
          "description" : "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
          "type" : "string",
          "required" : true
        }, {
          "schema" : {
            "$ref" : "#/definitions/InvoiceLineTaxesPost"
          },
          "in" : "body",
          "name" : "Body",
          "description" : "Body",
          "required" : true
        } ],
        "tags" : [ "invoice-line-taxes" ]
      },
      "get" : {
        "summary" : "Retrieve a list of InvoiceLineTaxes",
        "operationId" : "getInvoiceLineTaxes",
        "responses" : {
          "200" : {
            "description" : "OK - Everything worked as expected",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/InvoiceLineTaxesCollection"
              }
            }
          },
          "400" : {
            "description" : "Bad Request - Often due to a missing request parameter"
          },
          "401" : {
            "description" : "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500" : {
            "description" : "Server error - Something went wrong on the Cloud Elements server"
          },
          "403" : {
            "description" : "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502" : {
            "description" : "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404" : {
            "description" : "Not found - The requested resource is not found"
          },
          "415" : {
            "description" : "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405" : {
            "description" : "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406" : {
            "description" : "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409" : {
            "description" : "Conflict - If a resource being created already exists"
          }
        },
        "parameters" : [ {
          "in" : "header",
          "name" : "Authorization",
          "description" : "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
          "type" : "string",
          "required" : true
        }, {
          "in" : "query",
          "name" : "q",
          "description" : "Global search for the object",
          "type" : "string",
          "required" : false
        }, {
          "in" : "query",
          "name" : "offset",
          "description" : "The collection items offset",
          "type" : "integer",
          "required" : false
        }, {
          "in" : "query",
          "name" : "include",
          "description" : "Expand response to get full related object intead of ID. See the expand guide for more info.",
          "type" : "string",
          "required" : false
        }, {
          "schema" : {
            "$ref" : "#/definitions/array"
          },
          "in" : "query",
          "name" : "sort",
          "description" : "The collection items sort field and order (prefix with \"-\" for descending sort].",
          "required" : false
        }, {
          "in" : "query",
          "name" : "[att]",
          "description" : "Filter any attribute by its value. You can search subobjects by using the qualified attribute name. ",
          "type" : "string",
          "required" : false
        }, {
          "in" : "query",
          "name" : "[att]:in",
          "description" : "Filter the collection by attribute list. ",
          "type" : "string",
          "required" : false
        }, {
          "in" : "query",
          "name" : "[att]:contains",
          "description" : "Search a specific attribute partially",
          "type" : "string",
          "required" : false
        }, {
          "in" : "query",
          "name" : "includeInactive",
          "description" : "Return the list of inactive objects in the results. By default only active objects are returned",
          "type" : "string",
          "required" : false
        }, {
          "in" : "query",
          "name" : "limit",
          "description" : "The collection items limit",
          "type" : "integer",
          "required" : false
        }, {
          "in" : "query",
          "name" : "fields",
          "description" : "List of fields you want returned separated by a coma. You can alias the returned field by adding the alias after a column",
          "type" : "string",
          "required" : false
        } ],
        "tags" : [ "invoice-line-taxes" ]
      }
    },
    "/invoice-line-taxes/{id}" : {
      "patch" : {
        "summary" : "Partially edit a InvoiceLineTaxes",
        "operationId" : "updateInvoiceLineTaxeById",
        "responses" : {
          "200" : {
            "description" : "OK - Everything worked as expected",
            "schema" : {
              "$ref" : "#/definitions/InvoiceLineTaxesItem"
            }
          },
          "400" : {
            "description" : "Bad Request - Often due to a missing request parameter"
          },
          "401" : {
            "description" : "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500" : {
            "description" : "Server error - Something went wrong on the Cloud Elements server"
          },
          "403" : {
            "description" : "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502" : {
            "description" : "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404" : {
            "description" : "Not found - The requested resource is not found"
          },
          "415" : {
            "description" : "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405" : {
            "description" : "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406" : {
            "description" : "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409" : {
            "description" : "Conflict - If a resource being created already exists"
          }
        },
        "parameters" : [ {
          "in" : "header",
          "name" : "Authorization",
          "description" : "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
          "type" : "string",
          "required" : true
        }, {
          "in" : "path",
          "name" : "id",
          "description" : "The resource identifier",
          "type" : "string",
          "required" : true
        }, {
          "schema" : {
            "$ref" : "#/definitions/InvoiceLineTaxesPatch"
          },
          "in" : "body",
          "name" : "JSON",
          "description" : "JSON",
          "required" : true
        } ],
        "tags" : [ "invoice-line-taxes" ]
      },
      "get" : {
        "summary" : "Retrieve a InvoiceLineTaxes",
        "operationId" : "getInvoiceLineTaxeById",
        "responses" : {
          "200" : {
            "description" : "OK - Everything worked as expected",
            "schema" : {
              "$ref" : "#/definitions/InvoiceLineTaxesItem"
            }
          },
          "400" : {
            "description" : "Bad Request - Often due to a missing request parameter"
          },
          "401" : {
            "description" : "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500" : {
            "description" : "Server error - Something went wrong on the Cloud Elements server"
          },
          "403" : {
            "description" : "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502" : {
            "description" : "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404" : {
            "description" : "Not found - The requested resource is not found"
          },
          "415" : {
            "description" : "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405" : {
            "description" : "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406" : {
            "description" : "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409" : {
            "description" : "Conflict - If a resource being created already exists"
          }
        },
        "parameters" : [ {
          "in" : "header",
          "name" : "Authorization",
          "description" : "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
          "type" : "string",
          "required" : true
        }, {
          "in" : "path",
          "name" : "id",
          "description" : "The resource identifier",
          "type" : "string",
          "required" : true
        } ],
        "tags" : [ "invoice-line-taxes" ]
      },
      "put" : {
        "summary" : "Update a InvoiceLineTaxes",
        "operationId" : "replaceInvoiceLineTaxeById",
        "responses" : {
          "200" : {
            "description" : "OK - Everything worked as expected",
            "schema" : {
              "$ref" : "#/definitions/InvoiceLineTaxesPut"
            }
          },
          "400" : {
            "description" : "Bad Request - Often due to a missing request parameter"
          },
          "401" : {
            "description" : "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500" : {
            "description" : "Server error - Something went wrong on the Cloud Elements server"
          },
          "403" : {
            "description" : "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502" : {
            "description" : "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404" : {
            "description" : "Not found - The requested resource is not found"
          },
          "415" : {
            "description" : "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405" : {
            "description" : "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406" : {
            "description" : "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409" : {
            "description" : "Conflict - If a resource being created already exists"
          }
        },
        "parameters" : [ {
          "in" : "header",
          "name" : "Authorization",
          "description" : "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
          "type" : "string",
          "required" : true
        }, {
          "in" : "path",
          "name" : "id",
          "description" : "The resource identifier",
          "type" : "string",
          "required" : true
        }, {
          "schema" : {
            "$ref" : "#/definitions/InvoiceLineTaxesPut"
          },
          "in" : "body",
          "name" : "JSON",
          "description" : "JSON",
          "required" : true
        } ],
        "tags" : [ "invoice-line-taxes" ]
      }
    },
    "/invoices" : {
      "post" : {
        "summary" : "Create a Invoices",
        "operationId" : "createInvoice",
        "responses" : {
          "200" : {
            "description" : "OK - Everything worked as expected",
            "schema" : {
              "$ref" : "#/definitions/InvoicesItem"
            }
          },
          "400" : {
            "description" : "Bad Request - Often due to a missing request parameter"
          },
          "401" : {
            "description" : "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500" : {
            "description" : "Server error - Something went wrong on the Cloud Elements server"
          },
          "403" : {
            "description" : "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502" : {
            "description" : "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404" : {
            "description" : "Not found - The requested resource is not found"
          },
          "415" : {
            "description" : "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405" : {
            "description" : "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406" : {
            "description" : "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409" : {
            "description" : "Conflict - If a resource being created already exists"
          }
        },
        "parameters" : [ {
          "in" : "header",
          "name" : "Authorization",
          "description" : "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
          "type" : "string",
          "required" : true
        }, {
          "schema" : {
            "$ref" : "#/definitions/InvoicesPost"
          },
          "in" : "body",
          "name" : "Body",
          "description" : "Body",
          "required" : true
        } ],
        "tags" : [ "invoices" ]
      },
      "get" : {
        "summary" : "Retrieve a list of Invoices",
        "operationId" : "getInvoices",
        "responses" : {
          "200" : {
            "description" : "OK - Everything worked as expected",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/InvoicesCollection"
              }
            }
          },
          "400" : {
            "description" : "Bad Request - Often due to a missing request parameter"
          },
          "401" : {
            "description" : "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500" : {
            "description" : "Server error - Something went wrong on the Cloud Elements server"
          },
          "403" : {
            "description" : "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502" : {
            "description" : "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404" : {
            "description" : "Not found - The requested resource is not found"
          },
          "415" : {
            "description" : "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405" : {
            "description" : "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406" : {
            "description" : "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409" : {
            "description" : "Conflict - If a resource being created already exists"
          }
        },
        "parameters" : [ {
          "in" : "header",
          "name" : "Authorization",
          "description" : "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
          "type" : "string",
          "required" : true
        }, {
          "schema" : {
            "$ref" : "#/definitions/array"
          },
          "in" : "query",
          "name" : "sort",
          "description" : "The collection items sort field and order (prefix with \"-\" for descending sort].",
          "required" : false
        }, {
          "in" : "query",
          "name" : "[att]",
          "description" : "Filter any attribute by its value. You can search subobjects by using the qualified attribute name. ",
          "type" : "string",
          "required" : false
        }, {
          "in" : "query",
          "name" : "[att]:in",
          "description" : "Filter the collection by attribute list. ",
          "type" : "string",
          "required" : false
        }, {
          "in" : "query",
          "name" : "includeInactive",
          "description" : "Return the list of inactive objects in the results. By default only active objects are returned",
          "type" : "string",
          "required" : false
        }, {
          "in" : "query",
          "name" : "[att]:contains",
          "description" : "Search a specific attribute partially",
          "type" : "string",
          "required" : false
        }, {
          "in" : "query",
          "name" : "include",
          "description" : "Expand response to get full related object intead of ID. See the expand guide for more info.",
          "type" : "string",
          "required" : false
        }, {
          "in" : "query",
          "name" : "fields",
          "description" : "List of fields you want returned separated by a coma. You can alias the returned field by adding the alias after a column",
          "type" : "string",
          "required" : false
        }, {
          "in" : "query",
          "name" : "offset",
          "description" : "The collection items offset",
          "type" : "integer",
          "required" : false
        }, {
          "in" : "query",
          "name" : "limit",
          "description" : "The collection items limit",
          "type" : "integer",
          "required" : false
        }, {
          "in" : "query",
          "name" : "q",
          "description" : "Global search for the object",
          "type" : "string",
          "required" : false
        } ],
        "tags" : [ "invoices" ]
      }
    },
    "/invoices/{id}" : {
      "patch" : {
        "summary" : "Partially edit a Invoices",
        "operationId" : "updateInvoiceById",
        "responses" : {
          "200" : {
            "description" : "OK - Everything worked as expected",
            "schema" : {
              "$ref" : "#/definitions/InvoicesItem"
            }
          },
          "400" : {
            "description" : "Bad Request - Often due to a missing request parameter"
          },
          "401" : {
            "description" : "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500" : {
            "description" : "Server error - Something went wrong on the Cloud Elements server"
          },
          "403" : {
            "description" : "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502" : {
            "description" : "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404" : {
            "description" : "Not found - The requested resource is not found"
          },
          "415" : {
            "description" : "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405" : {
            "description" : "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406" : {
            "description" : "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409" : {
            "description" : "Conflict - If a resource being created already exists"
          }
        },
        "parameters" : [ {
          "in" : "header",
          "name" : "Authorization",
          "description" : "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
          "type" : "string",
          "required" : true
        }, {
          "in" : "path",
          "name" : "id",
          "description" : "The resource identifier",
          "type" : "string",
          "required" : true
        }, {
          "schema" : {
            "$ref" : "#/definitions/InvoicesPatch"
          },
          "in" : "body",
          "name" : "JSON",
          "description" : "JSON",
          "required" : true
        } ],
        "tags" : [ "invoices" ]
      },
      "get" : {
        "summary" : "Retrieve a Invoices",
        "operationId" : "getInvoiceById",
        "responses" : {
          "200" : {
            "description" : "OK - Everything worked as expected",
            "schema" : {
              "$ref" : "#/definitions/InvoicesItem"
            }
          },
          "400" : {
            "description" : "Bad Request - Often due to a missing request parameter"
          },
          "401" : {
            "description" : "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500" : {
            "description" : "Server error - Something went wrong on the Cloud Elements server"
          },
          "403" : {
            "description" : "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502" : {
            "description" : "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404" : {
            "description" : "Not found - The requested resource is not found"
          },
          "415" : {
            "description" : "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405" : {
            "description" : "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406" : {
            "description" : "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409" : {
            "description" : "Conflict - If a resource being created already exists"
          }
        },
        "parameters" : [ {
          "in" : "header",
          "name" : "Authorization",
          "description" : "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
          "type" : "string",
          "required" : true
        }, {
          "in" : "path",
          "name" : "id",
          "description" : "The resource identifier",
          "type" : "string",
          "required" : true
        } ],
        "tags" : [ "invoices" ]
      },
      "put" : {
        "summary" : "Update a Invoices",
        "operationId" : "replaceInvoiceById",
        "responses" : {
          "200" : {
            "description" : "OK - Everything worked as expected",
            "schema" : {
              "$ref" : "#/definitions/InvoicesPut"
            }
          },
          "400" : {
            "description" : "Bad Request - Often due to a missing request parameter"
          },
          "401" : {
            "description" : "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500" : {
            "description" : "Server error - Something went wrong on the Cloud Elements server"
          },
          "403" : {
            "description" : "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502" : {
            "description" : "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404" : {
            "description" : "Not found - The requested resource is not found"
          },
          "415" : {
            "description" : "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405" : {
            "description" : "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406" : {
            "description" : "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409" : {
            "description" : "Conflict - If a resource being created already exists"
          }
        },
        "parameters" : [ {
          "in" : "header",
          "name" : "Authorization",
          "description" : "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
          "type" : "string",
          "required" : true
        }, {
          "in" : "path",
          "name" : "id",
          "description" : "The resource identifier",
          "type" : "string",
          "required" : true
        }, {
          "schema" : {
            "$ref" : "#/definitions/InvoicesPut"
          },
          "in" : "body",
          "name" : "JSON",
          "description" : "JSON",
          "required" : true
        } ],
        "tags" : [ "invoices" ]
      }
    },
    "/mobile-devices" : {
      "post" : {
        "summary" : "Create a MobileDevices",
        "operationId" : "createMobileDevice",
        "responses" : {
          "200" : {
            "description" : "OK - Everything worked as expected",
            "schema" : {
              "$ref" : "#/definitions/MobileDevicesItem"
            }
          },
          "400" : {
            "description" : "Bad Request - Often due to a missing request parameter"
          },
          "401" : {
            "description" : "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500" : {
            "description" : "Server error - Something went wrong on the Cloud Elements server"
          },
          "403" : {
            "description" : "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502" : {
            "description" : "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404" : {
            "description" : "Not found - The requested resource is not found"
          },
          "415" : {
            "description" : "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405" : {
            "description" : "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406" : {
            "description" : "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409" : {
            "description" : "Conflict - If a resource being created already exists"
          }
        },
        "parameters" : [ {
          "in" : "header",
          "name" : "Authorization",
          "description" : "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
          "type" : "string",
          "required" : true
        }, {
          "schema" : {
            "$ref" : "#/definitions/MobileDevicesPost"
          },
          "in" : "body",
          "name" : "Body",
          "description" : "Body",
          "required" : true
        } ],
        "tags" : [ "mobile-devices" ]
      },
      "get" : {
        "summary" : "Retrieve a list of MobileDevices",
        "operationId" : "getMobileDevices",
        "responses" : {
          "200" : {
            "description" : "OK - Everything worked as expected",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/MobileDevicesCollection"
              }
            }
          },
          "400" : {
            "description" : "Bad Request - Often due to a missing request parameter"
          },
          "401" : {
            "description" : "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500" : {
            "description" : "Server error - Something went wrong on the Cloud Elements server"
          },
          "403" : {
            "description" : "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502" : {
            "description" : "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404" : {
            "description" : "Not found - The requested resource is not found"
          },
          "415" : {
            "description" : "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405" : {
            "description" : "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406" : {
            "description" : "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409" : {
            "description" : "Conflict - If a resource being created already exists"
          }
        },
        "parameters" : [ {
          "in" : "header",
          "name" : "Authorization",
          "description" : "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
          "type" : "string",
          "required" : true
        }, {
          "in" : "query",
          "name" : "q",
          "description" : "Global search for the object",
          "type" : "string",
          "required" : false
        }, {
          "in" : "query",
          "name" : "includeInactive",
          "description" : "Return the list of inactive objects in the results. By default only active objects are returned",
          "type" : "string",
          "required" : false
        }, {
          "in" : "query",
          "name" : "[att]:contains",
          "description" : "Search a specific attribute partially",
          "type" : "string",
          "required" : false
        }, {
          "in" : "query",
          "name" : "[att]:in",
          "description" : "Filter the collection by attribute list. ",
          "type" : "string",
          "required" : false
        }, {
          "in" : "query",
          "name" : "[att]",
          "description" : "Filter any attribute by its value. You can search subobjects by using the qualified attribute name. ",
          "type" : "string",
          "required" : false
        }, {
          "schema" : {
            "$ref" : "#/definitions/array"
          },
          "in" : "query",
          "name" : "sort",
          "description" : "The collection items sort field and order (prefix with \"-\" for descending sort].",
          "required" : false
        }, {
          "in" : "query",
          "name" : "include",
          "description" : "Expand response to get full related object intead of ID. See the expand guide for more info.",
          "type" : "string",
          "required" : false
        }, {
          "in" : "query",
          "name" : "fields",
          "description" : "List of fields you want returned separated by a coma. You can alias the returned field by adding the alias after a column",
          "type" : "string",
          "required" : false
        }, {
          "in" : "query",
          "name" : "offset",
          "description" : "The collection items offset",
          "type" : "integer",
          "required" : false
        }, {
          "in" : "query",
          "name" : "limit",
          "description" : "The collection items limit",
          "type" : "integer",
          "required" : false
        } ],
        "tags" : [ "mobile-devices" ]
      }
    },
    "/mobile-devices/{id}" : {
      "patch" : {
        "summary" : "Partially edit a MobileDevices",
        "operationId" : "updateMobileDeviceById",
        "responses" : {
          "200" : {
            "description" : "OK - Everything worked as expected",
            "schema" : {
              "$ref" : "#/definitions/MobileDevicesItem"
            }
          },
          "400" : {
            "description" : "Bad Request - Often due to a missing request parameter"
          },
          "401" : {
            "description" : "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500" : {
            "description" : "Server error - Something went wrong on the Cloud Elements server"
          },
          "403" : {
            "description" : "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502" : {
            "description" : "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404" : {
            "description" : "Not found - The requested resource is not found"
          },
          "415" : {
            "description" : "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405" : {
            "description" : "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406" : {
            "description" : "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409" : {
            "description" : "Conflict - If a resource being created already exists"
          }
        },
        "parameters" : [ {
          "in" : "header",
          "name" : "Authorization",
          "description" : "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
          "type" : "string",
          "required" : true
        }, {
          "in" : "path",
          "name" : "id",
          "description" : "The resource identifier",
          "type" : "string",
          "required" : true
        }, {
          "schema" : {
            "$ref" : "#/definitions/MobileDevicesPatch"
          },
          "in" : "body",
          "name" : "JSON",
          "description" : "JSON",
          "required" : true
        } ],
        "tags" : [ "mobile-devices" ]
      },
      "get" : {
        "summary" : "Retrieve a MobileDevices",
        "operationId" : "getMobileDeviceById",
        "responses" : {
          "200" : {
            "description" : "OK - Everything worked as expected",
            "schema" : {
              "$ref" : "#/definitions/MobileDevicesItem"
            }
          },
          "400" : {
            "description" : "Bad Request - Often due to a missing request parameter"
          },
          "401" : {
            "description" : "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500" : {
            "description" : "Server error - Something went wrong on the Cloud Elements server"
          },
          "403" : {
            "description" : "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502" : {
            "description" : "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404" : {
            "description" : "Not found - The requested resource is not found"
          },
          "415" : {
            "description" : "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405" : {
            "description" : "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406" : {
            "description" : "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409" : {
            "description" : "Conflict - If a resource being created already exists"
          }
        },
        "parameters" : [ {
          "in" : "header",
          "name" : "Authorization",
          "description" : "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
          "type" : "string",
          "required" : true
        }, {
          "in" : "path",
          "name" : "id",
          "description" : "The resource identifier",
          "type" : "string",
          "required" : true
        } ],
        "tags" : [ "mobile-devices" ]
      },
      "put" : {
        "summary" : "Update a MobileDevices",
        "operationId" : "replaceMobileDeviceById",
        "responses" : {
          "200" : {
            "description" : "OK - Everything worked as expected",
            "schema" : {
              "$ref" : "#/definitions/MobileDevicesPut"
            }
          },
          "400" : {
            "description" : "Bad Request - Often due to a missing request parameter"
          },
          "401" : {
            "description" : "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500" : {
            "description" : "Server error - Something went wrong on the Cloud Elements server"
          },
          "403" : {
            "description" : "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502" : {
            "description" : "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404" : {
            "description" : "Not found - The requested resource is not found"
          },
          "415" : {
            "description" : "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405" : {
            "description" : "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406" : {
            "description" : "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409" : {
            "description" : "Conflict - If a resource being created already exists"
          }
        },
        "parameters" : [ {
          "in" : "header",
          "name" : "Authorization",
          "description" : "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
          "type" : "string",
          "required" : true
        }, {
          "in" : "path",
          "name" : "id",
          "description" : "The resource identifier",
          "type" : "string",
          "required" : true
        }, {
          "schema" : {
            "$ref" : "#/definitions/MobileDevicesPut"
          },
          "in" : "body",
          "name" : "JSON",
          "description" : "JSON",
          "required" : true
        } ],
        "tags" : [ "mobile-devices" ]
      }
    },
    "/notes" : {
      "post" : {
        "summary" : "Create a Notes",
        "operationId" : "createNote",
        "responses" : {
          "200" : {
            "description" : "OK - Everything worked as expected",
            "schema" : {
              "$ref" : "#/definitions/NotesItem"
            }
          },
          "400" : {
            "description" : "Bad Request - Often due to a missing request parameter"
          },
          "401" : {
            "description" : "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500" : {
            "description" : "Server error - Something went wrong on the Cloud Elements server"
          },
          "403" : {
            "description" : "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502" : {
            "description" : "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404" : {
            "description" : "Not found - The requested resource is not found"
          },
          "415" : {
            "description" : "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405" : {
            "description" : "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406" : {
            "description" : "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409" : {
            "description" : "Conflict - If a resource being created already exists"
          }
        },
        "parameters" : [ {
          "in" : "header",
          "name" : "Authorization",
          "description" : "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
          "type" : "string",
          "required" : true
        }, {
          "schema" : {
            "$ref" : "#/definitions/NotesPost"
          },
          "in" : "body",
          "name" : "Body",
          "description" : "Body",
          "required" : true
        } ],
        "tags" : [ "notes" ]
      },
      "get" : {
        "summary" : "Retrieve a list of Notes",
        "operationId" : "getNotes",
        "responses" : {
          "200" : {
            "description" : "OK - Everything worked as expected",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/NotesCollection"
              }
            }
          },
          "400" : {
            "description" : "Bad Request - Often due to a missing request parameter"
          },
          "401" : {
            "description" : "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500" : {
            "description" : "Server error - Something went wrong on the Cloud Elements server"
          },
          "403" : {
            "description" : "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502" : {
            "description" : "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404" : {
            "description" : "Not found - The requested resource is not found"
          },
          "415" : {
            "description" : "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405" : {
            "description" : "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406" : {
            "description" : "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409" : {
            "description" : "Conflict - If a resource being created already exists"
          }
        },
        "parameters" : [ {
          "in" : "header",
          "name" : "Authorization",
          "description" : "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
          "type" : "string",
          "required" : true
        }, {
          "in" : "query",
          "name" : "include",
          "description" : "Expand response to get full related object intead of ID. See the expand guide for more info.",
          "type" : "string",
          "required" : false
        }, {
          "in" : "query",
          "name" : "fields",
          "description" : "List of fields you want returned separated by a coma. You can alias the returned field by adding the alias after a column",
          "type" : "string",
          "required" : false
        }, {
          "in" : "query",
          "name" : "offset",
          "description" : "The collection items offset",
          "type" : "integer",
          "required" : false
        }, {
          "in" : "query",
          "name" : "[att]:contains",
          "description" : "Search a specific attribute partially",
          "type" : "string",
          "required" : false
        }, {
          "in" : "query",
          "name" : "includeInactive",
          "description" : "Return the list of inactive objects in the results. By default only active objects are returned",
          "type" : "string",
          "required" : false
        }, {
          "in" : "query",
          "name" : "[att]:in",
          "description" : "Filter the collection by attribute list. ",
          "type" : "string",
          "required" : false
        }, {
          "in" : "query",
          "name" : "[att]",
          "description" : "Filter any attribute by its value. You can search subobjects by using the qualified attribute name. ",
          "type" : "string",
          "required" : false
        }, {
          "in" : "query",
          "name" : "q",
          "description" : "Global search for the object",
          "type" : "string",
          "required" : false
        }, {
          "schema" : {
            "$ref" : "#/definitions/array"
          },
          "in" : "query",
          "name" : "sort",
          "description" : "The collection items sort field and order (prefix with \"-\" for descending sort].",
          "required" : false
        }, {
          "in" : "query",
          "name" : "limit",
          "description" : "The collection items limit",
          "type" : "integer",
          "required" : false
        } ],
        "tags" : [ "notes" ]
      }
    },
    "/notes/{id}" : {
      "patch" : {
        "summary" : "Partially edit a Notes",
        "operationId" : "updateNoteById",
        "responses" : {
          "200" : {
            "description" : "OK - Everything worked as expected",
            "schema" : {
              "$ref" : "#/definitions/NotesItem"
            }
          },
          "400" : {
            "description" : "Bad Request - Often due to a missing request parameter"
          },
          "401" : {
            "description" : "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500" : {
            "description" : "Server error - Something went wrong on the Cloud Elements server"
          },
          "403" : {
            "description" : "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502" : {
            "description" : "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404" : {
            "description" : "Not found - The requested resource is not found"
          },
          "415" : {
            "description" : "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405" : {
            "description" : "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406" : {
            "description" : "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409" : {
            "description" : "Conflict - If a resource being created already exists"
          }
        },
        "parameters" : [ {
          "in" : "header",
          "name" : "Authorization",
          "description" : "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
          "type" : "string",
          "required" : true
        }, {
          "in" : "path",
          "name" : "id",
          "description" : "The resource identifier",
          "type" : "string",
          "required" : true
        }, {
          "schema" : {
            "$ref" : "#/definitions/NotesPatch"
          },
          "in" : "body",
          "name" : "JSON",
          "description" : "JSON",
          "required" : true
        } ],
        "tags" : [ "notes" ]
      },
      "get" : {
        "summary" : "Retrieve a Notes",
        "operationId" : "getNoteById",
        "responses" : {
          "200" : {
            "description" : "OK - Everything worked as expected",
            "schema" : {
              "$ref" : "#/definitions/NotesItem"
            }
          },
          "400" : {
            "description" : "Bad Request - Often due to a missing request parameter"
          },
          "401" : {
            "description" : "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500" : {
            "description" : "Server error - Something went wrong on the Cloud Elements server"
          },
          "403" : {
            "description" : "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502" : {
            "description" : "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404" : {
            "description" : "Not found - The requested resource is not found"
          },
          "415" : {
            "description" : "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405" : {
            "description" : "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406" : {
            "description" : "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409" : {
            "description" : "Conflict - If a resource being created already exists"
          }
        },
        "parameters" : [ {
          "in" : "header",
          "name" : "Authorization",
          "description" : "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
          "type" : "string",
          "required" : true
        }, {
          "in" : "path",
          "name" : "id",
          "description" : "The resource identifier",
          "type" : "string",
          "required" : true
        } ],
        "tags" : [ "notes" ]
      },
      "put" : {
        "summary" : "Update a Notes",
        "operationId" : "replaceNoteById",
        "responses" : {
          "200" : {
            "description" : "OK - Everything worked as expected",
            "schema" : {
              "$ref" : "#/definitions/NotesPut"
            }
          },
          "400" : {
            "description" : "Bad Request - Often due to a missing request parameter"
          },
          "401" : {
            "description" : "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500" : {
            "description" : "Server error - Something went wrong on the Cloud Elements server"
          },
          "403" : {
            "description" : "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502" : {
            "description" : "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404" : {
            "description" : "Not found - The requested resource is not found"
          },
          "415" : {
            "description" : "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405" : {
            "description" : "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406" : {
            "description" : "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409" : {
            "description" : "Conflict - If a resource being created already exists"
          }
        },
        "parameters" : [ {
          "in" : "header",
          "name" : "Authorization",
          "description" : "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
          "type" : "string",
          "required" : true
        }, {
          "in" : "path",
          "name" : "id",
          "description" : "The resource identifier",
          "type" : "string",
          "required" : true
        }, {
          "schema" : {
            "$ref" : "#/definitions/NotesPut"
          },
          "in" : "body",
          "name" : "JSON",
          "description" : "JSON",
          "required" : true
        } ],
        "tags" : [ "notes" ]
      }
    },
    "/objects" : {
      "get" : {
        "operationId" : "getObjects",
        "parameters" : [ {
          "description" : "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
          "in" : "header",
          "name" : "Authorization",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK - Everything worked as expected",
            "schema" : {
              "items" : {
                "type" : "string"
              },
              "type" : "array"
            }
          },
          "400" : {
            "description" : "Bad Request - Often due to a missing request parameter"
          },
          "401" : {
            "description" : "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "403" : {
            "description" : "Forbidden - Access to the resource by the provider is forbidden"
          },
          "404" : {
            "description" : "Not found - The requested resource is not found"
          },
          "405" : {
            "description" : "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406" : {
            "description" : "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409" : {
            "description" : "Conflict - If a resource being created already exists"
          },
          "415" : {
            "description" : "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "500" : {
            "description" : "Server error - Something went wrong on the Cloud Elements server"
          },
          "502" : {
            "description" : "Provider server error - Something went wrong on the Provider or Endpoint's server"
          }
        },
        "summary" : "Get a list of all the available objects.",
        "tags" : [ "objects" ]
      }
    },
    "/objects/{objectName}/docs" : {
      "get" : {
        "operationId" : "getObjectsObjectNameDocs",
        "parameters" : [ {
          "description" : "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
          "in" : "header",
          "name" : "Authorization",
          "required" : true,
          "type" : "string"
        }, {
          "description" : "The name of the object",
          "in" : "path",
          "name" : "objectName",
          "required" : true,
          "type" : "string"
        }, {
          "description" : "Include discovery metadata in definitions",
          "in" : "query",
          "name" : "discovery",
          "required" : false,
          "type" : "boolean"
        }, {
          "description" : "Optionally resolve swagger references for an inline object definition",
          "in" : "query",
          "name" : "resolveReferences",
          "required" : false,
          "type" : "boolean"
        }, {
          "description" : "Include only OpenAPI / Swagger properties in definitions",
          "in" : "query",
          "name" : "basic",
          "required" : false,
          "type" : "boolean"
        }, {
          "description" : "The element swagger version to get the corresponding element swagger, Passing in \"-1\" gives latest element swagger",
          "in" : "query",
          "name" : "version",
          "required" : false,
          "default" : "-1",
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK - Everything worked as expected",
            "schema" : {
              "$ref" : "#/definitions/swaggerDocs"
            }
          },
          "400" : {
            "description" : "Bad Request - Often due to a missing request parameter"
          },
          "401" : {
            "description" : "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "403" : {
            "description" : "Forbidden - Access to the resource by the provider is forbidden"
          },
          "404" : {
            "description" : "Not found - The requested resource is not found"
          },
          "405" : {
            "description" : "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406" : {
            "description" : "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409" : {
            "description" : "Conflict - If a resource being created already exists"
          },
          "415" : {
            "description" : "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "500" : {
            "description" : "Server error - Something went wrong on the Cloud Elements server"
          },
          "502" : {
            "description" : "Provider server error - Something went wrong on the Provider or Endpoint's server"
          }
        },
        "summary" : "Get swagger docs for an object.",
        "tags" : [ "objects" ]
      }
    },
    "/objects/{objectName}/metadata" : {
      "get" : {
        "operationId" : "getObjectsObjectNameMetadata",
        "parameters" : [ {
          "description" : "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
          "in" : "header",
          "name" : "Authorization",
          "required" : true,
          "type" : "string"
        }, {
          "description" : "The name of the object",
          "in" : "path",
          "name" : "objectName",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK - Everything worked as expected",
            "schema" : {
              "$ref" : "#/definitions/objectsMetadata"
            }
          },
          "400" : {
            "description" : "Bad Request - Often due to a missing request parameter"
          },
          "401" : {
            "description" : "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "403" : {
            "description" : "Forbidden - Access to the resource by the provider is forbidden"
          },
          "404" : {
            "description" : "Not found - The requested resource is not found"
          },
          "405" : {
            "description" : "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406" : {
            "description" : "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409" : {
            "description" : "Conflict - If a resource being created already exists"
          },
          "415" : {
            "description" : "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "500" : {
            "description" : "Server error - Something went wrong on the Cloud Elements server"
          },
          "502" : {
            "description" : "Provider server error - Something went wrong on the Provider or Endpoint's server"
          }
        },
        "summary" : "Get a list of all the field for an object.",
        "tags" : [ "objects" ]
      }
    },
    "/ping" : {
      "get" : {
        "operationId" : "getPing",
        "parameters" : [ {
          "description" : "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
          "in" : "header",
          "name" : "Authorization",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK - Everything worked as expected",
            "schema" : {
              "$ref" : "#/definitions/Pong"
            }
          },
          "400" : {
            "description" : "Bad Request - Often due to a missing request parameter"
          },
          "401" : {
            "description" : "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "403" : {
            "description" : "Forbidden - Access to the resource by the provider is forbidden"
          },
          "404" : {
            "description" : "Not found - The requested resource is not found"
          },
          "405" : {
            "description" : "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406" : {
            "description" : "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409" : {
            "description" : "Conflict - If a resource being created already exists"
          },
          "415" : {
            "description" : "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "500" : {
            "description" : "Server error - Something went wrong on the Cloud Elements server"
          },
          "502" : {
            "description" : "Provider server error - Something went wrong on the Provider or Endpoint's server"
          }
        },
        "summary" : "Ping the Element to confirm that the Hub Element has a heartbeat.  If the Element does not have a heartbeat, an error message will be returned.",
        "tags" : [ "ping" ]
      }
    },
    "/position-skills" : {
      "post" : {
        "summary" : "Create a PositionSkills",
        "operationId" : "createPositionSkill",
        "responses" : {
          "200" : {
            "description" : "OK - Everything worked as expected",
            "schema" : {
              "$ref" : "#/definitions/PositionSkillsItem"
            }
          },
          "400" : {
            "description" : "Bad Request - Often due to a missing request parameter"
          },
          "401" : {
            "description" : "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500" : {
            "description" : "Server error - Something went wrong on the Cloud Elements server"
          },
          "403" : {
            "description" : "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502" : {
            "description" : "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404" : {
            "description" : "Not found - The requested resource is not found"
          },
          "415" : {
            "description" : "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405" : {
            "description" : "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406" : {
            "description" : "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409" : {
            "description" : "Conflict - If a resource being created already exists"
          }
        },
        "parameters" : [ {
          "in" : "header",
          "name" : "Authorization",
          "description" : "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
          "type" : "string",
          "required" : true
        }, {
          "schema" : {
            "$ref" : "#/definitions/PositionSkillsPost"
          },
          "in" : "body",
          "name" : "Body",
          "description" : "Body",
          "required" : true
        } ],
        "tags" : [ "position-skills" ]
      },
      "get" : {
        "summary" : "Retrieve a list of PositionSkills",
        "operationId" : "getPositionSkills",
        "responses" : {
          "200" : {
            "description" : "OK - Everything worked as expected",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/PositionSkillsCollection"
              }
            }
          },
          "400" : {
            "description" : "Bad Request - Often due to a missing request parameter"
          },
          "401" : {
            "description" : "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500" : {
            "description" : "Server error - Something went wrong on the Cloud Elements server"
          },
          "403" : {
            "description" : "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502" : {
            "description" : "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404" : {
            "description" : "Not found - The requested resource is not found"
          },
          "415" : {
            "description" : "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405" : {
            "description" : "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406" : {
            "description" : "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409" : {
            "description" : "Conflict - If a resource being created already exists"
          }
        },
        "parameters" : [ {
          "in" : "header",
          "name" : "Authorization",
          "description" : "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
          "type" : "string",
          "required" : true
        }, {
          "in" : "query",
          "name" : "includeInactive",
          "description" : "Return the list of inactive objects in the results. By default only active objects are returned",
          "type" : "string",
          "required" : false
        }, {
          "in" : "query",
          "name" : "[att]:contains",
          "description" : "Search a specific attribute partially",
          "type" : "string",
          "required" : false
        }, {
          "in" : "query",
          "name" : "[att]:in",
          "description" : "Filter the collection by attribute list. ",
          "type" : "string",
          "required" : false
        }, {
          "in" : "query",
          "name" : "[att]",
          "description" : "Filter any attribute by its value. You can search subobjects by using the qualified attribute name. ",
          "type" : "string",
          "required" : false
        }, {
          "schema" : {
            "$ref" : "#/definitions/array"
          },
          "in" : "query",
          "name" : "sort",
          "description" : "The collection items sort field and order (prefix with \"-\" for descending sort].",
          "required" : false
        }, {
          "in" : "query",
          "name" : "include",
          "description" : "Expand response to get full related object intead of ID. See the expand guide for more info.",
          "type" : "string",
          "required" : false
        }, {
          "in" : "query",
          "name" : "fields",
          "description" : "List of fields you want returned separated by a coma. You can alias the returned field by adding the alias after a column",
          "type" : "string",
          "required" : false
        }, {
          "in" : "query",
          "name" : "offset",
          "description" : "The collection items offset",
          "type" : "integer",
          "required" : false
        }, {
          "in" : "query",
          "name" : "limit",
          "description" : "The collection items limit",
          "type" : "integer",
          "required" : false
        }, {
          "in" : "query",
          "name" : "q",
          "description" : "Global search for the object",
          "type" : "string",
          "required" : false
        } ],
        "tags" : [ "position-skills" ]
      }
    },
    "/position-skills/{id}" : {
      "patch" : {
        "summary" : "Partially edit a PositionSkills",
        "operationId" : "updatePositionSkillById",
        "responses" : {
          "200" : {
            "description" : "OK - Everything worked as expected",
            "schema" : {
              "$ref" : "#/definitions/PositionSkillsItem"
            }
          },
          "400" : {
            "description" : "Bad Request - Often due to a missing request parameter"
          },
          "401" : {
            "description" : "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500" : {
            "description" : "Server error - Something went wrong on the Cloud Elements server"
          },
          "403" : {
            "description" : "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502" : {
            "description" : "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404" : {
            "description" : "Not found - The requested resource is not found"
          },
          "415" : {
            "description" : "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405" : {
            "description" : "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406" : {
            "description" : "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409" : {
            "description" : "Conflict - If a resource being created already exists"
          }
        },
        "parameters" : [ {
          "in" : "header",
          "name" : "Authorization",
          "description" : "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
          "type" : "string",
          "required" : true
        }, {
          "in" : "path",
          "name" : "id",
          "description" : "The resource identifier",
          "type" : "string",
          "required" : true
        }, {
          "schema" : {
            "$ref" : "#/definitions/PositionSkillsPatch"
          },
          "in" : "body",
          "name" : "JSON",
          "description" : "JSON",
          "required" : true
        } ],
        "tags" : [ "position-skills" ]
      },
      "get" : {
        "summary" : "Retrieve a PositionSkills",
        "operationId" : "getPositionSkillById",
        "responses" : {
          "200" : {
            "description" : "OK - Everything worked as expected",
            "schema" : {
              "$ref" : "#/definitions/PositionSkillsItem"
            }
          },
          "400" : {
            "description" : "Bad Request - Often due to a missing request parameter"
          },
          "401" : {
            "description" : "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500" : {
            "description" : "Server error - Something went wrong on the Cloud Elements server"
          },
          "403" : {
            "description" : "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502" : {
            "description" : "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404" : {
            "description" : "Not found - The requested resource is not found"
          },
          "415" : {
            "description" : "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405" : {
            "description" : "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406" : {
            "description" : "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409" : {
            "description" : "Conflict - If a resource being created already exists"
          }
        },
        "parameters" : [ {
          "in" : "header",
          "name" : "Authorization",
          "description" : "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
          "type" : "string",
          "required" : true
        }, {
          "in" : "path",
          "name" : "id",
          "description" : "The resource identifier",
          "type" : "string",
          "required" : true
        } ],
        "tags" : [ "position-skills" ]
      },
      "put" : {
        "summary" : "Update a PositionSkills",
        "operationId" : "replacePositionSkillById",
        "responses" : {
          "200" : {
            "description" : "OK - Everything worked as expected",
            "schema" : {
              "$ref" : "#/definitions/PositionSkillsPut"
            }
          },
          "400" : {
            "description" : "Bad Request - Often due to a missing request parameter"
          },
          "401" : {
            "description" : "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500" : {
            "description" : "Server error - Something went wrong on the Cloud Elements server"
          },
          "403" : {
            "description" : "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502" : {
            "description" : "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404" : {
            "description" : "Not found - The requested resource is not found"
          },
          "415" : {
            "description" : "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405" : {
            "description" : "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406" : {
            "description" : "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409" : {
            "description" : "Conflict - If a resource being created already exists"
          }
        },
        "parameters" : [ {
          "in" : "header",
          "name" : "Authorization",
          "description" : "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
          "type" : "string",
          "required" : true
        }, {
          "in" : "path",
          "name" : "id",
          "description" : "The resource identifier",
          "type" : "string",
          "required" : true
        }, {
          "schema" : {
            "$ref" : "#/definitions/PositionSkillsPut"
          },
          "in" : "body",
          "name" : "JSON",
          "description" : "JSON",
          "required" : true
        } ],
        "tags" : [ "position-skills" ]
      }
    },
    "/positions" : {
      "post" : {
        "summary" : "Create a Positions",
        "operationId" : "createPosition",
        "responses" : {
          "200" : {
            "description" : "OK - Everything worked as expected",
            "schema" : {
              "$ref" : "#/definitions/PositionsItem"
            }
          },
          "400" : {
            "description" : "Bad Request - Often due to a missing request parameter"
          },
          "401" : {
            "description" : "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500" : {
            "description" : "Server error - Something went wrong on the Cloud Elements server"
          },
          "403" : {
            "description" : "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502" : {
            "description" : "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404" : {
            "description" : "Not found - The requested resource is not found"
          },
          "415" : {
            "description" : "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405" : {
            "description" : "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406" : {
            "description" : "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409" : {
            "description" : "Conflict - If a resource being created already exists"
          }
        },
        "parameters" : [ {
          "in" : "header",
          "name" : "Authorization",
          "description" : "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
          "type" : "string",
          "required" : true
        }, {
          "schema" : {
            "$ref" : "#/definitions/PositionsPost"
          },
          "in" : "body",
          "name" : "Body",
          "description" : "Body",
          "required" : true
        } ],
        "tags" : [ "positions" ]
      },
      "get" : {
        "summary" : "Retrieve a list of Positions",
        "operationId" : "getPositions",
        "responses" : {
          "200" : {
            "description" : "OK - Everything worked as expected",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/PositionsCollection"
              }
            }
          },
          "400" : {
            "description" : "Bad Request - Often due to a missing request parameter"
          },
          "401" : {
            "description" : "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500" : {
            "description" : "Server error - Something went wrong on the Cloud Elements server"
          },
          "403" : {
            "description" : "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502" : {
            "description" : "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404" : {
            "description" : "Not found - The requested resource is not found"
          },
          "415" : {
            "description" : "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405" : {
            "description" : "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406" : {
            "description" : "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409" : {
            "description" : "Conflict - If a resource being created already exists"
          }
        },
        "parameters" : [ {
          "in" : "header",
          "name" : "Authorization",
          "description" : "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
          "type" : "string",
          "required" : true
        }, {
          "in" : "query",
          "name" : "limit",
          "description" : "The collection items limit",
          "type" : "integer",
          "required" : false
        }, {
          "in" : "query",
          "name" : "[att]:contains",
          "description" : "Search a specific attribute partially",
          "type" : "string",
          "required" : false
        }, {
          "in" : "query",
          "name" : "includeInactive",
          "description" : "Return the list of inactive objects in the results. By default only active objects are returned",
          "type" : "string",
          "required" : false
        }, {
          "in" : "query",
          "name" : "[att]:in",
          "description" : "Filter the collection by attribute list. ",
          "type" : "string",
          "required" : false
        }, {
          "in" : "query",
          "name" : "[att]",
          "description" : "Filter any attribute by its value. You can search subobjects by using the qualified attribute name. ",
          "type" : "string",
          "required" : false
        }, {
          "schema" : {
            "$ref" : "#/definitions/array"
          },
          "in" : "query",
          "name" : "sort",
          "description" : "The collection items sort field and order (prefix with \"-\" for descending sort].",
          "required" : false
        }, {
          "in" : "query",
          "name" : "include",
          "description" : "Expand response to get full related object intead of ID. See the expand guide for more info.",
          "type" : "string",
          "required" : false
        }, {
          "in" : "query",
          "name" : "fields",
          "description" : "List of fields you want returned separated by a coma. You can alias the returned field by adding the alias after a column",
          "type" : "string",
          "required" : false
        }, {
          "in" : "query",
          "name" : "q",
          "description" : "Global search for the object",
          "type" : "string",
          "required" : false
        }, {
          "in" : "query",
          "name" : "offset",
          "description" : "The collection items offset",
          "type" : "integer",
          "required" : false
        } ],
        "tags" : [ "positions" ]
      }
    },
    "/positions/{id}" : {
      "patch" : {
        "summary" : "Partially edit a Positions",
        "operationId" : "updatePositionById",
        "responses" : {
          "200" : {
            "description" : "OK - Everything worked as expected",
            "schema" : {
              "$ref" : "#/definitions/PositionsItem"
            }
          },
          "400" : {
            "description" : "Bad Request - Often due to a missing request parameter"
          },
          "401" : {
            "description" : "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500" : {
            "description" : "Server error - Something went wrong on the Cloud Elements server"
          },
          "403" : {
            "description" : "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502" : {
            "description" : "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404" : {
            "description" : "Not found - The requested resource is not found"
          },
          "415" : {
            "description" : "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405" : {
            "description" : "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406" : {
            "description" : "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409" : {
            "description" : "Conflict - If a resource being created already exists"
          }
        },
        "parameters" : [ {
          "in" : "header",
          "name" : "Authorization",
          "description" : "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
          "type" : "string",
          "required" : true
        }, {
          "in" : "path",
          "name" : "id",
          "description" : "The resource identifier",
          "type" : "string",
          "required" : true
        }, {
          "schema" : {
            "$ref" : "#/definitions/PositionsPatch"
          },
          "in" : "body",
          "name" : "JSON",
          "description" : "JSON",
          "required" : true
        } ],
        "tags" : [ "positions" ]
      },
      "get" : {
        "summary" : "Retrieve a Positions",
        "operationId" : "getPositionById",
        "responses" : {
          "200" : {
            "description" : "OK - Everything worked as expected",
            "schema" : {
              "$ref" : "#/definitions/PositionsItem"
            }
          },
          "400" : {
            "description" : "Bad Request - Often due to a missing request parameter"
          },
          "401" : {
            "description" : "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500" : {
            "description" : "Server error - Something went wrong on the Cloud Elements server"
          },
          "403" : {
            "description" : "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502" : {
            "description" : "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404" : {
            "description" : "Not found - The requested resource is not found"
          },
          "415" : {
            "description" : "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405" : {
            "description" : "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406" : {
            "description" : "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409" : {
            "description" : "Conflict - If a resource being created already exists"
          }
        },
        "parameters" : [ {
          "in" : "header",
          "name" : "Authorization",
          "description" : "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
          "type" : "string",
          "required" : true
        }, {
          "in" : "path",
          "name" : "id",
          "description" : "The resource identifier",
          "type" : "string",
          "required" : true
        } ],
        "tags" : [ "positions" ]
      },
      "put" : {
        "summary" : "Update a Positions",
        "operationId" : "replacePositionById",
        "responses" : {
          "200" : {
            "description" : "OK - Everything worked as expected",
            "schema" : {
              "$ref" : "#/definitions/PositionsPut"
            }
          },
          "400" : {
            "description" : "Bad Request - Often due to a missing request parameter"
          },
          "401" : {
            "description" : "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500" : {
            "description" : "Server error - Something went wrong on the Cloud Elements server"
          },
          "403" : {
            "description" : "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502" : {
            "description" : "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404" : {
            "description" : "Not found - The requested resource is not found"
          },
          "415" : {
            "description" : "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405" : {
            "description" : "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406" : {
            "description" : "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409" : {
            "description" : "Conflict - If a resource being created already exists"
          }
        },
        "parameters" : [ {
          "in" : "header",
          "name" : "Authorization",
          "description" : "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
          "type" : "string",
          "required" : true
        }, {
          "in" : "path",
          "name" : "id",
          "description" : "The resource identifier",
          "type" : "string",
          "required" : true
        }, {
          "schema" : {
            "$ref" : "#/definitions/PositionsPut"
          },
          "in" : "body",
          "name" : "JSON",
          "description" : "JSON",
          "required" : true
        } ],
        "tags" : [ "positions" ]
      }
    },
    "/price-tiers" : {
      "post" : {
        "summary" : "Create a PriceTiers",
        "operationId" : "createPriceTier",
        "responses" : {
          "200" : {
            "description" : "OK - Everything worked as expected",
            "schema" : {
              "$ref" : "#/definitions/PriceTiersItem"
            }
          },
          "400" : {
            "description" : "Bad Request - Often due to a missing request parameter"
          },
          "401" : {
            "description" : "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500" : {
            "description" : "Server error - Something went wrong on the Cloud Elements server"
          },
          "403" : {
            "description" : "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502" : {
            "description" : "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404" : {
            "description" : "Not found - The requested resource is not found"
          },
          "415" : {
            "description" : "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405" : {
            "description" : "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406" : {
            "description" : "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409" : {
            "description" : "Conflict - If a resource being created already exists"
          }
        },
        "parameters" : [ {
          "in" : "header",
          "name" : "Authorization",
          "description" : "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
          "type" : "string",
          "required" : true
        }, {
          "schema" : {
            "$ref" : "#/definitions/PriceTiersPost"
          },
          "in" : "body",
          "name" : "Body",
          "description" : "Body",
          "required" : true
        } ],
        "tags" : [ "price-tiers" ]
      },
      "get" : {
        "summary" : "Retrieve a list of PriceTiers",
        "operationId" : "getPriceTiers",
        "responses" : {
          "200" : {
            "description" : "OK - Everything worked as expected",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/PriceTiersCollection"
              }
            }
          },
          "400" : {
            "description" : "Bad Request - Often due to a missing request parameter"
          },
          "401" : {
            "description" : "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500" : {
            "description" : "Server error - Something went wrong on the Cloud Elements server"
          },
          "403" : {
            "description" : "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502" : {
            "description" : "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404" : {
            "description" : "Not found - The requested resource is not found"
          },
          "415" : {
            "description" : "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405" : {
            "description" : "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406" : {
            "description" : "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409" : {
            "description" : "Conflict - If a resource being created already exists"
          }
        },
        "parameters" : [ {
          "in" : "header",
          "name" : "Authorization",
          "description" : "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
          "type" : "string",
          "required" : true
        }, {
          "schema" : {
            "$ref" : "#/definitions/array"
          },
          "in" : "query",
          "name" : "sort",
          "description" : "The collection items sort field and order (prefix with \"-\" for descending sort].",
          "required" : false
        }, {
          "in" : "query",
          "name" : "include",
          "description" : "Expand response to get full related object intead of ID. See the expand guide for more info.",
          "type" : "string",
          "required" : false
        }, {
          "in" : "query",
          "name" : "q",
          "description" : "Global search for the object",
          "type" : "string",
          "required" : false
        }, {
          "in" : "query",
          "name" : "[att]:contains",
          "description" : "Search a specific attribute partially",
          "type" : "string",
          "required" : false
        }, {
          "in" : "query",
          "name" : "[att]:in",
          "description" : "Filter the collection by attribute list. ",
          "type" : "string",
          "required" : false
        }, {
          "in" : "query",
          "name" : "[att]",
          "description" : "Filter any attribute by its value. You can search subobjects by using the qualified attribute name. ",
          "type" : "string",
          "required" : false
        }, {
          "in" : "query",
          "name" : "limit",
          "description" : "The collection items limit",
          "type" : "integer",
          "required" : false
        }, {
          "in" : "query",
          "name" : "includeInactive",
          "description" : "Return the list of inactive objects in the results. By default only active objects are returned",
          "type" : "string",
          "required" : false
        }, {
          "in" : "query",
          "name" : "fields",
          "description" : "List of fields you want returned separated by a coma. You can alias the returned field by adding the alias after a column",
          "type" : "string",
          "required" : false
        }, {
          "in" : "query",
          "name" : "offset",
          "description" : "The collection items offset",
          "type" : "integer",
          "required" : false
        } ],
        "tags" : [ "price-tiers" ]
      }
    },
    "/price-tiers/{id}" : {
      "patch" : {
        "summary" : "Partially edit a PriceTiers",
        "operationId" : "updatePriceTierById",
        "responses" : {
          "200" : {
            "description" : "OK - Everything worked as expected",
            "schema" : {
              "$ref" : "#/definitions/PriceTiersItem"
            }
          },
          "400" : {
            "description" : "Bad Request - Often due to a missing request parameter"
          },
          "401" : {
            "description" : "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500" : {
            "description" : "Server error - Something went wrong on the Cloud Elements server"
          },
          "403" : {
            "description" : "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502" : {
            "description" : "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404" : {
            "description" : "Not found - The requested resource is not found"
          },
          "415" : {
            "description" : "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405" : {
            "description" : "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406" : {
            "description" : "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409" : {
            "description" : "Conflict - If a resource being created already exists"
          }
        },
        "parameters" : [ {
          "in" : "header",
          "name" : "Authorization",
          "description" : "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
          "type" : "string",
          "required" : true
        }, {
          "in" : "path",
          "name" : "id",
          "description" : "The resource identifier",
          "type" : "string",
          "required" : true
        }, {
          "schema" : {
            "$ref" : "#/definitions/PriceTiersPatch"
          },
          "in" : "body",
          "name" : "JSON",
          "description" : "JSON",
          "required" : true
        } ],
        "tags" : [ "price-tiers" ]
      },
      "get" : {
        "summary" : "Retrieve a PriceTiers",
        "operationId" : "getPriceTierById",
        "responses" : {
          "200" : {
            "description" : "OK - Everything worked as expected",
            "schema" : {
              "$ref" : "#/definitions/PriceTiersItem"
            }
          },
          "400" : {
            "description" : "Bad Request - Often due to a missing request parameter"
          },
          "401" : {
            "description" : "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500" : {
            "description" : "Server error - Something went wrong on the Cloud Elements server"
          },
          "403" : {
            "description" : "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502" : {
            "description" : "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404" : {
            "description" : "Not found - The requested resource is not found"
          },
          "415" : {
            "description" : "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405" : {
            "description" : "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406" : {
            "description" : "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409" : {
            "description" : "Conflict - If a resource being created already exists"
          }
        },
        "parameters" : [ {
          "in" : "header",
          "name" : "Authorization",
          "description" : "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
          "type" : "string",
          "required" : true
        }, {
          "in" : "path",
          "name" : "id",
          "description" : "The resource identifier",
          "type" : "string",
          "required" : true
        } ],
        "tags" : [ "price-tiers" ]
      },
      "put" : {
        "summary" : "Update a PriceTiers",
        "operationId" : "replacePriceTierById",
        "responses" : {
          "200" : {
            "description" : "OK - Everything worked as expected",
            "schema" : {
              "$ref" : "#/definitions/PriceTiersPut"
            }
          },
          "400" : {
            "description" : "Bad Request - Often due to a missing request parameter"
          },
          "401" : {
            "description" : "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500" : {
            "description" : "Server error - Something went wrong on the Cloud Elements server"
          },
          "403" : {
            "description" : "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502" : {
            "description" : "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404" : {
            "description" : "Not found - The requested resource is not found"
          },
          "415" : {
            "description" : "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405" : {
            "description" : "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406" : {
            "description" : "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409" : {
            "description" : "Conflict - If a resource being created already exists"
          }
        },
        "parameters" : [ {
          "in" : "header",
          "name" : "Authorization",
          "description" : "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
          "type" : "string",
          "required" : true
        }, {
          "in" : "path",
          "name" : "id",
          "description" : "The resource identifier",
          "type" : "string",
          "required" : true
        }, {
          "schema" : {
            "$ref" : "#/definitions/PriceTiersPut"
          },
          "in" : "body",
          "name" : "JSON",
          "description" : "JSON",
          "required" : true
        } ],
        "tags" : [ "price-tiers" ]
      }
    },
    "/regions" : {
      "post" : {
        "summary" : "Create a Regions",
        "operationId" : "createRegion",
        "responses" : {
          "200" : {
            "description" : "OK - Everything worked as expected",
            "schema" : {
              "$ref" : "#/definitions/RegionsItem"
            }
          },
          "400" : {
            "description" : "Bad Request - Often due to a missing request parameter"
          },
          "401" : {
            "description" : "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500" : {
            "description" : "Server error - Something went wrong on the Cloud Elements server"
          },
          "403" : {
            "description" : "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502" : {
            "description" : "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404" : {
            "description" : "Not found - The requested resource is not found"
          },
          "415" : {
            "description" : "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405" : {
            "description" : "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406" : {
            "description" : "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409" : {
            "description" : "Conflict - If a resource being created already exists"
          }
        },
        "parameters" : [ {
          "in" : "header",
          "name" : "Authorization",
          "description" : "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
          "type" : "string",
          "required" : true
        }, {
          "schema" : {
            "$ref" : "#/definitions/RegionsPost"
          },
          "in" : "body",
          "name" : "Body",
          "description" : "Body",
          "required" : true
        } ],
        "tags" : [ "regions" ]
      },
      "get" : {
        "summary" : "Retrieve a list of Regions",
        "operationId" : "getRegions",
        "responses" : {
          "200" : {
            "description" : "OK - Everything worked as expected",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/RegionsCollection"
              }
            }
          },
          "400" : {
            "description" : "Bad Request - Often due to a missing request parameter"
          },
          "401" : {
            "description" : "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500" : {
            "description" : "Server error - Something went wrong on the Cloud Elements server"
          },
          "403" : {
            "description" : "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502" : {
            "description" : "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404" : {
            "description" : "Not found - The requested resource is not found"
          },
          "415" : {
            "description" : "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405" : {
            "description" : "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406" : {
            "description" : "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409" : {
            "description" : "Conflict - If a resource being created already exists"
          }
        },
        "parameters" : [ {
          "in" : "header",
          "name" : "Authorization",
          "description" : "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
          "type" : "string",
          "required" : true
        }, {
          "schema" : {
            "$ref" : "#/definitions/array"
          },
          "in" : "query",
          "name" : "sort",
          "description" : "The collection items sort field and order (prefix with \"-\" for descending sort].",
          "required" : false
        }, {
          "in" : "query",
          "name" : "[att]",
          "description" : "Filter any attribute by its value. You can search subobjects by using the qualified attribute name. ",
          "type" : "string",
          "required" : false
        }, {
          "in" : "query",
          "name" : "[att]:in",
          "description" : "Filter the collection by attribute list. ",
          "type" : "string",
          "required" : false
        }, {
          "in" : "query",
          "name" : "[att]:contains",
          "description" : "Search a specific attribute partially",
          "type" : "string",
          "required" : false
        }, {
          "in" : "query",
          "name" : "includeInactive",
          "description" : "Return the list of inactive objects in the results. By default only active objects are returned",
          "type" : "string",
          "required" : false
        }, {
          "in" : "query",
          "name" : "fields",
          "description" : "List of fields you want returned separated by a coma. You can alias the returned field by adding the alias after a column",
          "type" : "string",
          "required" : false
        }, {
          "in" : "query",
          "name" : "offset",
          "description" : "The collection items offset",
          "type" : "integer",
          "required" : false
        }, {
          "in" : "query",
          "name" : "limit",
          "description" : "The collection items limit",
          "type" : "integer",
          "required" : false
        }, {
          "in" : "query",
          "name" : "include",
          "description" : "Expand response to get full related object intead of ID. See the expand guide for more info.",
          "type" : "string",
          "required" : false
        }, {
          "in" : "query",
          "name" : "q",
          "description" : "Global search for the object",
          "type" : "string",
          "required" : false
        } ],
        "tags" : [ "regions" ]
      }
    },
    "/regions/{id}" : {
      "patch" : {
        "summary" : "Partially edit a Regions",
        "operationId" : "updateRegionById",
        "responses" : {
          "200" : {
            "description" : "OK - Everything worked as expected",
            "schema" : {
              "$ref" : "#/definitions/RegionsItem"
            }
          },
          "400" : {
            "description" : "Bad Request - Often due to a missing request parameter"
          },
          "401" : {
            "description" : "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500" : {
            "description" : "Server error - Something went wrong on the Cloud Elements server"
          },
          "403" : {
            "description" : "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502" : {
            "description" : "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404" : {
            "description" : "Not found - The requested resource is not found"
          },
          "415" : {
            "description" : "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405" : {
            "description" : "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406" : {
            "description" : "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409" : {
            "description" : "Conflict - If a resource being created already exists"
          }
        },
        "parameters" : [ {
          "in" : "header",
          "name" : "Authorization",
          "description" : "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
          "type" : "string",
          "required" : true
        }, {
          "in" : "path",
          "name" : "id",
          "description" : "The resource identifier",
          "type" : "string",
          "required" : true
        }, {
          "schema" : {
            "$ref" : "#/definitions/RegionsPatch"
          },
          "in" : "body",
          "name" : "JSON",
          "description" : "JSON",
          "required" : true
        } ],
        "tags" : [ "regions" ]
      },
      "get" : {
        "summary" : "Retrieve a Regions",
        "operationId" : "getRegionById",
        "responses" : {
          "200" : {
            "description" : "OK - Everything worked as expected",
            "schema" : {
              "$ref" : "#/definitions/RegionsItem"
            }
          },
          "400" : {
            "description" : "Bad Request - Often due to a missing request parameter"
          },
          "401" : {
            "description" : "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500" : {
            "description" : "Server error - Something went wrong on the Cloud Elements server"
          },
          "403" : {
            "description" : "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502" : {
            "description" : "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404" : {
            "description" : "Not found - The requested resource is not found"
          },
          "415" : {
            "description" : "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405" : {
            "description" : "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406" : {
            "description" : "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409" : {
            "description" : "Conflict - If a resource being created already exists"
          }
        },
        "parameters" : [ {
          "in" : "header",
          "name" : "Authorization",
          "description" : "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
          "type" : "string",
          "required" : true
        }, {
          "in" : "path",
          "name" : "id",
          "description" : "The resource identifier",
          "type" : "string",
          "required" : true
        } ],
        "tags" : [ "regions" ]
      },
      "put" : {
        "summary" : "Update a Regions",
        "operationId" : "replaceRegionById",
        "responses" : {
          "200" : {
            "description" : "OK - Everything worked as expected",
            "schema" : {
              "$ref" : "#/definitions/RegionsPut"
            }
          },
          "400" : {
            "description" : "Bad Request - Often due to a missing request parameter"
          },
          "401" : {
            "description" : "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500" : {
            "description" : "Server error - Something went wrong on the Cloud Elements server"
          },
          "403" : {
            "description" : "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502" : {
            "description" : "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404" : {
            "description" : "Not found - The requested resource is not found"
          },
          "415" : {
            "description" : "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405" : {
            "description" : "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406" : {
            "description" : "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409" : {
            "description" : "Conflict - If a resource being created already exists"
          }
        },
        "parameters" : [ {
          "in" : "header",
          "name" : "Authorization",
          "description" : "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
          "type" : "string",
          "required" : true
        }, {
          "in" : "path",
          "name" : "id",
          "description" : "The resource identifier",
          "type" : "string",
          "required" : true
        }, {
          "schema" : {
            "$ref" : "#/definitions/RegionsPut"
          },
          "in" : "body",
          "name" : "JSON",
          "description" : "JSON",
          "required" : true
        } ],
        "tags" : [ "regions" ]
      }
    },
    "/report-fields" : {
      "post" : {
        "summary" : "Create a ReportFields",
        "operationId" : "createReportField",
        "responses" : {
          "200" : {
            "description" : "OK - Everything worked as expected",
            "schema" : {
              "$ref" : "#/definitions/ReportFieldsItem"
            }
          },
          "400" : {
            "description" : "Bad Request - Often due to a missing request parameter"
          },
          "401" : {
            "description" : "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500" : {
            "description" : "Server error - Something went wrong on the Cloud Elements server"
          },
          "403" : {
            "description" : "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502" : {
            "description" : "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404" : {
            "description" : "Not found - The requested resource is not found"
          },
          "415" : {
            "description" : "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405" : {
            "description" : "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406" : {
            "description" : "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409" : {
            "description" : "Conflict - If a resource being created already exists"
          }
        },
        "parameters" : [ {
          "in" : "header",
          "name" : "Authorization",
          "description" : "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
          "type" : "string",
          "required" : true
        }, {
          "schema" : {
            "$ref" : "#/definitions/ReportFieldsPost"
          },
          "in" : "body",
          "name" : "Body",
          "description" : "Body",
          "required" : true
        } ],
        "tags" : [ "report-fields" ]
      },
      "get" : {
        "summary" : "Retrieve a list of ReportFields",
        "operationId" : "getReportFields",
        "responses" : {
          "200" : {
            "description" : "OK - Everything worked as expected",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/ReportFieldsCollection"
              }
            }
          },
          "400" : {
            "description" : "Bad Request - Often due to a missing request parameter"
          },
          "401" : {
            "description" : "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500" : {
            "description" : "Server error - Something went wrong on the Cloud Elements server"
          },
          "403" : {
            "description" : "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502" : {
            "description" : "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404" : {
            "description" : "Not found - The requested resource is not found"
          },
          "415" : {
            "description" : "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405" : {
            "description" : "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406" : {
            "description" : "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409" : {
            "description" : "Conflict - If a resource being created already exists"
          }
        },
        "parameters" : [ {
          "in" : "header",
          "name" : "Authorization",
          "description" : "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
          "type" : "string",
          "required" : true
        }, {
          "in" : "query",
          "name" : "offset",
          "description" : "The collection items offset",
          "type" : "integer",
          "required" : false
        }, {
          "in" : "query",
          "name" : "q",
          "description" : "Global search for the object",
          "type" : "string",
          "required" : false
        }, {
          "in" : "query",
          "name" : "[att]:contains",
          "description" : "Search a specific attribute partially",
          "type" : "string",
          "required" : false
        }, {
          "in" : "query",
          "name" : "includeInactive",
          "description" : "Return the list of inactive objects in the results. By default only active objects are returned",
          "type" : "string",
          "required" : false
        }, {
          "in" : "query",
          "name" : "include",
          "description" : "Expand response to get full related object intead of ID. See the expand guide for more info.",
          "type" : "string",
          "required" : false
        }, {
          "in" : "query",
          "name" : "fields",
          "description" : "List of fields you want returned separated by a coma. You can alias the returned field by adding the alias after a column",
          "type" : "string",
          "required" : false
        }, {
          "in" : "query",
          "name" : "limit",
          "description" : "The collection items limit",
          "type" : "integer",
          "required" : false
        }, {
          "in" : "query",
          "name" : "[att]:in",
          "description" : "Filter the collection by attribute list. ",
          "type" : "string",
          "required" : false
        }, {
          "in" : "query",
          "name" : "[att]",
          "description" : "Filter any attribute by its value. You can search subobjects by using the qualified attribute name. ",
          "type" : "string",
          "required" : false
        }, {
          "schema" : {
            "$ref" : "#/definitions/array"
          },
          "in" : "query",
          "name" : "sort",
          "description" : "The collection items sort field and order (prefix with \"-\" for descending sort].",
          "required" : false
        } ],
        "tags" : [ "report-fields" ]
      }
    },
    "/report-fields/{id}" : {
      "patch" : {
        "summary" : "Partially edit a ReportFields",
        "operationId" : "updateReportFieldById",
        "responses" : {
          "200" : {
            "description" : "OK - Everything worked as expected",
            "schema" : {
              "$ref" : "#/definitions/ReportFieldsItem"
            }
          },
          "400" : {
            "description" : "Bad Request - Often due to a missing request parameter"
          },
          "401" : {
            "description" : "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500" : {
            "description" : "Server error - Something went wrong on the Cloud Elements server"
          },
          "403" : {
            "description" : "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502" : {
            "description" : "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404" : {
            "description" : "Not found - The requested resource is not found"
          },
          "415" : {
            "description" : "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405" : {
            "description" : "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406" : {
            "description" : "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409" : {
            "description" : "Conflict - If a resource being created already exists"
          }
        },
        "parameters" : [ {
          "in" : "header",
          "name" : "Authorization",
          "description" : "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
          "type" : "string",
          "required" : true
        }, {
          "in" : "path",
          "name" : "id",
          "description" : "The resource identifier",
          "type" : "string",
          "required" : true
        }, {
          "schema" : {
            "$ref" : "#/definitions/ReportFieldsPatch"
          },
          "in" : "body",
          "name" : "JSON",
          "description" : "JSON",
          "required" : true
        } ],
        "tags" : [ "report-fields" ]
      },
      "get" : {
        "summary" : "Retrieve a ReportFields",
        "operationId" : "getReportFieldById",
        "responses" : {
          "200" : {
            "description" : "OK - Everything worked as expected",
            "schema" : {
              "$ref" : "#/definitions/ReportFieldsItem"
            }
          },
          "400" : {
            "description" : "Bad Request - Often due to a missing request parameter"
          },
          "401" : {
            "description" : "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500" : {
            "description" : "Server error - Something went wrong on the Cloud Elements server"
          },
          "403" : {
            "description" : "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502" : {
            "description" : "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404" : {
            "description" : "Not found - The requested resource is not found"
          },
          "415" : {
            "description" : "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405" : {
            "description" : "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406" : {
            "description" : "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409" : {
            "description" : "Conflict - If a resource being created already exists"
          }
        },
        "parameters" : [ {
          "in" : "header",
          "name" : "Authorization",
          "description" : "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
          "type" : "string",
          "required" : true
        }, {
          "in" : "path",
          "name" : "id",
          "description" : "The resource identifier",
          "type" : "string",
          "required" : true
        } ],
        "tags" : [ "report-fields" ]
      },
      "put" : {
        "summary" : "Update a ReportFields",
        "operationId" : "replaceReportFieldById",
        "responses" : {
          "200" : {
            "description" : "OK - Everything worked as expected",
            "schema" : {
              "$ref" : "#/definitions/ReportFieldsPut"
            }
          },
          "400" : {
            "description" : "Bad Request - Often due to a missing request parameter"
          },
          "401" : {
            "description" : "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500" : {
            "description" : "Server error - Something went wrong on the Cloud Elements server"
          },
          "403" : {
            "description" : "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502" : {
            "description" : "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404" : {
            "description" : "Not found - The requested resource is not found"
          },
          "415" : {
            "description" : "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405" : {
            "description" : "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406" : {
            "description" : "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409" : {
            "description" : "Conflict - If a resource being created already exists"
          }
        },
        "parameters" : [ {
          "in" : "header",
          "name" : "Authorization",
          "description" : "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
          "type" : "string",
          "required" : true
        }, {
          "in" : "path",
          "name" : "id",
          "description" : "The resource identifier",
          "type" : "string",
          "required" : true
        }, {
          "schema" : {
            "$ref" : "#/definitions/ReportFieldsPut"
          },
          "in" : "body",
          "name" : "JSON",
          "description" : "JSON",
          "required" : true
        } ],
        "tags" : [ "report-fields" ]
      }
    },
    "/report-template-fields" : {
      "post" : {
        "summary" : "Create a ReportTemplateFields",
        "operationId" : "createReportTemplateField",
        "responses" : {
          "200" : {
            "description" : "OK - Everything worked as expected",
            "schema" : {
              "$ref" : "#/definitions/ReportTemplateFieldsItem"
            }
          },
          "400" : {
            "description" : "Bad Request - Often due to a missing request parameter"
          },
          "401" : {
            "description" : "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500" : {
            "description" : "Server error - Something went wrong on the Cloud Elements server"
          },
          "403" : {
            "description" : "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502" : {
            "description" : "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404" : {
            "description" : "Not found - The requested resource is not found"
          },
          "415" : {
            "description" : "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405" : {
            "description" : "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406" : {
            "description" : "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409" : {
            "description" : "Conflict - If a resource being created already exists"
          }
        },
        "parameters" : [ {
          "in" : "header",
          "name" : "Authorization",
          "description" : "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
          "type" : "string",
          "required" : true
        }, {
          "schema" : {
            "$ref" : "#/definitions/ReportTemplateFieldsPost"
          },
          "in" : "body",
          "name" : "Body",
          "description" : "Body",
          "required" : true
        } ],
        "tags" : [ "report-template-fields" ]
      },
      "get" : {
        "summary" : "Retrieve a list of ReportTemplateFields",
        "operationId" : "getReportTemplateFields",
        "responses" : {
          "200" : {
            "description" : "OK - Everything worked as expected",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/ReportTemplateFieldsCollection"
              }
            }
          },
          "400" : {
            "description" : "Bad Request - Often due to a missing request parameter"
          },
          "401" : {
            "description" : "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500" : {
            "description" : "Server error - Something went wrong on the Cloud Elements server"
          },
          "403" : {
            "description" : "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502" : {
            "description" : "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404" : {
            "description" : "Not found - The requested resource is not found"
          },
          "415" : {
            "description" : "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405" : {
            "description" : "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406" : {
            "description" : "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409" : {
            "description" : "Conflict - If a resource being created already exists"
          }
        },
        "parameters" : [ {
          "in" : "header",
          "name" : "Authorization",
          "description" : "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
          "type" : "string",
          "required" : true
        }, {
          "schema" : {
            "$ref" : "#/definitions/array"
          },
          "in" : "query",
          "name" : "sort",
          "description" : "The collection items sort field and order (prefix with \"-\" for descending sort].",
          "required" : false
        }, {
          "in" : "query",
          "name" : "q",
          "description" : "Global search for the object",
          "type" : "string",
          "required" : false
        }, {
          "in" : "query",
          "name" : "include",
          "description" : "Expand response to get full related object intead of ID. See the expand guide for more info.",
          "type" : "string",
          "required" : false
        }, {
          "in" : "query",
          "name" : "fields",
          "description" : "List of fields you want returned separated by a coma. You can alias the returned field by adding the alias after a column",
          "type" : "string",
          "required" : false
        }, {
          "in" : "query",
          "name" : "offset",
          "description" : "The collection items offset",
          "type" : "integer",
          "required" : false
        }, {
          "in" : "query",
          "name" : "limit",
          "description" : "The collection items limit",
          "type" : "integer",
          "required" : false
        }, {
          "in" : "query",
          "name" : "[att]:contains",
          "description" : "Search a specific attribute partially",
          "type" : "string",
          "required" : false
        }, {
          "in" : "query",
          "name" : "includeInactive",
          "description" : "Return the list of inactive objects in the results. By default only active objects are returned",
          "type" : "string",
          "required" : false
        }, {
          "in" : "query",
          "name" : "[att]:in",
          "description" : "Filter the collection by attribute list. ",
          "type" : "string",
          "required" : false
        }, {
          "in" : "query",
          "name" : "[att]",
          "description" : "Filter any attribute by its value. You can search subobjects by using the qualified attribute name. ",
          "type" : "string",
          "required" : false
        } ],
        "tags" : [ "report-template-fields" ]
      }
    },
    "/report-template-fields/{id}" : {
      "patch" : {
        "summary" : "Partially edit a ReportTemplateFields",
        "operationId" : "updateReportTemplateFieldById",
        "responses" : {
          "200" : {
            "description" : "OK - Everything worked as expected",
            "schema" : {
              "$ref" : "#/definitions/ReportTemplateFieldsItem"
            }
          },
          "400" : {
            "description" : "Bad Request - Often due to a missing request parameter"
          },
          "401" : {
            "description" : "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500" : {
            "description" : "Server error - Something went wrong on the Cloud Elements server"
          },
          "403" : {
            "description" : "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502" : {
            "description" : "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404" : {
            "description" : "Not found - The requested resource is not found"
          },
          "415" : {
            "description" : "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405" : {
            "description" : "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406" : {
            "description" : "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409" : {
            "description" : "Conflict - If a resource being created already exists"
          }
        },
        "parameters" : [ {
          "in" : "header",
          "name" : "Authorization",
          "description" : "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
          "type" : "string",
          "required" : true
        }, {
          "in" : "path",
          "name" : "id",
          "description" : "The resource identifier",
          "type" : "string",
          "required" : true
        }, {
          "schema" : {
            "$ref" : "#/definitions/ReportTemplateFieldsPatch"
          },
          "in" : "body",
          "name" : "JSON",
          "description" : "JSON",
          "required" : true
        } ],
        "tags" : [ "report-template-fields" ]
      },
      "get" : {
        "summary" : "Retrieve a ReportTemplateFields",
        "operationId" : "getReportTemplateFieldById",
        "responses" : {
          "200" : {
            "description" : "OK - Everything worked as expected",
            "schema" : {
              "$ref" : "#/definitions/ReportTemplateFieldsItem"
            }
          },
          "400" : {
            "description" : "Bad Request - Often due to a missing request parameter"
          },
          "401" : {
            "description" : "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500" : {
            "description" : "Server error - Something went wrong on the Cloud Elements server"
          },
          "403" : {
            "description" : "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502" : {
            "description" : "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404" : {
            "description" : "Not found - The requested resource is not found"
          },
          "415" : {
            "description" : "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405" : {
            "description" : "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406" : {
            "description" : "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409" : {
            "description" : "Conflict - If a resource being created already exists"
          }
        },
        "parameters" : [ {
          "in" : "header",
          "name" : "Authorization",
          "description" : "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
          "type" : "string",
          "required" : true
        }, {
          "in" : "path",
          "name" : "id",
          "description" : "The resource identifier",
          "type" : "string",
          "required" : true
        } ],
        "tags" : [ "report-template-fields" ]
      },
      "put" : {
        "summary" : "Update a ReportTemplateFields",
        "operationId" : "replaceReportTemplateFieldById",
        "responses" : {
          "200" : {
            "description" : "OK - Everything worked as expected",
            "schema" : {
              "$ref" : "#/definitions/ReportTemplateFieldsPut"
            }
          },
          "400" : {
            "description" : "Bad Request - Often due to a missing request parameter"
          },
          "401" : {
            "description" : "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500" : {
            "description" : "Server error - Something went wrong on the Cloud Elements server"
          },
          "403" : {
            "description" : "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502" : {
            "description" : "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404" : {
            "description" : "Not found - The requested resource is not found"
          },
          "415" : {
            "description" : "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405" : {
            "description" : "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406" : {
            "description" : "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409" : {
            "description" : "Conflict - If a resource being created already exists"
          }
        },
        "parameters" : [ {
          "in" : "header",
          "name" : "Authorization",
          "description" : "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
          "type" : "string",
          "required" : true
        }, {
          "in" : "path",
          "name" : "id",
          "description" : "The resource identifier",
          "type" : "string",
          "required" : true
        }, {
          "schema" : {
            "$ref" : "#/definitions/ReportTemplateFieldsPut"
          },
          "in" : "body",
          "name" : "JSON",
          "description" : "JSON",
          "required" : true
        } ],
        "tags" : [ "report-template-fields" ]
      }
    },
    "/report-templates" : {
      "post" : {
        "summary" : "Create a ReportTemplates",
        "operationId" : "createReportTemplate",
        "responses" : {
          "200" : {
            "description" : "OK - Everything worked as expected",
            "schema" : {
              "$ref" : "#/definitions/ReportTemplatesItem"
            }
          },
          "400" : {
            "description" : "Bad Request - Often due to a missing request parameter"
          },
          "401" : {
            "description" : "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500" : {
            "description" : "Server error - Something went wrong on the Cloud Elements server"
          },
          "403" : {
            "description" : "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502" : {
            "description" : "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404" : {
            "description" : "Not found - The requested resource is not found"
          },
          "415" : {
            "description" : "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405" : {
            "description" : "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406" : {
            "description" : "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409" : {
            "description" : "Conflict - If a resource being created already exists"
          }
        },
        "parameters" : [ {
          "in" : "header",
          "name" : "Authorization",
          "description" : "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
          "type" : "string",
          "required" : true
        }, {
          "schema" : {
            "$ref" : "#/definitions/ReportTemplatesPost"
          },
          "in" : "body",
          "name" : "Body",
          "description" : "Body",
          "required" : true
        } ],
        "tags" : [ "report-templates" ]
      },
      "get" : {
        "summary" : "Retrieve a list of ReportTemplates",
        "operationId" : "getReportTemplates",
        "responses" : {
          "200" : {
            "description" : "OK - Everything worked as expected",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/ReportTemplatesCollection"
              }
            }
          },
          "400" : {
            "description" : "Bad Request - Often due to a missing request parameter"
          },
          "401" : {
            "description" : "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500" : {
            "description" : "Server error - Something went wrong on the Cloud Elements server"
          },
          "403" : {
            "description" : "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502" : {
            "description" : "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404" : {
            "description" : "Not found - The requested resource is not found"
          },
          "415" : {
            "description" : "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405" : {
            "description" : "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406" : {
            "description" : "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409" : {
            "description" : "Conflict - If a resource being created already exists"
          }
        },
        "parameters" : [ {
          "in" : "header",
          "name" : "Authorization",
          "description" : "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
          "type" : "string",
          "required" : true
        }, {
          "in" : "query",
          "name" : "[att]:in",
          "description" : "Filter the collection by attribute list. ",
          "type" : "string",
          "required" : false
        }, {
          "in" : "query",
          "name" : "includeInactive",
          "description" : "Return the list of inactive objects in the results. By default only active objects are returned",
          "type" : "string",
          "required" : false
        }, {
          "in" : "query",
          "name" : "[att]:contains",
          "description" : "Search a specific attribute partially",
          "type" : "string",
          "required" : false
        }, {
          "in" : "query",
          "name" : "[att]",
          "description" : "Filter any attribute by its value. You can search subobjects by using the qualified attribute name. ",
          "type" : "string",
          "required" : false
        }, {
          "in" : "query",
          "name" : "q",
          "description" : "Global search for the object",
          "type" : "string",
          "required" : false
        }, {
          "in" : "query",
          "name" : "limit",
          "description" : "The collection items limit",
          "type" : "integer",
          "required" : false
        }, {
          "in" : "query",
          "name" : "offset",
          "description" : "The collection items offset",
          "type" : "integer",
          "required" : false
        }, {
          "in" : "query",
          "name" : "fields",
          "description" : "List of fields you want returned separated by a coma. You can alias the returned field by adding the alias after a column",
          "type" : "string",
          "required" : false
        }, {
          "in" : "query",
          "name" : "include",
          "description" : "Expand response to get full related object intead of ID. See the expand guide for more info.",
          "type" : "string",
          "required" : false
        }, {
          "schema" : {
            "$ref" : "#/definitions/array"
          },
          "in" : "query",
          "name" : "sort",
          "description" : "The collection items sort field and order (prefix with \"-\" for descending sort].",
          "required" : false
        } ],
        "tags" : [ "report-templates" ]
      }
    },
    "/report-templates/{id}" : {
      "patch" : {
        "summary" : "Partially edit a ReportTemplates",
        "operationId" : "updateReportTemplateById",
        "responses" : {
          "200" : {
            "description" : "OK - Everything worked as expected",
            "schema" : {
              "$ref" : "#/definitions/ReportTemplatesItem"
            }
          },
          "400" : {
            "description" : "Bad Request - Often due to a missing request parameter"
          },
          "401" : {
            "description" : "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500" : {
            "description" : "Server error - Something went wrong on the Cloud Elements server"
          },
          "403" : {
            "description" : "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502" : {
            "description" : "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404" : {
            "description" : "Not found - The requested resource is not found"
          },
          "415" : {
            "description" : "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405" : {
            "description" : "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406" : {
            "description" : "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409" : {
            "description" : "Conflict - If a resource being created already exists"
          }
        },
        "parameters" : [ {
          "in" : "header",
          "name" : "Authorization",
          "description" : "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
          "type" : "string",
          "required" : true
        }, {
          "in" : "path",
          "name" : "id",
          "description" : "The resource identifier",
          "type" : "string",
          "required" : true
        }, {
          "schema" : {
            "$ref" : "#/definitions/ReportTemplatesPatch"
          },
          "in" : "body",
          "name" : "JSON",
          "description" : "JSON",
          "required" : true
        } ],
        "tags" : [ "report-templates" ]
      },
      "get" : {
        "summary" : "Retrieve a ReportTemplates",
        "operationId" : "getReportTemplateById",
        "responses" : {
          "200" : {
            "description" : "OK - Everything worked as expected",
            "schema" : {
              "$ref" : "#/definitions/ReportTemplatesItem"
            }
          },
          "400" : {
            "description" : "Bad Request - Often due to a missing request parameter"
          },
          "401" : {
            "description" : "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500" : {
            "description" : "Server error - Something went wrong on the Cloud Elements server"
          },
          "403" : {
            "description" : "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502" : {
            "description" : "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404" : {
            "description" : "Not found - The requested resource is not found"
          },
          "415" : {
            "description" : "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405" : {
            "description" : "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406" : {
            "description" : "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409" : {
            "description" : "Conflict - If a resource being created already exists"
          }
        },
        "parameters" : [ {
          "in" : "header",
          "name" : "Authorization",
          "description" : "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
          "type" : "string",
          "required" : true
        }, {
          "in" : "path",
          "name" : "id",
          "description" : "The resource identifier",
          "type" : "string",
          "required" : true
        } ],
        "tags" : [ "report-templates" ]
      },
      "put" : {
        "summary" : "Update a ReportTemplates",
        "operationId" : "replaceReportTemplateById",
        "responses" : {
          "200" : {
            "description" : "OK - Everything worked as expected",
            "schema" : {
              "$ref" : "#/definitions/ReportTemplatesPut"
            }
          },
          "400" : {
            "description" : "Bad Request - Often due to a missing request parameter"
          },
          "401" : {
            "description" : "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500" : {
            "description" : "Server error - Something went wrong on the Cloud Elements server"
          },
          "403" : {
            "description" : "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502" : {
            "description" : "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404" : {
            "description" : "Not found - The requested resource is not found"
          },
          "415" : {
            "description" : "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405" : {
            "description" : "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406" : {
            "description" : "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409" : {
            "description" : "Conflict - If a resource being created already exists"
          }
        },
        "parameters" : [ {
          "in" : "header",
          "name" : "Authorization",
          "description" : "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
          "type" : "string",
          "required" : true
        }, {
          "in" : "path",
          "name" : "id",
          "description" : "The resource identifier",
          "type" : "string",
          "required" : true
        }, {
          "schema" : {
            "$ref" : "#/definitions/ReportTemplatesPut"
          },
          "in" : "body",
          "name" : "JSON",
          "description" : "JSON",
          "required" : true
        } ],
        "tags" : [ "report-templates" ]
      }
    },
    "/reports" : {
      "post" : {
        "summary" : "Create a Reports",
        "operationId" : "createReport",
        "responses" : {
          "200" : {
            "description" : "OK - Everything worked as expected",
            "schema" : {
              "$ref" : "#/definitions/ReportsItem"
            }
          },
          "400" : {
            "description" : "Bad Request - Often due to a missing request parameter"
          },
          "401" : {
            "description" : "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500" : {
            "description" : "Server error - Something went wrong on the Cloud Elements server"
          },
          "403" : {
            "description" : "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502" : {
            "description" : "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404" : {
            "description" : "Not found - The requested resource is not found"
          },
          "415" : {
            "description" : "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405" : {
            "description" : "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406" : {
            "description" : "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409" : {
            "description" : "Conflict - If a resource being created already exists"
          }
        },
        "parameters" : [ {
          "in" : "header",
          "name" : "Authorization",
          "description" : "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
          "type" : "string",
          "required" : true
        }, {
          "schema" : {
            "$ref" : "#/definitions/ReportsPost"
          },
          "in" : "body",
          "name" : "Body",
          "description" : "Body",
          "required" : true
        } ],
        "tags" : [ "reports" ]
      },
      "get" : {
        "summary" : "Retrieve a list of Reports",
        "operationId" : "getReports",
        "responses" : {
          "200" : {
            "description" : "OK - Everything worked as expected",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/ReportsCollection"
              }
            }
          },
          "400" : {
            "description" : "Bad Request - Often due to a missing request parameter"
          },
          "401" : {
            "description" : "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500" : {
            "description" : "Server error - Something went wrong on the Cloud Elements server"
          },
          "403" : {
            "description" : "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502" : {
            "description" : "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404" : {
            "description" : "Not found - The requested resource is not found"
          },
          "415" : {
            "description" : "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405" : {
            "description" : "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406" : {
            "description" : "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409" : {
            "description" : "Conflict - If a resource being created already exists"
          }
        },
        "parameters" : [ {
          "in" : "header",
          "name" : "Authorization",
          "description" : "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
          "type" : "string",
          "required" : true
        }, {
          "in" : "query",
          "name" : "limit",
          "description" : "The collection items limit",
          "type" : "integer",
          "required" : false
        }, {
          "in" : "query",
          "name" : "fields",
          "description" : "List of fields you want returned separated by a coma. You can alias the returned field by adding the alias after a column",
          "type" : "string",
          "required" : false
        }, {
          "in" : "query",
          "name" : "include",
          "description" : "Expand response to get full related object intead of ID. See the expand guide for more info.",
          "type" : "string",
          "required" : false
        }, {
          "schema" : {
            "$ref" : "#/definitions/array"
          },
          "in" : "query",
          "name" : "sort",
          "description" : "The collection items sort field and order (prefix with \"-\" for descending sort].",
          "required" : false
        }, {
          "in" : "query",
          "name" : "q",
          "description" : "Global search for the object",
          "type" : "string",
          "required" : false
        }, {
          "in" : "query",
          "name" : "[att]",
          "description" : "Filter any attribute by its value. You can search subobjects by using the qualified attribute name. ",
          "type" : "string",
          "required" : false
        }, {
          "in" : "query",
          "name" : "[att]:in",
          "description" : "Filter the collection by attribute list. ",
          "type" : "string",
          "required" : false
        }, {
          "in" : "query",
          "name" : "[att]:contains",
          "description" : "Search a specific attribute partially",
          "type" : "string",
          "required" : false
        }, {
          "in" : "query",
          "name" : "includeInactive",
          "description" : "Return the list of inactive objects in the results. By default only active objects are returned",
          "type" : "string",
          "required" : false
        }, {
          "in" : "query",
          "name" : "offset",
          "description" : "The collection items offset",
          "type" : "integer",
          "required" : false
        } ],
        "tags" : [ "reports" ]
      }
    },
    "/reports/{id}" : {
      "patch" : {
        "summary" : "Partially edit a Reports",
        "operationId" : "updateReportById",
        "responses" : {
          "200" : {
            "description" : "OK - Everything worked as expected",
            "schema" : {
              "$ref" : "#/definitions/ReportsItem"
            }
          },
          "400" : {
            "description" : "Bad Request - Often due to a missing request parameter"
          },
          "401" : {
            "description" : "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500" : {
            "description" : "Server error - Something went wrong on the Cloud Elements server"
          },
          "403" : {
            "description" : "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502" : {
            "description" : "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404" : {
            "description" : "Not found - The requested resource is not found"
          },
          "415" : {
            "description" : "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405" : {
            "description" : "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406" : {
            "description" : "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409" : {
            "description" : "Conflict - If a resource being created already exists"
          }
        },
        "parameters" : [ {
          "in" : "header",
          "name" : "Authorization",
          "description" : "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
          "type" : "string",
          "required" : true
        }, {
          "in" : "path",
          "name" : "id",
          "description" : "The resource identifier",
          "type" : "string",
          "required" : true
        }, {
          "schema" : {
            "$ref" : "#/definitions/ReportsPatch"
          },
          "in" : "body",
          "name" : "JSON",
          "description" : "JSON",
          "required" : true
        } ],
        "tags" : [ "reports" ]
      },
      "get" : {
        "summary" : "Retrieve a Reports",
        "operationId" : "getReportById",
        "responses" : {
          "200" : {
            "description" : "OK - Everything worked as expected",
            "schema" : {
              "$ref" : "#/definitions/ReportsItem"
            }
          },
          "400" : {
            "description" : "Bad Request - Often due to a missing request parameter"
          },
          "401" : {
            "description" : "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500" : {
            "description" : "Server error - Something went wrong on the Cloud Elements server"
          },
          "403" : {
            "description" : "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502" : {
            "description" : "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404" : {
            "description" : "Not found - The requested resource is not found"
          },
          "415" : {
            "description" : "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405" : {
            "description" : "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406" : {
            "description" : "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409" : {
            "description" : "Conflict - If a resource being created already exists"
          }
        },
        "parameters" : [ {
          "in" : "header",
          "name" : "Authorization",
          "description" : "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
          "type" : "string",
          "required" : true
        }, {
          "in" : "path",
          "name" : "id",
          "description" : "The resource identifier",
          "type" : "string",
          "required" : true
        } ],
        "tags" : [ "reports" ]
      },
      "put" : {
        "summary" : "Update a Reports",
        "operationId" : "replaceReportById",
        "responses" : {
          "200" : {
            "description" : "OK - Everything worked as expected",
            "schema" : {
              "$ref" : "#/definitions/ReportsPut"
            }
          },
          "400" : {
            "description" : "Bad Request - Often due to a missing request parameter"
          },
          "401" : {
            "description" : "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500" : {
            "description" : "Server error - Something went wrong on the Cloud Elements server"
          },
          "403" : {
            "description" : "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502" : {
            "description" : "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404" : {
            "description" : "Not found - The requested resource is not found"
          },
          "415" : {
            "description" : "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405" : {
            "description" : "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406" : {
            "description" : "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409" : {
            "description" : "Conflict - If a resource being created already exists"
          }
        },
        "parameters" : [ {
          "in" : "header",
          "name" : "Authorization",
          "description" : "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
          "type" : "string",
          "required" : true
        }, {
          "in" : "path",
          "name" : "id",
          "description" : "The resource identifier",
          "type" : "string",
          "required" : true
        }, {
          "schema" : {
            "$ref" : "#/definitions/ReportsPut"
          },
          "in" : "body",
          "name" : "JSON",
          "description" : "JSON",
          "required" : true
        } ],
        "tags" : [ "reports" ]
      }
    },
    "/shift-notes" : {
      "post" : {
        "summary" : "Create a ShiftNotes",
        "operationId" : "createShiftNote",
        "responses" : {
          "200" : {
            "description" : "OK - Everything worked as expected",
            "schema" : {
              "$ref" : "#/definitions/ShiftNotesItem"
            }
          },
          "400" : {
            "description" : "Bad Request - Often due to a missing request parameter"
          },
          "401" : {
            "description" : "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500" : {
            "description" : "Server error - Something went wrong on the Cloud Elements server"
          },
          "403" : {
            "description" : "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502" : {
            "description" : "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404" : {
            "description" : "Not found - The requested resource is not found"
          },
          "415" : {
            "description" : "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405" : {
            "description" : "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406" : {
            "description" : "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409" : {
            "description" : "Conflict - If a resource being created already exists"
          }
        },
        "parameters" : [ {
          "in" : "header",
          "name" : "Authorization",
          "description" : "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
          "type" : "string",
          "required" : true
        }, {
          "schema" : {
            "$ref" : "#/definitions/ShiftNotesPost"
          },
          "in" : "body",
          "name" : "Body",
          "description" : "Body",
          "required" : true
        } ],
        "tags" : [ "shift-notes" ]
      },
      "get" : {
        "summary" : "Retrieve a list of ShiftNotes",
        "operationId" : "getShiftNotes",
        "responses" : {
          "200" : {
            "description" : "OK - Everything worked as expected",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/ShiftNotesCollection"
              }
            }
          },
          "400" : {
            "description" : "Bad Request - Often due to a missing request parameter"
          },
          "401" : {
            "description" : "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500" : {
            "description" : "Server error - Something went wrong on the Cloud Elements server"
          },
          "403" : {
            "description" : "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502" : {
            "description" : "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404" : {
            "description" : "Not found - The requested resource is not found"
          },
          "415" : {
            "description" : "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405" : {
            "description" : "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406" : {
            "description" : "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409" : {
            "description" : "Conflict - If a resource being created already exists"
          }
        },
        "parameters" : [ {
          "in" : "header",
          "name" : "Authorization",
          "description" : "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
          "type" : "string",
          "required" : true
        }, {
          "in" : "query",
          "name" : "includeInactive",
          "description" : "Return the list of inactive objects in the results. By default only active objects are returned",
          "type" : "string",
          "required" : false
        }, {
          "in" : "query",
          "name" : "[att]",
          "description" : "Filter any attribute by its value. You can search subobjects by using the qualified attribute name. ",
          "type" : "string",
          "required" : false
        }, {
          "in" : "query",
          "name" : "fields",
          "description" : "List of fields you want returned separated by a coma. You can alias the returned field by adding the alias after a column",
          "type" : "string",
          "required" : false
        }, {
          "in" : "query",
          "name" : "include",
          "description" : "Expand response to get full related object intead of ID. See the expand guide for more info.",
          "type" : "string",
          "required" : false
        }, {
          "schema" : {
            "$ref" : "#/definitions/array"
          },
          "in" : "query",
          "name" : "sort",
          "description" : "The collection items sort field and order (prefix with \"-\" for descending sort].",
          "required" : false
        }, {
          "in" : "query",
          "name" : "q",
          "description" : "Global search for the object",
          "type" : "string",
          "required" : false
        }, {
          "in" : "query",
          "name" : "[att]:in",
          "description" : "Filter the collection by attribute list. ",
          "type" : "string",
          "required" : false
        }, {
          "in" : "query",
          "name" : "[att]:contains",
          "description" : "Search a specific attribute partially",
          "type" : "string",
          "required" : false
        }, {
          "in" : "query",
          "name" : "limit",
          "description" : "The collection items limit",
          "type" : "integer",
          "required" : false
        }, {
          "in" : "query",
          "name" : "offset",
          "description" : "The collection items offset",
          "type" : "integer",
          "required" : false
        } ],
        "tags" : [ "shift-notes" ]
      }
    },
    "/shift-notes/{id}" : {
      "patch" : {
        "summary" : "Partially edit a ShiftNotes",
        "operationId" : "updateShiftNoteById",
        "responses" : {
          "200" : {
            "description" : "OK - Everything worked as expected",
            "schema" : {
              "$ref" : "#/definitions/ShiftNotesItem"
            }
          },
          "400" : {
            "description" : "Bad Request - Often due to a missing request parameter"
          },
          "401" : {
            "description" : "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500" : {
            "description" : "Server error - Something went wrong on the Cloud Elements server"
          },
          "403" : {
            "description" : "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502" : {
            "description" : "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404" : {
            "description" : "Not found - The requested resource is not found"
          },
          "415" : {
            "description" : "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405" : {
            "description" : "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406" : {
            "description" : "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409" : {
            "description" : "Conflict - If a resource being created already exists"
          }
        },
        "parameters" : [ {
          "in" : "header",
          "name" : "Authorization",
          "description" : "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
          "type" : "string",
          "required" : true
        }, {
          "in" : "path",
          "name" : "id",
          "description" : "The resource identifier",
          "type" : "string",
          "required" : true
        }, {
          "schema" : {
            "$ref" : "#/definitions/ShiftNotesPatch"
          },
          "in" : "body",
          "name" : "JSON",
          "description" : "JSON",
          "required" : true
        } ],
        "tags" : [ "shift-notes" ]
      },
      "get" : {
        "summary" : "Retrieve a ShiftNotes",
        "operationId" : "getShiftNoteById",
        "responses" : {
          "200" : {
            "description" : "OK - Everything worked as expected",
            "schema" : {
              "$ref" : "#/definitions/ShiftNotesItem"
            }
          },
          "400" : {
            "description" : "Bad Request - Often due to a missing request parameter"
          },
          "401" : {
            "description" : "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500" : {
            "description" : "Server error - Something went wrong on the Cloud Elements server"
          },
          "403" : {
            "description" : "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502" : {
            "description" : "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404" : {
            "description" : "Not found - The requested resource is not found"
          },
          "415" : {
            "description" : "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405" : {
            "description" : "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406" : {
            "description" : "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409" : {
            "description" : "Conflict - If a resource being created already exists"
          }
        },
        "parameters" : [ {
          "in" : "header",
          "name" : "Authorization",
          "description" : "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
          "type" : "string",
          "required" : true
        }, {
          "in" : "path",
          "name" : "id",
          "description" : "The resource identifier",
          "type" : "string",
          "required" : true
        } ],
        "tags" : [ "shift-notes" ]
      },
      "put" : {
        "summary" : "Update a ShiftNotes",
        "operationId" : "replaceShiftNoteById",
        "responses" : {
          "200" : {
            "description" : "OK - Everything worked as expected",
            "schema" : {
              "$ref" : "#/definitions/ShiftNotesPut"
            }
          },
          "400" : {
            "description" : "Bad Request - Often due to a missing request parameter"
          },
          "401" : {
            "description" : "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500" : {
            "description" : "Server error - Something went wrong on the Cloud Elements server"
          },
          "403" : {
            "description" : "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502" : {
            "description" : "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404" : {
            "description" : "Not found - The requested resource is not found"
          },
          "415" : {
            "description" : "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405" : {
            "description" : "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406" : {
            "description" : "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409" : {
            "description" : "Conflict - If a resource being created already exists"
          }
        },
        "parameters" : [ {
          "in" : "header",
          "name" : "Authorization",
          "description" : "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
          "type" : "string",
          "required" : true
        }, {
          "in" : "path",
          "name" : "id",
          "description" : "The resource identifier",
          "type" : "string",
          "required" : true
        }, {
          "schema" : {
            "$ref" : "#/definitions/ShiftNotesPut"
          },
          "in" : "body",
          "name" : "JSON",
          "description" : "JSON",
          "required" : true
        } ],
        "tags" : [ "shift-notes" ]
      }
    },
    "/shifts" : {
      "post" : {
        "summary" : "Create a Shifts",
        "operationId" : "createShift",
        "responses" : {
          "200" : {
            "description" : "OK - Everything worked as expected",
            "schema" : {
              "$ref" : "#/definitions/ShiftsItem"
            }
          },
          "400" : {
            "description" : "Bad Request - Often due to a missing request parameter"
          },
          "401" : {
            "description" : "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500" : {
            "description" : "Server error - Something went wrong on the Cloud Elements server"
          },
          "403" : {
            "description" : "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502" : {
            "description" : "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404" : {
            "description" : "Not found - The requested resource is not found"
          },
          "415" : {
            "description" : "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405" : {
            "description" : "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406" : {
            "description" : "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409" : {
            "description" : "Conflict - If a resource being created already exists"
          }
        },
        "parameters" : [ {
          "in" : "header",
          "name" : "Authorization",
          "description" : "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
          "type" : "string",
          "required" : true
        }, {
          "schema" : {
            "$ref" : "#/definitions/ShiftsPost"
          },
          "in" : "body",
          "name" : "Body",
          "description" : "Body",
          "required" : true
        } ],
        "tags" : [ "shifts" ]
      },
      "get" : {
        "summary" : "Retrieve a list of Shifts",
        "operationId" : "getShifts",
        "responses" : {
          "200" : {
            "description" : "OK - Everything worked as expected",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/ShiftsCollection"
              }
            }
          },
          "400" : {
            "description" : "Bad Request - Often due to a missing request parameter"
          },
          "401" : {
            "description" : "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500" : {
            "description" : "Server error - Something went wrong on the Cloud Elements server"
          },
          "403" : {
            "description" : "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502" : {
            "description" : "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404" : {
            "description" : "Not found - The requested resource is not found"
          },
          "415" : {
            "description" : "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405" : {
            "description" : "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406" : {
            "description" : "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409" : {
            "description" : "Conflict - If a resource being created already exists"
          }
        },
        "parameters" : [ {
          "in" : "header",
          "name" : "Authorization",
          "description" : "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
          "type" : "string",
          "required" : true
        }, {
          "in" : "query",
          "name" : "includeInactive",
          "description" : "Return the list of inactive objects in the results. By default only active objects are returned",
          "type" : "string",
          "required" : false
        }, {
          "in" : "query",
          "name" : "[att]:contains",
          "description" : "Search a specific attribute partially",
          "type" : "string",
          "required" : false
        }, {
          "in" : "query",
          "name" : "[att]:in",
          "description" : "Filter the collection by attribute list. ",
          "type" : "string",
          "required" : false
        }, {
          "in" : "query",
          "name" : "fields",
          "description" : "List of fields you want returned separated by a coma. You can alias the returned field by adding the alias after a column",
          "type" : "string",
          "required" : false
        }, {
          "in" : "query",
          "name" : "offset",
          "description" : "The collection items offset",
          "type" : "integer",
          "required" : false
        }, {
          "in" : "query",
          "name" : "limit",
          "description" : "The collection items limit",
          "type" : "integer",
          "required" : false
        }, {
          "in" : "query",
          "name" : "include",
          "description" : "Expand response to get full related object intead of ID. See the expand guide for more info.",
          "type" : "string",
          "required" : false
        }, {
          "schema" : {
            "$ref" : "#/definitions/array"
          },
          "in" : "query",
          "name" : "sort",
          "description" : "The collection items sort field and order (prefix with \"-\" for descending sort].",
          "required" : false
        }, {
          "in" : "query",
          "name" : "[att]",
          "description" : "Filter any attribute by its value. You can search subobjects by using the qualified attribute name. ",
          "type" : "string",
          "required" : false
        }, {
          "in" : "query",
          "name" : "q",
          "description" : "Global search for the object",
          "type" : "string",
          "required" : false
        } ],
        "tags" : [ "shifts" ]
      }
    },
    "/shifts/{id}" : {
      "patch" : {
        "summary" : "Partially edit a Shifts",
        "operationId" : "updateShiftById",
        "responses" : {
          "200" : {
            "description" : "OK - Everything worked as expected",
            "schema" : {
              "$ref" : "#/definitions/ShiftsItem"
            }
          },
          "400" : {
            "description" : "Bad Request - Often due to a missing request parameter"
          },
          "401" : {
            "description" : "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500" : {
            "description" : "Server error - Something went wrong on the Cloud Elements server"
          },
          "403" : {
            "description" : "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502" : {
            "description" : "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404" : {
            "description" : "Not found - The requested resource is not found"
          },
          "415" : {
            "description" : "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405" : {
            "description" : "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406" : {
            "description" : "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409" : {
            "description" : "Conflict - If a resource being created already exists"
          }
        },
        "parameters" : [ {
          "in" : "header",
          "name" : "Authorization",
          "description" : "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
          "type" : "string",
          "required" : true
        }, {
          "in" : "path",
          "name" : "id",
          "description" : "The resource identifier",
          "type" : "string",
          "required" : true
        }, {
          "schema" : {
            "$ref" : "#/definitions/ShiftsPatch"
          },
          "in" : "body",
          "name" : "JSON",
          "description" : "JSON",
          "required" : true
        } ],
        "tags" : [ "shifts" ]
      },
      "get" : {
        "summary" : "Retrieve a Shifts",
        "operationId" : "getShiftById",
        "responses" : {
          "200" : {
            "description" : "OK - Everything worked as expected",
            "schema" : {
              "$ref" : "#/definitions/ShiftsItem"
            }
          },
          "400" : {
            "description" : "Bad Request - Often due to a missing request parameter"
          },
          "401" : {
            "description" : "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500" : {
            "description" : "Server error - Something went wrong on the Cloud Elements server"
          },
          "403" : {
            "description" : "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502" : {
            "description" : "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404" : {
            "description" : "Not found - The requested resource is not found"
          },
          "415" : {
            "description" : "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405" : {
            "description" : "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406" : {
            "description" : "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409" : {
            "description" : "Conflict - If a resource being created already exists"
          }
        },
        "parameters" : [ {
          "in" : "header",
          "name" : "Authorization",
          "description" : "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
          "type" : "string",
          "required" : true
        }, {
          "in" : "path",
          "name" : "id",
          "description" : "The resource identifier",
          "type" : "string",
          "required" : true
        } ],
        "tags" : [ "shifts" ]
      },
      "put" : {
        "summary" : "Update a Shifts",
        "operationId" : "replaceShiftById",
        "responses" : {
          "200" : {
            "description" : "OK - Everything worked as expected",
            "schema" : {
              "$ref" : "#/definitions/ShiftsPut"
            }
          },
          "400" : {
            "description" : "Bad Request - Often due to a missing request parameter"
          },
          "401" : {
            "description" : "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500" : {
            "description" : "Server error - Something went wrong on the Cloud Elements server"
          },
          "403" : {
            "description" : "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502" : {
            "description" : "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404" : {
            "description" : "Not found - The requested resource is not found"
          },
          "415" : {
            "description" : "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405" : {
            "description" : "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406" : {
            "description" : "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409" : {
            "description" : "Conflict - If a resource being created already exists"
          }
        },
        "parameters" : [ {
          "in" : "header",
          "name" : "Authorization",
          "description" : "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
          "type" : "string",
          "required" : true
        }, {
          "in" : "path",
          "name" : "id",
          "description" : "The resource identifier",
          "type" : "string",
          "required" : true
        }, {
          "schema" : {
            "$ref" : "#/definitions/ShiftsPut"
          },
          "in" : "body",
          "name" : "JSON",
          "description" : "JSON",
          "required" : true
        } ],
        "tags" : [ "shifts" ]
      }
    },
    "/shifts/{id}/actions/acknowledge" : {
      "post" : {
        "summary" : "acknowledge",
        "operationId" : "createShiftActionAcknowledge",
        "responses" : {
          "200" : {
            "description" : "OK - Everything worked as expected",
            "schema" : {
              "$ref" : "#/definitions/ActionResponse"
            }
          },
          "400" : {
            "description" : "Bad Request - Often due to a missing request parameter"
          },
          "401" : {
            "description" : "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500" : {
            "description" : "Server error - Something went wrong on the Cloud Elements server"
          },
          "403" : {
            "description" : "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502" : {
            "description" : "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404" : {
            "description" : "Not found - The requested resource is not found"
          },
          "415" : {
            "description" : "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405" : {
            "description" : "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406" : {
            "description" : "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409" : {
            "description" : "Conflict - If a resource being created already exists"
          }
        },
        "parameters" : [ {
          "in" : "header",
          "name" : "Authorization",
          "description" : "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
          "type" : "string",
          "required" : true
        }, {
          "in" : "path",
          "name" : "id",
          "description" : "The resource identifier",
          "type" : "string",
          "required" : true
        }, {
          "schema" : {
            "$ref" : "#/definitions/ShiftsAcknowledge"
          },
          "in" : "body",
          "name" : "Body",
          "description" : "Body",
          "required" : true
        } ],
        "tags" : [ "shifts" ]
      }
    },
    "/shifts/{id}/actions/add-note" : {
      "post" : {
        "summary" : "add-note",
        "operationId" : "createShiftActionAddNote",
        "responses" : {
          "200" : {
            "description" : "OK - Everything worked as expected",
            "schema" : {
              "$ref" : "#/definitions/ActionResponse"
            }
          },
          "400" : {
            "description" : "Bad Request - Often due to a missing request parameter"
          },
          "401" : {
            "description" : "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500" : {
            "description" : "Server error - Something went wrong on the Cloud Elements server"
          },
          "403" : {
            "description" : "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502" : {
            "description" : "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404" : {
            "description" : "Not found - The requested resource is not found"
          },
          "415" : {
            "description" : "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405" : {
            "description" : "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406" : {
            "description" : "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409" : {
            "description" : "Conflict - If a resource being created already exists"
          }
        },
        "parameters" : [ {
          "in" : "header",
          "name" : "Authorization",
          "description" : "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
          "type" : "string",
          "required" : true
        }, {
          "in" : "path",
          "name" : "id",
          "description" : "The resource identifier",
          "type" : "string",
          "required" : true
        }, {
          "schema" : {
            "$ref" : "#/definitions/ShiftsAdd-note"
          },
          "in" : "body",
          "name" : "Body",
          "description" : "Body",
          "required" : true
        } ],
        "tags" : [ "shifts" ]
      }
    },
    "/shifts/{id}/actions/approve" : {
      "post" : {
        "summary" : "Approve hours",
        "operationId" : "createShiftActionApprove",
        "responses" : {
          "200" : {
            "description" : "OK - Everything worked as expected",
            "schema" : {
              "$ref" : "#/definitions/ActionResponse"
            }
          },
          "400" : {
            "description" : "Bad Request - Often due to a missing request parameter"
          },
          "401" : {
            "description" : "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500" : {
            "description" : "Server error - Something went wrong on the Cloud Elements server"
          },
          "403" : {
            "description" : "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502" : {
            "description" : "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404" : {
            "description" : "Not found - The requested resource is not found"
          },
          "415" : {
            "description" : "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405" : {
            "description" : "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406" : {
            "description" : "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409" : {
            "description" : "Conflict - If a resource being created already exists"
          }
        },
        "parameters" : [ {
          "in" : "header",
          "name" : "Authorization",
          "description" : "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
          "type" : "string",
          "required" : true
        }, {
          "in" : "path",
          "name" : "id",
          "description" : "The resource identifier",
          "type" : "string",
          "required" : true
        }, {
          "schema" : {
            "$ref" : "#/definitions/ShiftsApprove"
          },
          "in" : "body",
          "name" : "Body",
          "description" : "Body",
          "required" : true
        } ],
        "tags" : [ "shifts" ]
      }
    },
    "/shifts/{id}/actions/assign" : {
      "post" : {
        "summary" : "Assign an employee to a shift",
        "operationId" : "createShiftActionAssign",
        "responses" : {
          "200" : {
            "description" : "OK - Everything worked as expected",
            "schema" : {
              "$ref" : "#/definitions/ActionResponse"
            }
          },
          "400" : {
            "description" : "Bad Request - Often due to a missing request parameter"
          },
          "401" : {
            "description" : "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500" : {
            "description" : "Server error - Something went wrong on the Cloud Elements server"
          },
          "403" : {
            "description" : "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502" : {
            "description" : "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404" : {
            "description" : "Not found - The requested resource is not found"
          },
          "415" : {
            "description" : "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405" : {
            "description" : "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406" : {
            "description" : "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409" : {
            "description" : "Conflict - If a resource being created already exists"
          }
        },
        "parameters" : [ {
          "in" : "header",
          "name" : "Authorization",
          "description" : "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
          "type" : "string",
          "required" : true
        }, {
          "in" : "path",
          "name" : "id",
          "description" : "The resource identifier",
          "type" : "string",
          "required" : true
        }, {
          "schema" : {
            "$ref" : "#/definitions/ShiftsAssign"
          },
          "in" : "body",
          "name" : "Body",
          "description" : "Body",
          "required" : true
        } ],
        "tags" : [ "shifts" ]
      }
    },
    "/shifts/{id}/actions/cancel" : {
      "post" : {
        "summary" : "Cancel a shift",
        "operationId" : "createShiftActionCancel",
        "responses" : {
          "200" : {
            "description" : "OK - Everything worked as expected",
            "schema" : {
              "$ref" : "#/definitions/ActionResponse"
            }
          },
          "400" : {
            "description" : "Bad Request - Often due to a missing request parameter"
          },
          "401" : {
            "description" : "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500" : {
            "description" : "Server error - Something went wrong on the Cloud Elements server"
          },
          "403" : {
            "description" : "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502" : {
            "description" : "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404" : {
            "description" : "Not found - The requested resource is not found"
          },
          "415" : {
            "description" : "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405" : {
            "description" : "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406" : {
            "description" : "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409" : {
            "description" : "Conflict - If a resource being created already exists"
          }
        },
        "parameters" : [ {
          "in" : "header",
          "name" : "Authorization",
          "description" : "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
          "type" : "string",
          "required" : true
        }, {
          "in" : "path",
          "name" : "id",
          "description" : "The resource identifier",
          "type" : "string",
          "required" : true
        }, {
          "schema" : {
            "$ref" : "#/definitions/ShiftsCancel"
          },
          "in" : "body",
          "name" : "Body",
          "description" : "Body",
          "required" : true
        } ],
        "tags" : [ "shifts" ]
      }
    },
    "/shifts/{id}/actions/clock-in" : {
      "post" : {
        "summary" : "clock-in",
        "operationId" : "createShiftActionClockIn",
        "responses" : {
          "200" : {
            "description" : "OK - Everything worked as expected",
            "schema" : {
              "$ref" : "#/definitions/ActionResponse"
            }
          },
          "400" : {
            "description" : "Bad Request - Often due to a missing request parameter"
          },
          "401" : {
            "description" : "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500" : {
            "description" : "Server error - Something went wrong on the Cloud Elements server"
          },
          "403" : {
            "description" : "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502" : {
            "description" : "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404" : {
            "description" : "Not found - The requested resource is not found"
          },
          "415" : {
            "description" : "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405" : {
            "description" : "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406" : {
            "description" : "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409" : {
            "description" : "Conflict - If a resource being created already exists"
          }
        },
        "parameters" : [ {
          "in" : "header",
          "name" : "Authorization",
          "description" : "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
          "type" : "string",
          "required" : true
        }, {
          "in" : "path",
          "name" : "id",
          "description" : "The resource identifier",
          "type" : "string",
          "required" : true
        }, {
          "schema" : {
            "$ref" : "#/definitions/ShiftsClock-in"
          },
          "in" : "body",
          "name" : "Body",
          "description" : "Body",
          "required" : true
        } ],
        "tags" : [ "shifts" ]
      }
    },
    "/shifts/{id}/actions/clock-out" : {
      "post" : {
        "summary" : "clock-out",
        "operationId" : "createShiftActionClockOut",
        "responses" : {
          "200" : {
            "description" : "OK - Everything worked as expected",
            "schema" : {
              "$ref" : "#/definitions/ActionResponse"
            }
          },
          "400" : {
            "description" : "Bad Request - Often due to a missing request parameter"
          },
          "401" : {
            "description" : "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500" : {
            "description" : "Server error - Something went wrong on the Cloud Elements server"
          },
          "403" : {
            "description" : "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502" : {
            "description" : "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404" : {
            "description" : "Not found - The requested resource is not found"
          },
          "415" : {
            "description" : "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405" : {
            "description" : "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406" : {
            "description" : "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409" : {
            "description" : "Conflict - If a resource being created already exists"
          }
        },
        "parameters" : [ {
          "in" : "header",
          "name" : "Authorization",
          "description" : "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
          "type" : "string",
          "required" : true
        }, {
          "in" : "path",
          "name" : "id",
          "description" : "The resource identifier",
          "type" : "string",
          "required" : true
        }, {
          "schema" : {
            "$ref" : "#/definitions/ShiftsClock-out"
          },
          "in" : "body",
          "name" : "Body",
          "description" : "Body",
          "required" : true
        } ],
        "tags" : [ "shifts" ]
      }
    },
    "/shifts/{id}/actions/log-time" : {
      "post" : {
        "summary" : "log-time",
        "operationId" : "createShiftActionLogTime",
        "responses" : {
          "200" : {
            "description" : "OK - Everything worked as expected",
            "schema" : {
              "$ref" : "#/definitions/ActionResponse"
            }
          },
          "400" : {
            "description" : "Bad Request - Often due to a missing request parameter"
          },
          "401" : {
            "description" : "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500" : {
            "description" : "Server error - Something went wrong on the Cloud Elements server"
          },
          "403" : {
            "description" : "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502" : {
            "description" : "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404" : {
            "description" : "Not found - The requested resource is not found"
          },
          "415" : {
            "description" : "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405" : {
            "description" : "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406" : {
            "description" : "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409" : {
            "description" : "Conflict - If a resource being created already exists"
          }
        },
        "parameters" : [ {
          "in" : "header",
          "name" : "Authorization",
          "description" : "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
          "type" : "string",
          "required" : true
        }, {
          "in" : "path",
          "name" : "id",
          "description" : "The resource identifier",
          "type" : "string",
          "required" : true
        }, {
          "schema" : {
            "$ref" : "#/definitions/ShiftsLog-time"
          },
          "in" : "body",
          "name" : "Body",
          "description" : "Body",
          "required" : true
        } ],
        "tags" : [ "shifts" ]
      }
    },
    "/shifts/{id}/actions/publish" : {
      "post" : {
        "summary" : "Publish a shift",
        "operationId" : "createShiftActionPublish",
        "responses" : {
          "200" : {
            "description" : "OK - Everything worked as expected",
            "schema" : {
              "$ref" : "#/definitions/ActionResponse"
            }
          },
          "400" : {
            "description" : "Bad Request - Often due to a missing request parameter"
          },
          "401" : {
            "description" : "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500" : {
            "description" : "Server error - Something went wrong on the Cloud Elements server"
          },
          "403" : {
            "description" : "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502" : {
            "description" : "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404" : {
            "description" : "Not found - The requested resource is not found"
          },
          "415" : {
            "description" : "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405" : {
            "description" : "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406" : {
            "description" : "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409" : {
            "description" : "Conflict - If a resource being created already exists"
          }
        },
        "parameters" : [ {
          "in" : "header",
          "name" : "Authorization",
          "description" : "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
          "type" : "string",
          "required" : true
        }, {
          "in" : "path",
          "name" : "id",
          "description" : "The resource identifier",
          "type" : "string",
          "required" : true
        }, {
          "schema" : {
            "$ref" : "#/definitions/ShiftsPublish"
          },
          "in" : "body",
          "name" : "Body",
          "description" : "Body",
          "required" : true
        } ],
        "tags" : [ "shifts" ]
      }
    },
    "/shifts/{id}/actions/replace" : {
      "post" : {
        "summary" : "Replace an employee to a shift",
        "operationId" : "createShiftActionReplace",
        "responses" : {
          "200" : {
            "description" : "OK - Everything worked as expected",
            "schema" : {
              "$ref" : "#/definitions/ActionResponse"
            }
          },
          "400" : {
            "description" : "Bad Request - Often due to a missing request parameter"
          },
          "401" : {
            "description" : "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500" : {
            "description" : "Server error - Something went wrong on the Cloud Elements server"
          },
          "403" : {
            "description" : "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502" : {
            "description" : "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404" : {
            "description" : "Not found - The requested resource is not found"
          },
          "415" : {
            "description" : "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405" : {
            "description" : "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406" : {
            "description" : "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409" : {
            "description" : "Conflict - If a resource being created already exists"
          }
        },
        "parameters" : [ {
          "in" : "header",
          "name" : "Authorization",
          "description" : "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
          "type" : "string",
          "required" : true
        }, {
          "in" : "path",
          "name" : "id",
          "description" : "The resource identifier",
          "type" : "string",
          "required" : true
        }, {
          "schema" : {
            "$ref" : "#/definitions/ShiftsReplace"
          },
          "in" : "body",
          "name" : "Body",
          "description" : "Body",
          "required" : true
        } ],
        "tags" : [ "shifts" ]
      }
    },
    "/shifts/{id}/actions/split" : {
      "post" : {
        "summary" : "Split a shift",
        "operationId" : "createShiftActionSplit",
        "responses" : {
          "200" : {
            "description" : "OK - Everything worked as expected",
            "schema" : {
              "$ref" : "#/definitions/ActionResponse"
            }
          },
          "400" : {
            "description" : "Bad Request - Often due to a missing request parameter"
          },
          "401" : {
            "description" : "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500" : {
            "description" : "Server error - Something went wrong on the Cloud Elements server"
          },
          "403" : {
            "description" : "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502" : {
            "description" : "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404" : {
            "description" : "Not found - The requested resource is not found"
          },
          "415" : {
            "description" : "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405" : {
            "description" : "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406" : {
            "description" : "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409" : {
            "description" : "Conflict - If a resource being created already exists"
          }
        },
        "parameters" : [ {
          "in" : "header",
          "name" : "Authorization",
          "description" : "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
          "type" : "string",
          "required" : true
        }, {
          "in" : "path",
          "name" : "id",
          "description" : "The resource identifier",
          "type" : "string",
          "required" : true
        }, {
          "schema" : {
            "$ref" : "#/definitions/ShiftsSplit"
          },
          "in" : "body",
          "name" : "Body",
          "description" : "Body",
          "required" : true
        } ],
        "tags" : [ "shifts" ]
      }
    },
    "/shifts/{id}/actions/vacate" : {
      "post" : {
        "summary" : "vacate",
        "operationId" : "createShiftActionVacate",
        "responses" : {
          "200" : {
            "description" : "OK - Everything worked as expected",
            "schema" : {
              "$ref" : "#/definitions/ActionResponse"
            }
          },
          "400" : {
            "description" : "Bad Request - Often due to a missing request parameter"
          },
          "401" : {
            "description" : "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500" : {
            "description" : "Server error - Something went wrong on the Cloud Elements server"
          },
          "403" : {
            "description" : "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502" : {
            "description" : "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404" : {
            "description" : "Not found - The requested resource is not found"
          },
          "415" : {
            "description" : "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405" : {
            "description" : "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406" : {
            "description" : "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409" : {
            "description" : "Conflict - If a resource being created already exists"
          }
        },
        "parameters" : [ {
          "in" : "header",
          "name" : "Authorization",
          "description" : "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
          "type" : "string",
          "required" : true
        }, {
          "in" : "path",
          "name" : "id",
          "description" : "The resource identifier",
          "type" : "string",
          "required" : true
        }, {
          "schema" : {
            "$ref" : "#/definitions/ShiftsVacate"
          },
          "in" : "body",
          "name" : "Body",
          "description" : "Body",
          "required" : true
        } ],
        "tags" : [ "shifts" ]
      }
    },
    "/skill-categories" : {
      "post" : {
        "summary" : "Create a SkillCategories",
        "operationId" : "createSkillCategory",
        "responses" : {
          "200" : {
            "description" : "OK - Everything worked as expected",
            "schema" : {
              "$ref" : "#/definitions/SkillCategoriesItem"
            }
          },
          "400" : {
            "description" : "Bad Request - Often due to a missing request parameter"
          },
          "401" : {
            "description" : "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500" : {
            "description" : "Server error - Something went wrong on the Cloud Elements server"
          },
          "403" : {
            "description" : "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502" : {
            "description" : "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404" : {
            "description" : "Not found - The requested resource is not found"
          },
          "415" : {
            "description" : "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405" : {
            "description" : "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406" : {
            "description" : "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409" : {
            "description" : "Conflict - If a resource being created already exists"
          }
        },
        "parameters" : [ {
          "in" : "header",
          "name" : "Authorization",
          "description" : "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
          "type" : "string",
          "required" : true
        }, {
          "schema" : {
            "$ref" : "#/definitions/SkillCategoriesPost"
          },
          "in" : "body",
          "name" : "Body",
          "description" : "Body",
          "required" : true
        } ],
        "tags" : [ "skill-categories" ]
      },
      "get" : {
        "summary" : "Retrieve a list of SkillCategories",
        "operationId" : "getSkillCategories",
        "responses" : {
          "200" : {
            "description" : "OK - Everything worked as expected",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/SkillCategoriesCollection"
              }
            }
          },
          "400" : {
            "description" : "Bad Request - Often due to a missing request parameter"
          },
          "401" : {
            "description" : "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500" : {
            "description" : "Server error - Something went wrong on the Cloud Elements server"
          },
          "403" : {
            "description" : "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502" : {
            "description" : "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404" : {
            "description" : "Not found - The requested resource is not found"
          },
          "415" : {
            "description" : "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405" : {
            "description" : "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406" : {
            "description" : "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409" : {
            "description" : "Conflict - If a resource being created already exists"
          }
        },
        "parameters" : [ {
          "in" : "header",
          "name" : "Authorization",
          "description" : "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
          "type" : "string",
          "required" : true
        }, {
          "in" : "query",
          "name" : "[att]:in",
          "description" : "Filter the collection by attribute list. ",
          "type" : "string",
          "required" : false
        }, {
          "in" : "query",
          "name" : "[att]",
          "description" : "Filter any attribute by its value. You can search subobjects by using the qualified attribute name. ",
          "type" : "string",
          "required" : false
        }, {
          "in" : "query",
          "name" : "[att]:contains",
          "description" : "Search a specific attribute partially",
          "type" : "string",
          "required" : false
        }, {
          "in" : "query",
          "name" : "include",
          "description" : "Expand response to get full related object intead of ID. See the expand guide for more info.",
          "type" : "string",
          "required" : false
        }, {
          "schema" : {
            "$ref" : "#/definitions/array"
          },
          "in" : "query",
          "name" : "sort",
          "description" : "The collection items sort field and order (prefix with \"-\" for descending sort].",
          "required" : false
        }, {
          "in" : "query",
          "name" : "includeInactive",
          "description" : "Return the list of inactive objects in the results. By default only active objects are returned",
          "type" : "string",
          "required" : false
        }, {
          "in" : "query",
          "name" : "q",
          "description" : "Global search for the object",
          "type" : "string",
          "required" : false
        }, {
          "in" : "query",
          "name" : "fields",
          "description" : "List of fields you want returned separated by a coma. You can alias the returned field by adding the alias after a column",
          "type" : "string",
          "required" : false
        }, {
          "in" : "query",
          "name" : "limit",
          "description" : "The collection items limit",
          "type" : "integer",
          "required" : false
        }, {
          "in" : "query",
          "name" : "offset",
          "description" : "The collection items offset",
          "type" : "integer",
          "required" : false
        } ],
        "tags" : [ "skill-categories" ]
      }
    },
    "/skill-categories/{id}" : {
      "patch" : {
        "summary" : "Partially edit a SkillCategories",
        "operationId" : "updateSkillCategoryById",
        "responses" : {
          "200" : {
            "description" : "OK - Everything worked as expected",
            "schema" : {
              "$ref" : "#/definitions/SkillCategoriesItem"
            }
          },
          "400" : {
            "description" : "Bad Request - Often due to a missing request parameter"
          },
          "401" : {
            "description" : "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500" : {
            "description" : "Server error - Something went wrong on the Cloud Elements server"
          },
          "403" : {
            "description" : "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502" : {
            "description" : "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404" : {
            "description" : "Not found - The requested resource is not found"
          },
          "415" : {
            "description" : "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405" : {
            "description" : "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406" : {
            "description" : "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409" : {
            "description" : "Conflict - If a resource being created already exists"
          }
        },
        "parameters" : [ {
          "in" : "header",
          "name" : "Authorization",
          "description" : "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
          "type" : "string",
          "required" : true
        }, {
          "in" : "path",
          "name" : "id",
          "description" : "The resource identifier",
          "type" : "string",
          "required" : true
        }, {
          "schema" : {
            "$ref" : "#/definitions/SkillCategoriesPatch"
          },
          "in" : "body",
          "name" : "JSON",
          "description" : "JSON",
          "required" : true
        } ],
        "tags" : [ "skill-categories" ]
      },
      "get" : {
        "summary" : "Retrieve a SkillCategories",
        "operationId" : "getSkillCategoryById",
        "responses" : {
          "200" : {
            "description" : "OK - Everything worked as expected",
            "schema" : {
              "$ref" : "#/definitions/SkillCategoriesItem"
            }
          },
          "400" : {
            "description" : "Bad Request - Often due to a missing request parameter"
          },
          "401" : {
            "description" : "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500" : {
            "description" : "Server error - Something went wrong on the Cloud Elements server"
          },
          "403" : {
            "description" : "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502" : {
            "description" : "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404" : {
            "description" : "Not found - The requested resource is not found"
          },
          "415" : {
            "description" : "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405" : {
            "description" : "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406" : {
            "description" : "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409" : {
            "description" : "Conflict - If a resource being created already exists"
          }
        },
        "parameters" : [ {
          "in" : "header",
          "name" : "Authorization",
          "description" : "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
          "type" : "string",
          "required" : true
        }, {
          "in" : "path",
          "name" : "id",
          "description" : "The resource identifier",
          "type" : "string",
          "required" : true
        } ],
        "tags" : [ "skill-categories" ]
      },
      "put" : {
        "summary" : "Update a SkillCategories",
        "operationId" : "replaceSkillCategoryById",
        "responses" : {
          "200" : {
            "description" : "OK - Everything worked as expected",
            "schema" : {
              "$ref" : "#/definitions/SkillCategoriesPut"
            }
          },
          "400" : {
            "description" : "Bad Request - Often due to a missing request parameter"
          },
          "401" : {
            "description" : "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500" : {
            "description" : "Server error - Something went wrong on the Cloud Elements server"
          },
          "403" : {
            "description" : "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502" : {
            "description" : "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404" : {
            "description" : "Not found - The requested resource is not found"
          },
          "415" : {
            "description" : "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405" : {
            "description" : "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406" : {
            "description" : "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409" : {
            "description" : "Conflict - If a resource being created already exists"
          }
        },
        "parameters" : [ {
          "in" : "header",
          "name" : "Authorization",
          "description" : "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
          "type" : "string",
          "required" : true
        }, {
          "in" : "path",
          "name" : "id",
          "description" : "The resource identifier",
          "type" : "string",
          "required" : true
        }, {
          "schema" : {
            "$ref" : "#/definitions/SkillCategoriesPut"
          },
          "in" : "body",
          "name" : "JSON",
          "description" : "JSON",
          "required" : true
        } ],
        "tags" : [ "skill-categories" ]
      }
    },
    "/skills" : {
      "post" : {
        "summary" : "Create a Skills",
        "operationId" : "createSkill",
        "responses" : {
          "200" : {
            "description" : "OK - Everything worked as expected",
            "schema" : {
              "$ref" : "#/definitions/SkillsItem"
            }
          },
          "400" : {
            "description" : "Bad Request - Often due to a missing request parameter"
          },
          "401" : {
            "description" : "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500" : {
            "description" : "Server error - Something went wrong on the Cloud Elements server"
          },
          "403" : {
            "description" : "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502" : {
            "description" : "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404" : {
            "description" : "Not found - The requested resource is not found"
          },
          "415" : {
            "description" : "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405" : {
            "description" : "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406" : {
            "description" : "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409" : {
            "description" : "Conflict - If a resource being created already exists"
          }
        },
        "parameters" : [ {
          "in" : "header",
          "name" : "Authorization",
          "description" : "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
          "type" : "string",
          "required" : true
        }, {
          "schema" : {
            "$ref" : "#/definitions/SkillsPost"
          },
          "in" : "body",
          "name" : "Body",
          "description" : "Body",
          "required" : true
        } ],
        "tags" : [ "skills" ]
      },
      "get" : {
        "summary" : "Retrieve a list of Skills",
        "operationId" : "getSkills",
        "responses" : {
          "200" : {
            "description" : "OK - Everything worked as expected",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/SkillsCollection"
              }
            }
          },
          "400" : {
            "description" : "Bad Request - Often due to a missing request parameter"
          },
          "401" : {
            "description" : "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500" : {
            "description" : "Server error - Something went wrong on the Cloud Elements server"
          },
          "403" : {
            "description" : "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502" : {
            "description" : "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404" : {
            "description" : "Not found - The requested resource is not found"
          },
          "415" : {
            "description" : "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405" : {
            "description" : "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406" : {
            "description" : "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409" : {
            "description" : "Conflict - If a resource being created already exists"
          }
        },
        "parameters" : [ {
          "in" : "header",
          "name" : "Authorization",
          "description" : "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
          "type" : "string",
          "required" : true
        }, {
          "in" : "query",
          "name" : "q",
          "description" : "Global search for the object",
          "type" : "string",
          "required" : false
        }, {
          "in" : "query",
          "name" : "[att]:in",
          "description" : "Filter the collection by attribute list. ",
          "type" : "string",
          "required" : false
        }, {
          "in" : "query",
          "name" : "[att]",
          "description" : "Filter any attribute by its value. You can search subobjects by using the qualified attribute name. ",
          "type" : "string",
          "required" : false
        }, {
          "schema" : {
            "$ref" : "#/definitions/array"
          },
          "in" : "query",
          "name" : "sort",
          "description" : "The collection items sort field and order (prefix with \"-\" for descending sort].",
          "required" : false
        }, {
          "in" : "query",
          "name" : "include",
          "description" : "Expand response to get full related object intead of ID. See the expand guide for more info.",
          "type" : "string",
          "required" : false
        }, {
          "in" : "query",
          "name" : "fields",
          "description" : "List of fields you want returned separated by a coma. You can alias the returned field by adding the alias after a column",
          "type" : "string",
          "required" : false
        }, {
          "in" : "query",
          "name" : "offset",
          "description" : "The collection items offset",
          "type" : "integer",
          "required" : false
        }, {
          "in" : "query",
          "name" : "limit",
          "description" : "The collection items limit",
          "type" : "integer",
          "required" : false
        }, {
          "in" : "query",
          "name" : "[att]:contains",
          "description" : "Search a specific attribute partially",
          "type" : "string",
          "required" : false
        }, {
          "in" : "query",
          "name" : "includeInactive",
          "description" : "Return the list of inactive objects in the results. By default only active objects are returned",
          "type" : "string",
          "required" : false
        } ],
        "tags" : [ "skills" ]
      }
    },
    "/skills/{id}" : {
      "patch" : {
        "summary" : "Partially edit a Skills",
        "operationId" : "updateSkillById",
        "responses" : {
          "200" : {
            "description" : "OK - Everything worked as expected",
            "schema" : {
              "$ref" : "#/definitions/SkillsItem"
            }
          },
          "400" : {
            "description" : "Bad Request - Often due to a missing request parameter"
          },
          "401" : {
            "description" : "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500" : {
            "description" : "Server error - Something went wrong on the Cloud Elements server"
          },
          "403" : {
            "description" : "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502" : {
            "description" : "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404" : {
            "description" : "Not found - The requested resource is not found"
          },
          "415" : {
            "description" : "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405" : {
            "description" : "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406" : {
            "description" : "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409" : {
            "description" : "Conflict - If a resource being created already exists"
          }
        },
        "parameters" : [ {
          "in" : "header",
          "name" : "Authorization",
          "description" : "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
          "type" : "string",
          "required" : true
        }, {
          "in" : "path",
          "name" : "id",
          "description" : "The resource identifier",
          "type" : "string",
          "required" : true
        }, {
          "schema" : {
            "$ref" : "#/definitions/SkillsPatch"
          },
          "in" : "body",
          "name" : "JSON",
          "description" : "JSON",
          "required" : true
        } ],
        "tags" : [ "skills" ]
      },
      "get" : {
        "summary" : "Retrieve a Skills",
        "operationId" : "getSkillById",
        "responses" : {
          "200" : {
            "description" : "OK - Everything worked as expected",
            "schema" : {
              "$ref" : "#/definitions/SkillsItem"
            }
          },
          "400" : {
            "description" : "Bad Request - Often due to a missing request parameter"
          },
          "401" : {
            "description" : "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500" : {
            "description" : "Server error - Something went wrong on the Cloud Elements server"
          },
          "403" : {
            "description" : "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502" : {
            "description" : "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404" : {
            "description" : "Not found - The requested resource is not found"
          },
          "415" : {
            "description" : "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405" : {
            "description" : "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406" : {
            "description" : "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409" : {
            "description" : "Conflict - If a resource being created already exists"
          }
        },
        "parameters" : [ {
          "in" : "header",
          "name" : "Authorization",
          "description" : "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
          "type" : "string",
          "required" : true
        }, {
          "in" : "path",
          "name" : "id",
          "description" : "The resource identifier",
          "type" : "string",
          "required" : true
        } ],
        "tags" : [ "skills" ]
      },
      "put" : {
        "summary" : "Update a Skills",
        "operationId" : "replaceSkillById",
        "responses" : {
          "200" : {
            "description" : "OK - Everything worked as expected",
            "schema" : {
              "$ref" : "#/definitions/SkillsPut"
            }
          },
          "400" : {
            "description" : "Bad Request - Often due to a missing request parameter"
          },
          "401" : {
            "description" : "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500" : {
            "description" : "Server error - Something went wrong on the Cloud Elements server"
          },
          "403" : {
            "description" : "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502" : {
            "description" : "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404" : {
            "description" : "Not found - The requested resource is not found"
          },
          "415" : {
            "description" : "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405" : {
            "description" : "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406" : {
            "description" : "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409" : {
            "description" : "Conflict - If a resource being created already exists"
          }
        },
        "parameters" : [ {
          "in" : "header",
          "name" : "Authorization",
          "description" : "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
          "type" : "string",
          "required" : true
        }, {
          "in" : "path",
          "name" : "id",
          "description" : "The resource identifier",
          "type" : "string",
          "required" : true
        }, {
          "schema" : {
            "$ref" : "#/definitions/SkillsPut"
          },
          "in" : "body",
          "name" : "JSON",
          "description" : "JSON",
          "required" : true
        } ],
        "tags" : [ "skills" ]
      }
    },
    "/task-price-tiers" : {
      "post" : {
        "summary" : "Create a TaskPriceTiers",
        "operationId" : "createTaskPriceTier",
        "responses" : {
          "200" : {
            "description" : "OK - Everything worked as expected",
            "schema" : {
              "$ref" : "#/definitions/TaskPriceTiersItem"
            }
          },
          "400" : {
            "description" : "Bad Request - Often due to a missing request parameter"
          },
          "401" : {
            "description" : "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500" : {
            "description" : "Server error - Something went wrong on the Cloud Elements server"
          },
          "403" : {
            "description" : "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502" : {
            "description" : "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404" : {
            "description" : "Not found - The requested resource is not found"
          },
          "415" : {
            "description" : "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405" : {
            "description" : "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406" : {
            "description" : "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409" : {
            "description" : "Conflict - If a resource being created already exists"
          }
        },
        "parameters" : [ {
          "in" : "header",
          "name" : "Authorization",
          "description" : "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
          "type" : "string",
          "required" : true
        }, {
          "schema" : {
            "$ref" : "#/definitions/TaskPriceTiersPost"
          },
          "in" : "body",
          "name" : "Body",
          "description" : "Body",
          "required" : true
        } ],
        "tags" : [ "task-price-tiers" ]
      },
      "get" : {
        "summary" : "Retrieve a list of TaskPriceTiers",
        "operationId" : "getTaskPriceTiers",
        "responses" : {
          "200" : {
            "description" : "OK - Everything worked as expected",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/TaskPriceTiersCollection"
              }
            }
          },
          "400" : {
            "description" : "Bad Request - Often due to a missing request parameter"
          },
          "401" : {
            "description" : "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500" : {
            "description" : "Server error - Something went wrong on the Cloud Elements server"
          },
          "403" : {
            "description" : "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502" : {
            "description" : "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404" : {
            "description" : "Not found - The requested resource is not found"
          },
          "415" : {
            "description" : "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405" : {
            "description" : "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406" : {
            "description" : "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409" : {
            "description" : "Conflict - If a resource being created already exists"
          }
        },
        "parameters" : [ {
          "in" : "header",
          "name" : "Authorization",
          "description" : "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
          "type" : "string",
          "required" : true
        }, {
          "in" : "query",
          "name" : "includeInactive",
          "description" : "Return the list of inactive objects in the results. By default only active objects are returned",
          "type" : "string",
          "required" : false
        }, {
          "in" : "query",
          "name" : "[att]:contains",
          "description" : "Search a specific attribute partially",
          "type" : "string",
          "required" : false
        }, {
          "in" : "query",
          "name" : "[att]:in",
          "description" : "Filter the collection by attribute list. ",
          "type" : "string",
          "required" : false
        }, {
          "in" : "query",
          "name" : "[att]",
          "description" : "Filter any attribute by its value. You can search subobjects by using the qualified attribute name. ",
          "type" : "string",
          "required" : false
        }, {
          "schema" : {
            "$ref" : "#/definitions/array"
          },
          "in" : "query",
          "name" : "sort",
          "description" : "The collection items sort field and order (prefix with \"-\" for descending sort].",
          "required" : false
        }, {
          "in" : "query",
          "name" : "include",
          "description" : "Expand response to get full related object intead of ID. See the expand guide for more info.",
          "type" : "string",
          "required" : false
        }, {
          "in" : "query",
          "name" : "fields",
          "description" : "List of fields you want returned separated by a coma. You can alias the returned field by adding the alias after a column",
          "type" : "string",
          "required" : false
        }, {
          "in" : "query",
          "name" : "offset",
          "description" : "The collection items offset",
          "type" : "integer",
          "required" : false
        }, {
          "in" : "query",
          "name" : "limit",
          "description" : "The collection items limit",
          "type" : "integer",
          "required" : false
        }, {
          "in" : "query",
          "name" : "q",
          "description" : "Global search for the object",
          "type" : "string",
          "required" : false
        } ],
        "tags" : [ "task-price-tiers" ]
      }
    },
    "/task-price-tiers/{id}" : {
      "patch" : {
        "summary" : "Partially edit a TaskPriceTiers",
        "operationId" : "updateTaskPriceTierById",
        "responses" : {
          "200" : {
            "description" : "OK - Everything worked as expected",
            "schema" : {
              "$ref" : "#/definitions/TaskPriceTiersItem"
            }
          },
          "400" : {
            "description" : "Bad Request - Often due to a missing request parameter"
          },
          "401" : {
            "description" : "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500" : {
            "description" : "Server error - Something went wrong on the Cloud Elements server"
          },
          "403" : {
            "description" : "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502" : {
            "description" : "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404" : {
            "description" : "Not found - The requested resource is not found"
          },
          "415" : {
            "description" : "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405" : {
            "description" : "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406" : {
            "description" : "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409" : {
            "description" : "Conflict - If a resource being created already exists"
          }
        },
        "parameters" : [ {
          "in" : "header",
          "name" : "Authorization",
          "description" : "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
          "type" : "string",
          "required" : true
        }, {
          "in" : "path",
          "name" : "id",
          "description" : "The resource identifier",
          "type" : "string",
          "required" : true
        }, {
          "schema" : {
            "$ref" : "#/definitions/TaskPriceTiersPatch"
          },
          "in" : "body",
          "name" : "JSON",
          "description" : "JSON",
          "required" : true
        } ],
        "tags" : [ "task-price-tiers" ]
      },
      "get" : {
        "summary" : "Retrieve a TaskPriceTiers",
        "operationId" : "getTaskPriceTierById",
        "responses" : {
          "200" : {
            "description" : "OK - Everything worked as expected",
            "schema" : {
              "$ref" : "#/definitions/TaskPriceTiersItem"
            }
          },
          "400" : {
            "description" : "Bad Request - Often due to a missing request parameter"
          },
          "401" : {
            "description" : "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500" : {
            "description" : "Server error - Something went wrong on the Cloud Elements server"
          },
          "403" : {
            "description" : "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502" : {
            "description" : "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404" : {
            "description" : "Not found - The requested resource is not found"
          },
          "415" : {
            "description" : "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405" : {
            "description" : "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406" : {
            "description" : "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409" : {
            "description" : "Conflict - If a resource being created already exists"
          }
        },
        "parameters" : [ {
          "in" : "header",
          "name" : "Authorization",
          "description" : "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
          "type" : "string",
          "required" : true
        }, {
          "in" : "path",
          "name" : "id",
          "description" : "The resource identifier",
          "type" : "string",
          "required" : true
        } ],
        "tags" : [ "task-price-tiers" ]
      },
      "put" : {
        "summary" : "Update a TaskPriceTiers",
        "operationId" : "replaceTaskPriceTierById",
        "responses" : {
          "200" : {
            "description" : "OK - Everything worked as expected",
            "schema" : {
              "$ref" : "#/definitions/TaskPriceTiersPut"
            }
          },
          "400" : {
            "description" : "Bad Request - Often due to a missing request parameter"
          },
          "401" : {
            "description" : "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500" : {
            "description" : "Server error - Something went wrong on the Cloud Elements server"
          },
          "403" : {
            "description" : "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502" : {
            "description" : "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404" : {
            "description" : "Not found - The requested resource is not found"
          },
          "415" : {
            "description" : "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405" : {
            "description" : "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406" : {
            "description" : "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409" : {
            "description" : "Conflict - If a resource being created already exists"
          }
        },
        "parameters" : [ {
          "in" : "header",
          "name" : "Authorization",
          "description" : "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
          "type" : "string",
          "required" : true
        }, {
          "in" : "path",
          "name" : "id",
          "description" : "The resource identifier",
          "type" : "string",
          "required" : true
        }, {
          "schema" : {
            "$ref" : "#/definitions/TaskPriceTiersPut"
          },
          "in" : "body",
          "name" : "JSON",
          "description" : "JSON",
          "required" : true
        } ],
        "tags" : [ "task-price-tiers" ]
      }
    },
    "/task-site-instructions" : {
      "post" : {
        "summary" : "Create a TaskSiteInstructions",
        "operationId" : "createTaskSiteInstruction",
        "responses" : {
          "200" : {
            "description" : "OK - Everything worked as expected",
            "schema" : {
              "$ref" : "#/definitions/TaskSiteInstructionsItem"
            }
          },
          "400" : {
            "description" : "Bad Request - Often due to a missing request parameter"
          },
          "401" : {
            "description" : "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500" : {
            "description" : "Server error - Something went wrong on the Cloud Elements server"
          },
          "403" : {
            "description" : "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502" : {
            "description" : "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404" : {
            "description" : "Not found - The requested resource is not found"
          },
          "415" : {
            "description" : "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405" : {
            "description" : "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406" : {
            "description" : "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409" : {
            "description" : "Conflict - If a resource being created already exists"
          }
        },
        "parameters" : [ {
          "in" : "header",
          "name" : "Authorization",
          "description" : "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
          "type" : "string",
          "required" : true
        }, {
          "schema" : {
            "$ref" : "#/definitions/TaskSiteInstructionsPost"
          },
          "in" : "body",
          "name" : "Body",
          "description" : "Body",
          "required" : true
        } ],
        "tags" : [ "task-site-instructions" ]
      },
      "get" : {
        "summary" : "Retrieve a list of TaskSiteInstructions",
        "operationId" : "getTaskSiteInstructions",
        "responses" : {
          "200" : {
            "description" : "OK - Everything worked as expected",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/TaskSiteInstructionsCollection"
              }
            }
          },
          "400" : {
            "description" : "Bad Request - Often due to a missing request parameter"
          },
          "401" : {
            "description" : "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500" : {
            "description" : "Server error - Something went wrong on the Cloud Elements server"
          },
          "403" : {
            "description" : "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502" : {
            "description" : "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404" : {
            "description" : "Not found - The requested resource is not found"
          },
          "415" : {
            "description" : "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405" : {
            "description" : "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406" : {
            "description" : "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409" : {
            "description" : "Conflict - If a resource being created already exists"
          }
        },
        "parameters" : [ {
          "in" : "header",
          "name" : "Authorization",
          "description" : "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
          "type" : "string",
          "required" : true
        }, {
          "in" : "query",
          "name" : "includeInactive",
          "description" : "Return the list of inactive objects in the results. By default only active objects are returned",
          "type" : "string",
          "required" : false
        }, {
          "in" : "query",
          "name" : "[att]",
          "description" : "Filter any attribute by its value. You can search subobjects by using the qualified attribute name. ",
          "type" : "string",
          "required" : false
        }, {
          "schema" : {
            "$ref" : "#/definitions/array"
          },
          "in" : "query",
          "name" : "sort",
          "description" : "The collection items sort field and order (prefix with \"-\" for descending sort].",
          "required" : false
        }, {
          "in" : "query",
          "name" : "include",
          "description" : "Expand response to get full related object intead of ID. See the expand guide for more info.",
          "type" : "string",
          "required" : false
        }, {
          "in" : "query",
          "name" : "fields",
          "description" : "List of fields you want returned separated by a coma. You can alias the returned field by adding the alias after a column",
          "type" : "string",
          "required" : false
        }, {
          "in" : "query",
          "name" : "limit",
          "description" : "The collection items limit",
          "type" : "integer",
          "required" : false
        }, {
          "in" : "query",
          "name" : "q",
          "description" : "Global search for the object",
          "type" : "string",
          "required" : false
        }, {
          "in" : "query",
          "name" : "[att]:contains",
          "description" : "Search a specific attribute partially",
          "type" : "string",
          "required" : false
        }, {
          "in" : "query",
          "name" : "offset",
          "description" : "The collection items offset",
          "type" : "integer",
          "required" : false
        }, {
          "in" : "query",
          "name" : "[att]:in",
          "description" : "Filter the collection by attribute list. ",
          "type" : "string",
          "required" : false
        } ],
        "tags" : [ "task-site-instructions" ]
      }
    },
    "/task-site-instructions/{id}" : {
      "patch" : {
        "summary" : "Partially edit a TaskSiteInstructions",
        "operationId" : "updateTaskSiteInstructionById",
        "responses" : {
          "200" : {
            "description" : "OK - Everything worked as expected",
            "schema" : {
              "$ref" : "#/definitions/TaskSiteInstructionsItem"
            }
          },
          "400" : {
            "description" : "Bad Request - Often due to a missing request parameter"
          },
          "401" : {
            "description" : "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500" : {
            "description" : "Server error - Something went wrong on the Cloud Elements server"
          },
          "403" : {
            "description" : "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502" : {
            "description" : "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404" : {
            "description" : "Not found - The requested resource is not found"
          },
          "415" : {
            "description" : "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405" : {
            "description" : "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406" : {
            "description" : "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409" : {
            "description" : "Conflict - If a resource being created already exists"
          }
        },
        "parameters" : [ {
          "in" : "header",
          "name" : "Authorization",
          "description" : "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
          "type" : "string",
          "required" : true
        }, {
          "in" : "path",
          "name" : "id",
          "description" : "The resource identifier",
          "type" : "string",
          "required" : true
        }, {
          "schema" : {
            "$ref" : "#/definitions/TaskSiteInstructionsPatch"
          },
          "in" : "body",
          "name" : "JSON",
          "description" : "JSON",
          "required" : true
        } ],
        "tags" : [ "task-site-instructions" ]
      },
      "get" : {
        "summary" : "Retrieve a TaskSiteInstructions",
        "operationId" : "getTaskSiteInstructionById",
        "responses" : {
          "200" : {
            "description" : "OK - Everything worked as expected",
            "schema" : {
              "$ref" : "#/definitions/TaskSiteInstructionsItem"
            }
          },
          "400" : {
            "description" : "Bad Request - Often due to a missing request parameter"
          },
          "401" : {
            "description" : "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500" : {
            "description" : "Server error - Something went wrong on the Cloud Elements server"
          },
          "403" : {
            "description" : "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502" : {
            "description" : "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404" : {
            "description" : "Not found - The requested resource is not found"
          },
          "415" : {
            "description" : "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405" : {
            "description" : "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406" : {
            "description" : "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409" : {
            "description" : "Conflict - If a resource being created already exists"
          }
        },
        "parameters" : [ {
          "in" : "header",
          "name" : "Authorization",
          "description" : "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
          "type" : "string",
          "required" : true
        }, {
          "in" : "path",
          "name" : "id",
          "description" : "The resource identifier",
          "type" : "string",
          "required" : true
        } ],
        "tags" : [ "task-site-instructions" ]
      },
      "put" : {
        "summary" : "Update a TaskSiteInstructions",
        "operationId" : "replaceTaskSiteInstructionById",
        "responses" : {
          "200" : {
            "description" : "OK - Everything worked as expected",
            "schema" : {
              "$ref" : "#/definitions/TaskSiteInstructionsPut"
            }
          },
          "400" : {
            "description" : "Bad Request - Often due to a missing request parameter"
          },
          "401" : {
            "description" : "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500" : {
            "description" : "Server error - Something went wrong on the Cloud Elements server"
          },
          "403" : {
            "description" : "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502" : {
            "description" : "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404" : {
            "description" : "Not found - The requested resource is not found"
          },
          "415" : {
            "description" : "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405" : {
            "description" : "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406" : {
            "description" : "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409" : {
            "description" : "Conflict - If a resource being created already exists"
          }
        },
        "parameters" : [ {
          "in" : "header",
          "name" : "Authorization",
          "description" : "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
          "type" : "string",
          "required" : true
        }, {
          "in" : "path",
          "name" : "id",
          "description" : "The resource identifier",
          "type" : "string",
          "required" : true
        }, {
          "schema" : {
            "$ref" : "#/definitions/TaskSiteInstructionsPut"
          },
          "in" : "body",
          "name" : "JSON",
          "description" : "JSON",
          "required" : true
        } ],
        "tags" : [ "task-site-instructions" ]
      }
    },
    "/task-site-settings" : {
      "post" : {
        "summary" : "Create a TaskSiteSettings",
        "operationId" : "createTaskSiteSetting",
        "responses" : {
          "200" : {
            "description" : "OK - Everything worked as expected",
            "schema" : {
              "$ref" : "#/definitions/TaskSiteSettingsItem"
            }
          },
          "400" : {
            "description" : "Bad Request - Often due to a missing request parameter"
          },
          "401" : {
            "description" : "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500" : {
            "description" : "Server error - Something went wrong on the Cloud Elements server"
          },
          "403" : {
            "description" : "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502" : {
            "description" : "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404" : {
            "description" : "Not found - The requested resource is not found"
          },
          "415" : {
            "description" : "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405" : {
            "description" : "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406" : {
            "description" : "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409" : {
            "description" : "Conflict - If a resource being created already exists"
          }
        },
        "parameters" : [ {
          "in" : "header",
          "name" : "Authorization",
          "description" : "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
          "type" : "string",
          "required" : true
        }, {
          "schema" : {
            "$ref" : "#/definitions/TaskSiteSettingsPost"
          },
          "in" : "body",
          "name" : "Body",
          "description" : "Body",
          "required" : true
        } ],
        "tags" : [ "task-site-settings" ]
      },
      "get" : {
        "summary" : "Retrieve a list of TaskSiteSettings",
        "operationId" : "getTaskSiteSettings",
        "responses" : {
          "200" : {
            "description" : "OK - Everything worked as expected",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/TaskSiteSettingsCollection"
              }
            }
          },
          "400" : {
            "description" : "Bad Request - Often due to a missing request parameter"
          },
          "401" : {
            "description" : "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500" : {
            "description" : "Server error - Something went wrong on the Cloud Elements server"
          },
          "403" : {
            "description" : "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502" : {
            "description" : "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404" : {
            "description" : "Not found - The requested resource is not found"
          },
          "415" : {
            "description" : "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405" : {
            "description" : "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406" : {
            "description" : "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409" : {
            "description" : "Conflict - If a resource being created already exists"
          }
        },
        "parameters" : [ {
          "in" : "header",
          "name" : "Authorization",
          "description" : "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
          "type" : "string",
          "required" : true
        }, {
          "in" : "query",
          "name" : "include",
          "description" : "Expand response to get full related object intead of ID. See the expand guide for more info.",
          "type" : "string",
          "required" : false
        }, {
          "in" : "query",
          "name" : "fields",
          "description" : "List of fields you want returned separated by a coma. You can alias the returned field by adding the alias after a column",
          "type" : "string",
          "required" : false
        }, {
          "in" : "query",
          "name" : "offset",
          "description" : "The collection items offset",
          "type" : "integer",
          "required" : false
        }, {
          "in" : "query",
          "name" : "limit",
          "description" : "The collection items limit",
          "type" : "integer",
          "required" : false
        }, {
          "in" : "query",
          "name" : "q",
          "description" : "Global search for the object",
          "type" : "string",
          "required" : false
        }, {
          "in" : "query",
          "name" : "[att]:in",
          "description" : "Filter the collection by attribute list. ",
          "type" : "string",
          "required" : false
        }, {
          "in" : "query",
          "name" : "[att]",
          "description" : "Filter any attribute by its value. You can search subobjects by using the qualified attribute name. ",
          "type" : "string",
          "required" : false
        }, {
          "schema" : {
            "$ref" : "#/definitions/array"
          },
          "in" : "query",
          "name" : "sort",
          "description" : "The collection items sort field and order (prefix with \"-\" for descending sort].",
          "required" : false
        }, {
          "in" : "query",
          "name" : "includeInactive",
          "description" : "Return the list of inactive objects in the results. By default only active objects are returned",
          "type" : "string",
          "required" : false
        }, {
          "in" : "query",
          "name" : "[att]:contains",
          "description" : "Search a specific attribute partially",
          "type" : "string",
          "required" : false
        } ],
        "tags" : [ "task-site-settings" ]
      }
    },
    "/task-site-settings/{id}" : {
      "patch" : {
        "summary" : "Partially edit a TaskSiteSettings",
        "operationId" : "updateTaskSiteSettingById",
        "responses" : {
          "200" : {
            "description" : "OK - Everything worked as expected",
            "schema" : {
              "$ref" : "#/definitions/TaskSiteSettingsItem"
            }
          },
          "400" : {
            "description" : "Bad Request - Often due to a missing request parameter"
          },
          "401" : {
            "description" : "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500" : {
            "description" : "Server error - Something went wrong on the Cloud Elements server"
          },
          "403" : {
            "description" : "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502" : {
            "description" : "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404" : {
            "description" : "Not found - The requested resource is not found"
          },
          "415" : {
            "description" : "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405" : {
            "description" : "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406" : {
            "description" : "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409" : {
            "description" : "Conflict - If a resource being created already exists"
          }
        },
        "parameters" : [ {
          "in" : "header",
          "name" : "Authorization",
          "description" : "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
          "type" : "string",
          "required" : true
        }, {
          "in" : "path",
          "name" : "id",
          "description" : "The resource identifier",
          "type" : "string",
          "required" : true
        }, {
          "schema" : {
            "$ref" : "#/definitions/TaskSiteSettingsPatch"
          },
          "in" : "body",
          "name" : "JSON",
          "description" : "JSON",
          "required" : true
        } ],
        "tags" : [ "task-site-settings" ]
      },
      "get" : {
        "summary" : "Retrieve a TaskSiteSettings",
        "operationId" : "getTaskSiteSettingById",
        "responses" : {
          "200" : {
            "description" : "OK - Everything worked as expected",
            "schema" : {
              "$ref" : "#/definitions/TaskSiteSettingsItem"
            }
          },
          "400" : {
            "description" : "Bad Request - Often due to a missing request parameter"
          },
          "401" : {
            "description" : "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500" : {
            "description" : "Server error - Something went wrong on the Cloud Elements server"
          },
          "403" : {
            "description" : "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502" : {
            "description" : "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404" : {
            "description" : "Not found - The requested resource is not found"
          },
          "415" : {
            "description" : "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405" : {
            "description" : "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406" : {
            "description" : "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409" : {
            "description" : "Conflict - If a resource being created already exists"
          }
        },
        "parameters" : [ {
          "in" : "header",
          "name" : "Authorization",
          "description" : "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
          "type" : "string",
          "required" : true
        }, {
          "in" : "path",
          "name" : "id",
          "description" : "The resource identifier",
          "type" : "string",
          "required" : true
        } ],
        "tags" : [ "task-site-settings" ]
      },
      "put" : {
        "summary" : "Update a TaskSiteSettings",
        "operationId" : "replaceTaskSiteSettingById",
        "responses" : {
          "200" : {
            "description" : "OK - Everything worked as expected",
            "schema" : {
              "$ref" : "#/definitions/TaskSiteSettingsPut"
            }
          },
          "400" : {
            "description" : "Bad Request - Often due to a missing request parameter"
          },
          "401" : {
            "description" : "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500" : {
            "description" : "Server error - Something went wrong on the Cloud Elements server"
          },
          "403" : {
            "description" : "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502" : {
            "description" : "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404" : {
            "description" : "Not found - The requested resource is not found"
          },
          "415" : {
            "description" : "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405" : {
            "description" : "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406" : {
            "description" : "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409" : {
            "description" : "Conflict - If a resource being created already exists"
          }
        },
        "parameters" : [ {
          "in" : "header",
          "name" : "Authorization",
          "description" : "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
          "type" : "string",
          "required" : true
        }, {
          "in" : "path",
          "name" : "id",
          "description" : "The resource identifier",
          "type" : "string",
          "required" : true
        }, {
          "schema" : {
            "$ref" : "#/definitions/TaskSiteSettingsPut"
          },
          "in" : "body",
          "name" : "JSON",
          "description" : "JSON",
          "required" : true
        } ],
        "tags" : [ "task-site-settings" ]
      }
    },
    "/task-types" : {
      "post" : {
        "summary" : "Create a TaskTypes",
        "operationId" : "createTaskType",
        "responses" : {
          "200" : {
            "description" : "OK - Everything worked as expected",
            "schema" : {
              "$ref" : "#/definitions/TaskTypesItem"
            }
          },
          "400" : {
            "description" : "Bad Request - Often due to a missing request parameter"
          },
          "401" : {
            "description" : "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500" : {
            "description" : "Server error - Something went wrong on the Cloud Elements server"
          },
          "403" : {
            "description" : "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502" : {
            "description" : "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404" : {
            "description" : "Not found - The requested resource is not found"
          },
          "415" : {
            "description" : "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405" : {
            "description" : "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406" : {
            "description" : "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409" : {
            "description" : "Conflict - If a resource being created already exists"
          }
        },
        "parameters" : [ {
          "in" : "header",
          "name" : "Authorization",
          "description" : "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
          "type" : "string",
          "required" : true
        }, {
          "schema" : {
            "$ref" : "#/definitions/TaskTypesPost"
          },
          "in" : "body",
          "name" : "Body",
          "description" : "Body",
          "required" : true
        } ],
        "tags" : [ "task-types" ]
      },
      "get" : {
        "summary" : "Retrieve a list of TaskTypes",
        "operationId" : "getTaskTypes",
        "responses" : {
          "200" : {
            "description" : "OK - Everything worked as expected",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/TaskTypesCollection"
              }
            }
          },
          "400" : {
            "description" : "Bad Request - Often due to a missing request parameter"
          },
          "401" : {
            "description" : "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500" : {
            "description" : "Server error - Something went wrong on the Cloud Elements server"
          },
          "403" : {
            "description" : "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502" : {
            "description" : "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404" : {
            "description" : "Not found - The requested resource is not found"
          },
          "415" : {
            "description" : "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405" : {
            "description" : "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406" : {
            "description" : "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409" : {
            "description" : "Conflict - If a resource being created already exists"
          }
        },
        "parameters" : [ {
          "in" : "header",
          "name" : "Authorization",
          "description" : "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
          "type" : "string",
          "required" : true
        }, {
          "in" : "query",
          "name" : "limit",
          "description" : "The collection items limit",
          "type" : "integer",
          "required" : false
        }, {
          "in" : "query",
          "name" : "[att]:contains",
          "description" : "Search a specific attribute partially",
          "type" : "string",
          "required" : false
        }, {
          "in" : "query",
          "name" : "[att]:in",
          "description" : "Filter the collection by attribute list. ",
          "type" : "string",
          "required" : false
        }, {
          "in" : "query",
          "name" : "fields",
          "description" : "List of fields you want returned separated by a coma. You can alias the returned field by adding the alias after a column",
          "type" : "string",
          "required" : false
        }, {
          "in" : "query",
          "name" : "include",
          "description" : "Expand response to get full related object intead of ID. See the expand guide for more info.",
          "type" : "string",
          "required" : false
        }, {
          "schema" : {
            "$ref" : "#/definitions/array"
          },
          "in" : "query",
          "name" : "sort",
          "description" : "The collection items sort field and order (prefix with \"-\" for descending sort].",
          "required" : false
        }, {
          "in" : "query",
          "name" : "q",
          "description" : "Global search for the object",
          "type" : "string",
          "required" : false
        }, {
          "in" : "query",
          "name" : "[att]",
          "description" : "Filter any attribute by its value. You can search subobjects by using the qualified attribute name. ",
          "type" : "string",
          "required" : false
        }, {
          "in" : "query",
          "name" : "offset",
          "description" : "The collection items offset",
          "type" : "integer",
          "required" : false
        }, {
          "in" : "query",
          "name" : "includeInactive",
          "description" : "Return the list of inactive objects in the results. By default only active objects are returned",
          "type" : "string",
          "required" : false
        } ],
        "tags" : [ "task-types" ]
      }
    },
    "/task-types/{id}" : {
      "patch" : {
        "summary" : "Partially edit a TaskTypes",
        "operationId" : "updateTaskTypeById",
        "responses" : {
          "200" : {
            "description" : "OK - Everything worked as expected",
            "schema" : {
              "$ref" : "#/definitions/TaskTypesItem"
            }
          },
          "400" : {
            "description" : "Bad Request - Often due to a missing request parameter"
          },
          "401" : {
            "description" : "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500" : {
            "description" : "Server error - Something went wrong on the Cloud Elements server"
          },
          "403" : {
            "description" : "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502" : {
            "description" : "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404" : {
            "description" : "Not found - The requested resource is not found"
          },
          "415" : {
            "description" : "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405" : {
            "description" : "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406" : {
            "description" : "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409" : {
            "description" : "Conflict - If a resource being created already exists"
          }
        },
        "parameters" : [ {
          "in" : "header",
          "name" : "Authorization",
          "description" : "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
          "type" : "string",
          "required" : true
        }, {
          "in" : "path",
          "name" : "id",
          "description" : "The resource identifier",
          "type" : "string",
          "required" : true
        }, {
          "schema" : {
            "$ref" : "#/definitions/TaskTypesPatch"
          },
          "in" : "body",
          "name" : "JSON",
          "description" : "JSON",
          "required" : true
        } ],
        "tags" : [ "task-types" ]
      },
      "get" : {
        "summary" : "Retrieve a TaskTypes",
        "operationId" : "getTaskTypeById",
        "responses" : {
          "200" : {
            "description" : "OK - Everything worked as expected",
            "schema" : {
              "$ref" : "#/definitions/TaskTypesItem"
            }
          },
          "400" : {
            "description" : "Bad Request - Often due to a missing request parameter"
          },
          "401" : {
            "description" : "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500" : {
            "description" : "Server error - Something went wrong on the Cloud Elements server"
          },
          "403" : {
            "description" : "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502" : {
            "description" : "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404" : {
            "description" : "Not found - The requested resource is not found"
          },
          "415" : {
            "description" : "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405" : {
            "description" : "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406" : {
            "description" : "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409" : {
            "description" : "Conflict - If a resource being created already exists"
          }
        },
        "parameters" : [ {
          "in" : "header",
          "name" : "Authorization",
          "description" : "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
          "type" : "string",
          "required" : true
        }, {
          "in" : "path",
          "name" : "id",
          "description" : "The resource identifier",
          "type" : "string",
          "required" : true
        } ],
        "tags" : [ "task-types" ]
      },
      "put" : {
        "summary" : "Update a TaskTypes",
        "operationId" : "replaceTaskTypeById",
        "responses" : {
          "200" : {
            "description" : "OK - Everything worked as expected",
            "schema" : {
              "$ref" : "#/definitions/TaskTypesPut"
            }
          },
          "400" : {
            "description" : "Bad Request - Often due to a missing request parameter"
          },
          "401" : {
            "description" : "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500" : {
            "description" : "Server error - Something went wrong on the Cloud Elements server"
          },
          "403" : {
            "description" : "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502" : {
            "description" : "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404" : {
            "description" : "Not found - The requested resource is not found"
          },
          "415" : {
            "description" : "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405" : {
            "description" : "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406" : {
            "description" : "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409" : {
            "description" : "Conflict - If a resource being created already exists"
          }
        },
        "parameters" : [ {
          "in" : "header",
          "name" : "Authorization",
          "description" : "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
          "type" : "string",
          "required" : true
        }, {
          "in" : "path",
          "name" : "id",
          "description" : "The resource identifier",
          "type" : "string",
          "required" : true
        }, {
          "schema" : {
            "$ref" : "#/definitions/TaskTypesPut"
          },
          "in" : "body",
          "name" : "JSON",
          "description" : "JSON",
          "required" : true
        } ],
        "tags" : [ "task-types" ]
      }
    },
    "/tax-class-items" : {
      "post" : {
        "summary" : "Create a TaxClassItems",
        "operationId" : "createTaxClassItem",
        "responses" : {
          "200" : {
            "description" : "OK - Everything worked as expected",
            "schema" : {
              "$ref" : "#/definitions/TaxClassItemsItem"
            }
          },
          "400" : {
            "description" : "Bad Request - Often due to a missing request parameter"
          },
          "401" : {
            "description" : "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500" : {
            "description" : "Server error - Something went wrong on the Cloud Elements server"
          },
          "403" : {
            "description" : "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502" : {
            "description" : "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404" : {
            "description" : "Not found - The requested resource is not found"
          },
          "415" : {
            "description" : "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405" : {
            "description" : "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406" : {
            "description" : "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409" : {
            "description" : "Conflict - If a resource being created already exists"
          }
        },
        "parameters" : [ {
          "in" : "header",
          "name" : "Authorization",
          "description" : "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
          "type" : "string",
          "required" : true
        }, {
          "schema" : {
            "$ref" : "#/definitions/TaxClassItemsPost"
          },
          "in" : "body",
          "name" : "Body",
          "description" : "Body",
          "required" : true
        } ],
        "tags" : [ "tax-class-items" ]
      },
      "get" : {
        "summary" : "Retrieve a list of TaxClassItems",
        "operationId" : "getTaxClassItems",
        "responses" : {
          "200" : {
            "description" : "OK - Everything worked as expected",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/TaxClassItemsCollection"
              }
            }
          },
          "400" : {
            "description" : "Bad Request - Often due to a missing request parameter"
          },
          "401" : {
            "description" : "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500" : {
            "description" : "Server error - Something went wrong on the Cloud Elements server"
          },
          "403" : {
            "description" : "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502" : {
            "description" : "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404" : {
            "description" : "Not found - The requested resource is not found"
          },
          "415" : {
            "description" : "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405" : {
            "description" : "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406" : {
            "description" : "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409" : {
            "description" : "Conflict - If a resource being created already exists"
          }
        },
        "parameters" : [ {
          "in" : "header",
          "name" : "Authorization",
          "description" : "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
          "type" : "string",
          "required" : true
        }, {
          "in" : "query",
          "name" : "include",
          "description" : "Expand response to get full related object intead of ID. See the expand guide for more info.",
          "type" : "string",
          "required" : false
        }, {
          "schema" : {
            "$ref" : "#/definitions/array"
          },
          "in" : "query",
          "name" : "sort",
          "description" : "The collection items sort field and order (prefix with \"-\" for descending sort].",
          "required" : false
        }, {
          "in" : "query",
          "name" : "[att]",
          "description" : "Filter any attribute by its value. You can search subobjects by using the qualified attribute name. ",
          "type" : "string",
          "required" : false
        }, {
          "in" : "query",
          "name" : "[att]:in",
          "description" : "Filter the collection by attribute list. ",
          "type" : "string",
          "required" : false
        }, {
          "in" : "query",
          "name" : "[att]:contains",
          "description" : "Search a specific attribute partially",
          "type" : "string",
          "required" : false
        }, {
          "in" : "query",
          "name" : "includeInactive",
          "description" : "Return the list of inactive objects in the results. By default only active objects are returned",
          "type" : "string",
          "required" : false
        }, {
          "in" : "query",
          "name" : "limit",
          "description" : "The collection items limit",
          "type" : "integer",
          "required" : false
        }, {
          "in" : "query",
          "name" : "offset",
          "description" : "The collection items offset",
          "type" : "integer",
          "required" : false
        }, {
          "in" : "query",
          "name" : "q",
          "description" : "Global search for the object",
          "type" : "string",
          "required" : false
        }, {
          "in" : "query",
          "name" : "fields",
          "description" : "List of fields you want returned separated by a coma. You can alias the returned field by adding the alias after a column",
          "type" : "string",
          "required" : false
        } ],
        "tags" : [ "tax-class-items" ]
      }
    },
    "/tax-class-items/{id}" : {
      "patch" : {
        "summary" : "Partially edit a TaxClassItems",
        "operationId" : "updateTaxClassItemById",
        "responses" : {
          "200" : {
            "description" : "OK - Everything worked as expected",
            "schema" : {
              "$ref" : "#/definitions/TaxClassItemsItem"
            }
          },
          "400" : {
            "description" : "Bad Request - Often due to a missing request parameter"
          },
          "401" : {
            "description" : "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500" : {
            "description" : "Server error - Something went wrong on the Cloud Elements server"
          },
          "403" : {
            "description" : "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502" : {
            "description" : "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404" : {
            "description" : "Not found - The requested resource is not found"
          },
          "415" : {
            "description" : "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405" : {
            "description" : "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406" : {
            "description" : "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409" : {
            "description" : "Conflict - If a resource being created already exists"
          }
        },
        "parameters" : [ {
          "in" : "header",
          "name" : "Authorization",
          "description" : "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
          "type" : "string",
          "required" : true
        }, {
          "in" : "path",
          "name" : "id",
          "description" : "The resource identifier",
          "type" : "string",
          "required" : true
        }, {
          "schema" : {
            "$ref" : "#/definitions/TaxClassItemsPatch"
          },
          "in" : "body",
          "name" : "JSON",
          "description" : "JSON",
          "required" : true
        } ],
        "tags" : [ "tax-class-items" ]
      },
      "get" : {
        "summary" : "Retrieve a TaxClassItems",
        "operationId" : "getTaxClassItemById",
        "responses" : {
          "200" : {
            "description" : "OK - Everything worked as expected",
            "schema" : {
              "$ref" : "#/definitions/TaxClassItemsItem"
            }
          },
          "400" : {
            "description" : "Bad Request - Often due to a missing request parameter"
          },
          "401" : {
            "description" : "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500" : {
            "description" : "Server error - Something went wrong on the Cloud Elements server"
          },
          "403" : {
            "description" : "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502" : {
            "description" : "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404" : {
            "description" : "Not found - The requested resource is not found"
          },
          "415" : {
            "description" : "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405" : {
            "description" : "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406" : {
            "description" : "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409" : {
            "description" : "Conflict - If a resource being created already exists"
          }
        },
        "parameters" : [ {
          "in" : "header",
          "name" : "Authorization",
          "description" : "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
          "type" : "string",
          "required" : true
        }, {
          "in" : "path",
          "name" : "id",
          "description" : "The resource identifier",
          "type" : "string",
          "required" : true
        } ],
        "tags" : [ "tax-class-items" ]
      },
      "put" : {
        "summary" : "Update a TaxClassItems",
        "operationId" : "replaceTaxClassItemById",
        "responses" : {
          "200" : {
            "description" : "OK - Everything worked as expected",
            "schema" : {
              "$ref" : "#/definitions/TaxClassItemsPut"
            }
          },
          "400" : {
            "description" : "Bad Request - Often due to a missing request parameter"
          },
          "401" : {
            "description" : "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500" : {
            "description" : "Server error - Something went wrong on the Cloud Elements server"
          },
          "403" : {
            "description" : "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502" : {
            "description" : "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404" : {
            "description" : "Not found - The requested resource is not found"
          },
          "415" : {
            "description" : "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405" : {
            "description" : "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406" : {
            "description" : "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409" : {
            "description" : "Conflict - If a resource being created already exists"
          }
        },
        "parameters" : [ {
          "in" : "header",
          "name" : "Authorization",
          "description" : "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
          "type" : "string",
          "required" : true
        }, {
          "in" : "path",
          "name" : "id",
          "description" : "The resource identifier",
          "type" : "string",
          "required" : true
        }, {
          "schema" : {
            "$ref" : "#/definitions/TaxClassItemsPut"
          },
          "in" : "body",
          "name" : "JSON",
          "description" : "JSON",
          "required" : true
        } ],
        "tags" : [ "tax-class-items" ]
      }
    },
    "/tax-classes" : {
      "post" : {
        "summary" : "Create a TaxClasses",
        "operationId" : "createTaxClasse",
        "responses" : {
          "200" : {
            "description" : "OK - Everything worked as expected",
            "schema" : {
              "$ref" : "#/definitions/TaxClassesItem"
            }
          },
          "400" : {
            "description" : "Bad Request - Often due to a missing request parameter"
          },
          "401" : {
            "description" : "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500" : {
            "description" : "Server error - Something went wrong on the Cloud Elements server"
          },
          "403" : {
            "description" : "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502" : {
            "description" : "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404" : {
            "description" : "Not found - The requested resource is not found"
          },
          "415" : {
            "description" : "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405" : {
            "description" : "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406" : {
            "description" : "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409" : {
            "description" : "Conflict - If a resource being created already exists"
          }
        },
        "parameters" : [ {
          "in" : "header",
          "name" : "Authorization",
          "description" : "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
          "type" : "string",
          "required" : true
        }, {
          "schema" : {
            "$ref" : "#/definitions/TaxClassesPost"
          },
          "in" : "body",
          "name" : "Body",
          "description" : "Body",
          "required" : true
        } ],
        "tags" : [ "tax-classes" ]
      },
      "get" : {
        "summary" : "Retrieve a list of TaxClasses",
        "operationId" : "getTaxClasses",
        "responses" : {
          "200" : {
            "description" : "OK - Everything worked as expected",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/TaxClassesCollection"
              }
            }
          },
          "400" : {
            "description" : "Bad Request - Often due to a missing request parameter"
          },
          "401" : {
            "description" : "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500" : {
            "description" : "Server error - Something went wrong on the Cloud Elements server"
          },
          "403" : {
            "description" : "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502" : {
            "description" : "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404" : {
            "description" : "Not found - The requested resource is not found"
          },
          "415" : {
            "description" : "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405" : {
            "description" : "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406" : {
            "description" : "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409" : {
            "description" : "Conflict - If a resource being created already exists"
          }
        },
        "parameters" : [ {
          "in" : "header",
          "name" : "Authorization",
          "description" : "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
          "type" : "string",
          "required" : true
        }, {
          "in" : "query",
          "name" : "fields",
          "description" : "List of fields you want returned separated by a coma. You can alias the returned field by adding the alias after a column",
          "type" : "string",
          "required" : false
        }, {
          "in" : "query",
          "name" : "offset",
          "description" : "The collection items offset",
          "type" : "integer",
          "required" : false
        }, {
          "in" : "query",
          "name" : "limit",
          "description" : "The collection items limit",
          "type" : "integer",
          "required" : false
        }, {
          "in" : "query",
          "name" : "includeInactive",
          "description" : "Return the list of inactive objects in the results. By default only active objects are returned",
          "type" : "string",
          "required" : false
        }, {
          "in" : "query",
          "name" : "[att]:contains",
          "description" : "Search a specific attribute partially",
          "type" : "string",
          "required" : false
        }, {
          "schema" : {
            "$ref" : "#/definitions/array"
          },
          "in" : "query",
          "name" : "sort",
          "description" : "The collection items sort field and order (prefix with \"-\" for descending sort].",
          "required" : false
        }, {
          "in" : "query",
          "name" : "include",
          "description" : "Expand response to get full related object intead of ID. See the expand guide for more info.",
          "type" : "string",
          "required" : false
        }, {
          "in" : "query",
          "name" : "q",
          "description" : "Global search for the object",
          "type" : "string",
          "required" : false
        }, {
          "in" : "query",
          "name" : "[att]",
          "description" : "Filter any attribute by its value. You can search subobjects by using the qualified attribute name. ",
          "type" : "string",
          "required" : false
        }, {
          "in" : "query",
          "name" : "[att]:in",
          "description" : "Filter the collection by attribute list. ",
          "type" : "string",
          "required" : false
        } ],
        "tags" : [ "tax-classes" ]
      }
    },
    "/tax-classes/{id}" : {
      "patch" : {
        "summary" : "Partially edit a TaxClasses",
        "operationId" : "updateTaxClasseById",
        "responses" : {
          "200" : {
            "description" : "OK - Everything worked as expected",
            "schema" : {
              "$ref" : "#/definitions/TaxClassesItem"
            }
          },
          "400" : {
            "description" : "Bad Request - Often due to a missing request parameter"
          },
          "401" : {
            "description" : "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500" : {
            "description" : "Server error - Something went wrong on the Cloud Elements server"
          },
          "403" : {
            "description" : "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502" : {
            "description" : "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404" : {
            "description" : "Not found - The requested resource is not found"
          },
          "415" : {
            "description" : "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405" : {
            "description" : "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406" : {
            "description" : "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409" : {
            "description" : "Conflict - If a resource being created already exists"
          }
        },
        "parameters" : [ {
          "in" : "header",
          "name" : "Authorization",
          "description" : "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
          "type" : "string",
          "required" : true
        }, {
          "in" : "path",
          "name" : "id",
          "description" : "The resource identifier",
          "type" : "string",
          "required" : true
        }, {
          "schema" : {
            "$ref" : "#/definitions/TaxClassesPatch"
          },
          "in" : "body",
          "name" : "JSON",
          "description" : "JSON",
          "required" : true
        } ],
        "tags" : [ "tax-classes" ]
      },
      "get" : {
        "summary" : "Retrieve a TaxClasses",
        "operationId" : "getTaxClasseById",
        "responses" : {
          "200" : {
            "description" : "OK - Everything worked as expected",
            "schema" : {
              "$ref" : "#/definitions/TaxClassesItem"
            }
          },
          "400" : {
            "description" : "Bad Request - Often due to a missing request parameter"
          },
          "401" : {
            "description" : "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500" : {
            "description" : "Server error - Something went wrong on the Cloud Elements server"
          },
          "403" : {
            "description" : "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502" : {
            "description" : "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404" : {
            "description" : "Not found - The requested resource is not found"
          },
          "415" : {
            "description" : "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405" : {
            "description" : "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406" : {
            "description" : "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409" : {
            "description" : "Conflict - If a resource being created already exists"
          }
        },
        "parameters" : [ {
          "in" : "header",
          "name" : "Authorization",
          "description" : "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
          "type" : "string",
          "required" : true
        }, {
          "in" : "path",
          "name" : "id",
          "description" : "The resource identifier",
          "type" : "string",
          "required" : true
        } ],
        "tags" : [ "tax-classes" ]
      },
      "put" : {
        "summary" : "Update a TaxClasses",
        "operationId" : "replaceTaxClasseById",
        "responses" : {
          "200" : {
            "description" : "OK - Everything worked as expected",
            "schema" : {
              "$ref" : "#/definitions/TaxClassesPut"
            }
          },
          "400" : {
            "description" : "Bad Request - Often due to a missing request parameter"
          },
          "401" : {
            "description" : "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500" : {
            "description" : "Server error - Something went wrong on the Cloud Elements server"
          },
          "403" : {
            "description" : "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502" : {
            "description" : "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404" : {
            "description" : "Not found - The requested resource is not found"
          },
          "415" : {
            "description" : "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405" : {
            "description" : "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406" : {
            "description" : "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409" : {
            "description" : "Conflict - If a resource being created already exists"
          }
        },
        "parameters" : [ {
          "in" : "header",
          "name" : "Authorization",
          "description" : "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
          "type" : "string",
          "required" : true
        }, {
          "in" : "path",
          "name" : "id",
          "description" : "The resource identifier",
          "type" : "string",
          "required" : true
        }, {
          "schema" : {
            "$ref" : "#/definitions/TaxClassesPut"
          },
          "in" : "body",
          "name" : "JSON",
          "description" : "JSON",
          "required" : true
        } ],
        "tags" : [ "tax-classes" ]
      }
    },
    "/vendors" : {
      "post" : {
        "summary" : "Create a Vendors",
        "operationId" : "createVendor",
        "responses" : {
          "200" : {
            "description" : "OK - Everything worked as expected",
            "schema" : {
              "$ref" : "#/definitions/VendorsItem"
            }
          },
          "400" : {
            "description" : "Bad Request - Often due to a missing request parameter"
          },
          "401" : {
            "description" : "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500" : {
            "description" : "Server error - Something went wrong on the Cloud Elements server"
          },
          "403" : {
            "description" : "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502" : {
            "description" : "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404" : {
            "description" : "Not found - The requested resource is not found"
          },
          "415" : {
            "description" : "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405" : {
            "description" : "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406" : {
            "description" : "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409" : {
            "description" : "Conflict - If a resource being created already exists"
          }
        },
        "parameters" : [ {
          "in" : "header",
          "name" : "Authorization",
          "description" : "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
          "type" : "string",
          "required" : true
        }, {
          "schema" : {
            "$ref" : "#/definitions/VendorsPost"
          },
          "in" : "body",
          "name" : "Body",
          "description" : "Body",
          "required" : true
        } ],
        "tags" : [ "vendors" ]
      },
      "get" : {
        "summary" : "Retrieve a list of Vendors",
        "operationId" : "getVendors",
        "responses" : {
          "200" : {
            "description" : "OK - Everything worked as expected",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/VendorsCollection"
              }
            }
          },
          "400" : {
            "description" : "Bad Request - Often due to a missing request parameter"
          },
          "401" : {
            "description" : "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500" : {
            "description" : "Server error - Something went wrong on the Cloud Elements server"
          },
          "403" : {
            "description" : "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502" : {
            "description" : "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404" : {
            "description" : "Not found - The requested resource is not found"
          },
          "415" : {
            "description" : "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405" : {
            "description" : "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406" : {
            "description" : "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409" : {
            "description" : "Conflict - If a resource being created already exists"
          }
        },
        "parameters" : [ {
          "in" : "header",
          "name" : "Authorization",
          "description" : "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
          "type" : "string",
          "required" : true
        }, {
          "in" : "query",
          "name" : "offset",
          "description" : "The collection items offset",
          "type" : "integer",
          "required" : false
        }, {
          "in" : "query",
          "name" : "limit",
          "description" : "The collection items limit",
          "type" : "integer",
          "required" : false
        }, {
          "in" : "query",
          "name" : "includeInactive",
          "description" : "Return the list of inactive objects in the results. By default only active objects are returned",
          "type" : "string",
          "required" : false
        }, {
          "in" : "query",
          "name" : "[att]:contains",
          "description" : "Search a specific attribute partially",
          "type" : "string",
          "required" : false
        }, {
          "in" : "query",
          "name" : "[att]",
          "description" : "Filter any attribute by its value. You can search subobjects by using the qualified attribute name. ",
          "type" : "string",
          "required" : false
        }, {
          "in" : "query",
          "name" : "q",
          "description" : "Global search for the object",
          "type" : "string",
          "required" : false
        }, {
          "schema" : {
            "$ref" : "#/definitions/array"
          },
          "in" : "query",
          "name" : "sort",
          "description" : "The collection items sort field and order (prefix with \"-\" for descending sort].",
          "required" : false
        }, {
          "in" : "query",
          "name" : "[att]:in",
          "description" : "Filter the collection by attribute list. ",
          "type" : "string",
          "required" : false
        }, {
          "in" : "query",
          "name" : "fields",
          "description" : "List of fields you want returned separated by a coma. You can alias the returned field by adding the alias after a column",
          "type" : "string",
          "required" : false
        }, {
          "in" : "query",
          "name" : "include",
          "description" : "Expand response to get full related object intead of ID. See the expand guide for more info.",
          "type" : "string",
          "required" : false
        } ],
        "tags" : [ "vendors" ]
      }
    },
    "/vendors/{id}" : {
      "patch" : {
        "summary" : "Partially edit a Vendors",
        "operationId" : "updateVendorById",
        "responses" : {
          "200" : {
            "description" : "OK - Everything worked as expected",
            "schema" : {
              "$ref" : "#/definitions/VendorsItem"
            }
          },
          "400" : {
            "description" : "Bad Request - Often due to a missing request parameter"
          },
          "401" : {
            "description" : "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500" : {
            "description" : "Server error - Something went wrong on the Cloud Elements server"
          },
          "403" : {
            "description" : "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502" : {
            "description" : "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404" : {
            "description" : "Not found - The requested resource is not found"
          },
          "415" : {
            "description" : "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405" : {
            "description" : "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406" : {
            "description" : "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409" : {
            "description" : "Conflict - If a resource being created already exists"
          }
        },
        "parameters" : [ {
          "in" : "header",
          "name" : "Authorization",
          "description" : "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
          "type" : "string",
          "required" : true
        }, {
          "in" : "path",
          "name" : "id",
          "description" : "The resource identifier",
          "type" : "string",
          "required" : true
        }, {
          "schema" : {
            "$ref" : "#/definitions/VendorsPatch"
          },
          "in" : "body",
          "name" : "JSON",
          "description" : "JSON",
          "required" : true
        } ],
        "tags" : [ "vendors" ]
      },
      "get" : {
        "summary" : "Retrieve a Vendors",
        "operationId" : "getVendorById",
        "responses" : {
          "200" : {
            "description" : "OK - Everything worked as expected",
            "schema" : {
              "$ref" : "#/definitions/VendorsItem"
            }
          },
          "400" : {
            "description" : "Bad Request - Often due to a missing request parameter"
          },
          "401" : {
            "description" : "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500" : {
            "description" : "Server error - Something went wrong on the Cloud Elements server"
          },
          "403" : {
            "description" : "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502" : {
            "description" : "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404" : {
            "description" : "Not found - The requested resource is not found"
          },
          "415" : {
            "description" : "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405" : {
            "description" : "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406" : {
            "description" : "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409" : {
            "description" : "Conflict - If a resource being created already exists"
          }
        },
        "parameters" : [ {
          "in" : "header",
          "name" : "Authorization",
          "description" : "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
          "type" : "string",
          "required" : true
        }, {
          "in" : "path",
          "name" : "id",
          "description" : "The resource identifier",
          "type" : "string",
          "required" : true
        } ],
        "tags" : [ "vendors" ]
      },
      "put" : {
        "summary" : "Update a Vendors",
        "operationId" : "replaceVendorById",
        "responses" : {
          "200" : {
            "description" : "OK - Everything worked as expected",
            "schema" : {
              "$ref" : "#/definitions/VendorsPut"
            }
          },
          "400" : {
            "description" : "Bad Request - Often due to a missing request parameter"
          },
          "401" : {
            "description" : "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500" : {
            "description" : "Server error - Something went wrong on the Cloud Elements server"
          },
          "403" : {
            "description" : "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502" : {
            "description" : "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404" : {
            "description" : "Not found - The requested resource is not found"
          },
          "415" : {
            "description" : "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405" : {
            "description" : "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406" : {
            "description" : "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409" : {
            "description" : "Conflict - If a resource being created already exists"
          }
        },
        "parameters" : [ {
          "in" : "header",
          "name" : "Authorization",
          "description" : "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
          "type" : "string",
          "required" : true
        }, {
          "in" : "path",
          "name" : "id",
          "description" : "The resource identifier",
          "type" : "string",
          "required" : true
        }, {
          "schema" : {
            "$ref" : "#/definitions/VendorsPut"
          },
          "in" : "body",
          "name" : "JSON",
          "description" : "JSON",
          "required" : true
        } ],
        "tags" : [ "vendors" ]
      }
    },
    "/work-sessions" : {
      "post" : {
        "summary" : "Create a WorkSessions",
        "operationId" : "createWorkSession",
        "responses" : {
          "200" : {
            "description" : "OK - Everything worked as expected",
            "schema" : {
              "$ref" : "#/definitions/WorkSessionsItem"
            }
          },
          "400" : {
            "description" : "Bad Request - Often due to a missing request parameter"
          },
          "401" : {
            "description" : "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500" : {
            "description" : "Server error - Something went wrong on the Cloud Elements server"
          },
          "403" : {
            "description" : "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502" : {
            "description" : "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404" : {
            "description" : "Not found - The requested resource is not found"
          },
          "415" : {
            "description" : "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405" : {
            "description" : "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406" : {
            "description" : "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409" : {
            "description" : "Conflict - If a resource being created already exists"
          }
        },
        "parameters" : [ {
          "in" : "header",
          "name" : "Authorization",
          "description" : "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
          "type" : "string",
          "required" : true
        }, {
          "schema" : {
            "$ref" : "#/definitions/WorkSessionsPost"
          },
          "in" : "body",
          "name" : "Body",
          "description" : "Body",
          "required" : true
        } ],
        "tags" : [ "work-sessions" ]
      },
      "get" : {
        "summary" : "Retrieve a list of WorkSessions",
        "operationId" : "getWorkSessions",
        "responses" : {
          "200" : {
            "description" : "OK - Everything worked as expected",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/WorkSessionsCollection"
              }
            }
          },
          "400" : {
            "description" : "Bad Request - Often due to a missing request parameter"
          },
          "401" : {
            "description" : "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500" : {
            "description" : "Server error - Something went wrong on the Cloud Elements server"
          },
          "403" : {
            "description" : "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502" : {
            "description" : "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404" : {
            "description" : "Not found - The requested resource is not found"
          },
          "415" : {
            "description" : "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405" : {
            "description" : "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406" : {
            "description" : "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409" : {
            "description" : "Conflict - If a resource being created already exists"
          }
        },
        "parameters" : [ {
          "in" : "header",
          "name" : "Authorization",
          "description" : "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
          "type" : "string",
          "required" : true
        }, {
          "in" : "query",
          "name" : "[att]:in",
          "description" : "Filter the collection by attribute list. ",
          "type" : "string",
          "required" : false
        }, {
          "in" : "query",
          "name" : "[att]:contains",
          "description" : "Search a specific attribute partially",
          "type" : "string",
          "required" : false
        }, {
          "in" : "query",
          "name" : "limit",
          "description" : "The collection items limit",
          "type" : "integer",
          "required" : false
        }, {
          "in" : "query",
          "name" : "include",
          "description" : "Expand response to get full related object intead of ID. See the expand guide for more info.",
          "type" : "string",
          "required" : false
        }, {
          "schema" : {
            "$ref" : "#/definitions/array"
          },
          "in" : "query",
          "name" : "sort",
          "description" : "The collection items sort field and order (prefix with \"-\" for descending sort].",
          "required" : false
        }, {
          "in" : "query",
          "name" : "q",
          "description" : "Global search for the object",
          "type" : "string",
          "required" : false
        }, {
          "in" : "query",
          "name" : "includeInactive",
          "description" : "Return the list of inactive objects in the results. By default only active objects are returned",
          "type" : "string",
          "required" : false
        }, {
          "in" : "query",
          "name" : "fields",
          "description" : "List of fields you want returned separated by a coma. You can alias the returned field by adding the alias after a column",
          "type" : "string",
          "required" : false
        }, {
          "in" : "query",
          "name" : "offset",
          "description" : "The collection items offset",
          "type" : "integer",
          "required" : false
        }, {
          "in" : "query",
          "name" : "[att]",
          "description" : "Filter any attribute by its value. You can search subobjects by using the qualified attribute name. ",
          "type" : "string",
          "required" : false
        } ],
        "tags" : [ "work-sessions" ]
      }
    },
    "/work-sessions/{id}" : {
      "patch" : {
        "summary" : "Partially edit a WorkSessions",
        "operationId" : "updateWorkSessionById",
        "responses" : {
          "200" : {
            "description" : "OK - Everything worked as expected",
            "schema" : {
              "$ref" : "#/definitions/WorkSessionsItem"
            }
          },
          "400" : {
            "description" : "Bad Request - Often due to a missing request parameter"
          },
          "401" : {
            "description" : "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500" : {
            "description" : "Server error - Something went wrong on the Cloud Elements server"
          },
          "403" : {
            "description" : "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502" : {
            "description" : "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404" : {
            "description" : "Not found - The requested resource is not found"
          },
          "415" : {
            "description" : "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405" : {
            "description" : "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406" : {
            "description" : "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409" : {
            "description" : "Conflict - If a resource being created already exists"
          }
        },
        "parameters" : [ {
          "in" : "header",
          "name" : "Authorization",
          "description" : "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
          "type" : "string",
          "required" : true
        }, {
          "in" : "path",
          "name" : "id",
          "description" : "The resource identifier",
          "type" : "string",
          "required" : true
        }, {
          "schema" : {
            "$ref" : "#/definitions/WorkSessionsPatch"
          },
          "in" : "body",
          "name" : "JSON",
          "description" : "JSON",
          "required" : true
        } ],
        "tags" : [ "work-sessions" ]
      },
      "get" : {
        "summary" : "Retrieve a WorkSessions",
        "operationId" : "getWorkSessionById",
        "responses" : {
          "200" : {
            "description" : "OK - Everything worked as expected",
            "schema" : {
              "$ref" : "#/definitions/WorkSessionsItem"
            }
          },
          "400" : {
            "description" : "Bad Request - Often due to a missing request parameter"
          },
          "401" : {
            "description" : "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500" : {
            "description" : "Server error - Something went wrong on the Cloud Elements server"
          },
          "403" : {
            "description" : "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502" : {
            "description" : "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404" : {
            "description" : "Not found - The requested resource is not found"
          },
          "415" : {
            "description" : "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405" : {
            "description" : "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406" : {
            "description" : "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409" : {
            "description" : "Conflict - If a resource being created already exists"
          }
        },
        "parameters" : [ {
          "in" : "header",
          "name" : "Authorization",
          "description" : "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
          "type" : "string",
          "required" : true
        }, {
          "in" : "path",
          "name" : "id",
          "description" : "The resource identifier",
          "type" : "string",
          "required" : true
        } ],
        "tags" : [ "work-sessions" ]
      },
      "put" : {
        "summary" : "Update a WorkSessions",
        "operationId" : "replaceWorkSessionById",
        "responses" : {
          "200" : {
            "description" : "OK - Everything worked as expected",
            "schema" : {
              "$ref" : "#/definitions/WorkSessionsPut"
            }
          },
          "400" : {
            "description" : "Bad Request - Often due to a missing request parameter"
          },
          "401" : {
            "description" : "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500" : {
            "description" : "Server error - Something went wrong on the Cloud Elements server"
          },
          "403" : {
            "description" : "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502" : {
            "description" : "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404" : {
            "description" : "Not found - The requested resource is not found"
          },
          "415" : {
            "description" : "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405" : {
            "description" : "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406" : {
            "description" : "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409" : {
            "description" : "Conflict - If a resource being created already exists"
          }
        },
        "parameters" : [ {
          "in" : "header",
          "name" : "Authorization",
          "description" : "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
          "type" : "string",
          "required" : true
        }, {
          "in" : "path",
          "name" : "id",
          "description" : "The resource identifier",
          "type" : "string",
          "required" : true
        }, {
          "schema" : {
            "$ref" : "#/definitions/WorkSessionsPut"
          },
          "in" : "body",
          "name" : "JSON",
          "description" : "JSON",
          "required" : true
        } ],
        "tags" : [ "work-sessions" ]
      }
    },
    "/work-sessions/{id}/actions/add-break" : {
      "post" : {
        "summary" : "add-break",
        "operationId" : "createWorkSessionActionAddBreak",
        "responses" : {
          "200" : {
            "description" : "OK - Everything worked as expected",
            "schema" : {
              "$ref" : "#/definitions/ActionResponse"
            }
          },
          "400" : {
            "description" : "Bad Request - Often due to a missing request parameter"
          },
          "401" : {
            "description" : "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500" : {
            "description" : "Server error - Something went wrong on the Cloud Elements server"
          },
          "403" : {
            "description" : "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502" : {
            "description" : "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404" : {
            "description" : "Not found - The requested resource is not found"
          },
          "415" : {
            "description" : "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405" : {
            "description" : "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406" : {
            "description" : "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409" : {
            "description" : "Conflict - If a resource being created already exists"
          }
        },
        "parameters" : [ {
          "in" : "header",
          "name" : "Authorization",
          "description" : "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
          "type" : "string",
          "required" : true
        }, {
          "in" : "path",
          "name" : "id",
          "description" : "The resource identifier",
          "type" : "string",
          "required" : true
        }, {
          "schema" : {
            "$ref" : "#/definitions/WorkSessionsAdd-break"
          },
          "in" : "body",
          "name" : "Body",
          "description" : "Body",
          "required" : true
        } ],
        "tags" : [ "work-sessions" ]
      }
    },
    "/workflow-instance-logs" : {
      "post" : {
        "summary" : "Create a WorkflowInstanceLogs",
        "operationId" : "createWorkflowInstanceLog",
        "responses" : {
          "200" : {
            "description" : "OK - Everything worked as expected",
            "schema" : {
              "$ref" : "#/definitions/WorkflowInstanceLogsItem"
            }
          },
          "400" : {
            "description" : "Bad Request - Often due to a missing request parameter"
          },
          "401" : {
            "description" : "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500" : {
            "description" : "Server error - Something went wrong on the Cloud Elements server"
          },
          "403" : {
            "description" : "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502" : {
            "description" : "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404" : {
            "description" : "Not found - The requested resource is not found"
          },
          "415" : {
            "description" : "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405" : {
            "description" : "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406" : {
            "description" : "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409" : {
            "description" : "Conflict - If a resource being created already exists"
          }
        },
        "parameters" : [ {
          "in" : "header",
          "name" : "Authorization",
          "description" : "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
          "type" : "string",
          "required" : true
        }, {
          "schema" : {
            "$ref" : "#/definitions/WorkflowInstanceLogsPost"
          },
          "in" : "body",
          "name" : "Body",
          "description" : "Body",
          "required" : true
        } ],
        "tags" : [ "workflow-instance-logs" ]
      },
      "get" : {
        "summary" : "Retrieve a list of WorkflowInstanceLogs",
        "operationId" : "getWorkflowInstanceLogs",
        "responses" : {
          "200" : {
            "description" : "OK - Everything worked as expected",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/WorkflowInstanceLogsCollection"
              }
            }
          },
          "400" : {
            "description" : "Bad Request - Often due to a missing request parameter"
          },
          "401" : {
            "description" : "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500" : {
            "description" : "Server error - Something went wrong on the Cloud Elements server"
          },
          "403" : {
            "description" : "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502" : {
            "description" : "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404" : {
            "description" : "Not found - The requested resource is not found"
          },
          "415" : {
            "description" : "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405" : {
            "description" : "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406" : {
            "description" : "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409" : {
            "description" : "Conflict - If a resource being created already exists"
          }
        },
        "parameters" : [ {
          "in" : "header",
          "name" : "Authorization",
          "description" : "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
          "type" : "string",
          "required" : true
        }, {
          "in" : "query",
          "name" : "limit",
          "description" : "The collection items limit",
          "type" : "integer",
          "required" : false
        }, {
          "in" : "query",
          "name" : "offset",
          "description" : "The collection items offset",
          "type" : "integer",
          "required" : false
        }, {
          "in" : "query",
          "name" : "fields",
          "description" : "List of fields you want returned separated by a coma. You can alias the returned field by adding the alias after a column",
          "type" : "string",
          "required" : false
        }, {
          "in" : "query",
          "name" : "include",
          "description" : "Expand response to get full related object intead of ID. See the expand guide for more info.",
          "type" : "string",
          "required" : false
        }, {
          "in" : "query",
          "name" : "[att]:contains",
          "description" : "Search a specific attribute partially",
          "type" : "string",
          "required" : false
        }, {
          "in" : "query",
          "name" : "[att]:in",
          "description" : "Filter the collection by attribute list. ",
          "type" : "string",
          "required" : false
        }, {
          "in" : "query",
          "name" : "[att]",
          "description" : "Filter any attribute by its value. You can search subobjects by using the qualified attribute name. ",
          "type" : "string",
          "required" : false
        }, {
          "in" : "query",
          "name" : "q",
          "description" : "Global search for the object",
          "type" : "string",
          "required" : false
        }, {
          "schema" : {
            "$ref" : "#/definitions/array"
          },
          "in" : "query",
          "name" : "sort",
          "description" : "The collection items sort field and order (prefix with \"-\" for descending sort].",
          "required" : false
        }, {
          "in" : "query",
          "name" : "includeInactive",
          "description" : "Return the list of inactive objects in the results. By default only active objects are returned",
          "type" : "string",
          "required" : false
        } ],
        "tags" : [ "workflow-instance-logs" ]
      }
    },
    "/workflow-instance-logs/{id}" : {
      "patch" : {
        "summary" : "Partially edit a WorkflowInstanceLogs",
        "operationId" : "updateWorkflowInstanceLogById",
        "responses" : {
          "200" : {
            "description" : "OK - Everything worked as expected",
            "schema" : {
              "$ref" : "#/definitions/WorkflowInstanceLogsItem"
            }
          },
          "400" : {
            "description" : "Bad Request - Often due to a missing request parameter"
          },
          "401" : {
            "description" : "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500" : {
            "description" : "Server error - Something went wrong on the Cloud Elements server"
          },
          "403" : {
            "description" : "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502" : {
            "description" : "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404" : {
            "description" : "Not found - The requested resource is not found"
          },
          "415" : {
            "description" : "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405" : {
            "description" : "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406" : {
            "description" : "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409" : {
            "description" : "Conflict - If a resource being created already exists"
          }
        },
        "parameters" : [ {
          "in" : "header",
          "name" : "Authorization",
          "description" : "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
          "type" : "string",
          "required" : true
        }, {
          "in" : "path",
          "name" : "id",
          "description" : "The resource identifier",
          "type" : "string",
          "required" : true
        }, {
          "schema" : {
            "$ref" : "#/definitions/WorkflowInstanceLogsPatch"
          },
          "in" : "body",
          "name" : "JSON",
          "description" : "JSON",
          "required" : true
        } ],
        "tags" : [ "workflow-instance-logs" ]
      },
      "get" : {
        "summary" : "Retrieve a WorkflowInstanceLogs",
        "operationId" : "getWorkflowInstanceLogById",
        "responses" : {
          "200" : {
            "description" : "OK - Everything worked as expected",
            "schema" : {
              "$ref" : "#/definitions/WorkflowInstanceLogsItem"
            }
          },
          "400" : {
            "description" : "Bad Request - Often due to a missing request parameter"
          },
          "401" : {
            "description" : "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500" : {
            "description" : "Server error - Something went wrong on the Cloud Elements server"
          },
          "403" : {
            "description" : "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502" : {
            "description" : "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404" : {
            "description" : "Not found - The requested resource is not found"
          },
          "415" : {
            "description" : "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405" : {
            "description" : "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406" : {
            "description" : "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409" : {
            "description" : "Conflict - If a resource being created already exists"
          }
        },
        "parameters" : [ {
          "in" : "header",
          "name" : "Authorization",
          "description" : "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
          "type" : "string",
          "required" : true
        }, {
          "in" : "path",
          "name" : "id",
          "description" : "The resource identifier",
          "type" : "string",
          "required" : true
        } ],
        "tags" : [ "workflow-instance-logs" ]
      },
      "put" : {
        "summary" : "Update a WorkflowInstanceLogs",
        "operationId" : "replaceWorkflowInstanceLogById",
        "responses" : {
          "200" : {
            "description" : "OK - Everything worked as expected",
            "schema" : {
              "$ref" : "#/definitions/WorkflowInstanceLogsPut"
            }
          },
          "400" : {
            "description" : "Bad Request - Often due to a missing request parameter"
          },
          "401" : {
            "description" : "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500" : {
            "description" : "Server error - Something went wrong on the Cloud Elements server"
          },
          "403" : {
            "description" : "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502" : {
            "description" : "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404" : {
            "description" : "Not found - The requested resource is not found"
          },
          "415" : {
            "description" : "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405" : {
            "description" : "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406" : {
            "description" : "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409" : {
            "description" : "Conflict - If a resource being created already exists"
          }
        },
        "parameters" : [ {
          "in" : "header",
          "name" : "Authorization",
          "description" : "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
          "type" : "string",
          "required" : true
        }, {
          "in" : "path",
          "name" : "id",
          "description" : "The resource identifier",
          "type" : "string",
          "required" : true
        }, {
          "schema" : {
            "$ref" : "#/definitions/WorkflowInstanceLogsPut"
          },
          "in" : "body",
          "name" : "JSON",
          "description" : "JSON",
          "required" : true
        } ],
        "tags" : [ "workflow-instance-logs" ]
      }
    },
    "/workflow-instances" : {
      "post" : {
        "summary" : "Create a WorkflowInstances",
        "operationId" : "createWorkflowInstance",
        "responses" : {
          "200" : {
            "description" : "OK - Everything worked as expected",
            "schema" : {
              "$ref" : "#/definitions/WorkflowInstancesItem"
            }
          },
          "400" : {
            "description" : "Bad Request - Often due to a missing request parameter"
          },
          "401" : {
            "description" : "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500" : {
            "description" : "Server error - Something went wrong on the Cloud Elements server"
          },
          "403" : {
            "description" : "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502" : {
            "description" : "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404" : {
            "description" : "Not found - The requested resource is not found"
          },
          "415" : {
            "description" : "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405" : {
            "description" : "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406" : {
            "description" : "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409" : {
            "description" : "Conflict - If a resource being created already exists"
          }
        },
        "parameters" : [ {
          "in" : "header",
          "name" : "Authorization",
          "description" : "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
          "type" : "string",
          "required" : true
        }, {
          "schema" : {
            "$ref" : "#/definitions/WorkflowInstancesPost"
          },
          "in" : "body",
          "name" : "Body",
          "description" : "Body",
          "required" : true
        } ],
        "tags" : [ "workflow-instances" ]
      },
      "get" : {
        "summary" : "Retrieve a list of WorkflowInstances",
        "operationId" : "getWorkflowInstances",
        "responses" : {
          "200" : {
            "description" : "OK - Everything worked as expected",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/WorkflowInstancesCollection"
              }
            }
          },
          "400" : {
            "description" : "Bad Request - Often due to a missing request parameter"
          },
          "401" : {
            "description" : "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500" : {
            "description" : "Server error - Something went wrong on the Cloud Elements server"
          },
          "403" : {
            "description" : "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502" : {
            "description" : "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404" : {
            "description" : "Not found - The requested resource is not found"
          },
          "415" : {
            "description" : "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405" : {
            "description" : "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406" : {
            "description" : "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409" : {
            "description" : "Conflict - If a resource being created already exists"
          }
        },
        "parameters" : [ {
          "in" : "header",
          "name" : "Authorization",
          "description" : "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
          "type" : "string",
          "required" : true
        }, {
          "in" : "query",
          "name" : "[att]",
          "description" : "Filter any attribute by its value. You can search subobjects by using the qualified attribute name. ",
          "type" : "string",
          "required" : false
        }, {
          "in" : "query",
          "name" : "fields",
          "description" : "List of fields you want returned separated by a coma. You can alias the returned field by adding the alias after a column",
          "type" : "string",
          "required" : false
        }, {
          "in" : "query",
          "name" : "includeInactive",
          "description" : "Return the list of inactive objects in the results. By default only active objects are returned",
          "type" : "string",
          "required" : false
        }, {
          "in" : "query",
          "name" : "[att]:contains",
          "description" : "Search a specific attribute partially",
          "type" : "string",
          "required" : false
        }, {
          "in" : "query",
          "name" : "[att]:in",
          "description" : "Filter the collection by attribute list. ",
          "type" : "string",
          "required" : false
        }, {
          "in" : "query",
          "name" : "q",
          "description" : "Global search for the object",
          "type" : "string",
          "required" : false
        }, {
          "in" : "query",
          "name" : "include",
          "description" : "Expand response to get full related object intead of ID. See the expand guide for more info.",
          "type" : "string",
          "required" : false
        }, {
          "schema" : {
            "$ref" : "#/definitions/array"
          },
          "in" : "query",
          "name" : "sort",
          "description" : "The collection items sort field and order (prefix with \"-\" for descending sort].",
          "required" : false
        }, {
          "in" : "query",
          "name" : "offset",
          "description" : "The collection items offset",
          "type" : "integer",
          "required" : false
        }, {
          "in" : "query",
          "name" : "limit",
          "description" : "The collection items limit",
          "type" : "integer",
          "required" : false
        } ],
        "tags" : [ "workflow-instances" ]
      }
    },
    "/workflow-instances/{id}" : {
      "patch" : {
        "summary" : "Partially edit a WorkflowInstances",
        "operationId" : "updateWorkflowInstanceById",
        "responses" : {
          "200" : {
            "description" : "OK - Everything worked as expected",
            "schema" : {
              "$ref" : "#/definitions/WorkflowInstancesItem"
            }
          },
          "400" : {
            "description" : "Bad Request - Often due to a missing request parameter"
          },
          "401" : {
            "description" : "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500" : {
            "description" : "Server error - Something went wrong on the Cloud Elements server"
          },
          "403" : {
            "description" : "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502" : {
            "description" : "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404" : {
            "description" : "Not found - The requested resource is not found"
          },
          "415" : {
            "description" : "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405" : {
            "description" : "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406" : {
            "description" : "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409" : {
            "description" : "Conflict - If a resource being created already exists"
          }
        },
        "parameters" : [ {
          "in" : "header",
          "name" : "Authorization",
          "description" : "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
          "type" : "string",
          "required" : true
        }, {
          "in" : "path",
          "name" : "id",
          "description" : "The resource identifier",
          "type" : "string",
          "required" : true
        }, {
          "schema" : {
            "$ref" : "#/definitions/WorkflowInstancesPatch"
          },
          "in" : "body",
          "name" : "JSON",
          "description" : "JSON",
          "required" : true
        } ],
        "tags" : [ "workflow-instances" ]
      },
      "get" : {
        "summary" : "Retrieve a WorkflowInstances",
        "operationId" : "getWorkflowInstanceById",
        "responses" : {
          "200" : {
            "description" : "OK - Everything worked as expected",
            "schema" : {
              "$ref" : "#/definitions/WorkflowInstancesItem"
            }
          },
          "400" : {
            "description" : "Bad Request - Often due to a missing request parameter"
          },
          "401" : {
            "description" : "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500" : {
            "description" : "Server error - Something went wrong on the Cloud Elements server"
          },
          "403" : {
            "description" : "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502" : {
            "description" : "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404" : {
            "description" : "Not found - The requested resource is not found"
          },
          "415" : {
            "description" : "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405" : {
            "description" : "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406" : {
            "description" : "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409" : {
            "description" : "Conflict - If a resource being created already exists"
          }
        },
        "parameters" : [ {
          "in" : "header",
          "name" : "Authorization",
          "description" : "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
          "type" : "string",
          "required" : true
        }, {
          "in" : "path",
          "name" : "id",
          "description" : "The resource identifier",
          "type" : "string",
          "required" : true
        } ],
        "tags" : [ "workflow-instances" ]
      },
      "put" : {
        "summary" : "Update a WorkflowInstances",
        "operationId" : "replaceWorkflowInstanceById",
        "responses" : {
          "200" : {
            "description" : "OK - Everything worked as expected",
            "schema" : {
              "$ref" : "#/definitions/WorkflowInstancesPut"
            }
          },
          "400" : {
            "description" : "Bad Request - Often due to a missing request parameter"
          },
          "401" : {
            "description" : "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500" : {
            "description" : "Server error - Something went wrong on the Cloud Elements server"
          },
          "403" : {
            "description" : "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502" : {
            "description" : "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404" : {
            "description" : "Not found - The requested resource is not found"
          },
          "415" : {
            "description" : "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405" : {
            "description" : "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406" : {
            "description" : "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409" : {
            "description" : "Conflict - If a resource being created already exists"
          }
        },
        "parameters" : [ {
          "in" : "header",
          "name" : "Authorization",
          "description" : "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
          "type" : "string",
          "required" : true
        }, {
          "in" : "path",
          "name" : "id",
          "description" : "The resource identifier",
          "type" : "string",
          "required" : true
        }, {
          "schema" : {
            "$ref" : "#/definitions/WorkflowInstancesPut"
          },
          "in" : "body",
          "name" : "JSON",
          "description" : "JSON",
          "required" : true
        } ],
        "tags" : [ "workflow-instances" ]
      }
    },
    "/workflow-statuses" : {
      "post" : {
        "summary" : "Create a WorkflowStatuses",
        "operationId" : "createWorkflowStatuse",
        "responses" : {
          "200" : {
            "description" : "OK - Everything worked as expected",
            "schema" : {
              "$ref" : "#/definitions/WorkflowStatusesItem"
            }
          },
          "400" : {
            "description" : "Bad Request - Often due to a missing request parameter"
          },
          "401" : {
            "description" : "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500" : {
            "description" : "Server error - Something went wrong on the Cloud Elements server"
          },
          "403" : {
            "description" : "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502" : {
            "description" : "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404" : {
            "description" : "Not found - The requested resource is not found"
          },
          "415" : {
            "description" : "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405" : {
            "description" : "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406" : {
            "description" : "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409" : {
            "description" : "Conflict - If a resource being created already exists"
          }
        },
        "parameters" : [ {
          "in" : "header",
          "name" : "Authorization",
          "description" : "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
          "type" : "string",
          "required" : true
        }, {
          "schema" : {
            "$ref" : "#/definitions/WorkflowStatusesPost"
          },
          "in" : "body",
          "name" : "Body",
          "description" : "Body",
          "required" : true
        } ],
        "tags" : [ "workflow-statuses" ]
      },
      "get" : {
        "summary" : "Retrieve a list of WorkflowStatuses",
        "operationId" : "getWorkflowStatuses",
        "responses" : {
          "200" : {
            "description" : "OK - Everything worked as expected",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/WorkflowStatusesCollection"
              }
            }
          },
          "400" : {
            "description" : "Bad Request - Often due to a missing request parameter"
          },
          "401" : {
            "description" : "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500" : {
            "description" : "Server error - Something went wrong on the Cloud Elements server"
          },
          "403" : {
            "description" : "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502" : {
            "description" : "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404" : {
            "description" : "Not found - The requested resource is not found"
          },
          "415" : {
            "description" : "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405" : {
            "description" : "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406" : {
            "description" : "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409" : {
            "description" : "Conflict - If a resource being created already exists"
          }
        },
        "parameters" : [ {
          "in" : "header",
          "name" : "Authorization",
          "description" : "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
          "type" : "string",
          "required" : true
        }, {
          "in" : "query",
          "name" : "include",
          "description" : "Expand response to get full related object intead of ID. See the expand guide for more info.",
          "type" : "string",
          "required" : false
        }, {
          "in" : "query",
          "name" : "fields",
          "description" : "List of fields you want returned separated by a coma. You can alias the returned field by adding the alias after a column",
          "type" : "string",
          "required" : false
        }, {
          "in" : "query",
          "name" : "offset",
          "description" : "The collection items offset",
          "type" : "integer",
          "required" : false
        }, {
          "in" : "query",
          "name" : "limit",
          "description" : "The collection items limit",
          "type" : "integer",
          "required" : false
        }, {
          "schema" : {
            "$ref" : "#/definitions/array"
          },
          "in" : "query",
          "name" : "sort",
          "description" : "The collection items sort field and order (prefix with \"-\" for descending sort].",
          "required" : false
        }, {
          "in" : "query",
          "name" : "q",
          "description" : "Global search for the object",
          "type" : "string",
          "required" : false
        }, {
          "in" : "query",
          "name" : "[att]",
          "description" : "Filter any attribute by its value. You can search subobjects by using the qualified attribute name. ",
          "type" : "string",
          "required" : false
        }, {
          "in" : "query",
          "name" : "[att]:in",
          "description" : "Filter the collection by attribute list. ",
          "type" : "string",
          "required" : false
        }, {
          "in" : "query",
          "name" : "[att]:contains",
          "description" : "Search a specific attribute partially",
          "type" : "string",
          "required" : false
        }, {
          "in" : "query",
          "name" : "includeInactive",
          "description" : "Return the list of inactive objects in the results. By default only active objects are returned",
          "type" : "string",
          "required" : false
        } ],
        "tags" : [ "workflow-statuses" ]
      }
    },
    "/workflow-statuses/{id}" : {
      "patch" : {
        "summary" : "Partially edit a WorkflowStatuses",
        "operationId" : "updateWorkflowStatuseById",
        "responses" : {
          "200" : {
            "description" : "OK - Everything worked as expected",
            "schema" : {
              "$ref" : "#/definitions/WorkflowStatusesItem"
            }
          },
          "400" : {
            "description" : "Bad Request - Often due to a missing request parameter"
          },
          "401" : {
            "description" : "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500" : {
            "description" : "Server error - Something went wrong on the Cloud Elements server"
          },
          "403" : {
            "description" : "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502" : {
            "description" : "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404" : {
            "description" : "Not found - The requested resource is not found"
          },
          "415" : {
            "description" : "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405" : {
            "description" : "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406" : {
            "description" : "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409" : {
            "description" : "Conflict - If a resource being created already exists"
          }
        },
        "parameters" : [ {
          "in" : "header",
          "name" : "Authorization",
          "description" : "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
          "type" : "string",
          "required" : true
        }, {
          "in" : "path",
          "name" : "id",
          "description" : "The resource identifier",
          "type" : "string",
          "required" : true
        }, {
          "schema" : {
            "$ref" : "#/definitions/WorkflowStatusesPatch"
          },
          "in" : "body",
          "name" : "JSON",
          "description" : "JSON",
          "required" : true
        } ],
        "tags" : [ "workflow-statuses" ]
      },
      "get" : {
        "summary" : "Retrieve a WorkflowStatuses",
        "operationId" : "getWorkflowStatuseById",
        "responses" : {
          "200" : {
            "description" : "OK - Everything worked as expected",
            "schema" : {
              "$ref" : "#/definitions/WorkflowStatusesItem"
            }
          },
          "400" : {
            "description" : "Bad Request - Often due to a missing request parameter"
          },
          "401" : {
            "description" : "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500" : {
            "description" : "Server error - Something went wrong on the Cloud Elements server"
          },
          "403" : {
            "description" : "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502" : {
            "description" : "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404" : {
            "description" : "Not found - The requested resource is not found"
          },
          "415" : {
            "description" : "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405" : {
            "description" : "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406" : {
            "description" : "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409" : {
            "description" : "Conflict - If a resource being created already exists"
          }
        },
        "parameters" : [ {
          "in" : "header",
          "name" : "Authorization",
          "description" : "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
          "type" : "string",
          "required" : true
        }, {
          "in" : "path",
          "name" : "id",
          "description" : "The resource identifier",
          "type" : "string",
          "required" : true
        } ],
        "tags" : [ "workflow-statuses" ]
      },
      "put" : {
        "summary" : "Update a WorkflowStatuses",
        "operationId" : "replaceWorkflowStatuseById",
        "responses" : {
          "200" : {
            "description" : "OK - Everything worked as expected",
            "schema" : {
              "$ref" : "#/definitions/WorkflowStatusesPut"
            }
          },
          "400" : {
            "description" : "Bad Request - Often due to a missing request parameter"
          },
          "401" : {
            "description" : "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500" : {
            "description" : "Server error - Something went wrong on the Cloud Elements server"
          },
          "403" : {
            "description" : "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502" : {
            "description" : "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404" : {
            "description" : "Not found - The requested resource is not found"
          },
          "415" : {
            "description" : "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405" : {
            "description" : "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406" : {
            "description" : "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409" : {
            "description" : "Conflict - If a resource being created already exists"
          }
        },
        "parameters" : [ {
          "in" : "header",
          "name" : "Authorization",
          "description" : "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
          "type" : "string",
          "required" : true
        }, {
          "in" : "path",
          "name" : "id",
          "description" : "The resource identifier",
          "type" : "string",
          "required" : true
        }, {
          "schema" : {
            "$ref" : "#/definitions/WorkflowStatusesPut"
          },
          "in" : "body",
          "name" : "JSON",
          "description" : "JSON",
          "required" : true
        } ],
        "tags" : [ "workflow-statuses" ]
      }
    },
    "/workflows" : {
      "post" : {
        "summary" : "Create a Workflows",
        "operationId" : "createWorkflow",
        "responses" : {
          "200" : {
            "description" : "OK - Everything worked as expected",
            "schema" : {
              "$ref" : "#/definitions/WorkflowsItem"
            }
          },
          "400" : {
            "description" : "Bad Request - Often due to a missing request parameter"
          },
          "401" : {
            "description" : "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500" : {
            "description" : "Server error - Something went wrong on the Cloud Elements server"
          },
          "403" : {
            "description" : "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502" : {
            "description" : "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404" : {
            "description" : "Not found - The requested resource is not found"
          },
          "415" : {
            "description" : "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405" : {
            "description" : "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406" : {
            "description" : "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409" : {
            "description" : "Conflict - If a resource being created already exists"
          }
        },
        "parameters" : [ {
          "in" : "header",
          "name" : "Authorization",
          "description" : "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
          "type" : "string",
          "required" : true
        }, {
          "schema" : {
            "$ref" : "#/definitions/WorkflowsPost"
          },
          "in" : "body",
          "name" : "Body",
          "description" : "Body",
          "required" : true
        } ],
        "tags" : [ "workflows" ]
      },
      "get" : {
        "summary" : "Retrieve a list of Workflows",
        "operationId" : "getWorkflows",
        "responses" : {
          "200" : {
            "description" : "OK - Everything worked as expected",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/WorkflowsCollection"
              }
            }
          },
          "400" : {
            "description" : "Bad Request - Often due to a missing request parameter"
          },
          "401" : {
            "description" : "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500" : {
            "description" : "Server error - Something went wrong on the Cloud Elements server"
          },
          "403" : {
            "description" : "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502" : {
            "description" : "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404" : {
            "description" : "Not found - The requested resource is not found"
          },
          "415" : {
            "description" : "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405" : {
            "description" : "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406" : {
            "description" : "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409" : {
            "description" : "Conflict - If a resource being created already exists"
          }
        },
        "parameters" : [ {
          "in" : "header",
          "name" : "Authorization",
          "description" : "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
          "type" : "string",
          "required" : true
        }, {
          "in" : "query",
          "name" : "[att]:contains",
          "description" : "Search a specific attribute partially",
          "type" : "string",
          "required" : false
        }, {
          "in" : "query",
          "name" : "includeInactive",
          "description" : "Return the list of inactive objects in the results. By default only active objects are returned",
          "type" : "string",
          "required" : false
        }, {
          "schema" : {
            "$ref" : "#/definitions/array"
          },
          "in" : "query",
          "name" : "sort",
          "description" : "The collection items sort field and order (prefix with \"-\" for descending sort].",
          "required" : false
        }, {
          "in" : "query",
          "name" : "offset",
          "description" : "The collection items offset",
          "type" : "integer",
          "required" : false
        }, {
          "in" : "query",
          "name" : "[att]:in",
          "description" : "Filter the collection by attribute list. ",
          "type" : "string",
          "required" : false
        }, {
          "in" : "query",
          "name" : "fields",
          "description" : "List of fields you want returned separated by a coma. You can alias the returned field by adding the alias after a column",
          "type" : "string",
          "required" : false
        }, {
          "in" : "query",
          "name" : "include",
          "description" : "Expand response to get full related object intead of ID. See the expand guide for more info.",
          "type" : "string",
          "required" : false
        }, {
          "in" : "query",
          "name" : "[att]",
          "description" : "Filter any attribute by its value. You can search subobjects by using the qualified attribute name. ",
          "type" : "string",
          "required" : false
        }, {
          "in" : "query",
          "name" : "q",
          "description" : "Global search for the object",
          "type" : "string",
          "required" : false
        }, {
          "in" : "query",
          "name" : "limit",
          "description" : "The collection items limit",
          "type" : "integer",
          "required" : false
        } ],
        "tags" : [ "workflows" ]
      }
    },
    "/workflows/{id}" : {
      "patch" : {
        "summary" : "Partially edit a Workflows",
        "operationId" : "updateWorkflowById",
        "responses" : {
          "200" : {
            "description" : "OK - Everything worked as expected",
            "schema" : {
              "$ref" : "#/definitions/WorkflowsItem"
            }
          },
          "400" : {
            "description" : "Bad Request - Often due to a missing request parameter"
          },
          "401" : {
            "description" : "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500" : {
            "description" : "Server error - Something went wrong on the Cloud Elements server"
          },
          "403" : {
            "description" : "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502" : {
            "description" : "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404" : {
            "description" : "Not found - The requested resource is not found"
          },
          "415" : {
            "description" : "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405" : {
            "description" : "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406" : {
            "description" : "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409" : {
            "description" : "Conflict - If a resource being created already exists"
          }
        },
        "parameters" : [ {
          "in" : "header",
          "name" : "Authorization",
          "description" : "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
          "type" : "string",
          "required" : true
        }, {
          "in" : "path",
          "name" : "id",
          "description" : "The resource identifier",
          "type" : "string",
          "required" : true
        }, {
          "schema" : {
            "$ref" : "#/definitions/WorkflowsPatch"
          },
          "in" : "body",
          "name" : "JSON",
          "description" : "JSON",
          "required" : true
        } ],
        "tags" : [ "workflows" ]
      },
      "get" : {
        "summary" : "Retrieve a Workflows",
        "operationId" : "getWorkflowById",
        "responses" : {
          "200" : {
            "description" : "OK - Everything worked as expected",
            "schema" : {
              "$ref" : "#/definitions/WorkflowsItem"
            }
          },
          "400" : {
            "description" : "Bad Request - Often due to a missing request parameter"
          },
          "401" : {
            "description" : "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500" : {
            "description" : "Server error - Something went wrong on the Cloud Elements server"
          },
          "403" : {
            "description" : "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502" : {
            "description" : "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404" : {
            "description" : "Not found - The requested resource is not found"
          },
          "415" : {
            "description" : "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405" : {
            "description" : "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406" : {
            "description" : "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409" : {
            "description" : "Conflict - If a resource being created already exists"
          }
        },
        "parameters" : [ {
          "in" : "header",
          "name" : "Authorization",
          "description" : "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
          "type" : "string",
          "required" : true
        }, {
          "in" : "path",
          "name" : "id",
          "description" : "The resource identifier",
          "type" : "string",
          "required" : true
        } ],
        "tags" : [ "workflows" ]
      },
      "put" : {
        "summary" : "Update a Workflows",
        "operationId" : "replaceWorkflowById",
        "responses" : {
          "200" : {
            "description" : "OK - Everything worked as expected",
            "schema" : {
              "$ref" : "#/definitions/WorkflowsPut"
            }
          },
          "400" : {
            "description" : "Bad Request - Often due to a missing request parameter"
          },
          "401" : {
            "description" : "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500" : {
            "description" : "Server error - Something went wrong on the Cloud Elements server"
          },
          "403" : {
            "description" : "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502" : {
            "description" : "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404" : {
            "description" : "Not found - The requested resource is not found"
          },
          "415" : {
            "description" : "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405" : {
            "description" : "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406" : {
            "description" : "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409" : {
            "description" : "Conflict - If a resource being created already exists"
          }
        },
        "parameters" : [ {
          "in" : "header",
          "name" : "Authorization",
          "description" : "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
          "type" : "string",
          "required" : true
        }, {
          "in" : "path",
          "name" : "id",
          "description" : "The resource identifier",
          "type" : "string",
          "required" : true
        }, {
          "schema" : {
            "$ref" : "#/definitions/WorkflowsPut"
          },
          "in" : "body",
          "name" : "JSON",
          "description" : "JSON",
          "required" : true
        } ],
        "tags" : [ "workflows" ]
      }
    },
    "/{objectName}" : {
      "get" : {
        "operationId" : "getByObjectName",
        "parameters" : [ {
          "description" : "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
          "in" : "header",
          "name" : "Authorization",
          "required" : true,
          "type" : "string"
        }, {
          "description" : "The name of the object",
          "in" : "path",
          "name" : "objectName",
          "required" : true,
          "type" : "string"
        }, {
          "description" : "The CEQL search expression.",
          "in" : "query",
          "name" : "where",
          "required" : false,
          "type" : "string"
        }, {
          "description" : "The page size. Defaults to 200 if not provided. Maximum of 5000.",
          "format" : "int64",
          "in" : "query",
          "name" : "pageSize",
          "required" : false,
          "type" : "integer"
        }, {
          "description" : "The next page cursor, taken from the response header: `elements-next-page-token`",
          "in" : "query",
          "name" : "nextPage",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK - Everything worked as expected",
            "schema" : {
              "items" : {
                "$ref" : "#/definitions/Object"
              },
              "type" : "array"
            }
          },
          "400" : {
            "description" : "Bad Request - Often due to a missing request parameter"
          },
          "401" : {
            "description" : "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "403" : {
            "description" : "Forbidden - Access to the resource by the provider is forbidden"
          },
          "404" : {
            "description" : "Not found - The requested resource is not found"
          },
          "405" : {
            "description" : "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406" : {
            "description" : "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409" : {
            "description" : "Conflict - If a resource being created already exists"
          },
          "415" : {
            "description" : "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "500" : {
            "description" : "Server error - Something went wrong on the Cloud Elements server"
          },
          "502" : {
            "description" : "Provider server error - Something went wrong on the Provider or Endpoint's server"
          }
        },
        "summary" : "Search for {objectName}",
        "tags" : [ "objectName" ]
      },
      "post" : {
        "operationId" : "createByObjectName",
        "parameters" : [ {
          "description" : "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
          "in" : "header",
          "name" : "Authorization",
          "required" : true,
          "type" : "string"
        }, {
          "description" : "The name of the object",
          "in" : "path",
          "name" : "objectName",
          "required" : true,
          "type" : "string"
        }, {
          "description" : "The {objectName}",
          "in" : "body",
          "name" : "Body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/Object"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK - Everything worked as expected"
          },
          "400" : {
            "description" : "Bad Request - Often due to a missing request parameter"
          },
          "401" : {
            "description" : "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "403" : {
            "description" : "Forbidden - Access to the resource by the provider is forbidden"
          },
          "404" : {
            "description" : "Not found - The requested resource is not found"
          },
          "405" : {
            "description" : "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406" : {
            "description" : "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409" : {
            "description" : "Conflict - If a resource being created already exists"
          },
          "415" : {
            "description" : "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "500" : {
            "description" : "Server error - Something went wrong on the Cloud Elements server"
          },
          "502" : {
            "description" : "Provider server error - Something went wrong on the Provider or Endpoint's server"
          }
        },
        "summary" : "Create an {objectName}",
        "tags" : [ "objectName" ]
      }
    },
    "/{objectName}/{objectId}" : {
      "delete" : {
        "operationId" : "deleteObjectNameByObjectId",
        "parameters" : [ {
          "description" : "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
          "in" : "header",
          "name" : "Authorization",
          "required" : true,
          "type" : "string"
        }, {
          "description" : "The name of the object",
          "in" : "path",
          "name" : "objectName",
          "required" : true,
          "type" : "string"
        }, {
          "description" : "The {objectName} ID",
          "in" : "path",
          "name" : "objectId",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK - Everything worked as expected"
          },
          "400" : {
            "description" : "Bad Request - Often due to a missing request parameter"
          },
          "401" : {
            "description" : "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "403" : {
            "description" : "Forbidden - Access to the resource by the provider is forbidden"
          },
          "404" : {
            "description" : "Not found - The requested resource is not found"
          },
          "405" : {
            "description" : "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406" : {
            "description" : "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409" : {
            "description" : "Conflict - If a resource being created already exists"
          },
          "415" : {
            "description" : "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "500" : {
            "description" : "Server error - Something went wrong on the Cloud Elements server"
          },
          "502" : {
            "description" : "Provider server error - Something went wrong on the Provider or Endpoint's server"
          }
        },
        "summary" : "Delete an {objectName}",
        "tags" : [ "objectName" ]
      },
      "get" : {
        "operationId" : "getObjectNameByObjectId",
        "parameters" : [ {
          "description" : "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
          "in" : "header",
          "name" : "Authorization",
          "required" : true,
          "type" : "string"
        }, {
          "description" : "The name of the object",
          "in" : "path",
          "name" : "objectName",
          "required" : true,
          "type" : "string"
        }, {
          "description" : "The {objectName} ID",
          "in" : "path",
          "name" : "objectId",
          "required" : true,
          "type" : "string"
        } ],
        "produces" : [ "application/json", "application/pdf" ],
        "responses" : {
          "200" : {
            "description" : "OK - Everything worked as expected",
            "schema" : {
              "$ref" : "#/definitions/Object"
            }
          },
          "400" : {
            "description" : "Bad Request - Often due to a missing request parameter"
          },
          "401" : {
            "description" : "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "403" : {
            "description" : "Forbidden - Access to the resource by the provider is forbidden"
          },
          "404" : {
            "description" : "Not found - The requested resource is not found"
          },
          "405" : {
            "description" : "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406" : {
            "description" : "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409" : {
            "description" : "Conflict - If a resource being created already exists"
          },
          "415" : {
            "description" : "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "500" : {
            "description" : "Server error - Something went wrong on the Cloud Elements server"
          },
          "502" : {
            "description" : "Provider server error - Something went wrong on the Provider or Endpoint's server"
          }
        },
        "summary" : "Retrieve an {objectName}",
        "tags" : [ "objectName" ]
      },
      "patch" : {
        "operationId" : "updateObjectNameByObjectId",
        "parameters" : [ {
          "description" : "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
          "in" : "header",
          "name" : "Authorization",
          "required" : true,
          "type" : "string"
        }, {
          "description" : "The name of the object",
          "in" : "path",
          "name" : "objectName",
          "required" : true,
          "type" : "string"
        }, {
          "description" : "The {objectName} ID",
          "in" : "path",
          "name" : "objectId",
          "required" : true,
          "type" : "string"
        }, {
          "description" : "The {objectName}",
          "in" : "body",
          "name" : "Body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/Object"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK - Everything worked as expected",
            "schema" : {
              "$ref" : "#/definitions/Object"
            }
          },
          "400" : {
            "description" : "Bad Request - Often due to a missing request parameter"
          },
          "401" : {
            "description" : "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "403" : {
            "description" : "Forbidden - Access to the resource by the provider is forbidden"
          },
          "404" : {
            "description" : "Not found - The requested resource is not found"
          },
          "405" : {
            "description" : "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406" : {
            "description" : "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409" : {
            "description" : "Conflict - If a resource being created already exists"
          },
          "415" : {
            "description" : "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "500" : {
            "description" : "Server error - Something went wrong on the Cloud Elements server"
          },
          "502" : {
            "description" : "Provider server error - Something went wrong on the Provider or Endpoint's server"
          }
        },
        "summary" : "Update an {objectName}",
        "tags" : [ "objectName" ]
      },
      "put" : {
        "operationId" : "replaceObjectNameByObjectId",
        "parameters" : [ {
          "description" : "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
          "in" : "header",
          "name" : "Authorization",
          "required" : true,
          "type" : "string"
        }, {
          "description" : "The name of the object",
          "in" : "path",
          "name" : "objectName",
          "required" : true,
          "type" : "string"
        }, {
          "description" : "The {objectName} ID",
          "in" : "path",
          "name" : "objectId",
          "required" : true,
          "type" : "string"
        }, {
          "description" : "The {objectName}",
          "in" : "body",
          "name" : "Body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/Object"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK - Everything worked as expected",
            "schema" : {
              "$ref" : "#/definitions/Object"
            }
          },
          "400" : {
            "description" : "Bad Request - Often due to a missing request parameter"
          },
          "401" : {
            "description" : "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "403" : {
            "description" : "Forbidden - Access to the resource by the provider is forbidden"
          },
          "404" : {
            "description" : "Not found - The requested resource is not found"
          },
          "405" : {
            "description" : "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406" : {
            "description" : "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409" : {
            "description" : "Conflict - If a resource being created already exists"
          },
          "415" : {
            "description" : "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "500" : {
            "description" : "Server error - Something went wrong on the Cloud Elements server"
          },
          "502" : {
            "description" : "Provider server error - Something went wrong on the Provider or Endpoint's server"
          }
        },
        "summary" : "Update an {objectName}",
        "tags" : [ "objectName" ]
      }
    },
    "/{objectName}/{objectId}/{childObjectName}" : {
      "get" : {
        "operationId" : "getObjectNameByChildObjectName",
        "parameters" : [ {
          "description" : "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
          "in" : "header",
          "name" : "Authorization",
          "required" : true,
          "type" : "string"
        }, {
          "description" : "The name of the object",
          "in" : "path",
          "name" : "objectName",
          "required" : true,
          "type" : "string"
        }, {
          "description" : "The {objectName} ID",
          "in" : "path",
          "name" : "objectId",
          "required" : true,
          "type" : "string"
        }, {
          "description" : "The name of the childObjectName",
          "in" : "path",
          "name" : "childObjectName",
          "required" : true,
          "type" : "string"
        }, {
          "description" : "The CEQL search expression.",
          "in" : "query",
          "name" : "where",
          "required" : false,
          "type" : "string"
        }, {
          "description" : "The page size. Defaults to 200 if not provided. Maximum of 5000.",
          "format" : "int64",
          "in" : "query",
          "name" : "pageSize",
          "required" : false,
          "type" : "integer"
        }, {
          "description" : "The next page cursor, taken from the response header: `elements-next-page-token`",
          "in" : "query",
          "name" : "nextPage",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK - Everything worked as expected",
            "schema" : {
              "items" : {
                "$ref" : "#/definitions/Object"
              },
              "type" : "array"
            }
          },
          "400" : {
            "description" : "Bad Request - Often due to a missing request parameter"
          },
          "401" : {
            "description" : "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "403" : {
            "description" : "Forbidden - Access to the resource by the provider is forbidden"
          },
          "404" : {
            "description" : "Not found - The requested resource is not found"
          },
          "405" : {
            "description" : "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406" : {
            "description" : "Not acceptable - The response content type does not match the &quot;Accept&quot; header value"
          },
          "409" : {
            "description" : "Conflict - If a resource being created already exists"
          },
          "415" : {
            "description" : "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "500" : {
            "description" : "Server error - Something went wrong on the Cloud Elements server"
          },
          "502" : {
            "description" : "Provider server error - Something went wrong on the Provider or Endpoint's server"
          }
        },
        "summary" : "Search for {childObjectName}",
        "tags" : [ "objectName" ]
      },
      "post" : {
        "operationId" : "createObjectNameByChildObjectName",
        "parameters" : [ {
          "description" : "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
          "in" : "header",
          "name" : "Authorization",
          "required" : true,
          "type" : "string"
        }, {
          "description" : "The name of the object",
          "in" : "path",
          "name" : "objectName",
          "required" : true,
          "type" : "string"
        }, {
          "description" : "The {objectName} ID",
          "in" : "path",
          "name" : "objectId",
          "required" : true,
          "type" : "string"
        }, {
          "description" : "The name of the object",
          "in" : "path",
          "name" : "childObjectName",
          "required" : true,
          "type" : "string"
        }, {
          "description" : "The {childObjectName}",
          "in" : "body",
          "name" : "Body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/Object"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK - Everything worked as expected"
          },
          "400" : {
            "description" : "Bad Request - Often due to a missing request parameter"
          },
          "401" : {
            "description" : "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "403" : {
            "description" : "Forbidden - Access to the resource by the provider is forbidden"
          },
          "404" : {
            "description" : "Not found - The requested resource is not found"
          },
          "405" : {
            "description" : "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406" : {
            "description" : "Not acceptable - The response content type does not match the &quot;Accept&quot; header value"
          },
          "409" : {
            "description" : "Conflict - If a resource being created already exists"
          },
          "415" : {
            "description" : "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "500" : {
            "description" : "Server error - Something went wrong on the Cloud Elements server"
          },
          "502" : {
            "description" : "Provider server error - Something went wrong on the Provider or Endpoint's server"
          }
        },
        "summary" : "Create an {childObjectName}",
        "tags" : [ "objectName" ]
      }
    },
    "/{objectName}/{objectId}/{childObjectName}/{childObjectId}" : {
      "delete" : {
        "operationId" : "deleteObjectNameByChildObjectId",
        "parameters" : [ {
          "description" : "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
          "in" : "header",
          "name" : "Authorization",
          "required" : true,
          "type" : "string"
        }, {
          "description" : "The name of the object",
          "in" : "path",
          "name" : "objectName",
          "required" : true,
          "type" : "string"
        }, {
          "description" : "The name of the childObjectName",
          "in" : "path",
          "name" : "childObjectName",
          "required" : true,
          "type" : "string"
        }, {
          "description" : "The {objectName} ID",
          "in" : "path",
          "name" : "objectId",
          "required" : true,
          "type" : "string"
        }, {
          "description" : "The {childObjectName} ID",
          "in" : "path",
          "name" : "childObjectId",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK - Everything worked as expected"
          },
          "400" : {
            "description" : "Bad Request - Often due to a missing request parameter"
          },
          "401" : {
            "description" : "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "403" : {
            "description" : "Forbidden - Access to the resource by the provider is forbidden"
          },
          "404" : {
            "description" : "Not found - The requested resource is not found"
          },
          "405" : {
            "description" : "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406" : {
            "description" : "Not acceptable - The response content type does not match the &quot;Accept&quot; header value"
          },
          "409" : {
            "description" : "Conflict - If a resource being created already exists"
          },
          "415" : {
            "description" : "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "500" : {
            "description" : "Server error - Something went wrong on the Cloud Elements server"
          },
          "502" : {
            "description" : "Provider server error - Something went wrong on the Provider or Endpoint's server"
          }
        },
        "summary" : "Delete an {childObjectName}",
        "tags" : [ "objectName" ]
      },
      "get" : {
        "operationId" : "getObjectNameByChildObjectId",
        "parameters" : [ {
          "description" : "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
          "in" : "header",
          "name" : "Authorization",
          "required" : true,
          "type" : "string"
        }, {
          "description" : "The name of the object",
          "in" : "path",
          "name" : "objectName",
          "required" : true,
          "type" : "string"
        }, {
          "description" : "The name of the childObjectName",
          "in" : "path",
          "name" : "childObjectName",
          "required" : true,
          "type" : "string"
        }, {
          "description" : "The {objectName} ID",
          "in" : "path",
          "name" : "objectId",
          "required" : true,
          "type" : "string"
        }, {
          "description" : "The {childObjectName} ID",
          "in" : "path",
          "name" : "childObjectId",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK - Everything worked as expected",
            "schema" : {
              "$ref" : "#/definitions/Object"
            }
          },
          "400" : {
            "description" : "Bad Request - Often due to a missing request parameter"
          },
          "401" : {
            "description" : "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "403" : {
            "description" : "Forbidden - Access to the resource by the provider is forbidden"
          },
          "404" : {
            "description" : "Not found - The requested resource is not found"
          },
          "405" : {
            "description" : "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406" : {
            "description" : "Not acceptable - The response content type does not match the &quot;Accept&quot; header value"
          },
          "409" : {
            "description" : "Conflict - If a resource being created already exists"
          },
          "415" : {
            "description" : "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "500" : {
            "description" : "Server error - Something went wrong on the Cloud Elements server"
          },
          "502" : {
            "description" : "Provider server error - Something went wrong on the Provider or Endpoint's server"
          }
        },
        "summary" : "Retrieve an {childObjectName}",
        "tags" : [ "objectName" ]
      },
      "patch" : {
        "operationId" : "updateObjectNameByChildObjectId",
        "parameters" : [ {
          "description" : "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
          "in" : "header",
          "name" : "Authorization",
          "required" : true,
          "type" : "string"
        }, {
          "description" : "The name of the object",
          "in" : "path",
          "name" : "objectName",
          "required" : true,
          "type" : "string"
        }, {
          "description" : "The name of the childObjectName",
          "in" : "path",
          "name" : "childObjectName",
          "required" : true,
          "type" : "string"
        }, {
          "description" : "The {objectName} ID",
          "in" : "path",
          "name" : "objectId",
          "required" : true,
          "type" : "string"
        }, {
          "description" : "The {childObjectName} ID",
          "in" : "path",
          "name" : "childObjectId",
          "required" : true,
          "type" : "string"
        }, {
          "description" : "The {objectName}",
          "in" : "body",
          "name" : "Body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/Object"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK - Everything worked as expected",
            "schema" : {
              "$ref" : "#/definitions/Object"
            }
          },
          "400" : {
            "description" : "Bad Request - Often due to a missing request parameter"
          },
          "401" : {
            "description" : "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "403" : {
            "description" : "Forbidden - Access to the resource by the provider is forbidden"
          },
          "404" : {
            "description" : "Not found - The requested resource is not found"
          },
          "405" : {
            "description" : "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406" : {
            "description" : "Not acceptable - The response content type does not match the &quot;Accept&quot; header value"
          },
          "409" : {
            "description" : "Conflict - If a resource being created already exists"
          },
          "415" : {
            "description" : "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "500" : {
            "description" : "Server error - Something went wrong on the Cloud Elements server"
          },
          "502" : {
            "description" : "Provider server error - Something went wrong on the Provider or Endpoint's server"
          }
        },
        "summary" : "Update an {childObjectName}",
        "tags" : [ "objectName" ]
      },
      "put" : {
        "operationId" : "replaceObjectNameByChildObjectId",
        "parameters" : [ {
          "description" : "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
          "in" : "header",
          "name" : "Authorization",
          "required" : true,
          "type" : "string"
        }, {
          "description" : "The name of the object",
          "in" : "path",
          "name" : "objectName",
          "required" : true,
          "type" : "string"
        }, {
          "description" : "The name of the childObjectName",
          "in" : "path",
          "name" : "childObjectName",
          "required" : true,
          "type" : "string"
        }, {
          "description" : "The {objectName} ID",
          "in" : "path",
          "name" : "objectId",
          "required" : true,
          "type" : "string"
        }, {
          "description" : "The {childObjectName} ID",
          "in" : "path",
          "name" : "childObjectId",
          "required" : true,
          "type" : "string"
        }, {
          "description" : "The {objectName}",
          "in" : "body",
          "name" : "Body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/Object"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK - Everything worked as expected",
            "schema" : {
              "$ref" : "#/definitions/Object"
            }
          },
          "400" : {
            "description" : "Bad Request - Often due to a missing request parameter"
          },
          "401" : {
            "description" : "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "403" : {
            "description" : "Forbidden - Access to the resource by the provider is forbidden"
          },
          "404" : {
            "description" : "Not found - The requested resource is not found"
          },
          "405" : {
            "description" : "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406" : {
            "description" : "Not acceptable - The response content type does not match the &quot;Accept&quot; header value"
          },
          "409" : {
            "description" : "Conflict - If a resource being created already exists"
          },
          "415" : {
            "description" : "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "500" : {
            "description" : "Server error - Something went wrong on the Cloud Elements server"
          },
          "502" : {
            "description" : "Provider server error - Something went wrong on the Provider or Endpoint's server"
          }
        },
        "summary" : "Update an {childObjectName}",
        "tags" : [ "objectName" ]
      }
    }
  },
  "host" : "localhost:8080",
  "schemes" : [ "http" ],
  "definitions" : {
    "EmployeeAccountBansPost" : {
      "properties" : {
        "account" : {
          "example" : 139,
          "type" : "number",
          "x-description" : "Account"
        },
        "employee" : {
          "example" : 187,
          "type" : "number",
          "x-description" : "Employee"
        },
        "reason" : {
          "example" : 155,
          "type" : "string",
          "x-description" : "Reason"
        },
        "startDate" : {
          "example" : null,
          "type" : "string",
          "x-description" : "Start Date"
        }
      },
      "type" : "object"
    },
    "EmployeeAccountAssignmentsCollection" : {
      "properties" : {
        "account" : {
          "allOf" : [ {
            "$ref" : "#/definitions/AccountsItem"
          } ],
          "x-description" : "Account"
        },
        "active" : {
          "example" : false,
          "type" : "string",
          "x-description" : "Active"
        },
        "employee" : {
          "allOf" : [ {
            "$ref" : "#/definitions/EmployeesItem"
          } ],
          "x-description" : "Employee"
        },
        "endDate" : {
          "example" : "2018-05-01",
          "type" : "string",
          "x-description" : "End Date"
        },
        "startDate" : {
          "example" : null,
          "type" : "string",
          "x-description" : "Start Date"
        }
      },
      "type" : "object"
    },
    "BreakSessionsPut" : {
      "properties" : {
        "endDateTime" : {
          "example" : "2018-01-01 17:30",
          "type" : "string",
          "x-description" : "End Date & Time"
        },
        "initiationMethod" : {
          "enum" : [ "LIVE", "DELAYED", "DEVICE", "ADMIN", "PHONE", "BROWSER", "BREAK", "BATCH", "KIOSK" ],
          "type" : "string",
          "x-description" : "Initiation Method"
        },
        "startDateTime" : {
          "example" : "2018-01-01 09:00",
          "type" : "string",
          "x-description" : "Start Date & Time"
        },
        "status" : {
          "enum" : [ "OPEN", "CLOSED" ],
          "type" : "string",
          "x-description" : "Status"
        },
        "terminationMethod" : {
          "enum" : [ "LIVE", "DELAYED", "DEVICE", "ADMIN", "PHONE", "BROWSER", "BREAK", "BATCH", "KIOSK" ],
          "type" : "string",
          "x-description" : "Termination Method"
        }
      },
      "type" : "object"
    },
    "BillableItemsCollection" : {
      "properties" : {
        "id" : {
          "example" : 12345,
          "type" : "number",
          "x-description" : "The Unique System ID of this object"
        },
        "name" : {
          "example" : "Sample Name",
          "type" : "string",
          "x-description" : "Temp"
        }
      },
      "type" : "object"
    },
    "EmployeeSkillsPatch" : {
      "properties" : {
        "comments" : {
          "example" : "This is a sample comment.",
          "type" : "string",
          "x-description" : "Comments"
        },
        "employee" : {
          "example" : 137,
          "type" : "number",
          "x-description" : "Employee"
        },
        "expiryDate" : {
          "example" : null,
          "type" : "string",
          "x-description" : "Expiry Date"
        },
        "label1" : {
          "example" : null,
          "type" : "string",
          "x-description" : "(On Demand) Label 1"
        },
        "label2" : {
          "example" : null,
          "type" : "string",
          "x-description" : "(On Demand) Label 2"
        },
        "label3" : {
          "example" : null,
          "type" : "string",
          "x-description" : "(On Demand) Label 3"
        },
        "skill" : {
          "example" : 123,
          "type" : "number",
          "x-description" : "Skill"
        }
      },
      "type" : "object"
    },
    "ReportTemplateFieldsPatch" : {
      "properties" : {
        "adminOnly" : {
          "example" : false,
          "type" : "boolean",
          "x-description" : "Admin Only"
        },
        "displayOrder" : {
          "example" : 200,
          "type" : "number",
          "x-description" : "Display Order Index"
        },
        "extra" : {
          "example" : null,
          "type" : "string",
          "x-description" : "Extra information"
        },
        "isDispatcherField" : {
          "example" : false,
          "type" : "boolean",
          "x-description" : "Dispatcher Field"
        },
        "label" : {
          "example" : null,
          "type" : "string",
          "x-description" : "Name"
        },
        "list" : {
          "example" : null,
          "type" : "string",
          "x-description" : "List"
        },
        "name" : {
          "example" : "Sample Name",
          "type" : "string",
          "x-description" : "Field"
        },
        "required" : {
          "example" : false,
          "type" : "boolean",
          "x-description" : "Required"
        },
        "type" : {
          "example" : null,
          "type" : "string",
          "x-description" : "Type"
        }
      },
      "type" : "object"
    },
    "EmployeesReset-password" : {
      "properties" : { },
      "type" : "object"
    },
    "ShiftsCollection" : {
      "properties" : {
        "acknowledged" : {
          "example" : false,
          "type" : "boolean",
          "x-description" : "Last version of the shift has been acknowledged by the employee"
        },
        "attendanceStatus" : {
          "example" : null,
          "type" : "string",
          "x-description" : "Attendance Status"
        },
        "breakInMinutes" : {
          "example" : 15,
          "type" : "string",
          "x-description" : "The number of minuted allocated for breaks"
        },
        "employee" : {
          "allOf" : [ {
            "$ref" : "#/definitions/EmployeesItem"
          } ],
          "x-description" : "(On Demand) The employee assigned to the shift"
        },
        "endDateTime" : {
          "example" : "2018-01-01 17:30",
          "type" : "string",
          "x-description" : "End of the shift"
        },
        "id" : {
          "example" : 12345,
          "type" : "number",
          "x-description" : "The Unique System ID of this object"
        },
        "locked" : {
          "example" : false,
          "type" : "boolean",
          "x-description" : "Shift is locked and cannot be modified"
        },
        "notes" : {
          "items" : {
            "$ref" : "#/definitions/ShiftNotesItem"
          },
          "type" : "array",
          "x-description" : "(On Demand) Notes"
        },
        "notified" : {
          "example" : false,
          "type" : "boolean",
          "x-description" : "Last version of the shift has been sent by the employee"
        },
        "onShiftBoard" : {
          "example" : false,
          "type" : "boolean",
          "x-description" : "If the shift is available on the shiftboard"
        },
        "plannedPayableHours" : {
          "example" : null,
          "type" : "number",
          "x-description" : "Shift hours, remove breaks when breaks are not payable"
        },
        "position" : {
          "allOf" : [ {
            "$ref" : "#/definitions/PositionsItem"
          } ],
          "x-description" : "(On Demand) The work post where the shift is scheduled"
        },
        "published" : {
          "example" : false,
          "type" : "boolean",
          "x-description" : "If the shift is published and viewable by employees"
        },
        "startDateTime" : {
          "example" : "2018-01-01 09:00",
          "type" : "string",
          "x-description" : "Start of the shift"
        },
        "status" : {
          "enum" : [ "CANCELLED", "ACTIVE" ],
          "type" : "string",
          "x-description" : "If the shift is active or cancelled"
        },
        "vacant" : {
          "example" : false,
          "type" : "boolean",
          "x-description" : "If the shift is vacant"
        },
        "worksessions" : {
          "items" : {
            "$ref" : "#/definitions/WorkSessionsItem"
          },
          "type" : "array",
          "x-description" : "(On Demand) Work Sessions"
        }
      },
      "type" : "object"
    },
    "ShiftsCancel" : {
      "properties" : {
        "note" : {
          "example" : null,
          "type" : "string",
          "x-description" : "Reason for cancelling"
        }
      },
      "type" : "object"
    },
    "DispatchCustomLocationsPost" : {
      "properties" : {
        "addressLine1" : {
          "example" : "15000 Main Road",
          "type" : "string",
          "x-description" : "Address line 1"
        },
        "addressLine2" : {
          "example" : "Suite 445",
          "type" : "string",
          "x-description" : "Address line 2"
        },
        "city" : {
          "example" : "New York",
          "type" : "string",
          "x-description" : "City"
        },
        "country" : {
          "example" : "US",
          "type" : "string",
          "x-description" : "Country"
        },
        "latitude" : {
          "example" : null,
          "type" : "number",
          "x-description" : "Latitude"
        },
        "longitude" : {
          "example" : null,
          "type" : "number",
          "x-description" : "Longitude"
        },
        "name" : {
          "example" : "Company or description of location",
          "type" : "string",
          "x-description" : "Name"
        },
        "postalCode" : {
          "example" : "10005",
          "type" : "string",
          "x-description" : "Zip / Postal Code"
        },
        "state" : {
          "example" : "NY",
          "type" : "string",
          "x-description" : "State / Province"
        },
        "taskId" : {
          "example" : 377,
          "type" : "number",
          "x-description" : "Task ID"
        },
        "type" : {
          "enum" : [ "ADDRESS", "COORDINATES" ],
          "type" : "string",
          "x-description" : "Type"
        }
      },
      "type" : "object"
    },
    "DispatchTasksPut" : {
      "properties" : {
        "account" : {
          "example" : 104,
          "type" : "number",
          "x-description" : "Account"
        },
        "assignedUser" : {
          "example" : 100,
          "type" : "number",
          "x-description" : "Assigned User"
        },
        "customId" : {
          "example" : "C123-A",
          "type" : "string",
          "x-description" : "Custom ID of the event"
        },
        "endDateTime" : {
          "example" : "2018-01-01 17:30",
          "type" : "string",
          "x-description" : "End Date / Time"
        },
        "location" : {
          "example" : 131,
          "type" : "number",
          "x-description" : "Custom Location"
        },
        "locationType" : {
          "example" : null,
          "type" : "string",
          "x-description" : "Is A one time location"
        },
        "plannedDurationInMinutes" : {
          "example" : 185,
          "type" : "number",
          "x-description" : "Planned duration in minutes"
        },
        "priceTier" : {
          "example" : 116,
          "type" : "number",
          "x-description" : "Price Tier"
        },
        "priority" : {
          "enum" : [ "LOW", "IMPORTANT", "URGENT" ],
          "type" : "string",
          "x-description" : "Priority"
        },
        "reminderInMinutes" : {
          "example" : 996,
          "type" : "number",
          "x-description" : "@todo"
        },
        "report" : {
          "example" : null,
          "type" : "string",
          "x-description" : "Report"
        },
        "reportTemplate" : {
          "example" : 132,
          "type" : "number",
          "x-description" : "Report Type"
        },
        "startDateTime" : {
          "example" : "2018-01-01 09:00",
          "type" : "string",
          "x-description" : "Start Date / Time"
        },
        "taskInstructions" : {
          "example" : null,
          "type" : "string",
          "x-description" : "Task Instructions"
        },
        "taskType" : {
          "example" : 194,
          "type" : "number",
          "x-description" : "Task Type"
        },
        "workflowInstance" : {
          "example" : 124,
          "type" : "number",
          "x-description" : "Workflow Instance"
        }
      },
      "type" : "object"
    },
    "ShiftsItem" : {
      "properties" : {
        "acknowledged" : {
          "example" : false,
          "type" : "boolean",
          "x-description" : "Last version of the shift has been acknowledged by the employee"
        },
        "attendanceStatus" : {
          "example" : null,
          "type" : "string",
          "x-description" : "Attendance Status"
        },
        "breakInMinutes" : {
          "example" : 15,
          "type" : "string",
          "x-description" : "The number of minuted allocated for breaks"
        },
        "employee" : {
          "allOf" : [ {
            "$ref" : "#/definitions/EmployeesItem"
          } ],
          "x-description" : "(On Demand) The employee assigned to the shift"
        },
        "endDateTime" : {
          "example" : "2018-01-01 17:30",
          "type" : "string",
          "x-description" : "End of the shift"
        },
        "id" : {
          "example" : 12345,
          "type" : "number",
          "x-description" : "The Unique System ID of this object"
        },
        "locked" : {
          "example" : false,
          "type" : "boolean",
          "x-description" : "Shift is locked and cannot be modified"
        },
        "notes" : {
          "items" : {
            "$ref" : "#/definitions/ShiftNotesItem"
          },
          "type" : "array",
          "x-description" : "(On Demand) Notes"
        },
        "notified" : {
          "example" : false,
          "type" : "boolean",
          "x-description" : "Last version of the shift has been sent by the employee"
        },
        "onShiftBoard" : {
          "example" : false,
          "type" : "boolean",
          "x-description" : "If the shift is available on the shiftboard"
        },
        "plannedPayableHours" : {
          "example" : null,
          "type" : "number",
          "x-description" : "Shift hours, remove breaks when breaks are not payable"
        },
        "position" : {
          "allOf" : [ {
            "$ref" : "#/definitions/PositionsItem"
          } ],
          "x-description" : "(On Demand) The work post where the shift is scheduled"
        },
        "published" : {
          "example" : false,
          "type" : "boolean",
          "x-description" : "If the shift is published and viewable by employees"
        },
        "startDateTime" : {
          "example" : "2018-01-01 09:00",
          "type" : "string",
          "x-description" : "Start of the shift"
        },
        "status" : {
          "enum" : [ "CANCELLED", "ACTIVE" ],
          "type" : "string",
          "x-description" : "If the shift is active or cancelled"
        },
        "vacant" : {
          "example" : false,
          "type" : "boolean",
          "x-description" : "If the shift is vacant"
        },
        "worksessions" : {
          "items" : {
            "$ref" : "#/definitions/WorkSessionsItem"
          },
          "type" : "array",
          "x-description" : "(On Demand) Work Sessions"
        }
      },
      "type" : "object"
    },
    "PositionSkillsPatch" : {
      "properties" : {
        "comments" : {
          "example" : "This is a sample comment.",
          "type" : "string",
          "x-description" : "Comments"
        },
        "position" : {
          "example" : 119,
          "type" : "number",
          "x-description" : "Position"
        },
        "skill" : {
          "example" : 165,
          "type" : "number",
          "x-description" : "Skill"
        },
        "type" : {
          "enum" : [ "HARD", "CONDITIONAL", "SOFT" ],
          "type" : "string",
          "x-description" : "Type"
        }
      },
      "type" : "object"
    },
    "WorkflowStatusesItem" : {
      "properties" : {
        "alertThresholdInMinutes" : {
          "example" : 487,
          "type" : "number",
          "x-description" : "Alert threshold (in minutes)"
        },
        "formatBackgroundColor" : {
          "example" : null,
          "type" : "string",
          "x-description" : "Format text color"
        },
        "formatTextColor" : {
          "example" : null,
          "type" : "string",
          "x-description" : "Format text color"
        },
        "id" : {
          "example" : 12345,
          "type" : "number",
          "x-description" : "The Unique System ID of this object"
        },
        "name" : {
          "example" : "Sample Name",
          "type" : "string",
          "x-description" : "Name"
        },
        "resourceType" : {
          "example" : null,
          "type" : "string",
          "x-description" : "(On Demand) Resource Type"
        },
        "uri" : {
          "example" : null,
          "type" : "string",
          "x-description" : "Object URI"
        },
        "warningThresholdInMinutes" : {
          "example" : 381,
          "type" : "number",
          "x-description" : "Warning threshold (in minutes)"
        }
      },
      "type" : "object"
    },
    "InvoicesPatch" : {
      "properties" : {
        "client" : {
          "example" : 125,
          "type" : "number",
          "x-description" : ""
        },
        "contract" : {
          "example" : 191,
          "type" : "number",
          "x-description" : "Contract"
        },
        "date" : {
          "example" : null,
          "type" : "string",
          "x-description" : "Document date"
        },
        "dueDate" : {
          "example" : null,
          "type" : "string",
          "x-description" : ""
        },
        "lines" : {
          "example" : 194,
          "type" : "number",
          "x-description" : "Lines"
        },
        "number" : {
          "example" : null,
          "type" : "string",
          "x-description" : "Document number"
        },
        "servicePeriodEnd" : {
          "example" : null,
          "type" : "string",
          "x-description" : "Period Start"
        },
        "servicePeriodStart" : {
          "example" : null,
          "type" : "string",
          "x-description" : "Period Start"
        },
        "status" : {
          "enum" : [ "APPROVED", "DRAFT" ],
          "type" : "string",
          "x-description" : ""
        },
        "subTotal" : {
          "example" : null,
          "type" : "string",
          "x-description" : ""
        },
        "taxClass" : {
          "example" : 130,
          "type" : "number",
          "x-description" : "Tax Class"
        },
        "taxTotal" : {
          "example" : null,
          "type" : "string",
          "x-description" : ""
        },
        "total" : {
          "example" : null,
          "type" : "string",
          "x-description" : ""
        }
      },
      "type" : "object"
    },
    "TaxClassesPatch" : {
      "properties" : {
        "name" : {
          "example" : "Sample Name",
          "type" : "string",
          "x-description" : "Tax Class"
        }
      },
      "type" : "object"
    },
    "NotesCollection" : {
      "properties" : {
        "content" : {
          "example" : null,
          "type" : "string",
          "x-description" : "Content"
        },
        "createdBy" : {
          "allOf" : [ {
            "$ref" : "#/definitions/EmployeesItem"
          } ],
          "x-description" : "Created By"
        },
        "createdOn" : {
          "example" : 397,
          "type" : "string",
          "x-description" : "Created On"
        },
        "id" : {
          "example" : 12345,
          "type" : "number",
          "x-description" : "The Unique System ID of this object"
        }
      },
      "type" : "object"
    },
    "swagger400" : {
      "x-has-customfields" : false,
      "type" : "object",
      "title" : "400",
      "properties" : {
        "description" : {
          "x-samplevalue" : "Bad Request - Often due to a missing request parameter",
          "type" : "string"
        }
      }
    },
    "swagger401" : {
      "x-has-customfields" : false,
      "type" : "object",
      "title" : "401",
      "properties" : {
        "description" : {
          "x-samplevalue" : "Unauthorized - An invalid element token, user secret and/or org secret provided",
          "type" : "string"
        }
      }
    },
    "AccountsPost" : {
      "properties" : {
        "address" : {
          "example" : 126,
          "type" : "number",
          "x-description" : "(On Demand) Address"
        },
        "customId" : {
          "example" : "C123-A",
          "type" : "string",
          "x-description" : "UID"
        },
        "name" : {
          "example" : "Sample Name",
          "type" : "string",
          "x-description" : "Name"
        },
        "region" : {
          "example" : 100,
          "type" : "number",
          "x-description" : "(On Demand) Account Region"
        },
        "subType" : {
          "enum" : [ "client", "multi", "site" ],
          "type" : "string",
          "x-description" : "Client Type"
        },
        "type" : {
          "enum" : [ "CLIENT", "ZONE", "DEPARTMENT" ],
          "type" : "string",
          "x-description" : "Account Type"
        }
      },
      "type" : "object"
    },
    "swagger403" : {
      "x-has-customfields" : false,
      "type" : "object",
      "title" : "403",
      "properties" : {
        "description" : {
          "x-samplevalue" : "Forbidden - Access to the resource by the provider is forbidden",
          "type" : "string"
        }
      }
    },
    "swagger404" : {
      "x-has-customfields" : false,
      "type" : "object",
      "title" : "404",
      "properties" : {
        "description" : {
          "x-samplevalue" : "Not found - The requested resource is not found",
          "type" : "string"
        }
      }
    },
    "swagger405" : {
      "x-has-customfields" : false,
      "type" : "object",
      "title" : "405",
      "properties" : {
        "description" : {
          "x-samplevalue" : "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected",
          "type" : "string"
        }
      }
    },
    "MobileDevicesCollection" : {
      "properties" : {
        "accountId" : {
          "example" : null,
          "type" : "string",
          "x-description" : "Account"
        },
        "id" : {
          "example" : 12345,
          "type" : "number",
          "x-description" : "The Unique System ID of this object"
        },
        "lastAction" : {
          "example" : null,
          "type" : "string",
          "x-description" : ""
        },
        "lastLatitude" : {
          "example" : null,
          "type" : "number",
          "x-description" : "Last known Latitude"
        },
        "lastLongitude" : {
          "example" : null,
          "type" : "number",
          "x-description" : "Last known Latitude"
        },
        "name" : {
          "example" : "Sample Name",
          "type" : "string",
          "x-description" : "Name"
        },
        "number" : {
          "example" : null,
          "type" : "string",
          "x-description" : "Number"
        },
        "position" : {
          "allOf" : [ {
            "$ref" : "#/definitions/PositionsItem"
          } ],
          "x-description" : "Position"
        },
        "regionOwner" : {
          "allOf" : [ {
            "$ref" : "#/definitions/RegionsItem"
          } ],
          "x-description" : "Region"
        },
        "resourceType" : {
          "example" : null,
          "type" : "string",
          "x-description" : "(On Demand) Resource Type"
        },
        "uri" : {
          "example" : null,
          "type" : "string",
          "x-description" : "Object URI"
        },
        "user" : {
          "allOf" : [ {
            "$ref" : "#/definitions/EmployeesItem"
          } ],
          "x-description" : ""
        }
      },
      "type" : "object"
    },
    "ClientBillingSettingsPut" : {
      "properties" : {
        "client" : {
          "example" : 192,
          "type" : "number",
          "x-description" : ""
        },
        "emailList" : {
          "example" : null,
          "type" : "string",
          "x-description" : "Invoice Email List"
        }
      },
      "type" : "object"
    },
    "ReportTemplatesItem" : {
      "properties" : {
        "adminOnly" : {
          "example" : false,
          "type" : "boolean",
          "x-description" : "Admin Only"
        },
        "fields" : {
          "items" : {
            "$ref" : "#/definitions/ReportTemplateFieldsItem"
          },
          "type" : "array",
          "x-description" : "Fields"
        },
        "id" : {
          "example" : 12345,
          "type" : "number",
          "x-description" : "The Unique System ID of this object"
        },
        "name" : {
          "example" : "Sample Name",
          "type" : "string",
          "x-description" : "Report name"
        },
        "resourceType" : {
          "example" : null,
          "type" : "string",
          "x-description" : "(On Demand) Resource Type"
        },
        "uri" : {
          "example" : null,
          "type" : "string",
          "x-description" : "Object URI"
        }
      },
      "type" : "object"
    },
    "ShiftNotesPatch" : {
      "properties" : {
        "content" : {
          "example" : null,
          "type" : "string",
          "x-description" : "Content"
        },
        "createdBy" : {
          "example" : 200,
          "type" : "number",
          "x-description" : "User who wrote the note"
        },
        "createdOn" : {
          "example" : null,
          "type" : "string",
          "x-description" : "Created On"
        },
        "type" : {
          "enum" : [ "NOTE", "LOG" ],
          "type" : "string",
          "x-description" : "Type"
        }
      },
      "type" : "object"
    },
    "ContractsItem" : {
      "properties" : {
        "customId" : {
          "example" : "C123-A",
          "type" : "string",
          "x-description" : ""
        },
        "id" : {
          "example" : 12345,
          "type" : "number",
          "x-description" : "The Unique System ID of this object"
        },
        "name" : {
          "example" : "Sample Name",
          "type" : "string",
          "x-description" : ""
        },
        "resourceType" : {
          "example" : null,
          "type" : "string",
          "x-description" : "(On Demand) Resource Type"
        },
        "uri" : {
          "example" : null,
          "type" : "string",
          "x-description" : "Object URI"
        }
      },
      "type" : "object"
    },
    "swaggercontact" : {
      "x-has-customfields" : false,
      "type" : "object",
      "title" : "contact",
      "properties" : {
        "email" : {
          "x-samplevalue" : "support@cloud-elements.com",
          "type" : "string"
        }
      }
    },
    "ShiftNotesItem" : {
      "properties" : {
        "content" : {
          "example" : null,
          "type" : "string",
          "x-description" : "Content"
        },
        "createdBy" : {
          "allOf" : [ {
            "$ref" : "#/definitions/EmployeesItem"
          } ],
          "x-description" : "User who wrote the note"
        },
        "createdOn" : {
          "example" : null,
          "type" : "string",
          "x-description" : "Created On"
        },
        "id" : {
          "example" : 12345,
          "type" : "number",
          "x-description" : "The Unique System ID of this object"
        },
        "resourceType" : {
          "example" : null,
          "type" : "string",
          "x-description" : "(On Demand) Resource Type"
        },
        "type" : {
          "enum" : [ "NOTE", "LOG" ],
          "type" : "string",
          "x-description" : "Type"
        },
        "uri" : {
          "example" : null,
          "type" : "string",
          "x-description" : "Object URI"
        }
      },
      "type" : "object"
    },
    "TaxClassItemsCollection" : {
      "properties" : {
        "code" : {
          "example" : null,
          "type" : "string",
          "x-description" : "Tax Code"
        },
        "id" : {
          "example" : 12345,
          "type" : "number",
          "x-description" : "The Unique System ID of this object"
        },
        "number" : {
          "example" : null,
          "type" : "string",
          "x-description" : "Tax Number"
        },
        "percentage" : {
          "example" : "15",
          "type" : "number",
          "x-description" : "The percentage"
        },
        "resourceType" : {
          "example" : null,
          "type" : "string",
          "x-description" : "(On Demand) Resource Type"
        },
        "taxClass" : {
          "allOf" : [ {
            "$ref" : "#/definitions/TaxClassesItem"
          } ],
          "x-description" : "Tax Class"
        },
        "uri" : {
          "example" : null,
          "type" : "string",
          "x-description" : "Object URI"
        }
      },
      "type" : "object"
    },
    "swagger406" : {
      "x-has-customfields" : false,
      "type" : "object",
      "title" : "406",
      "properties" : {
        "description" : {
          "x-samplevalue" : "Not acceptable - The response content type does not match the 'Accept' header value",
          "type" : "string"
        }
      }
    },
    "InvoiceLineTaxesCollection" : {
      "properties" : {
        "amount" : {
          "example" : null,
          "type" : "string",
          "x-description" : "Amount"
        },
        "id" : {
          "example" : 12345,
          "type" : "number",
          "x-description" : "The Unique System ID of this object"
        },
        "invoiceLine" : {
          "allOf" : [ {
            "$ref" : "#/definitions/InvoiceLinesItem"
          } ],
          "x-description" : "Invoice Line"
        },
        "resourceType" : {
          "example" : null,
          "type" : "string",
          "x-description" : "(On Demand) Resource Type"
        },
        "taxClassItem" : {
          "allOf" : [ {
            "$ref" : "#/definitions/TaxClassItemsItem"
          } ],
          "x-description" : "Tax Class Item"
        },
        "uri" : {
          "example" : null,
          "type" : "string",
          "x-description" : "Object URI"
        }
      },
      "type" : "object"
    },
    "swaggerdefinition-property" : {
      "x-has-customfields" : false,
      "type" : "object",
      "title" : "#/definitions/definition-property",
      "properties" : {
        "type" : {
          "x-samplevalue" : "string",
          "type" : "string"
        }
      }
    },
    "swagger409" : {
      "x-has-customfields" : false,
      "type" : "object",
      "title" : "409",
      "properties" : {
        "description" : {
          "x-samplevalue" : "Conflict - If a resource being created already exists",
          "type" : "string"
        }
      }
    },
    "RegionsPost" : {
      "properties" : {
        "customId" : {
          "example" : "C123-A",
          "type" : "string",
          "x-description" : "Custom Id"
        },
        "name" : {
          "example" : "Sample Name",
          "type" : "string",
          "x-description" : "Name"
        }
      },
      "type" : "object"
    },
    "AccountsPut" : {
      "properties" : {
        "address" : {
          "example" : 180,
          "type" : "number",
          "x-description" : "(On Demand) Address"
        },
        "customId" : {
          "example" : "C123-A",
          "type" : "string",
          "x-description" : "UID"
        },
        "name" : {
          "example" : "Sample Name",
          "type" : "string",
          "x-description" : "Name"
        },
        "region" : {
          "example" : 122,
          "type" : "number",
          "x-description" : "(On Demand) Account Region"
        },
        "subType" : {
          "enum" : [ "client", "multi", "site" ],
          "type" : "string",
          "x-description" : "Client Type"
        },
        "type" : {
          "enum" : [ "CLIENT", "ZONE", "DEPARTMENT" ],
          "type" : "string",
          "x-description" : "Account Type"
        }
      },
      "type" : "object"
    },
    "Pong" : {
      "properties" : {
        "dateTime" : {
          "format" : "date-time",
          "type" : "string"
        },
        "endpoint" : {
          "type" : "string"
        }
      },
      "type" : "object"
    },
    "InvoicesPut" : {
      "properties" : {
        "client" : {
          "example" : 135,
          "type" : "number",
          "x-description" : ""
        },
        "contract" : {
          "example" : 174,
          "type" : "number",
          "x-description" : "Contract"
        },
        "date" : {
          "example" : null,
          "type" : "string",
          "x-description" : "Document date"
        },
        "dueDate" : {
          "example" : null,
          "type" : "string",
          "x-description" : ""
        },
        "lines" : {
          "example" : 183,
          "type" : "number",
          "x-description" : "Lines"
        },
        "number" : {
          "example" : null,
          "type" : "string",
          "x-description" : "Document number"
        },
        "servicePeriodEnd" : {
          "example" : null,
          "type" : "string",
          "x-description" : "Period Start"
        },
        "servicePeriodStart" : {
          "example" : null,
          "type" : "string",
          "x-description" : "Period Start"
        },
        "status" : {
          "enum" : [ "APPROVED", "DRAFT" ],
          "type" : "string",
          "x-description" : ""
        },
        "subTotal" : {
          "example" : null,
          "type" : "string",
          "x-description" : ""
        },
        "taxClass" : {
          "example" : 149,
          "type" : "number",
          "x-description" : "Tax Class"
        },
        "taxTotal" : {
          "example" : null,
          "type" : "string",
          "x-description" : ""
        },
        "total" : {
          "example" : null,
          "type" : "string",
          "x-description" : ""
        }
      },
      "type" : "object"
    },
    "PositionsPost" : {
      "properties" : {
        "account" : {
          "example" : 151,
          "type" : "number",
          "x-description" : "Account"
        },
        "beginDate" : {
          "example" : "2018-01-01",
          "type" : "string",
          "x-description" : "Begin Date"
        },
        "customId" : {
          "example" : "C123-A",
          "type" : "string",
          "x-description" : "UID"
        },
        "description" : {
          "example" : null,
          "type" : "string",
          "x-description" : "Position Description"
        },
        "endDate" : {
          "example" : "2018-05-01",
          "type" : "string",
          "x-description" : "EndDate"
        },
        "name" : {
          "example" : "Sample Name",
          "type" : "string",
          "x-description" : "Name"
        },
        "shiftMemo" : {
          "example" : "Please wear the white uniform.",
          "type" : "string",
          "x-description" : "Memo that will be displayed on the schedule"
        },
        "status" : {
          "enum" : [ "ACTIVE", "INACTIVE" ],
          "type" : "string",
          "x-description" : "Status"
        }
      },
      "type" : "object"
    },
    "ShiftsPut" : {
      "properties" : {
        "breakInMinutes" : {
          "example" : 15,
          "type" : "string",
          "x-description" : "The number of minuted allocated for breaks"
        },
        "employee" : {
          "example" : 179,
          "type" : "number",
          "x-description" : "(On Demand) The employee assigned to the shift"
        },
        "endDateTime" : {
          "example" : "2018-01-01 17:30",
          "type" : "string",
          "x-description" : "End of the shift"
        },
        "notes" : {
          "example" : 124,
          "type" : "number",
          "x-description" : "(On Demand) Notes"
        },
        "plannedPayableHours" : {
          "example" : null,
          "type" : "number",
          "x-description" : "Shift hours, remove breaks when breaks are not payable"
        },
        "position" : {
          "example" : 173,
          "type" : "number",
          "x-description" : "(On Demand) The work post where the shift is scheduled"
        },
        "published" : {
          "example" : false,
          "type" : "boolean",
          "x-description" : "If the shift is published and viewable by employees"
        },
        "startDateTime" : {
          "example" : "2018-01-01 09:00",
          "type" : "string",
          "x-description" : "Start of the shift"
        }
      },
      "type" : "object"
    },
    "TaskSiteSettingsPost" : {
      "properties" : {
        "generalInstructions" : {
          "example" : null,
          "type" : "string",
          "x-description" : "Default Instructions"
        },
        "taskInstructions" : {
          "example" : 171,
          "type" : "number",
          "x-description" : ""
        }
      },
      "type" : "object"
    },
    "VendorsItem" : {
      "properties" : {
        "avatar" : {
          "example" : null,
          "type" : "string",
          "x-description" : "Picture"
        },
        "createdBy" : {
          "example" : null,
          "type" : "string",
          "x-description" : "(On Demand) Created By"
        },
        "createdOn" : {
          "example" : null,
          "type" : "string",
          "x-description" : "(On Demand) Created Date Time"
        },
        "firstName" : {
          "example" : "John",
          "type" : "string",
          "x-description" : "First Name"
        },
        "id" : {
          "example" : 12345,
          "type" : "number",
          "x-description" : "The Unique System ID of this object"
        },
        "jobTitle" : {
          "example" : "Assistant",
          "type" : "string",
          "x-description" : "Job Title"
        },
        "lastName" : {
          "example" : "Smith",
          "type" : "string",
          "x-description" : "Last Name"
        },
        "mainEmail" : {
          "example" : null,
          "type" : "string",
          "x-description" : "Main Email"
        },
        "name" : {
          "example" : "Sample Name",
          "type" : "string",
          "x-description" : "Company"
        },
        "primaryPhone" : {
          "example" : "555-555-1234",
          "type" : "string",
          "x-description" : "Primary Phone"
        },
        "resourceType" : {
          "example" : null,
          "type" : "string",
          "x-description" : "(On Demand) Resource Type"
        },
        "secondaryPhone" : {
          "example" : "555-555-4321",
          "type" : "string",
          "x-description" : "Secondary Phone"
        },
        "updatedBy" : {
          "example" : null,
          "type" : "string",
          "x-description" : "(On Demand) Updated By"
        },
        "updatedOn" : {
          "example" : null,
          "type" : "string",
          "x-description" : "(On Demand) Updated Date Time"
        },
        "uri" : {
          "example" : null,
          "type" : "string",
          "x-description" : "Object URI"
        }
      },
      "type" : "object"
    },
    "NotesPost" : {
      "properties" : {
        "content" : {
          "example" : null,
          "type" : "string",
          "x-description" : "Content"
        },
        "createdBy" : {
          "example" : 189,
          "type" : "number",
          "x-description" : "Created By"
        },
        "createdOn" : {
          "example" : 793,
          "type" : "string",
          "x-description" : "Created On"
        }
      },
      "type" : "object"
    },
    "SkillCategoriesPost" : {
      "properties" : {
        "description" : {
          "example" : null,
          "type" : "string",
          "x-description" : "Details"
        },
        "name" : {
          "example" : "Sample Name",
          "type" : "string",
          "x-description" : "Description"
        }
      },
      "type" : "object"
    },
    "TaxClassItemsPost" : {
      "properties" : {
        "code" : {
          "example" : null,
          "type" : "string",
          "x-description" : "Tax Code"
        },
        "number" : {
          "example" : null,
          "type" : "string",
          "x-description" : "Tax Number"
        },
        "percentage" : {
          "example" : "15",
          "type" : "number",
          "x-description" : "The percentage"
        },
        "taxClass" : {
          "example" : 157,
          "type" : "number",
          "x-description" : "Tax Class"
        }
      },
      "type" : "object"
    },
    "BillItemsCollection" : {
      "properties" : {
        "customId" : {
          "example" : "C123-A",
          "type" : "string",
          "x-description" : "Chart of account ID or custom ID"
        },
        "id" : {
          "example" : 12345,
          "type" : "number",
          "x-description" : "The Unique System ID of this object"
        },
        "isGlobal" : {
          "example" : false,
          "type" : "boolean",
          "x-description" : "If the bill item is available for all region. If not select a region"
        },
        "name" : {
          "example" : "Sample Name",
          "type" : "string",
          "x-description" : "The name of the bill item"
        },
        "region" : {
          "allOf" : [ {
            "$ref" : "#/definitions/RegionsItem"
          } ],
          "x-description" : "(On Demand) Only set a region, when isGlobal is false"
        },
        "resourceType" : {
          "example" : null,
          "type" : "string",
          "x-description" : "(On Demand) Resource Type"
        },
        "status" : {
          "enum" : [ "ACTIVE", "DISABLED" ],
          "type" : "string",
          "x-description" : "If the bill-item is active or disabled"
        },
        "uri" : {
          "example" : null,
          "type" : "string",
          "x-description" : "Object URI"
        }
      },
      "type" : "object"
    },
    "WorkflowInstancesPut" : {
      "properties" : {
        "currentStatus" : {
          "example" : 180,
          "type" : "number",
          "x-description" : "Current Status"
        },
        "logs" : {
          "example" : 106,
          "type" : "number",
          "x-description" : "Logs"
        },
        "modifiedOn" : {
          "example" : null,
          "type" : "string",
          "x-description" : "Modified On"
        },
        "startedOn" : {
          "example" : null,
          "type" : "string",
          "x-description" : "Started On"
        },
        "workflow" : {
          "example" : 111,
          "type" : "number",
          "x-description" : "Workflow"
        }
      },
      "type" : "object"
    },
    "WorkflowsPatch" : {
      "properties" : {
        "name" : {
          "example" : "Sample Name",
          "type" : "string",
          "x-description" : "Name"
        },
        "statuses" : {
          "example" : 122,
          "type" : "number",
          "x-description" : ""
        }
      },
      "type" : "object"
    },
    "TaskSiteInstructionsPatch" : {
      "properties" : {
        "generalInstructions" : {
          "example" : null,
          "type" : "string",
          "x-description" : "General information"
        },
        "jobInstructions" : {
          "example" : null,
          "type" : "string",
          "x-description" : ""
        },
        "site" : {
          "example" : 103,
          "type" : "number",
          "x-description" : "Site"
        },
        "taskType" : {
          "example" : 117,
          "type" : "number",
          "x-description" : "Task Type"
        }
      },
      "type" : "object"
    },
    "PositionsItem" : {
      "properties" : {
        "account" : {
          "allOf" : [ {
            "$ref" : "#/definitions/AccountsItem"
          } ],
          "x-description" : "Account"
        },
        "beginDate" : {
          "example" : "2018-01-01",
          "type" : "string",
          "x-description" : "Begin Date"
        },
        "customId" : {
          "example" : "C123-A",
          "type" : "string",
          "x-description" : "UID"
        },
        "description" : {
          "example" : null,
          "type" : "string",
          "x-description" : "Position Description"
        },
        "endDate" : {
          "example" : "2018-05-01",
          "type" : "string",
          "x-description" : "EndDate"
        },
        "id" : {
          "example" : 12345,
          "type" : "number",
          "x-description" : "The Unique System ID of this object"
        },
        "name" : {
          "example" : "Sample Name",
          "type" : "string",
          "x-description" : "Name"
        },
        "resourceType" : {
          "example" : null,
          "type" : "string",
          "x-description" : "(On Demand) Resource Type"
        },
        "shiftMemo" : {
          "example" : "Please wear the white uniform.",
          "type" : "string",
          "x-description" : "Memo that will be displayed on the schedule"
        },
        "status" : {
          "enum" : [ "ACTIVE", "INACTIVE" ],
          "type" : "string",
          "x-description" : "Status"
        },
        "uri" : {
          "example" : null,
          "type" : "string",
          "x-description" : "Object URI"
        }
      },
      "type" : "object"
    },
    "ReportTemplatesPost" : {
      "properties" : {
        "adminOnly" : {
          "example" : false,
          "type" : "boolean",
          "x-description" : "Admin Only"
        },
        "fields" : {
          "example" : 149,
          "type" : "number",
          "x-description" : "Fields"
        },
        "name" : {
          "example" : "Sample Name",
          "type" : "string",
          "x-description" : "Report name"
        }
      },
      "type" : "object"
    },
    "ShiftsSplit" : {
      "properties" : {
        "firstPeriodBreakMinutes" : {
          "example" : 116,
          "type" : "number",
          "x-description" : "The number of minutes for breaks"
        },
        "firstPeriodUser" : {
          "example" : 822,
          "type" : "number",
          "x-description" : "The user that will work the first period"
        },
        "lastPeriodBreakMinutes" : {
          "example" : 435,
          "type" : "number",
          "x-description" : "The number of minutes for breaks"
        },
        "lastPeriodUser" : {
          "example" : 637,
          "type" : "number",
          "x-description" : "The user that will work the lasts period"
        },
        "splitTime" : {
          "example" : "14:00",
          "type" : "string",
          "x-description" : "Time to split the shift"
        }
      },
      "type" : "object"
    },
    "SkillsCollection" : {
      "properties" : {
        "category" : {
          "allOf" : [ {
            "$ref" : "#/definitions/SkillCategoriesItem"
          } ],
          "x-description" : "Category"
        },
        "dateLabel" : {
          "example" : "Expiration Date",
          "type" : "string",
          "x-description" : "Date Field Label"
        },
        "id" : {
          "example" : 12345,
          "type" : "number",
          "x-description" : "The Unique System ID of this object"
        },
        "label1" : {
          "example" : "Driver License Number",
          "type" : "string",
          "x-description" : "Field Label"
        },
        "label2" : {
          "example" : "Driver License Class",
          "type" : "string",
          "x-description" : "Other Field Label"
        },
        "label3" : {
          "example" : "Driver License Issuer",
          "type" : "string",
          "x-description" : "Another Field Label"
        },
        "name" : {
          "example" : "Driver License",
          "type" : "string",
          "x-description" : "Name"
        }
      },
      "type" : "object"
    },
    "EmployeeAvailabilitiesItem" : {
      "properties" : {
        "available" : {
          "enum" : [ "NOT_AVAILABLE", "AVAILABLE", "MAYBE" ],
          "type" : "string",
          "x-description" : "Available"
        },
        "id" : {
          "example" : 12345,
          "type" : "number",
          "x-description" : "The Unique System ID of this object"
        },
        "timeFrom" : {
          "example" : 732,
          "type" : "string",
          "x-description" : "Number of seconds from the beginning of a day, i.e. 7200 means available from 2 AM"
        },
        "timeTo" : {
          "example" : 216,
          "type" : "string",
          "x-description" : "Number of seconds from the beginning of a day, i.e. 10800 means available between timeFrom and 3 AM"
        },
        "weekDay" : {
          "enum" : [ "MONDAY", "TUESDAY", "WEDNESDAY", "THURSDAY", "FRIDAY", "SATURDAY", "SUNDAY" ],
          "type" : "string",
          "x-description" : "Week Day"
        }
      },
      "type" : "object"
    },
    "PriceTiersPatch" : {
      "properties" : {
        "cancellationThresholdInMinutes" : {
          "example" : 877,
          "type" : "string",
          "x-description" : "Cancellation Threshold"
        },
        "customId" : {
          "example" : "C123-A",
          "type" : "string",
          "x-description" : "Custom identifier"
        },
        "effectiveDate" : {
          "example" : null,
          "type" : "string",
          "x-description" : "Effective date"
        },
        "instructions" : {
          "example" : null,
          "type" : "string",
          "x-description" : "Instructions"
        },
        "name" : {
          "example" : "Sample Name",
          "type" : "string",
          "x-description" : "Name"
        },
        "validUntilDate" : {
          "example" : null,
          "type" : "string",
          "x-description" : "Valid until date"
        }
      },
      "type" : "object"
    },
    "DataViewCategoriesPatch" : {
      "properties" : {
        "iconClass" : {
          "example" : null,
          "type" : "string",
          "x-description" : "Icon"
        },
        "name" : {
          "example" : "Sample Name",
          "type" : "string",
          "x-description" : "Name"
        }
      },
      "type" : "object"
    },
    "swagger500" : {
      "x-has-customfields" : false,
      "type" : "object",
      "title" : "500",
      "properties" : {
        "description" : {
          "x-samplevalue" : "Server error - Something went wrong on the Cloud Elements server",
          "type" : "string"
        }
      }
    },
    "swaggerpaths" : {
      "x-has-customfields" : false,
      "type" : "object",
      "title" : "paths",
      "properties" : {
        "/contacts" : {
          "$ref" : "#/definitions/swagger-contacts-path"
        }
      }
    },
    "EmployeesPost" : {
      "properties" : {
        "address" : {
          "example" : 109,
          "type" : "number",
          "x-description" : "(On Demand) Address"
        },
        "birthday" : {
          "example" : null,
          "type" : "string",
          "x-description" : "(On Demand) Birthday"
        },
        "customId" : {
          "example" : "C123-A",
          "type" : "string",
          "x-description" : "UID"
        },
        "email" : {
          "example" : "john.smith@myemail.com",
          "type" : "string",
          "x-description" : "Email"
        },
        "firstName" : {
          "example" : "John",
          "type" : "string",
          "x-description" : "First Name"
        },
        "gender" : {
          "example" : null,
          "type" : "string",
          "x-description" : "(On Demand) Gender"
        },
        "jobTitle" : {
          "example" : "Assistant",
          "type" : "string",
          "x-description" : "Job Title"
        },
        "lastName" : {
          "example" : "Smith",
          "type" : "string",
          "x-description" : "Last Name"
        },
        "primaryPhone" : {
          "example" : "555-555-1234",
          "type" : "string",
          "x-description" : "Primary Phone"
        },
        "region" : {
          "example" : 153,
          "type" : "number",
          "x-description" : "Region"
        },
        "secondaryPhone" : {
          "example" : "555-555-4321",
          "type" : "string",
          "x-description" : "Secondary Phone"
        },
        "status" : {
          "enum" : [ "ACTIVE", "INACTIVE" ],
          "type" : "string",
          "x-description" : "Status"
        }
      },
      "type" : "object"
    },
    "swagger502" : {
      "x-has-customfields" : false,
      "type" : "object",
      "title" : "502",
      "properties" : {
        "description" : {
          "x-samplevalue" : "Provider server error - Something went wrong on the Provider or Endpoint's server",
          "type" : "string"
        }
      }
    },
    "ReportTemplatesCollection" : {
      "properties" : {
        "adminOnly" : {
          "example" : false,
          "type" : "boolean",
          "x-description" : "Admin Only"
        },
        "fields" : {
          "items" : {
            "$ref" : "#/definitions/ReportTemplateFieldsItem"
          },
          "type" : "array",
          "x-description" : "Fields"
        },
        "id" : {
          "example" : 12345,
          "type" : "number",
          "x-description" : "The Unique System ID of this object"
        },
        "name" : {
          "example" : "Sample Name",
          "type" : "string",
          "x-description" : "Report name"
        },
        "resourceType" : {
          "example" : null,
          "type" : "string",
          "x-description" : "(On Demand) Resource Type"
        },
        "uri" : {
          "example" : null,
          "type" : "string",
          "x-description" : "Object URI"
        }
      },
      "type" : "object"
    },
    "BulkStatus" : {
      "description" : "Status of the bulk upload.",
      "type" : "object",
      "properties" : {
        "batchId" : {
          "description" : "Contact/Leads loaded",
          "type" : "number"
        },
        "message" : {
          "type" : "string"
        },
        "numOfLeadsProcessed" : {
          "description" : "Contact/Leads loaded",
          "type" : "number"
        },
        "numOfRowsFailed" : {
          "description" : "Failed count",
          "type" : "number"
        },
        "numOfRowsWithWarning" : {
          "description" : "Contact/Leads that had warnings",
          "type" : "number"
        },
        "status" : {
          "description" : "Status of the bulk job",
          "type" : "string"
        }
      }
    },
    "PositionsPatch" : {
      "properties" : {
        "account" : {
          "example" : 102,
          "type" : "number",
          "x-description" : "Account"
        },
        "beginDate" : {
          "example" : "2018-01-01",
          "type" : "string",
          "x-description" : "Begin Date"
        },
        "customId" : {
          "example" : "C123-A",
          "type" : "string",
          "x-description" : "UID"
        },
        "description" : {
          "example" : null,
          "type" : "string",
          "x-description" : "Position Description"
        },
        "endDate" : {
          "example" : "2018-05-01",
          "type" : "string",
          "x-description" : "EndDate"
        },
        "name" : {
          "example" : "Sample Name",
          "type" : "string",
          "x-description" : "Name"
        },
        "shiftMemo" : {
          "example" : "Please wear the white uniform.",
          "type" : "string",
          "x-description" : "Memo that will be displayed on the schedule"
        },
        "status" : {
          "enum" : [ "ACTIVE", "INACTIVE" ],
          "type" : "string",
          "x-description" : "Status"
        }
      },
      "type" : "object"
    },
    "BulkJobList" : {
      "title" : "BulkJobList",
      "properties" : {
        "record_count" : {
          "x-samplevalue" : 41,
          "format" : "int32",
          "type" : "integer"
        },
        "job_query" : {
          "x-samplevalue" : "SELECT attributes.organizationid, attributes.systemuserid, organizationid FROM users WHERE organizationid = '3b80f68d-b945-4208-9442-f55bd0e1c5b2'",
          "type" : "string"
        },
        "job_reset_attempt" : {
          "x-samplevalue" : 0,
          "format" : "int32",
          "type" : "integer"
        },
        "completion_time" : {
          "x-samplevalue" : 1542829827804,
          "format" : "int64",
          "type" : "integer"
        },
        "job_status" : {
          "x-samplevalue" : "COMPLETED",
          "type" : "string"
        },
        "notification_url" : {
          "type" : "string"
        },
        "job_direction" : {
          "x-samplevalue" : "DOWNLOAD",
          "type" : "string"
        },
        "error_count" : {
          "x-samplevalue" : 0,
          "format" : "int32",
          "type" : "integer"
        },
        "job_state" : {
          "type" : "string"
        },
        "createdDate" : {
          "x-samplevalue" : 1542829826619,
          "format" : "int64",
          "type" : "integer"
        },
        "job_id" : {
          "x-samplevalue" : 1722,
          "format" : "int32",
          "type" : "integer"
        },
        "object_name" : {
          "x-samplevalue" : "systemuser",
          "type" : "string"
        },
        "fileFormat" : {
          "x-samplevalue" : "csv",
          "type" : "string"
        }
      },
      "type" : "object"
    },
    "PositionSkillsItem" : {
      "properties" : {
        "comments" : {
          "example" : "This is a sample comment.",
          "type" : "string",
          "x-description" : "Comments"
        },
        "id" : {
          "example" : 12345,
          "type" : "number",
          "x-description" : "The Unique System ID of this object"
        },
        "position" : {
          "allOf" : [ {
            "$ref" : "#/definitions/PositionsItem"
          } ],
          "x-description" : "Position"
        },
        "skill" : {
          "allOf" : [ {
            "$ref" : "#/definitions/SkillsItem"
          } ],
          "x-description" : "Skill"
        },
        "type" : {
          "enum" : [ "HARD", "CONDITIONAL", "SOFT" ],
          "type" : "string",
          "x-description" : "Type"
        }
      },
      "type" : "object"
    },
    "InvoicesPost" : {
      "properties" : {
        "client" : {
          "example" : 132,
          "type" : "number",
          "x-description" : ""
        },
        "contract" : {
          "example" : 120,
          "type" : "number",
          "x-description" : "Contract"
        },
        "date" : {
          "example" : null,
          "type" : "string",
          "x-description" : "Document date"
        },
        "dueDate" : {
          "example" : null,
          "type" : "string",
          "x-description" : ""
        },
        "lines" : {
          "example" : 101,
          "type" : "number",
          "x-description" : "Lines"
        },
        "servicePeriodEnd" : {
          "example" : null,
          "type" : "string",
          "x-description" : "Period Start"
        },
        "servicePeriodStart" : {
          "example" : null,
          "type" : "string",
          "x-description" : "Period Start"
        },
        "status" : {
          "enum" : [ "APPROVED", "DRAFT" ],
          "type" : "string",
          "x-description" : ""
        },
        "subTotal" : {
          "example" : null,
          "type" : "string",
          "x-description" : ""
        },
        "taxClass" : {
          "example" : 116,
          "type" : "number",
          "x-description" : "Tax Class"
        },
        "taxTotal" : {
          "example" : null,
          "type" : "string",
          "x-description" : ""
        },
        "total" : {
          "example" : null,
          "type" : "string",
          "x-description" : ""
        }
      },
      "type" : "object"
    },
    "BreakSessionsPatch" : {
      "properties" : {
        "endDateTime" : {
          "example" : "2018-01-01 17:30",
          "type" : "string",
          "x-description" : "End Date & Time"
        },
        "initiationMethod" : {
          "enum" : [ "LIVE", "DELAYED", "DEVICE", "ADMIN", "PHONE", "BROWSER", "BREAK", "BATCH", "KIOSK" ],
          "type" : "string",
          "x-description" : "Initiation Method"
        },
        "startDateTime" : {
          "example" : "2018-01-01 09:00",
          "type" : "string",
          "x-description" : "Start Date & Time"
        },
        "status" : {
          "enum" : [ "OPEN", "CLOSED" ],
          "type" : "string",
          "x-description" : "Status"
        },
        "terminationMethod" : {
          "enum" : [ "LIVE", "DELAYED", "DEVICE", "ADMIN", "PHONE", "BROWSER", "BREAK", "BATCH", "KIOSK" ],
          "type" : "string",
          "x-description" : "Termination Method"
        }
      },
      "type" : "object"
    },
    "ReportFieldsPost" : {
      "properties" : {
        "templateField" : {
          "example" : 131,
          "type" : "number",
          "x-description" : "Field "
        },
        "value" : {
          "example" : null,
          "type" : "string",
          "x-description" : "Valued"
        }
      },
      "type" : "object"
    },
    "TaskPriceTiersPatch" : {
      "properties" : {
        "contract" : {
          "example" : 112,
          "type" : "number",
          "x-description" : "Contract"
        },
        "customId" : {
          "example" : "C123-A",
          "type" : "string",
          "x-description" : "Custom ID"
        },
        "name" : {
          "example" : "Sample Name",
          "type" : "string",
          "x-description" : "Name"
        }
      },
      "type" : "object"
    },
    "ShiftsReplace" : {
      "properties" : {
        "user" : {
          "example" : 834,
          "type" : "number",
          "x-description" : "Replace with"
        }
      },
      "type" : "object"
    },
    "AccountsCollection" : {
      "properties" : {
        "address" : {
          "allOf" : [ {
            "$ref" : "#/definitions/AddressesItem"
          } ],
          "x-description" : "(On Demand) Address"
        },
        "avatar" : {
          "example" : null,
          "type" : "string",
          "x-description" : "Picture"
        },
        "customId" : {
          "example" : "C123-A",
          "type" : "string",
          "x-description" : "UID"
        },
        "id" : {
          "example" : 12345,
          "type" : "number",
          "x-description" : "The Unique System ID of this object"
        },
        "name" : {
          "example" : "Sample Name",
          "type" : "string",
          "x-description" : "Name"
        },
        "notes" : {
          "items" : {
            "$ref" : "#/definitions/NotesItem"
          },
          "type" : "array",
          "x-description" : "(On Demand) Notes"
        },
        "region" : {
          "allOf" : [ {
            "$ref" : "#/definitions/RegionsItem"
          } ],
          "x-description" : "(On Demand) Account Region"
        },
        "resourceType" : {
          "example" : null,
          "type" : "string",
          "x-description" : "(On Demand) Resource Type"
        },
        "subType" : {
          "enum" : [ "client", "multi", "site" ],
          "type" : "string",
          "x-description" : "Client Type"
        },
        "type" : {
          "enum" : [ "CLIENT", "ZONE", "DEPARTMENT" ],
          "type" : "string",
          "x-description" : "Account Type"
        },
        "uri" : {
          "example" : null,
          "type" : "string",
          "x-description" : "Object URI"
        }
      },
      "type" : "object"
    },
    "ContactsPut" : {
      "properties" : {
        "addressLine1" : {
          "example" : "15000 Main Road",
          "type" : "string",
          "x-description" : "Address Line 1"
        },
        "addressLine2" : {
          "example" : "Suite 445",
          "type" : "string",
          "x-description" : "Address Line 2"
        },
        "city" : {
          "example" : "New York",
          "type" : "string",
          "x-description" : "City"
        },
        "country" : {
          "example" : "US",
          "type" : "string",
          "x-description" : "Country"
        },
        "email" : {
          "example" : "john.smith@myemail.com",
          "type" : "string",
          "x-description" : "Email"
        },
        "fax" : {
          "example" : null,
          "type" : "string",
          "x-description" : "Fax"
        },
        "firstName" : {
          "example" : "John",
          "type" : "string",
          "x-description" : "First Name"
        },
        "jobTitle" : {
          "example" : "Assistant",
          "type" : "string",
          "x-description" : "Job Title"
        },
        "lastName" : {
          "example" : "Smith",
          "type" : "string",
          "x-description" : "Last Name"
        },
        "postalCode" : {
          "example" : "10005",
          "type" : "string",
          "x-description" : "Zip/Postal Code"
        },
        "primaryPhone" : {
          "example" : "555-555-1234",
          "type" : "string",
          "x-description" : "Primary Phone"
        },
        "secondaryPhone" : {
          "example" : "555-555-4321",
          "type" : "string",
          "x-description" : "Secondary Phone"
        },
        "state" : {
          "example" : "NY",
          "type" : "string",
          "x-description" : "State/Province"
        }
      },
      "type" : "object"
    },
    "DataViewCategoriesItem" : {
      "properties" : {
        "iconClass" : {
          "example" : null,
          "type" : "string",
          "x-description" : "Icon"
        },
        "id" : {
          "example" : 12345,
          "type" : "number",
          "x-description" : "The Unique System ID of this object"
        },
        "name" : {
          "example" : "Sample Name",
          "type" : "string",
          "x-description" : "Name"
        }
      },
      "type" : "object"
    },
    "DispatchTasksItem" : {
      "properties" : {
        "account" : {
          "allOf" : [ {
            "$ref" : "#/definitions/AccountsItem"
          } ],
          "x-description" : "Account"
        },
        "assignedUser" : {
          "allOf" : [ {
            "$ref" : "#/definitions/EmployeesItem"
          } ],
          "x-description" : "Assigned User"
        },
        "customId" : {
          "example" : "C123-A",
          "type" : "string",
          "x-description" : "Custom ID of the event"
        },
        "endDateTime" : {
          "example" : "2018-01-01 17:30",
          "type" : "string",
          "x-description" : "End Date / Time"
        },
        "id" : {
          "example" : 12345,
          "type" : "number",
          "x-description" : "The Unique System ID of this object"
        },
        "location" : {
          "allOf" : [ {
            "$ref" : "#/definitions/DispatchCustomLocationsItem"
          } ],
          "x-description" : "Custom Location"
        },
        "locationType" : {
          "example" : null,
          "type" : "string",
          "x-description" : "Is A one time location"
        },
        "name" : {
          "example" : "Sample Name",
          "type" : "string",
          "x-description" : "Name"
        },
        "plannedDurationInMinutes" : {
          "example" : 361,
          "type" : "number",
          "x-description" : "Planned duration in minutes"
        },
        "priceTier" : {
          "allOf" : [ {
            "$ref" : "#/definitions/TaskPriceTiersItem"
          } ],
          "x-description" : "Price Tier"
        },
        "priority" : {
          "enum" : [ "LOW", "IMPORTANT", "URGENT" ],
          "type" : "string",
          "x-description" : "Priority"
        },
        "reminderInMinutes" : {
          "example" : 717,
          "type" : "number",
          "x-description" : "@todo"
        },
        "report" : {
          "example" : null,
          "type" : "string",
          "x-description" : "Report"
        },
        "reportTemplate" : {
          "allOf" : [ {
            "$ref" : "#/definitions/ReportTemplatesItem"
          } ],
          "x-description" : "Report Type"
        },
        "resourceType" : {
          "example" : null,
          "type" : "string",
          "x-description" : "(On Demand) Resource Type"
        },
        "startDateTime" : {
          "example" : "2018-01-01 09:00",
          "type" : "string",
          "x-description" : "Start Date / Time"
        },
        "status" : {
          "enum" : [ "OPEN", "LIVE", "CLOSED", "ON_WAY", "RECEIVED" ],
          "type" : "string",
          "x-description" : "Status"
        },
        "taskInstructions" : {
          "example" : null,
          "type" : "string",
          "x-description" : "Task Instructions"
        },
        "taskType" : {
          "allOf" : [ {
            "$ref" : "#/definitions/TaskTypesItem"
          } ],
          "x-description" : "Task Type"
        },
        "uri" : {
          "example" : null,
          "type" : "string",
          "x-description" : "Object URI"
        },
        "workflowInstance" : {
          "allOf" : [ {
            "$ref" : "#/definitions/WorkflowInstancesItem"
          } ],
          "x-description" : "Workflow Instance"
        }
      },
      "type" : "object"
    },
    "ClientBillingSettingsPost" : {
      "properties" : {
        "client" : {
          "example" : 168,
          "type" : "number",
          "x-description" : ""
        },
        "emailList" : {
          "example" : null,
          "type" : "string",
          "x-description" : "Invoice Email List"
        }
      },
      "type" : "object"
    },
    "TaskSiteInstructionsPost" : {
      "properties" : {
        "generalInstructions" : {
          "example" : null,
          "type" : "string",
          "x-description" : "General information"
        },
        "jobInstructions" : {
          "example" : null,
          "type" : "string",
          "x-description" : ""
        },
        "site" : {
          "example" : 101,
          "type" : "number",
          "x-description" : "Site"
        },
        "taskType" : {
          "example" : 128,
          "type" : "number",
          "x-description" : "Task Type"
        }
      },
      "type" : "object"
    },
    "EmployeesCollection" : {
      "properties" : {
        "accountAssignments" : {
          "items" : {
            "$ref" : "#/definitions/EmployeeAccountAssignmentsItem"
          },
          "type" : "array",
          "x-description" : "(On Demand) Account Assignments"
        },
        "accountBans" : {
          "items" : {
            "$ref" : "#/definitions/EmployeeAccountBansItem"
          },
          "type" : "array",
          "x-description" : "(On Demand) Account Bans"
        },
        "address" : {
          "allOf" : [ {
            "$ref" : "#/definitions/AddressesItem"
          } ],
          "x-description" : "(On Demand) Address"
        },
        "age" : {
          "example" : 308,
          "type" : "number",
          "x-description" : "(On Demand) Age"
        },
        "ageGroup" : {
          "example" : null,
          "type" : "string",
          "x-description" : "(On Demand) Age"
        },
        "availabilities" : {
          "items" : {
            "$ref" : "#/definitions/EmployeeAvailabilitiesItem"
          },
          "type" : "array",
          "x-description" : "(On Demand) Employee Availability"
        },
        "avatar" : {
          "example" : null,
          "type" : "string",
          "x-description" : "Picture"
        },
        "birthday" : {
          "example" : null,
          "type" : "string",
          "x-description" : "(On Demand) Birthday"
        },
        "createdBy" : {
          "example" : null,
          "type" : "string",
          "x-description" : "(On Demand) Created By"
        },
        "createdOn" : {
          "example" : null,
          "type" : "string",
          "x-description" : "(On Demand) Created Date Time"
        },
        "customId" : {
          "example" : "C123-A",
          "type" : "string",
          "x-description" : "UID"
        },
        "email" : {
          "example" : "john.smith@myemail.com",
          "type" : "string",
          "x-description" : "Email"
        },
        "emergencyContacts" : {
          "items" : {
            "$ref" : "#/definitions/ContactsItem"
          },
          "type" : "array",
          "x-description" : "(On Demand) Emergency Contacts"
        },
        "employmentProfile" : {
          "allOf" : [ {
            "$ref" : "#/definitions/EmploymentProfilesItem"
          } ],
          "x-description" : "(On Demand) The profile that contains start date, tesat"
        },
        "firstName" : {
          "example" : "John",
          "type" : "string",
          "x-description" : "First Name"
        },
        "gender" : {
          "example" : null,
          "type" : "string",
          "x-description" : "(On Demand) Gender"
        },
        "id" : {
          "example" : 12345,
          "type" : "number",
          "x-description" : "The Unique System ID of this object"
        },
        "jobTitle" : {
          "example" : "Assistant",
          "type" : "string",
          "x-description" : "Job Title"
        },
        "lastName" : {
          "example" : "Smith",
          "type" : "string",
          "x-description" : "Last Name"
        },
        "name" : {
          "example" : "Sample Name",
          "type" : "string",
          "x-description" : "(On Demand) Full Name"
        },
        "notes" : {
          "items" : {
            "$ref" : "#/definitions/NotesItem"
          },
          "type" : "array",
          "x-description" : "(On Demand) Notes"
        },
        "primaryPhone" : {
          "example" : "555-555-1234",
          "type" : "string",
          "x-description" : "Primary Phone"
        },
        "region" : {
          "allOf" : [ {
            "$ref" : "#/definitions/RegionsItem"
          } ],
          "x-description" : "Region"
        },
        "resourceType" : {
          "example" : null,
          "type" : "string",
          "x-description" : "(On Demand) Resource Type"
        },
        "secondaryPhone" : {
          "example" : "555-555-4321",
          "type" : "string",
          "x-description" : "Secondary Phone"
        },
        "skills" : {
          "items" : {
            "$ref" : "#/definitions/EmployeeSkillsItem"
          },
          "type" : "array",
          "x-description" : "(On Demand) Skills"
        },
        "status" : {
          "enum" : [ "ACTIVE", "INACTIVE" ],
          "type" : "string",
          "x-description" : "Status"
        },
        "updatedBy" : {
          "example" : null,
          "type" : "string",
          "x-description" : "(On Demand) Updated By"
        },
        "updatedOn" : {
          "example" : null,
          "type" : "string",
          "x-description" : "(On Demand) Updated Date Time"
        },
        "uri" : {
          "example" : null,
          "type" : "string",
          "x-description" : "Object URI"
        }
      },
      "type" : "object"
    },
    "WorkSessionsPost" : {
      "properties" : {
        "breaks" : {
          "example" : 104,
          "type" : "number",
          "x-description" : "(On Demand) Breaks"
        },
        "employee" : {
          "example" : 147,
          "type" : "number",
          "x-description" : "(On Demand) Employee"
        },
        "endDateTime" : {
          "example" : "2018-01-01 17:30",
          "type" : "string",
          "x-description" : "End Date & Time"
        },
        "initiationMethod" : {
          "enum" : [ "LIVE", "DELAYED", "DEVICE", "ADMIN", "PHONE", "BROWSER", "BREAK", "BATCH", "KIOSK" ],
          "type" : "string",
          "x-description" : "Initiation Method"
        },
        "position" : {
          "example" : 150,
          "type" : "number",
          "x-description" : "(On Demand) Position"
        },
        "startDateTime" : {
          "example" : "2018-01-01 09:00",
          "type" : "string",
          "x-description" : "Start Date & Time"
        },
        "status" : {
          "enum" : [ "OPEN", "CLOSED" ],
          "type" : "string",
          "x-description" : "Status"
        },
        "terminationMethod" : {
          "enum" : [ "LIVE", "DELAYED", "DEVICE", "ADMIN", "PHONE", "BROWSER", "BREAK", "BATCH", "KIOSK" ],
          "type" : "string",
          "x-description" : "Termination Method"
        }
      },
      "type" : "object"
    },
    "BulkUploadResponse" : {
      "description" : "BulkLoad response of bulk download.",
      "properties" : {
        "id" : {
          "description" : "Id of the bulk job",
          "type" : "string"
        },
        "instanceId" : {
          "description" : "Instance Id of the bulk job",
          "format" : "int64",
          "type" : "integer"
        },
        "status" : {
          "description" : "Status of the bulk job",
          "type" : "string"
        }
      },
      "type" : "object"
    },
    "DispatchCustomLocationsItem" : {
      "properties" : {
        "addressLine1" : {
          "example" : "15000 Main Road",
          "type" : "string",
          "x-description" : "Address line 1"
        },
        "addressLine2" : {
          "example" : "Suite 445",
          "type" : "string",
          "x-description" : "Address line 2"
        },
        "city" : {
          "example" : "New York",
          "type" : "string",
          "x-description" : "City"
        },
        "country" : {
          "example" : "US",
          "type" : "string",
          "x-description" : "Country"
        },
        "id" : {
          "example" : 12345,
          "type" : "number",
          "x-description" : "The Unique System ID of this object"
        },
        "latitude" : {
          "example" : null,
          "type" : "number",
          "x-description" : "Latitude"
        },
        "longitude" : {
          "example" : null,
          "type" : "number",
          "x-description" : "Longitude"
        },
        "name" : {
          "example" : "Company or description of location",
          "type" : "string",
          "x-description" : "Name"
        },
        "postalCode" : {
          "example" : "10005",
          "type" : "string",
          "x-description" : "Zip / Postal Code"
        },
        "resourceType" : {
          "example" : null,
          "type" : "string",
          "x-description" : "(On Demand) Resource Type"
        },
        "state" : {
          "example" : "NY",
          "type" : "string",
          "x-description" : "State / Province"
        },
        "taskId" : {
          "example" : 903,
          "type" : "number",
          "x-description" : "Task ID"
        },
        "type" : {
          "enum" : [ "ADDRESS", "COORDINATES" ],
          "type" : "string",
          "x-description" : "Type"
        },
        "uri" : {
          "example" : null,
          "type" : "string",
          "x-description" : "Object URI"
        }
      },
      "type" : "object"
    },
    "DataViewCategoriesPost" : {
      "properties" : {
        "iconClass" : {
          "example" : null,
          "type" : "string",
          "x-description" : "Icon"
        },
        "name" : {
          "example" : "Sample Name",
          "type" : "string",
          "x-description" : "Name"
        }
      },
      "type" : "object"
    },
    "NotesPut" : {
      "properties" : {
        "content" : {
          "example" : null,
          "type" : "string",
          "x-description" : "Content"
        },
        "createdBy" : {
          "example" : 117,
          "type" : "number",
          "x-description" : "Created By"
        },
        "createdOn" : {
          "example" : 479,
          "type" : "string",
          "x-description" : "Created On"
        }
      },
      "type" : "object"
    },
    "RegionsPatch" : {
      "properties" : {
        "customId" : {
          "example" : "C123-A",
          "type" : "string",
          "x-description" : "Custom Id"
        },
        "name" : {
          "example" : "Sample Name",
          "type" : "string",
          "x-description" : "Name"
        }
      },
      "type" : "object"
    },
    "ReportFieldsPut" : {
      "properties" : {
        "templateField" : {
          "example" : 181,
          "type" : "number",
          "x-description" : "Field "
        },
        "value" : {
          "example" : null,
          "type" : "string",
          "x-description" : "Valued"
        }
      },
      "type" : "object"
    },
    "ReportTemplateFieldsCollection" : {
      "properties" : {
        "adminOnly" : {
          "example" : false,
          "type" : "boolean",
          "x-description" : "Admin Only"
        },
        "displayOrder" : {
          "example" : 474,
          "type" : "number",
          "x-description" : "Display Order Index"
        },
        "extra" : {
          "example" : null,
          "type" : "string",
          "x-description" : "Extra information"
        },
        "id" : {
          "example" : 12345,
          "type" : "number",
          "x-description" : "The Unique System ID of this object"
        },
        "isDispatcherField" : {
          "example" : false,
          "type" : "boolean",
          "x-description" : "Dispatcher Field"
        },
        "label" : {
          "example" : null,
          "type" : "string",
          "x-description" : "Name"
        },
        "list" : {
          "example" : null,
          "type" : "string",
          "x-description" : "List"
        },
        "name" : {
          "example" : "Sample Name",
          "type" : "string",
          "x-description" : "Field"
        },
        "required" : {
          "example" : false,
          "type" : "boolean",
          "x-description" : "Required"
        },
        "type" : {
          "example" : null,
          "type" : "string",
          "x-description" : "Type"
        }
      },
      "type" : "object"
    },
    "RegionsPut" : {
      "properties" : {
        "customId" : {
          "example" : "C123-A",
          "type" : "string",
          "x-description" : "Custom Id"
        },
        "name" : {
          "example" : "Sample Name",
          "type" : "string",
          "x-description" : "Name"
        }
      },
      "type" : "object"
    },
    "EmployeeAccountBansCollection" : {
      "properties" : {
        "account" : {
          "allOf" : [ {
            "$ref" : "#/definitions/AccountsItem"
          } ],
          "x-description" : "Account"
        },
        "employee" : {
          "allOf" : [ {
            "$ref" : "#/definitions/EmployeesItem"
          } ],
          "x-description" : "Employee"
        },
        "reason" : {
          "example" : 945,
          "type" : "string",
          "x-description" : "Reason"
        },
        "startDate" : {
          "example" : null,
          "type" : "string",
          "x-description" : "Start Date"
        }
      },
      "type" : "object"
    },
    "RegionsItem" : {
      "properties" : {
        "customId" : {
          "example" : "C123-A",
          "type" : "string",
          "x-description" : "Custom Id"
        },
        "id" : {
          "example" : 12345,
          "type" : "number",
          "x-description" : "The Unique System ID of this object"
        },
        "name" : {
          "example" : "Sample Name",
          "type" : "string",
          "x-description" : "Name"
        },
        "resourceType" : {
          "example" : null,
          "type" : "string",
          "x-description" : "(On Demand) Resource Type"
        },
        "uri" : {
          "example" : null,
          "type" : "string",
          "x-description" : "Object URI"
        }
      },
      "type" : "object"
    },
    "WorkflowStatusesPost" : {
      "properties" : {
        "alertThresholdInMinutes" : {
          "example" : 541,
          "type" : "number",
          "x-description" : "Alert threshold (in minutes)"
        },
        "formatBackgroundColor" : {
          "example" : null,
          "type" : "string",
          "x-description" : "Format text color"
        },
        "formatTextColor" : {
          "example" : null,
          "type" : "string",
          "x-description" : "Format text color"
        },
        "name" : {
          "example" : "Sample Name",
          "type" : "string",
          "x-description" : "Name"
        },
        "warningThresholdInMinutes" : {
          "example" : 444,
          "type" : "number",
          "x-description" : "Warning threshold (in minutes)"
        }
      },
      "type" : "object"
    },
    "swaggerparameters" : {
      "x-has-customfields" : false,
      "title" : "parameters",
      "properties" : {
        "schema" : {
          "$ref" : "#/definitions/swaggerparametersschema"
        },
        "in" : {
          "x-samplevalue" : "header",
          "type" : "string"
        },
        "name" : {
          "x-samplevalue" : "Authorization",
          "type" : "string"
        },
        "description" : {
          "x-samplevalue" : "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
          "type" : "string"
        },
        "type" : {
          "x-samplevalue" : "string",
          "type" : "string"
        },
        "required" : {
          "x-samplevalue" : true,
          "type" : "boolean"
        }
      },
      "type" : "object"
    },
    "ContactsPatch" : {
      "properties" : {
        "addressLine1" : {
          "example" : "15000 Main Road",
          "type" : "string",
          "x-description" : "Address Line 1"
        },
        "addressLine2" : {
          "example" : "Suite 445",
          "type" : "string",
          "x-description" : "Address Line 2"
        },
        "city" : {
          "example" : "New York",
          "type" : "string",
          "x-description" : "City"
        },
        "country" : {
          "example" : "US",
          "type" : "string",
          "x-description" : "Country"
        },
        "email" : {
          "example" : "john.smith@myemail.com",
          "type" : "string",
          "x-description" : "Email"
        },
        "fax" : {
          "example" : null,
          "type" : "string",
          "x-description" : "Fax"
        },
        "firstName" : {
          "example" : "John",
          "type" : "string",
          "x-description" : "First Name"
        },
        "jobTitle" : {
          "example" : "Assistant",
          "type" : "string",
          "x-description" : "Job Title"
        },
        "lastName" : {
          "example" : "Smith",
          "type" : "string",
          "x-description" : "Last Name"
        },
        "postalCode" : {
          "example" : "10005",
          "type" : "string",
          "x-description" : "Zip/Postal Code"
        },
        "primaryPhone" : {
          "example" : "555-555-1234",
          "type" : "string",
          "x-description" : "Primary Phone"
        },
        "secondaryPhone" : {
          "example" : "555-555-4321",
          "type" : "string",
          "x-description" : "Secondary Phone"
        },
        "state" : {
          "example" : "NY",
          "type" : "string",
          "x-description" : "State/Province"
        }
      },
      "type" : "object"
    },
    "ClientBillingSettingsPatch" : {
      "properties" : {
        "client" : {
          "example" : 191,
          "type" : "number",
          "x-description" : ""
        },
        "emailList" : {
          "example" : null,
          "type" : "string",
          "x-description" : "Invoice Email List"
        }
      },
      "type" : "object"
    },
    "ClientsPut" : {
      "properties" : {
        "address" : {
          "example" : 150,
          "type" : "number",
          "x-description" : "Address"
        },
        "company" : {
          "example" : "Ace Properties inc.",
          "type" : "string",
          "x-description" : "Company Name"
        },
        "customId" : {
          "example" : "C123-A",
          "type" : "string",
          "x-description" : "UID"
        },
        "email" : {
          "example" : "john.smith@myemail.com",
          "type" : "string",
          "x-description" : "Email"
        },
        "firstName" : {
          "example" : "John",
          "type" : "string",
          "x-description" : "First Name"
        },
        "jobTitle" : {
          "example" : "Assistant",
          "type" : "string",
          "x-description" : "Job Title"
        },
        "lastName" : {
          "example" : "Smith",
          "type" : "string",
          "x-description" : "Last Name"
        },
        "primaryPhone" : {
          "example" : "555-555-1234",
          "type" : "string",
          "x-description" : "Primary Phone"
        },
        "region" : {
          "example" : 131,
          "type" : "number",
          "x-description" : "Region"
        },
        "secondaryPhone" : {
          "example" : "555-555-4321",
          "type" : "string",
          "x-description" : "Secondary Phone"
        },
        "type" : {
          "enum" : [ "SERVICE_LOCATION", "CLIENT", "MULTI_LOCATION_CLIENT" ],
          "type" : "string",
          "x-description" : "Type of Record"
        }
      },
      "type" : "object"
    },
    "ContactsCollection" : {
      "properties" : {
        "addressLine1" : {
          "example" : "15000 Main Road",
          "type" : "string",
          "x-description" : "Address Line 1"
        },
        "addressLine2" : {
          "example" : "Suite 445",
          "type" : "string",
          "x-description" : "Address Line 2"
        },
        "city" : {
          "example" : "New York",
          "type" : "string",
          "x-description" : "City"
        },
        "country" : {
          "example" : "US",
          "type" : "string",
          "x-description" : "Country"
        },
        "email" : {
          "example" : "john.smith@myemail.com",
          "type" : "string",
          "x-description" : "Email"
        },
        "fax" : {
          "example" : null,
          "type" : "string",
          "x-description" : "Fax"
        },
        "firstName" : {
          "example" : "John",
          "type" : "string",
          "x-description" : "First Name"
        },
        "id" : {
          "example" : 12345,
          "type" : "number",
          "x-description" : "The Unique System ID of this object"
        },
        "jobTitle" : {
          "example" : "Assistant",
          "type" : "string",
          "x-description" : "Job Title"
        },
        "lastName" : {
          "example" : "Smith",
          "type" : "string",
          "x-description" : "Last Name"
        },
        "postalCode" : {
          "example" : "10005",
          "type" : "string",
          "x-description" : "Zip/Postal Code"
        },
        "primaryPhone" : {
          "example" : "555-555-1234",
          "type" : "string",
          "x-description" : "Primary Phone"
        },
        "resourceType" : {
          "example" : null,
          "type" : "string",
          "x-description" : "(On Demand) Resource Type"
        },
        "secondaryPhone" : {
          "example" : "555-555-4321",
          "type" : "string",
          "x-description" : "Secondary Phone"
        },
        "state" : {
          "example" : "NY",
          "type" : "string",
          "x-description" : "State/Province"
        },
        "uri" : {
          "example" : null,
          "type" : "string",
          "x-description" : "Object URI"
        }
      },
      "type" : "object"
    },
    "TaxClassItemsPatch" : {
      "properties" : {
        "code" : {
          "example" : null,
          "type" : "string",
          "x-description" : "Tax Code"
        },
        "number" : {
          "example" : null,
          "type" : "string",
          "x-description" : "Tax Number"
        },
        "percentage" : {
          "example" : "15",
          "type" : "number",
          "x-description" : "The percentage"
        },
        "taxClass" : {
          "example" : 159,
          "type" : "number",
          "x-description" : "Tax Class"
        }
      },
      "type" : "object"
    },
    "TaskSiteInstructionsCollection" : {
      "properties" : {
        "generalInstructions" : {
          "example" : null,
          "type" : "string",
          "x-description" : "General information"
        },
        "id" : {
          "example" : 12345,
          "type" : "number",
          "x-description" : "The Unique System ID of this object"
        },
        "jobInstructions" : {
          "example" : null,
          "type" : "string",
          "x-description" : ""
        },
        "site" : {
          "allOf" : [ {
            "$ref" : "#/definitions/AccountsItem"
          } ],
          "x-description" : "Site"
        },
        "taskType" : {
          "allOf" : [ {
            "$ref" : "#/definitions/TaskTypesItem"
          } ],
          "x-description" : "Task Type"
        }
      },
      "type" : "object"
    },
    "ShiftsPatch" : {
      "properties" : {
        "breakInMinutes" : {
          "example" : 15,
          "type" : "string",
          "x-description" : "The number of minuted allocated for breaks"
        },
        "employee" : {
          "example" : 179,
          "type" : "number",
          "x-description" : "(On Demand) The employee assigned to the shift"
        },
        "endDateTime" : {
          "example" : "2018-01-01 17:30",
          "type" : "string",
          "x-description" : "End of the shift"
        },
        "notes" : {
          "example" : 188,
          "type" : "number",
          "x-description" : "(On Demand) Notes"
        },
        "onShiftBoard" : {
          "example" : false,
          "type" : "boolean",
          "x-description" : "If the shift is available on the shiftboard"
        },
        "plannedPayableHours" : {
          "example" : null,
          "type" : "number",
          "x-description" : "Shift hours, remove breaks when breaks are not payable"
        },
        "position" : {
          "example" : 149,
          "type" : "number",
          "x-description" : "(On Demand) The work post where the shift is scheduled"
        },
        "published" : {
          "example" : false,
          "type" : "boolean",
          "x-description" : "If the shift is published and viewable by employees"
        },
        "startDateTime" : {
          "example" : "2018-01-01 09:00",
          "type" : "string",
          "x-description" : "Start of the shift"
        }
      },
      "type" : "object"
    },
    "TaxClassesCollection" : {
      "properties" : {
        "id" : {
          "example" : 12345,
          "type" : "number",
          "x-description" : "The Unique System ID of this object"
        },
        "name" : {
          "example" : "Sample Name",
          "type" : "string",
          "x-description" : "Tax Class"
        },
        "resourceType" : {
          "example" : null,
          "type" : "string",
          "x-description" : "(On Demand) Resource Type"
        },
        "uri" : {
          "example" : null,
          "type" : "string",
          "x-description" : "Object URI"
        }
      },
      "type" : "object"
    },
    "PriceTiersPut" : {
      "properties" : {
        "cancellationThresholdInMinutes" : {
          "example" : 525,
          "type" : "string",
          "x-description" : "Cancellation Threshold"
        },
        "customId" : {
          "example" : "C123-A",
          "type" : "string",
          "x-description" : "Custom identifier"
        },
        "effectiveDate" : {
          "example" : null,
          "type" : "string",
          "x-description" : "Effective date"
        },
        "instructions" : {
          "example" : null,
          "type" : "string",
          "x-description" : "Instructions"
        },
        "name" : {
          "example" : "Sample Name",
          "type" : "string",
          "x-description" : "Name"
        },
        "validUntilDate" : {
          "example" : null,
          "type" : "string",
          "x-description" : "Valid until date"
        }
      },
      "type" : "object"
    },
    "WorkflowInstancesItem" : {
      "properties" : {
        "currentStatus" : {
          "allOf" : [ {
            "$ref" : "#/definitions/WorkflowStatusesItem"
          } ],
          "x-description" : "Current Status"
        },
        "id" : {
          "example" : 12345,
          "type" : "number",
          "x-description" : "The Unique System ID of this object"
        },
        "logs" : {
          "items" : {
            "$ref" : "#/definitions/WorkflowInstanceLogsItem"
          },
          "type" : "array",
          "x-description" : "Logs"
        },
        "modifiedOn" : {
          "example" : null,
          "type" : "string",
          "x-description" : "Modified On"
        },
        "resourceType" : {
          "example" : null,
          "type" : "string",
          "x-description" : "(On Demand) Resource Type"
        },
        "startedOn" : {
          "example" : null,
          "type" : "string",
          "x-description" : "Started On"
        },
        "uri" : {
          "example" : null,
          "type" : "string",
          "x-description" : "Object URI"
        },
        "workflow" : {
          "allOf" : [ {
            "$ref" : "#/definitions/WorkflowsItem"
          } ],
          "x-description" : "Workflow"
        }
      },
      "type" : "object"
    },
    "swagger200" : {
      "x-has-customfields" : false,
      "type" : "object",
      "title" : "200",
      "properties" : {
        "schema" : {
          "$ref" : "#/definitions/swaggerschema"
        },
        "description" : {
          "x-samplevalue" : "OK - Everything worked as expected",
          "type" : "string"
        }
      }
    },
    "DispatchTasksPatch" : {
      "properties" : {
        "account" : {
          "example" : 148,
          "type" : "number",
          "x-description" : "Account"
        },
        "assignedUser" : {
          "example" : 188,
          "type" : "number",
          "x-description" : "Assigned User"
        },
        "customId" : {
          "example" : "C123-A",
          "type" : "string",
          "x-description" : "Custom ID of the event"
        },
        "endDateTime" : {
          "example" : "2018-01-01 17:30",
          "type" : "string",
          "x-description" : "End Date / Time"
        },
        "location" : {
          "example" : 120,
          "type" : "number",
          "x-description" : "Custom Location"
        },
        "locationType" : {
          "example" : null,
          "type" : "string",
          "x-description" : "Is A one time location"
        },
        "plannedDurationInMinutes" : {
          "example" : 895,
          "type" : "number",
          "x-description" : "Planned duration in minutes"
        },
        "priceTier" : {
          "example" : 162,
          "type" : "number",
          "x-description" : "Price Tier"
        },
        "priority" : {
          "enum" : [ "LOW", "IMPORTANT", "URGENT" ],
          "type" : "string",
          "x-description" : "Priority"
        },
        "reminderInMinutes" : {
          "example" : 555,
          "type" : "number",
          "x-description" : "@todo"
        },
        "report" : {
          "example" : null,
          "type" : "string",
          "x-description" : "Report"
        },
        "reportTemplate" : {
          "example" : 128,
          "type" : "number",
          "x-description" : "Report Type"
        },
        "startDateTime" : {
          "example" : "2018-01-01 09:00",
          "type" : "string",
          "x-description" : "Start Date / Time"
        },
        "status" : {
          "enum" : [ "OPEN", "LIVE", "CLOSED", "ON_WAY", "RECEIVED" ],
          "type" : "string",
          "x-description" : "Status"
        },
        "taskInstructions" : {
          "example" : null,
          "type" : "string",
          "x-description" : "Task Instructions"
        },
        "taskType" : {
          "example" : 176,
          "type" : "number",
          "x-description" : "Task Type"
        },
        "workflowInstance" : {
          "example" : 193,
          "type" : "number",
          "x-description" : "Workflow Instance"
        }
      },
      "type" : "object"
    },
    "AddressesPatch" : {
      "properties" : {
        "addressLine1" : {
          "example" : "15000 Main Road",
          "type" : "string",
          "x-description" : "Address"
        },
        "addressLine2" : {
          "example" : "Suite 445",
          "type" : "string",
          "x-description" : "Address Line 2"
        },
        "city" : {
          "example" : "New York",
          "type" : "string",
          "x-description" : "City"
        },
        "country" : {
          "example" : "US",
          "type" : "string",
          "x-description" : "Country"
        },
        "postalCode" : {
          "example" : "10005",
          "type" : "string",
          "x-description" : "Zip/Postal Code"
        },
        "state" : {
          "example" : "NY",
          "type" : "string",
          "x-description" : "State/Province"
        }
      },
      "type" : "object"
    },
    "ClientsCollection" : {
      "properties" : {
        "address" : {
          "allOf" : [ {
            "$ref" : "#/definitions/AddressesItem"
          } ],
          "x-description" : "Address"
        },
        "avatar" : {
          "example" : null,
          "type" : "string",
          "x-description" : "Picture"
        },
        "company" : {
          "example" : "Ace Properties inc.",
          "type" : "string",
          "x-description" : "Company Name"
        },
        "createdBy" : {
          "example" : null,
          "type" : "string",
          "x-description" : "(On Demand) Created By"
        },
        "createdOn" : {
          "example" : null,
          "type" : "string",
          "x-description" : "(On Demand) Created Date Time"
        },
        "customId" : {
          "example" : "C123-A",
          "type" : "string",
          "x-description" : "UID"
        },
        "email" : {
          "example" : "john.smith@myemail.com",
          "type" : "string",
          "x-description" : "Email"
        },
        "employeeAssignments" : {
          "items" : {
            "$ref" : "#/definitions/EmployeeAccountAssignmentsItem"
          },
          "type" : "array",
          "x-description" : "(On Demand) Assigned Employees"
        },
        "employeeBans" : {
          "items" : {
            "$ref" : "#/definitions/EmployeeAccountBansItem"
          },
          "type" : "array",
          "x-description" : "(On Demand) Banned Employees"
        },
        "firstName" : {
          "example" : "John",
          "type" : "string",
          "x-description" : "First Name"
        },
        "id" : {
          "example" : 12345,
          "type" : "number",
          "x-description" : "The Unique System ID of this object"
        },
        "jobTitle" : {
          "example" : "Assistant",
          "type" : "string",
          "x-description" : "Job Title"
        },
        "lastName" : {
          "example" : "Smith",
          "type" : "string",
          "x-description" : "Last Name"
        },
        "name" : {
          "example" : "Sample Name",
          "type" : "string",
          "x-description" : "(On Demand) Company Name"
        },
        "notes" : {
          "items" : {
            "$ref" : "#/definitions/NotesItem"
          },
          "type" : "array",
          "x-description" : "(On Demand) Notes"
        },
        "primaryPhone" : {
          "example" : "555-555-1234",
          "type" : "string",
          "x-description" : "Primary Phone"
        },
        "region" : {
          "allOf" : [ {
            "$ref" : "#/definitions/RegionsItem"
          } ],
          "x-description" : "Region"
        },
        "resourceType" : {
          "example" : null,
          "type" : "string",
          "x-description" : "(On Demand) Resource Type"
        },
        "secondaryPhone" : {
          "example" : "555-555-4321",
          "type" : "string",
          "x-description" : "Secondary Phone"
        },
        "status" : {
          "enum" : [ "ACTIVE", "INACTIVE", "CLOSED" ],
          "type" : "string",
          "x-description" : "Status"
        },
        "type" : {
          "enum" : [ "SERVICE_LOCATION", "CLIENT", "MULTI_LOCATION_CLIENT" ],
          "type" : "string",
          "x-description" : "Type of Record"
        },
        "updatedBy" : {
          "example" : null,
          "type" : "string",
          "x-description" : "(On Demand) Updated By"
        },
        "updatedOn" : {
          "example" : null,
          "type" : "string",
          "x-description" : "(On Demand) Updated Date Time"
        },
        "uri" : {
          "example" : null,
          "type" : "string",
          "x-description" : "Object URI"
        }
      },
      "type" : "object"
    },
    "TaxClassesPut" : {
      "properties" : {
        "name" : {
          "example" : "Sample Name",
          "type" : "string",
          "x-description" : "Tax Class"
        }
      },
      "type" : "object"
    },
    "ReportTemplatesPatch" : {
      "properties" : {
        "adminOnly" : {
          "example" : false,
          "type" : "boolean",
          "x-description" : "Admin Only"
        },
        "fields" : {
          "example" : 123,
          "type" : "number",
          "x-description" : "Fields"
        },
        "name" : {
          "example" : "Sample Name",
          "type" : "string",
          "x-description" : "Report name"
        }
      },
      "type" : "object"
    },
    "ClientsPost" : {
      "properties" : {
        "address" : {
          "example" : 162,
          "type" : "number",
          "x-description" : "Address"
        },
        "company" : {
          "example" : "Ace Properties inc.",
          "type" : "string",
          "x-description" : "Company Name"
        },
        "customId" : {
          "example" : "C123-A",
          "type" : "string",
          "x-description" : "UID"
        },
        "email" : {
          "example" : "john.smith@myemail.com",
          "type" : "string",
          "x-description" : "Email"
        },
        "firstName" : {
          "example" : "John",
          "type" : "string",
          "x-description" : "First Name"
        },
        "jobTitle" : {
          "example" : "Assistant",
          "type" : "string",
          "x-description" : "Job Title"
        },
        "lastName" : {
          "example" : "Smith",
          "type" : "string",
          "x-description" : "Last Name"
        },
        "primaryPhone" : {
          "example" : "555-555-1234",
          "type" : "string",
          "x-description" : "Primary Phone"
        },
        "region" : {
          "example" : 143,
          "type" : "number",
          "x-description" : "Region"
        },
        "secondaryPhone" : {
          "example" : "555-555-4321",
          "type" : "string",
          "x-description" : "Secondary Phone"
        },
        "type" : {
          "enum" : [ "SERVICE_LOCATION", "CLIENT", "MULTI_LOCATION_CLIENT" ],
          "type" : "string",
          "x-description" : "Type of Record"
        }
      },
      "type" : "object"
    },
    "ContactsPost" : {
      "properties" : {
        "addressLine1" : {
          "example" : "15000 Main Road",
          "type" : "string",
          "x-description" : "Address Line 1"
        },
        "addressLine2" : {
          "example" : "Suite 445",
          "type" : "string",
          "x-description" : "Address Line 2"
        },
        "city" : {
          "example" : "New York",
          "type" : "string",
          "x-description" : "City"
        },
        "country" : {
          "example" : "US",
          "type" : "string",
          "x-description" : "Country"
        },
        "email" : {
          "example" : "john.smith@myemail.com",
          "type" : "string",
          "x-description" : "Email"
        },
        "fax" : {
          "example" : null,
          "type" : "string",
          "x-description" : "Fax"
        },
        "firstName" : {
          "example" : "John",
          "type" : "string",
          "x-description" : "First Name"
        },
        "jobTitle" : {
          "example" : "Assistant",
          "type" : "string",
          "x-description" : "Job Title"
        },
        "lastName" : {
          "example" : "Smith",
          "type" : "string",
          "x-description" : "Last Name"
        },
        "postalCode" : {
          "example" : "10005",
          "type" : "string",
          "x-description" : "Zip/Postal Code"
        },
        "primaryPhone" : {
          "example" : "555-555-1234",
          "type" : "string",
          "x-description" : "Primary Phone"
        },
        "secondaryPhone" : {
          "example" : "555-555-4321",
          "type" : "string",
          "x-description" : "Secondary Phone"
        },
        "state" : {
          "example" : "NY",
          "type" : "string",
          "x-description" : "State/Province"
        }
      },
      "type" : "object"
    },
    "ShiftsVacate" : {
      "properties" : {
        "note" : {
          "example" : null,
          "type" : "string",
          "x-description" : "Enter note"
        },
        "shiftBoard" : {
          "example" : false,
          "type" : "boolean",
          "x-description" : "Publish on Shift board"
        }
      },
      "type" : "object"
    },
    "WorkflowStatusesPut" : {
      "properties" : {
        "alertThresholdInMinutes" : {
          "example" : 957,
          "type" : "number",
          "x-description" : "Alert threshold (in minutes)"
        },
        "formatBackgroundColor" : {
          "example" : null,
          "type" : "string",
          "x-description" : "Format text color"
        },
        "formatTextColor" : {
          "example" : null,
          "type" : "string",
          "x-description" : "Format text color"
        },
        "name" : {
          "example" : "Sample Name",
          "type" : "string",
          "x-description" : "Name"
        },
        "warningThresholdInMinutes" : {
          "example" : 241,
          "type" : "number",
          "x-description" : "Warning threshold (in minutes)"
        }
      },
      "type" : "object"
    },
    "InvoiceLinesItem" : {
      "properties" : {
        "billableItems" : {
          "items" : {
            "$ref" : "#/definitions/BillableItemsItem"
          },
          "type" : "array",
          "x-description" : "Billable Items"
        },
        "id" : {
          "example" : 12345,
          "type" : "number",
          "x-description" : "The Unique System ID of this object"
        },
        "quantity" : {
          "example" : null,
          "type" : "number",
          "x-description" : "Quantity"
        },
        "relationGuid" : {
          "example" : null,
          "type" : "number",
          "x-description" : "Relation Gui"
        },
        "serviceDate" : {
          "example" : null,
          "type" : "string",
          "x-description" : "Service Date"
        },
        "serviceLocationId" : {
          "example" : null,
          "type" : "number",
          "x-description" : "Service Location"
        },
        "taxClass" : {
          "allOf" : [ {
            "$ref" : "#/definitions/TaxClassesItem"
          } ],
          "x-description" : "Tax Class"
        },
        "taxable" : {
          "example" : false,
          "type" : "boolean",
          "x-description" : "Tax Class Id"
        },
        "unitPrice" : {
          "example" : null,
          "type" : "string",
          "x-description" : "Unit Price"
        }
      },
      "type" : "object"
    },
    "SkillCategoriesPut" : {
      "properties" : {
        "description" : {
          "example" : null,
          "type" : "string",
          "x-description" : "Details"
        },
        "name" : {
          "example" : "Sample Name",
          "type" : "string",
          "x-description" : "Description"
        }
      },
      "type" : "object"
    },
    "ShiftsClock-out" : {
      "properties" : { },
      "type" : "object"
    },
    "TaskTypesPost" : {
      "properties" : {
        "active" : {
          "example" : false,
          "type" : "boolean",
          "x-description" : "Active"
        },
        "billable" : {
          "example" : false,
          "type" : "boolean",
          "x-description" : "Billable"
        },
        "dispatchable" : {
          "example" : false,
          "type" : "boolean",
          "x-description" : "Can Dispatch"
        },
        "name" : {
          "example" : "Sample Name",
          "type" : "string",
          "x-description" : "Task Name"
        },
        "prefix" : {
          "example" : null,
          "type" : "string",
          "x-description" : "Prefix"
        },
        "priority" : {
          "enum" : [ "LOW", "IMPORTANT", "URGENT" ],
          "type" : "string",
          "x-description" : "Priority"
        },
        "reportTemplate" : {
          "example" : 140,
          "type" : "number",
          "x-description" : "Report Template"
        },
        "schedulable" : {
          "example" : false,
          "type" : "boolean",
          "x-description" : "Can Schedule"
        }
      },
      "type" : "object"
    },
    "TaskTypesPut" : {
      "properties" : {
        "active" : {
          "example" : false,
          "type" : "boolean",
          "x-description" : "Active"
        },
        "billable" : {
          "example" : false,
          "type" : "boolean",
          "x-description" : "Billable"
        },
        "dispatchable" : {
          "example" : false,
          "type" : "boolean",
          "x-description" : "Can Dispatch"
        },
        "name" : {
          "example" : "Sample Name",
          "type" : "string",
          "x-description" : "Task Name"
        },
        "prefix" : {
          "example" : null,
          "type" : "string",
          "x-description" : "Prefix"
        },
        "priority" : {
          "enum" : [ "LOW", "IMPORTANT", "URGENT" ],
          "type" : "string",
          "x-description" : "Priority"
        },
        "reportTemplate" : {
          "example" : 127,
          "type" : "number",
          "x-description" : "Report Template"
        },
        "schedulable" : {
          "example" : false,
          "type" : "boolean",
          "x-description" : "Can Schedule"
        }
      },
      "type" : "object"
    },
    "ClientBillingSettingsCollection" : {
      "properties" : {
        "client" : {
          "allOf" : [ {
            "$ref" : "#/definitions/ClientsItem"
          } ],
          "x-description" : ""
        },
        "emailList" : {
          "example" : null,
          "type" : "string",
          "x-description" : "Invoice Email List"
        },
        "id" : {
          "example" : 12345,
          "type" : "number",
          "x-description" : "The Unique System ID of this object"
        },
        "resourceType" : {
          "example" : null,
          "type" : "string",
          "x-description" : "(On Demand) Resource Type"
        },
        "uri" : {
          "example" : null,
          "type" : "string",
          "x-description" : "Object URI"
        }
      },
      "type" : "object"
    },
    "EmployeeAccountAssignmentsPatch" : {
      "properties" : {
        "account" : {
          "example" : 180,
          "type" : "number",
          "x-description" : "Account"
        },
        "active" : {
          "example" : false,
          "type" : "string",
          "x-description" : "Active"
        },
        "employee" : {
          "example" : 159,
          "type" : "number",
          "x-description" : "Employee"
        },
        "endDate" : {
          "example" : "2018-05-01",
          "type" : "string",
          "x-description" : "End Date"
        },
        "startDate" : {
          "example" : null,
          "type" : "string",
          "x-description" : "Start Date"
        }
      },
      "type" : "object"
    },
    "DataViewsItem" : {
      "properties" : {
        "category" : {
          "allOf" : [ {
            "$ref" : "#/definitions/DataViewCategoriesItem"
          } ],
          "x-description" : "Category"
        },
        "configs" : {
          "example" : null,
          "type" : "string",
          "x-description" : "Configs"
        },
        "id" : {
          "example" : 12345,
          "type" : "number",
          "x-description" : "The Unique System ID of this object"
        },
        "name" : {
          "example" : "Sample Name",
          "type" : "string",
          "x-description" : "Name"
        },
        "renderer" : {
          "example" : null,
          "type" : "string",
          "x-description" : "Renderer"
        },
        "resourceType" : {
          "example" : null,
          "type" : "string",
          "x-description" : "(On Demand) Resource Type"
        },
        "tqlParsedStatement" : {
          "example" : null,
          "type" : "string",
          "x-description" : "TQL Parsed Statement"
        },
        "tqlStatement" : {
          "example" : null,
          "type" : "string",
          "x-description" : "TQL Statement"
        },
        "type" : {
          "example" : null,
          "type" : "string",
          "x-description" : "View Type"
        },
        "uid" : {
          "example" : null,
          "type" : "string",
          "x-description" : "GUID"
        },
        "uri" : {
          "example" : null,
          "type" : "string",
          "x-description" : "Object URI"
        }
      },
      "type" : "object"
    },
    "RegionsCollection" : {
      "properties" : {
        "customId" : {
          "example" : "C123-A",
          "type" : "string",
          "x-description" : "Custom Id"
        },
        "id" : {
          "example" : 12345,
          "type" : "number",
          "x-description" : "The Unique System ID of this object"
        },
        "name" : {
          "example" : "Sample Name",
          "type" : "string",
          "x-description" : "Name"
        },
        "resourceType" : {
          "example" : null,
          "type" : "string",
          "x-description" : "(On Demand) Resource Type"
        },
        "uri" : {
          "example" : null,
          "type" : "string",
          "x-description" : "Object URI"
        }
      },
      "type" : "object"
    },
    "TaskPriceTiersPost" : {
      "properties" : {
        "contract" : {
          "example" : 171,
          "type" : "number",
          "x-description" : "Contract"
        },
        "customId" : {
          "example" : "C123-A",
          "type" : "string",
          "x-description" : "Custom ID"
        },
        "name" : {
          "example" : "Sample Name",
          "type" : "string",
          "x-description" : "Name"
        }
      },
      "type" : "object"
    },
    "SkillCategoriesItem" : {
      "properties" : {
        "description" : {
          "example" : null,
          "type" : "string",
          "x-description" : "Details"
        },
        "id" : {
          "example" : 12345,
          "type" : "number",
          "x-description" : "The Unique System ID of this object"
        },
        "name" : {
          "example" : "Sample Name",
          "type" : "string",
          "x-description" : "Description"
        }
      },
      "type" : "object"
    },
    "swagger415" : {
      "x-has-customfields" : false,
      "type" : "object",
      "title" : "415",
      "properties" : {
        "description" : {
          "x-samplevalue" : "Unsupported media type - The server cannot handle the requested Content-Type",
          "type" : "string"
        }
      }
    },
    "ReportTemplateFieldsPut" : {
      "properties" : {
        "adminOnly" : {
          "example" : false,
          "type" : "boolean",
          "x-description" : "Admin Only"
        },
        "displayOrder" : {
          "example" : 416,
          "type" : "number",
          "x-description" : "Display Order Index"
        },
        "extra" : {
          "example" : null,
          "type" : "string",
          "x-description" : "Extra information"
        },
        "isDispatcherField" : {
          "example" : false,
          "type" : "boolean",
          "x-description" : "Dispatcher Field"
        },
        "label" : {
          "example" : null,
          "type" : "string",
          "x-description" : "Name"
        },
        "list" : {
          "example" : null,
          "type" : "string",
          "x-description" : "List"
        },
        "name" : {
          "example" : "Sample Name",
          "type" : "string",
          "x-description" : "Field"
        },
        "required" : {
          "example" : false,
          "type" : "boolean",
          "x-description" : "Required"
        },
        "type" : {
          "example" : null,
          "type" : "string",
          "x-description" : "Type"
        }
      },
      "type" : "object"
    },
    "EmploymentProfilesItem" : {
      "properties" : {
        "defaultPayRate" : {
          "example" : 12.5,
          "type" : "string",
          "x-description" : "Default Pay Rate"
        },
        "employmentDate" : {
          "example" : "2012-01-02",
          "type" : "string",
          "x-description" : "Employment Date"
        },
        "hasGrievance" : {
          "example" : false,
          "type" : "string",
          "x-description" : "Grievance"
        },
        "id" : {
          "example" : 12345,
          "type" : "number",
          "x-description" : "The Unique System ID of this object"
        },
        "overtimeExempt" : {
          "example" : false,
          "type" : "string",
          "x-description" : "Overtime Exempt"
        },
        "payRateType" : {
          "enum" : [ "hourly", "salary" ],
          "type" : "string",
          "x-description" : "Pay Rate Type"
        },
        "resourceType" : {
          "example" : null,
          "type" : "string",
          "x-description" : "(On Demand) Resource Type"
        },
        "seniority" : {
          "example" : 525,
          "type" : "number",
          "x-description" : "Seniority"
        },
        "terminationDate" : {
          "example" : null,
          "type" : "string",
          "x-description" : "Termination Date"
        },
        "uri" : {
          "example" : null,
          "type" : "string",
          "x-description" : "Object URI"
        }
      },
      "type" : "object"
    },
    "WorkflowInstanceLogsItem" : {
      "properties" : {
        "createdOn" : {
          "example" : null,
          "type" : "string",
          "x-description" : "Created On"
        },
        "id" : {
          "example" : 12345,
          "type" : "number",
          "x-description" : "The Unique System ID of this object"
        },
        "status" : {
          "allOf" : [ {
            "$ref" : "#/definitions/WorkflowStatusesItem"
          } ],
          "x-description" : "Status"
        },
        "user" : {
          "allOf" : [ {
            "$ref" : "#/definitions/EmployeesItem"
          } ],
          "x-description" : "User"
        }
      },
      "type" : "object"
    },
    "TaskSiteSettingsItem" : {
      "properties" : {
        "generalInstructions" : {
          "example" : null,
          "type" : "string",
          "x-description" : "Default Instructions"
        },
        "id" : {
          "example" : 12345,
          "type" : "number",
          "x-description" : "The Unique System ID of this object"
        },
        "taskInstructions" : {
          "items" : {
            "$ref" : "#/definitions/TaskSiteInstructionsItem"
          },
          "type" : "array",
          "x-description" : ""
        }
      },
      "type" : "object"
    },
    "DataViewsPost" : {
      "properties" : {
        "category" : {
          "example" : 108,
          "type" : "number",
          "x-description" : "Category"
        },
        "configs" : {
          "example" : null,
          "type" : "string",
          "x-description" : "Configs"
        },
        "name" : {
          "example" : "Sample Name",
          "type" : "string",
          "x-description" : "Name"
        },
        "renderer" : {
          "example" : null,
          "type" : "string",
          "x-description" : "Renderer"
        },
        "tqlParsedStatement" : {
          "example" : null,
          "type" : "string",
          "x-description" : "TQL Parsed Statement"
        },
        "tqlStatement" : {
          "example" : null,
          "type" : "string",
          "x-description" : "TQL Statement"
        },
        "type" : {
          "example" : null,
          "type" : "string",
          "x-description" : "View Type"
        },
        "uid" : {
          "example" : null,
          "type" : "string",
          "x-description" : "GUID"
        }
      },
      "type" : "object"
    },
    "PriceTiersItem" : {
      "properties" : {
        "cancellationThresholdInMinutes" : {
          "example" : 955,
          "type" : "string",
          "x-description" : "Cancellation Threshold"
        },
        "customId" : {
          "example" : "C123-A",
          "type" : "string",
          "x-description" : "Custom identifier"
        },
        "effectiveDate" : {
          "example" : null,
          "type" : "string",
          "x-description" : "Effective date"
        },
        "id" : {
          "example" : 12345,
          "type" : "number",
          "x-description" : "The Unique System ID of this object"
        },
        "instructions" : {
          "example" : null,
          "type" : "string",
          "x-description" : "Instructions"
        },
        "name" : {
          "example" : "Sample Name",
          "type" : "string",
          "x-description" : "Name"
        },
        "validUntilDate" : {
          "example" : null,
          "type" : "string",
          "x-description" : "Valid until date"
        }
      },
      "type" : "object"
    },
    "VendorsPatch" : {
      "properties" : {
        "firstName" : {
          "example" : "John",
          "type" : "string",
          "x-description" : "First Name"
        },
        "jobTitle" : {
          "example" : "Assistant",
          "type" : "string",
          "x-description" : "Job Title"
        },
        "lastName" : {
          "example" : "Smith",
          "type" : "string",
          "x-description" : "Last Name"
        },
        "mainEmail" : {
          "example" : null,
          "type" : "string",
          "x-description" : "Main Email"
        },
        "name" : {
          "example" : "Sample Name",
          "type" : "string",
          "x-description" : "Company"
        },
        "primaryPhone" : {
          "example" : "555-555-1234",
          "type" : "string",
          "x-description" : "Primary Phone"
        },
        "secondaryPhone" : {
          "example" : "555-555-4321",
          "type" : "string",
          "x-description" : "Secondary Phone"
        }
      },
      "type" : "object"
    },
    "DispatchCustomLocationsPut" : {
      "properties" : {
        "addressLine1" : {
          "example" : "15000 Main Road",
          "type" : "string",
          "x-description" : "Address line 1"
        },
        "addressLine2" : {
          "example" : "Suite 445",
          "type" : "string",
          "x-description" : "Address line 2"
        },
        "city" : {
          "example" : "New York",
          "type" : "string",
          "x-description" : "City"
        },
        "country" : {
          "example" : "US",
          "type" : "string",
          "x-description" : "Country"
        },
        "latitude" : {
          "example" : null,
          "type" : "number",
          "x-description" : "Latitude"
        },
        "longitude" : {
          "example" : null,
          "type" : "number",
          "x-description" : "Longitude"
        },
        "name" : {
          "example" : "Company or description of location",
          "type" : "string",
          "x-description" : "Name"
        },
        "postalCode" : {
          "example" : "10005",
          "type" : "string",
          "x-description" : "Zip / Postal Code"
        },
        "state" : {
          "example" : "NY",
          "type" : "string",
          "x-description" : "State / Province"
        },
        "taskId" : {
          "example" : 119,
          "type" : "number",
          "x-description" : "Task ID"
        },
        "type" : {
          "enum" : [ "ADDRESS", "COORDINATES" ],
          "type" : "string",
          "x-description" : "Type"
        }
      },
      "type" : "object"
    },
    "PositionSkillsPost" : {
      "properties" : {
        "comments" : {
          "example" : "This is a sample comment.",
          "type" : "string",
          "x-description" : "Comments"
        },
        "position" : {
          "example" : 108,
          "type" : "number",
          "x-description" : "Position"
        },
        "skill" : {
          "example" : 158,
          "type" : "number",
          "x-description" : "Skill"
        },
        "type" : {
          "enum" : [ "HARD", "CONDITIONAL", "SOFT" ],
          "type" : "string",
          "x-description" : "Type"
        }
      },
      "type" : "object"
    },
    "TaxClassItemsItem" : {
      "properties" : {
        "code" : {
          "example" : null,
          "type" : "string",
          "x-description" : "Tax Code"
        },
        "id" : {
          "example" : 12345,
          "type" : "number",
          "x-description" : "The Unique System ID of this object"
        },
        "number" : {
          "example" : null,
          "type" : "string",
          "x-description" : "Tax Number"
        },
        "percentage" : {
          "example" : "15",
          "type" : "number",
          "x-description" : "The percentage"
        },
        "resourceType" : {
          "example" : null,
          "type" : "string",
          "x-description" : "(On Demand) Resource Type"
        },
        "taxClass" : {
          "allOf" : [ {
            "$ref" : "#/definitions/TaxClassesItem"
          } ],
          "x-description" : "Tax Class"
        },
        "uri" : {
          "example" : null,
          "type" : "string",
          "x-description" : "Object URI"
        }
      },
      "type" : "object"
    },
    "SkillsPatch" : {
      "properties" : {
        "category" : {
          "example" : 165,
          "type" : "number",
          "x-description" : "Category"
        },
        "dateLabel" : {
          "example" : "Expiration Date",
          "type" : "string",
          "x-description" : "Date Field Label"
        },
        "label1" : {
          "example" : "Driver License Number",
          "type" : "string",
          "x-description" : "Field Label"
        },
        "label2" : {
          "example" : "Driver License Class",
          "type" : "string",
          "x-description" : "Other Field Label"
        },
        "label3" : {
          "example" : "Driver License Issuer",
          "type" : "string",
          "x-description" : "Another Field Label"
        },
        "name" : {
          "example" : "Driver License",
          "type" : "string",
          "x-description" : "Name"
        }
      },
      "type" : "object"
    },
    "BreakSessionsCollection" : {
      "properties" : {
        "endDateTime" : {
          "example" : "2018-01-01 17:30",
          "type" : "string",
          "x-description" : "End Date & Time"
        },
        "id" : {
          "example" : 12345,
          "type" : "number",
          "x-description" : "The Unique System ID of this object"
        },
        "initiationMethod" : {
          "enum" : [ "LIVE", "DELAYED", "DEVICE", "ADMIN", "PHONE", "BROWSER", "BREAK", "BATCH", "KIOSK" ],
          "type" : "string",
          "x-description" : "Initiation Method"
        },
        "resourceType" : {
          "example" : null,
          "type" : "string",
          "x-description" : "(On Demand) Resource Type"
        },
        "startDateTime" : {
          "example" : "2018-01-01 09:00",
          "type" : "string",
          "x-description" : "Start Date & Time"
        },
        "status" : {
          "enum" : [ "OPEN", "CLOSED" ],
          "type" : "string",
          "x-description" : "Status"
        },
        "terminationMethod" : {
          "enum" : [ "LIVE", "DELAYED", "DEVICE", "ADMIN", "PHONE", "BROWSER", "BREAK", "BATCH", "KIOSK" ],
          "type" : "string",
          "x-description" : "Termination Method"
        },
        "uri" : {
          "example" : null,
          "type" : "string",
          "x-description" : "Object URI"
        },
        "workSession" : {
          "allOf" : [ {
            "$ref" : "#/definitions/WorkSessionsItem"
          } ],
          "x-description" : "(On Demand) Work Session"
        }
      },
      "type" : "object"
    },
    "ContactsItem" : {
      "properties" : {
        "addressLine1" : {
          "example" : "15000 Main Road",
          "type" : "string",
          "x-description" : "Address Line 1"
        },
        "addressLine2" : {
          "example" : "Suite 445",
          "type" : "string",
          "x-description" : "Address Line 2"
        },
        "city" : {
          "example" : "New York",
          "type" : "string",
          "x-description" : "City"
        },
        "country" : {
          "example" : "US",
          "type" : "string",
          "x-description" : "Country"
        },
        "email" : {
          "example" : "john.smith@myemail.com",
          "type" : "string",
          "x-description" : "Email"
        },
        "fax" : {
          "example" : null,
          "type" : "string",
          "x-description" : "Fax"
        },
        "firstName" : {
          "example" : "John",
          "type" : "string",
          "x-description" : "First Name"
        },
        "id" : {
          "example" : 12345,
          "type" : "number",
          "x-description" : "The Unique System ID of this object"
        },
        "jobTitle" : {
          "example" : "Assistant",
          "type" : "string",
          "x-description" : "Job Title"
        },
        "lastName" : {
          "example" : "Smith",
          "type" : "string",
          "x-description" : "Last Name"
        },
        "postalCode" : {
          "example" : "10005",
          "type" : "string",
          "x-description" : "Zip/Postal Code"
        },
        "primaryPhone" : {
          "example" : "555-555-1234",
          "type" : "string",
          "x-description" : "Primary Phone"
        },
        "resourceType" : {
          "example" : null,
          "type" : "string",
          "x-description" : "(On Demand) Resource Type"
        },
        "secondaryPhone" : {
          "example" : "555-555-4321",
          "type" : "string",
          "x-description" : "Secondary Phone"
        },
        "state" : {
          "example" : "NY",
          "type" : "string",
          "x-description" : "State/Province"
        },
        "uri" : {
          "example" : null,
          "type" : "string",
          "x-description" : "Object URI"
        }
      },
      "type" : "object"
    },
    "PositionSkillsPut" : {
      "properties" : {
        "comments" : {
          "example" : "This is a sample comment.",
          "type" : "string",
          "x-description" : "Comments"
        },
        "position" : {
          "example" : 109,
          "type" : "number",
          "x-description" : "Position"
        },
        "skill" : {
          "example" : 167,
          "type" : "number",
          "x-description" : "Skill"
        },
        "type" : {
          "enum" : [ "HARD", "CONDITIONAL", "SOFT" ],
          "type" : "string",
          "x-description" : "Type"
        }
      },
      "type" : "object"
    },
    "WorkflowsCollection" : {
      "properties" : {
        "id" : {
          "example" : 12345,
          "type" : "number",
          "x-description" : "The Unique System ID of this object"
        },
        "name" : {
          "example" : "Sample Name",
          "type" : "string",
          "x-description" : "Name"
        },
        "resourceType" : {
          "example" : null,
          "type" : "string",
          "x-description" : "(On Demand) Resource Type"
        },
        "statuses" : {
          "items" : {
            "$ref" : "#/definitions/WorkflowStatusesItem"
          },
          "type" : "array",
          "x-description" : ""
        },
        "uri" : {
          "example" : null,
          "type" : "string",
          "x-description" : "Object URI"
        }
      },
      "type" : "object"
    },
    "WorkSessionsPatch" : {
      "properties" : {
        "breaks" : {
          "example" : 102,
          "type" : "number",
          "x-description" : "(On Demand) Breaks"
        },
        "employee" : {
          "example" : 112,
          "type" : "number",
          "x-description" : "(On Demand) Employee"
        },
        "endDateTime" : {
          "example" : "2018-01-01 17:30",
          "type" : "string",
          "x-description" : "End Date & Time"
        },
        "initiationMethod" : {
          "enum" : [ "LIVE", "DELAYED", "DEVICE", "ADMIN", "PHONE", "BROWSER", "BREAK", "BATCH", "KIOSK" ],
          "type" : "string",
          "x-description" : "Initiation Method"
        },
        "position" : {
          "example" : 186,
          "type" : "number",
          "x-description" : "(On Demand) Position"
        },
        "startDateTime" : {
          "example" : "2018-01-01 09:00",
          "type" : "string",
          "x-description" : "Start Date & Time"
        },
        "status" : {
          "enum" : [ "OPEN", "CLOSED" ],
          "type" : "string",
          "x-description" : "Status"
        },
        "terminationMethod" : {
          "enum" : [ "LIVE", "DELAYED", "DEVICE", "ADMIN", "PHONE", "BROWSER", "BREAK", "BATCH", "KIOSK" ],
          "type" : "string",
          "x-description" : "Termination Method"
        }
      },
      "type" : "object"
    },
    "MobileDevicesPost" : {
      "properties" : {
        "accountId" : {
          "example" : null,
          "type" : "string",
          "x-description" : "Account"
        },
        "lastAction" : {
          "example" : null,
          "type" : "string",
          "x-description" : ""
        },
        "lastLatitude" : {
          "example" : null,
          "type" : "number",
          "x-description" : "Last known Latitude"
        },
        "lastLongitude" : {
          "example" : null,
          "type" : "number",
          "x-description" : "Last known Latitude"
        },
        "name" : {
          "example" : "Sample Name",
          "type" : "string",
          "x-description" : "Name"
        },
        "number" : {
          "example" : null,
          "type" : "string",
          "x-description" : "Number"
        },
        "position" : {
          "example" : 186,
          "type" : "number",
          "x-description" : "Position"
        },
        "regionOwner" : {
          "example" : 191,
          "type" : "number",
          "x-description" : "Region"
        },
        "user" : {
          "example" : 151,
          "type" : "number",
          "x-description" : ""
        }
      },
      "type" : "object"
    },
    "TaskSiteInstructionsPut" : {
      "properties" : {
        "generalInstructions" : {
          "example" : null,
          "type" : "string",
          "x-description" : "General information"
        },
        "jobInstructions" : {
          "example" : null,
          "type" : "string",
          "x-description" : ""
        },
        "site" : {
          "example" : 149,
          "type" : "number",
          "x-description" : "Site"
        },
        "taskType" : {
          "example" : 171,
          "type" : "number",
          "x-description" : "Task Type"
        }
      },
      "type" : "object"
    },
    "swaggerinfo" : {
      "x-has-customfields" : false,
      "type" : "object",
      "title" : "info",
      "properties" : {
        "contact" : {
          "$ref" : "#/definitions/swaggercontact"
        },
        "title" : {
          "x-samplevalue" : "hubspotcrm",
          "type" : "string"
        },
        "version" : {
          "x-samplevalue" : "api-v2",
          "type" : "string"
        }
      }
    },
    "SkillCategoriesPatch" : {
      "properties" : {
        "description" : {
          "example" : null,
          "type" : "string",
          "x-description" : "Details"
        },
        "name" : {
          "example" : "Sample Name",
          "type" : "string",
          "x-description" : "Description"
        }
      },
      "type" : "object"
    },
    "TaskTypesCollection" : {
      "properties" : {
        "active" : {
          "example" : false,
          "type" : "boolean",
          "x-description" : "Active"
        },
        "billable" : {
          "example" : false,
          "type" : "boolean",
          "x-description" : "Billable"
        },
        "dispatchable" : {
          "example" : false,
          "type" : "boolean",
          "x-description" : "Can Dispatch"
        },
        "id" : {
          "example" : 12345,
          "type" : "number",
          "x-description" : "The Unique System ID of this object"
        },
        "name" : {
          "example" : "Sample Name",
          "type" : "string",
          "x-description" : "Task Name"
        },
        "prefix" : {
          "example" : null,
          "type" : "string",
          "x-description" : "Prefix"
        },
        "priority" : {
          "enum" : [ "LOW", "IMPORTANT", "URGENT" ],
          "type" : "string",
          "x-description" : "Priority"
        },
        "reportTemplate" : {
          "allOf" : [ {
            "$ref" : "#/definitions/ReportTemplatesItem"
          } ],
          "x-description" : "Report Template"
        },
        "resourceType" : {
          "example" : null,
          "type" : "string",
          "x-description" : "(On Demand) Resource Type"
        },
        "schedulable" : {
          "example" : false,
          "type" : "boolean",
          "x-description" : "Can Schedule"
        },
        "uri" : {
          "example" : null,
          "type" : "string",
          "x-description" : "Object URI"
        }
      },
      "type" : "object"
    },
    "ContractsPatch" : {
      "properties" : {
        "customId" : {
          "example" : "C123-A",
          "type" : "string",
          "x-description" : ""
        },
        "name" : {
          "example" : "Sample Name",
          "type" : "string",
          "x-description" : ""
        }
      },
      "type" : "object"
    },
    "PriceTiersCollection" : {
      "properties" : {
        "cancellationThresholdInMinutes" : {
          "example" : 860,
          "type" : "string",
          "x-description" : "Cancellation Threshold"
        },
        "customId" : {
          "example" : "C123-A",
          "type" : "string",
          "x-description" : "Custom identifier"
        },
        "effectiveDate" : {
          "example" : null,
          "type" : "string",
          "x-description" : "Effective date"
        },
        "id" : {
          "example" : 12345,
          "type" : "number",
          "x-description" : "The Unique System ID of this object"
        },
        "instructions" : {
          "example" : null,
          "type" : "string",
          "x-description" : "Instructions"
        },
        "name" : {
          "example" : "Sample Name",
          "type" : "string",
          "x-description" : "Name"
        },
        "validUntilDate" : {
          "example" : null,
          "type" : "string",
          "x-description" : "Valid until date"
        }
      },
      "type" : "object"
    },
    "ReportsItem" : {
      "properties" : {
        "account" : {
          "allOf" : [ {
            "$ref" : "#/definitions/AccountsItem"
          } ],
          "x-description" : "Account"
        },
        "approvalDateTime" : {
          "example" : null,
          "type" : "string",
          "x-description" : "Approved On"
        },
        "approvedBy" : {
          "allOf" : [ {
            "$ref" : "#/definitions/EmployeesItem"
          } ],
          "x-description" : "Approved By"
        },
        "createdBy" : {
          "example" : null,
          "type" : "string",
          "x-description" : "(On Demand) Created By"
        },
        "createdOn" : {
          "example" : null,
          "type" : "string",
          "x-description" : "(On Demand) Created Date Time"
        },
        "id" : {
          "example" : 12345,
          "type" : "number",
          "x-description" : "The Unique System ID of this object"
        },
        "reportDateTime" : {
          "example" : null,
          "type" : "string",
          "x-description" : "Reported on"
        },
        "reportFields" : {
          "items" : {
            "$ref" : "#/definitions/ReportFieldsItem"
          },
          "type" : "array",
          "x-description" : "Field"
        },
        "reportTemplate" : {
          "allOf" : [ {
            "$ref" : "#/definitions/ReportTemplatesItem"
          } ],
          "x-description" : "Template"
        },
        "resourceType" : {
          "example" : null,
          "type" : "string",
          "x-description" : "(On Demand) Resource Type"
        },
        "status" : {
          "enum" : [ "APPROVED", "NEW", "VERIFICATION", "PENDING" ],
          "type" : "string",
          "x-description" : "Status"
        },
        "updatedBy" : {
          "example" : null,
          "type" : "string",
          "x-description" : "(On Demand) Updated By"
        },
        "updatedOn" : {
          "example" : null,
          "type" : "string",
          "x-description" : "(On Demand) Updated Date Time"
        },
        "uri" : {
          "example" : null,
          "type" : "string",
          "x-description" : "Object URI"
        }
      },
      "type" : "object"
    },
    "TaskPriceTiersPut" : {
      "properties" : {
        "contract" : {
          "example" : 188,
          "type" : "number",
          "x-description" : "Contract"
        },
        "customId" : {
          "example" : "C123-A",
          "type" : "string",
          "x-description" : "Custom ID"
        },
        "name" : {
          "example" : "Sample Name",
          "type" : "string",
          "x-description" : "Name"
        }
      },
      "type" : "object"
    },
    "swaggerpost" : {
      "x-has-customfields" : false,
      "type" : "object",
      "title" : "post",
      "properties" : {
        "summary" : {
          "x-samplevalue" : "Create a new contact in the CRM service. Contact creation will flow through Cloud Elements to your CRM service. With the exception of the 'id' field, the required fields indicated in the 'Contact' model are those required to create a new contact.",
          "type" : "string"
        },
        "operationId" : {
          "x-samplevalue" : "createContact",
          "type" : "string"
        },
        "responses" : {
          "$ref" : "#/definitions/swaggerresponses"
        },
        "parameters" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/swaggerparameters"
          }
        },
        "tags" : {
          "x-samplevalue" : [ "contacts" ],
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        }
      }
    },
    "ReportFieldsItem" : {
      "properties" : {
        "id" : {
          "example" : 12345,
          "type" : "number",
          "x-description" : "The Unique System ID of this object"
        },
        "templateField" : {
          "allOf" : [ {
            "$ref" : "#/definitions/ReportTemplateFieldsItem"
          } ],
          "x-description" : "Field "
        },
        "value" : {
          "example" : null,
          "type" : "string",
          "x-description" : "Valued"
        }
      },
      "type" : "object"
    },
    "DataViewsCollection" : {
      "properties" : {
        "category" : {
          "allOf" : [ {
            "$ref" : "#/definitions/DataViewCategoriesItem"
          } ],
          "x-description" : "Category"
        },
        "configs" : {
          "example" : null,
          "type" : "string",
          "x-description" : "Configs"
        },
        "id" : {
          "example" : 12345,
          "type" : "number",
          "x-description" : "The Unique System ID of this object"
        },
        "name" : {
          "example" : "Sample Name",
          "type" : "string",
          "x-description" : "Name"
        },
        "renderer" : {
          "example" : null,
          "type" : "string",
          "x-description" : "Renderer"
        },
        "resourceType" : {
          "example" : null,
          "type" : "string",
          "x-description" : "(On Demand) Resource Type"
        },
        "tqlParsedStatement" : {
          "example" : null,
          "type" : "string",
          "x-description" : "TQL Parsed Statement"
        },
        "tqlStatement" : {
          "example" : null,
          "type" : "string",
          "x-description" : "TQL Statement"
        },
        "type" : {
          "example" : null,
          "type" : "string",
          "x-description" : "View Type"
        },
        "uid" : {
          "example" : null,
          "type" : "string",
          "x-description" : "GUID"
        },
        "uri" : {
          "example" : null,
          "type" : "string",
          "x-description" : "Object URI"
        }
      },
      "type" : "object"
    },
    "swaggerdefinitions" : {
      "x-has-customfields" : false,
      "type" : "object",
      "title" : "definitions",
      "properties" : {
        "definition-name" : {
          "$ref" : "#/definitions/swaggerdefinition-name"
        }
      }
    },
    "WorkSessionsItem" : {
      "properties" : {
        "breaks" : {
          "items" : {
            "$ref" : "#/definitions/BreakSessionsItem"
          },
          "type" : "array",
          "x-description" : "(On Demand) Breaks"
        },
        "employee" : {
          "allOf" : [ {
            "$ref" : "#/definitions/EmployeesItem"
          } ],
          "x-description" : "(On Demand) Employee"
        },
        "endDateTime" : {
          "example" : "2018-01-01 17:30",
          "type" : "string",
          "x-description" : "End Date & Time"
        },
        "id" : {
          "example" : 12345,
          "type" : "number",
          "x-description" : "The Unique System ID of this object"
        },
        "initiationMethod" : {
          "enum" : [ "LIVE", "DELAYED", "DEVICE", "ADMIN", "PHONE", "BROWSER", "BREAK", "BATCH", "KIOSK" ],
          "type" : "string",
          "x-description" : "Initiation Method"
        },
        "position" : {
          "allOf" : [ {
            "$ref" : "#/definitions/PositionsItem"
          } ],
          "x-description" : "(On Demand) Position"
        },
        "resourceType" : {
          "example" : null,
          "type" : "string",
          "x-description" : "(On Demand) Resource Type"
        },
        "startDateTime" : {
          "example" : "2018-01-01 09:00",
          "type" : "string",
          "x-description" : "Start Date & Time"
        },
        "status" : {
          "enum" : [ "OPEN", "CLOSED" ],
          "type" : "string",
          "x-description" : "Status"
        },
        "terminationMethod" : {
          "enum" : [ "LIVE", "DELAYED", "DEVICE", "ADMIN", "PHONE", "BROWSER", "BREAK", "BATCH", "KIOSK" ],
          "type" : "string",
          "x-description" : "Termination Method"
        },
        "uri" : {
          "example" : null,
          "type" : "string",
          "x-description" : "Object URI"
        }
      },
      "type" : "object"
    },
    "WorkSessionsAdd-break" : {
      "properties" : {
        "endTime" : {
          "example" : 199,
          "type" : "string",
          "x-description" : "End Time"
        },
        "startTime" : {
          "example" : 770,
          "type" : "string",
          "x-description" : "Start Time"
        }
      },
      "type" : "object"
    },
    "ClientBillingSettingsItem" : {
      "properties" : {
        "client" : {
          "allOf" : [ {
            "$ref" : "#/definitions/ClientsItem"
          } ],
          "x-description" : ""
        },
        "emailList" : {
          "example" : null,
          "type" : "string",
          "x-description" : "Invoice Email List"
        },
        "id" : {
          "example" : 12345,
          "type" : "number",
          "x-description" : "The Unique System ID of this object"
        },
        "resourceType" : {
          "example" : null,
          "type" : "string",
          "x-description" : "(On Demand) Resource Type"
        },
        "uri" : {
          "example" : null,
          "type" : "string",
          "x-description" : "Object URI"
        }
      },
      "type" : "object"
    },
    "ReportTemplatesPut" : {
      "properties" : {
        "adminOnly" : {
          "example" : false,
          "type" : "boolean",
          "x-description" : "Admin Only"
        },
        "fields" : {
          "example" : 183,
          "type" : "number",
          "x-description" : "Fields"
        },
        "name" : {
          "example" : "Sample Name",
          "type" : "string",
          "x-description" : "Report name"
        }
      },
      "type" : "object"
    },
    "TaskSiteInstructionsItem" : {
      "properties" : {
        "generalInstructions" : {
          "example" : null,
          "type" : "string",
          "x-description" : "General information"
        },
        "id" : {
          "example" : 12345,
          "type" : "number",
          "x-description" : "The Unique System ID of this object"
        },
        "jobInstructions" : {
          "example" : null,
          "type" : "string",
          "x-description" : ""
        },
        "site" : {
          "allOf" : [ {
            "$ref" : "#/definitions/AccountsItem"
          } ],
          "x-description" : "Site"
        },
        "taskType" : {
          "allOf" : [ {
            "$ref" : "#/definitions/TaskTypesItem"
          } ],
          "x-description" : "Task Type"
        }
      },
      "type" : "object"
    },
    "swaggerdefinition-name" : {
      "x-has-customfields" : false,
      "type" : "object",
      "title" : "definition-name",
      "properties" : {
        "properties" : {
          "$ref" : "#/definitions/swaggerproperties"
        }
      }
    },
    "ReportsPut" : {
      "properties" : {
        "account" : {
          "example" : 176,
          "type" : "number",
          "x-description" : "Account"
        },
        "approvalDateTime" : {
          "example" : null,
          "type" : "string",
          "x-description" : "Approved On"
        },
        "approvedBy" : {
          "example" : 107,
          "type" : "number",
          "x-description" : "Approved By"
        },
        "reportDateTime" : {
          "example" : null,
          "type" : "string",
          "x-description" : "Reported on"
        },
        "reportFields" : {
          "example" : 151,
          "type" : "number",
          "x-description" : "Field"
        },
        "reportTemplate" : {
          "example" : 130,
          "type" : "number",
          "x-description" : "Template"
        },
        "status" : {
          "enum" : [ "APPROVED", "NEW", "VERIFICATION", "PENDING" ],
          "type" : "string",
          "x-description" : "Status"
        }
      },
      "type" : "object"
    },
    "ClientsItem" : {
      "properties" : {
        "address" : {
          "allOf" : [ {
            "$ref" : "#/definitions/AddressesItem"
          } ],
          "x-description" : "Address"
        },
        "avatar" : {
          "example" : null,
          "type" : "string",
          "x-description" : "Picture"
        },
        "company" : {
          "example" : "Ace Properties inc.",
          "type" : "string",
          "x-description" : "Company Name"
        },
        "createdBy" : {
          "example" : null,
          "type" : "string",
          "x-description" : "(On Demand) Created By"
        },
        "createdOn" : {
          "example" : null,
          "type" : "string",
          "x-description" : "(On Demand) Created Date Time"
        },
        "customId" : {
          "example" : "C123-A",
          "type" : "string",
          "x-description" : "UID"
        },
        "email" : {
          "example" : "john.smith@myemail.com",
          "type" : "string",
          "x-description" : "Email"
        },
        "employeeAssignments" : {
          "items" : {
            "$ref" : "#/definitions/EmployeeAccountAssignmentsItem"
          },
          "type" : "array",
          "x-description" : "(On Demand) Assigned Employees"
        },
        "employeeBans" : {
          "items" : {
            "$ref" : "#/definitions/EmployeeAccountBansItem"
          },
          "type" : "array",
          "x-description" : "(On Demand) Banned Employees"
        },
        "firstName" : {
          "example" : "John",
          "type" : "string",
          "x-description" : "First Name"
        },
        "id" : {
          "example" : 12345,
          "type" : "number",
          "x-description" : "The Unique System ID of this object"
        },
        "jobTitle" : {
          "example" : "Assistant",
          "type" : "string",
          "x-description" : "Job Title"
        },
        "lastName" : {
          "example" : "Smith",
          "type" : "string",
          "x-description" : "Last Name"
        },
        "name" : {
          "example" : "Sample Name",
          "type" : "string",
          "x-description" : "(On Demand) Company Name"
        },
        "notes" : {
          "items" : {
            "$ref" : "#/definitions/NotesItem"
          },
          "type" : "array",
          "x-description" : "(On Demand) Notes"
        },
        "primaryPhone" : {
          "example" : "555-555-1234",
          "type" : "string",
          "x-description" : "Primary Phone"
        },
        "region" : {
          "allOf" : [ {
            "$ref" : "#/definitions/RegionsItem"
          } ],
          "x-description" : "Region"
        },
        "resourceType" : {
          "example" : null,
          "type" : "string",
          "x-description" : "(On Demand) Resource Type"
        },
        "secondaryPhone" : {
          "example" : "555-555-4321",
          "type" : "string",
          "x-description" : "Secondary Phone"
        },
        "status" : {
          "enum" : [ "ACTIVE", "INACTIVE", "CLOSED" ],
          "type" : "string",
          "x-description" : "Status"
        },
        "type" : {
          "enum" : [ "SERVICE_LOCATION", "CLIENT", "MULTI_LOCATION_CLIENT" ],
          "type" : "string",
          "x-description" : "Type of Record"
        },
        "updatedBy" : {
          "example" : null,
          "type" : "string",
          "x-description" : "(On Demand) Updated By"
        },
        "updatedOn" : {
          "example" : null,
          "type" : "string",
          "x-description" : "(On Demand) Updated Date Time"
        },
        "uri" : {
          "example" : null,
          "type" : "string",
          "x-description" : "Object URI"
        }
      },
      "type" : "object"
    },
    "WorkflowInstancesCollection" : {
      "properties" : {
        "currentStatus" : {
          "allOf" : [ {
            "$ref" : "#/definitions/WorkflowStatusesItem"
          } ],
          "x-description" : "Current Status"
        },
        "id" : {
          "example" : 12345,
          "type" : "number",
          "x-description" : "The Unique System ID of this object"
        },
        "logs" : {
          "items" : {
            "$ref" : "#/definitions/WorkflowInstanceLogsItem"
          },
          "type" : "array",
          "x-description" : "Logs"
        },
        "modifiedOn" : {
          "example" : null,
          "type" : "string",
          "x-description" : "Modified On"
        },
        "resourceType" : {
          "example" : null,
          "type" : "string",
          "x-description" : "(On Demand) Resource Type"
        },
        "startedOn" : {
          "example" : null,
          "type" : "string",
          "x-description" : "Started On"
        },
        "uri" : {
          "example" : null,
          "type" : "string",
          "x-description" : "Object URI"
        },
        "workflow" : {
          "allOf" : [ {
            "$ref" : "#/definitions/WorkflowsItem"
          } ],
          "x-description" : "Workflow"
        }
      },
      "type" : "object"
    },
    "WorkflowsItem" : {
      "properties" : {
        "id" : {
          "example" : 12345,
          "type" : "number",
          "x-description" : "The Unique System ID of this object"
        },
        "name" : {
          "example" : "Sample Name",
          "type" : "string",
          "x-description" : "Name"
        },
        "resourceType" : {
          "example" : null,
          "type" : "string",
          "x-description" : "(On Demand) Resource Type"
        },
        "statuses" : {
          "items" : {
            "$ref" : "#/definitions/WorkflowStatusesItem"
          },
          "type" : "array",
          "x-description" : ""
        },
        "uri" : {
          "example" : null,
          "type" : "string",
          "x-description" : "Object URI"
        }
      },
      "type" : "object"
    },
    "BillItemsPatch" : {
      "properties" : {
        "customId" : {
          "example" : "C123-A",
          "type" : "string",
          "x-description" : "Chart of account ID or custom ID"
        },
        "isGlobal" : {
          "example" : false,
          "type" : "boolean",
          "x-description" : "If the bill item is available for all region. If not select a region"
        },
        "name" : {
          "example" : "Sample Name",
          "type" : "string",
          "x-description" : "The name of the bill item"
        },
        "region" : {
          "example" : 140,
          "type" : "number",
          "x-description" : "(On Demand) Only set a region, when isGlobal is false"
        },
        "status" : {
          "enum" : [ "ACTIVE", "DISABLED" ],
          "type" : "string",
          "x-description" : "If the bill-item is active or disabled"
        }
      },
      "type" : "object"
    },
    "TaxClassesItem" : {
      "properties" : {
        "id" : {
          "example" : 12345,
          "type" : "number",
          "x-description" : "The Unique System ID of this object"
        },
        "name" : {
          "example" : "Sample Name",
          "type" : "string",
          "x-description" : "Tax Class"
        },
        "resourceType" : {
          "example" : null,
          "type" : "string",
          "x-description" : "(On Demand) Resource Type"
        },
        "uri" : {
          "example" : null,
          "type" : "string",
          "x-description" : "Object URI"
        }
      },
      "type" : "object"
    },
    "MobileDevicesPut" : {
      "properties" : {
        "accountId" : {
          "example" : null,
          "type" : "string",
          "x-description" : "Account"
        },
        "lastAction" : {
          "example" : null,
          "type" : "string",
          "x-description" : ""
        },
        "lastLatitude" : {
          "example" : null,
          "type" : "number",
          "x-description" : "Last known Latitude"
        },
        "lastLongitude" : {
          "example" : null,
          "type" : "number",
          "x-description" : "Last known Latitude"
        },
        "name" : {
          "example" : "Sample Name",
          "type" : "string",
          "x-description" : "Name"
        },
        "number" : {
          "example" : null,
          "type" : "string",
          "x-description" : "Number"
        },
        "position" : {
          "example" : 124,
          "type" : "number",
          "x-description" : "Position"
        },
        "regionOwner" : {
          "example" : 142,
          "type" : "number",
          "x-description" : "Region"
        },
        "user" : {
          "example" : 163,
          "type" : "number",
          "x-description" : ""
        }
      },
      "type" : "object"
    },
    "WorkflowStatusesPatch" : {
      "properties" : {
        "alertThresholdInMinutes" : {
          "example" : 142,
          "type" : "number",
          "x-description" : "Alert threshold (in minutes)"
        },
        "formatBackgroundColor" : {
          "example" : null,
          "type" : "string",
          "x-description" : "Format text color"
        },
        "formatTextColor" : {
          "example" : null,
          "type" : "string",
          "x-description" : "Format text color"
        },
        "name" : {
          "example" : "Sample Name",
          "type" : "string",
          "x-description" : "Name"
        },
        "warningThresholdInMinutes" : {
          "example" : 399,
          "type" : "number",
          "x-description" : "Warning threshold (in minutes)"
        }
      },
      "type" : "object"
    },
    "swagger-contacts-path" : {
      "x-has-customfields" : false,
      "type" : "object",
      "title" : "/contacts",
      "properties" : {
        "post" : {
          "$ref" : "#/definitions/swaggerpost"
        }
      }
    },
    "ReportsPost" : {
      "properties" : {
        "account" : {
          "example" : 171,
          "type" : "number",
          "x-description" : "Account"
        },
        "approvalDateTime" : {
          "example" : null,
          "type" : "string",
          "x-description" : "Approved On"
        },
        "approvedBy" : {
          "example" : 173,
          "type" : "number",
          "x-description" : "Approved By"
        },
        "reportDateTime" : {
          "example" : null,
          "type" : "string",
          "x-description" : "Reported on"
        },
        "reportFields" : {
          "example" : 172,
          "type" : "number",
          "x-description" : "Field"
        },
        "reportTemplate" : {
          "example" : 164,
          "type" : "number",
          "x-description" : "Template"
        },
        "status" : {
          "enum" : [ "APPROVED", "NEW", "VERIFICATION", "PENDING" ],
          "type" : "string",
          "x-description" : "Status"
        }
      },
      "type" : "object"
    },
    "EmploymentProfilesCollection" : {
      "properties" : {
        "defaultPayRate" : {
          "example" : 12.5,
          "type" : "string",
          "x-description" : "Default Pay Rate"
        },
        "employmentDate" : {
          "example" : "2012-01-02",
          "type" : "string",
          "x-description" : "Employment Date"
        },
        "hasGrievance" : {
          "example" : false,
          "type" : "string",
          "x-description" : "Grievance"
        },
        "id" : {
          "example" : 12345,
          "type" : "number",
          "x-description" : "The Unique System ID of this object"
        },
        "overtimeExempt" : {
          "example" : false,
          "type" : "string",
          "x-description" : "Overtime Exempt"
        },
        "payRateType" : {
          "enum" : [ "hourly", "salary" ],
          "type" : "string",
          "x-description" : "Pay Rate Type"
        },
        "resourceType" : {
          "example" : null,
          "type" : "string",
          "x-description" : "(On Demand) Resource Type"
        },
        "seniority" : {
          "example" : 733,
          "type" : "number",
          "x-description" : "Seniority"
        },
        "terminationDate" : {
          "example" : null,
          "type" : "string",
          "x-description" : "Termination Date"
        },
        "uri" : {
          "example" : null,
          "type" : "string",
          "x-description" : "Object URI"
        }
      },
      "type" : "object"
    },
    "TaskSiteSettingsPatch" : {
      "properties" : {
        "generalInstructions" : {
          "example" : null,
          "type" : "string",
          "x-description" : "Default Instructions"
        },
        "taskInstructions" : {
          "example" : 119,
          "type" : "number",
          "x-description" : ""
        }
      },
      "type" : "object"
    },
    "ReportsCollection" : {
      "properties" : {
        "account" : {
          "allOf" : [ {
            "$ref" : "#/definitions/AccountsItem"
          } ],
          "x-description" : "Account"
        },
        "approvalDateTime" : {
          "example" : null,
          "type" : "string",
          "x-description" : "Approved On"
        },
        "approvedBy" : {
          "allOf" : [ {
            "$ref" : "#/definitions/EmployeesItem"
          } ],
          "x-description" : "Approved By"
        },
        "createdBy" : {
          "example" : null,
          "type" : "string",
          "x-description" : "(On Demand) Created By"
        },
        "createdOn" : {
          "example" : null,
          "type" : "string",
          "x-description" : "(On Demand) Created Date Time"
        },
        "id" : {
          "example" : 12345,
          "type" : "number",
          "x-description" : "The Unique System ID of this object"
        },
        "reportDateTime" : {
          "example" : null,
          "type" : "string",
          "x-description" : "Reported on"
        },
        "reportFields" : {
          "items" : {
            "$ref" : "#/definitions/ReportFieldsItem"
          },
          "type" : "array",
          "x-description" : "Field"
        },
        "reportTemplate" : {
          "allOf" : [ {
            "$ref" : "#/definitions/ReportTemplatesItem"
          } ],
          "x-description" : "Template"
        },
        "resourceType" : {
          "example" : null,
          "type" : "string",
          "x-description" : "(On Demand) Resource Type"
        },
        "status" : {
          "enum" : [ "APPROVED", "NEW", "VERIFICATION", "PENDING" ],
          "type" : "string",
          "x-description" : "Status"
        },
        "updatedBy" : {
          "example" : null,
          "type" : "string",
          "x-description" : "(On Demand) Updated By"
        },
        "updatedOn" : {
          "example" : null,
          "type" : "string",
          "x-description" : "(On Demand) Updated Date Time"
        },
        "uri" : {
          "example" : null,
          "type" : "string",
          "x-description" : "Object URI"
        }
      },
      "type" : "object"
    },
    "WorkflowsPut" : {
      "properties" : {
        "name" : {
          "example" : "Sample Name",
          "type" : "string",
          "x-description" : "Name"
        },
        "statuses" : {
          "example" : 168,
          "type" : "number",
          "x-description" : ""
        }
      },
      "type" : "object"
    },
    "WorkflowInstancesPost" : {
      "properties" : {
        "currentStatus" : {
          "example" : 100,
          "type" : "number",
          "x-description" : "Current Status"
        },
        "logs" : {
          "example" : 108,
          "type" : "number",
          "x-description" : "Logs"
        },
        "modifiedOn" : {
          "example" : null,
          "type" : "string",
          "x-description" : "Modified On"
        },
        "startedOn" : {
          "example" : null,
          "type" : "string",
          "x-description" : "Started On"
        },
        "workflow" : {
          "example" : 127,
          "type" : "number",
          "x-description" : "Workflow"
        }
      },
      "type" : "object"
    },
    "WorkflowInstancesPatch" : {
      "properties" : {
        "currentStatus" : {
          "example" : 132,
          "type" : "number",
          "x-description" : "Current Status"
        },
        "logs" : {
          "example" : 117,
          "type" : "number",
          "x-description" : "Logs"
        },
        "modifiedOn" : {
          "example" : null,
          "type" : "string",
          "x-description" : "Modified On"
        },
        "startedOn" : {
          "example" : null,
          "type" : "string",
          "x-description" : "Started On"
        },
        "workflow" : {
          "example" : 165,
          "type" : "number",
          "x-description" : "Workflow"
        }
      },
      "type" : "object"
    },
    "swaggerDocs" : {
      "x-has-customfields" : false,
      "title" : "swaggerDocs",
      "properties" : {
        "basePath" : {
          "x-samplevalue" : "/elements/api-v2/hubs/crm",
          "type" : "string"
        },
        "paths" : {
          "$ref" : "#/definitions/swaggerpaths"
        },
        "host" : {
          "x-samplevalue" : "localhost:5050",
          "type" : "string"
        },
        "schemes" : {
          "x-samplevalue" : [ "http" ],
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        },
        "definitions" : {
          "$ref" : "#/definitions/swaggerdefinitions"
        },
        "swagger" : {
          "x-samplevalue" : "2.0",
          "type" : "string"
        },
        "info" : {
          "$ref" : "#/definitions/swaggerinfo"
        },
        "tags" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/swaggertags"
          }
        }
      },
      "type" : "object"
    },
    "BillableItemsPatch" : {
      "properties" : {
        "name" : {
          "example" : "Sample Name",
          "type" : "string",
          "x-description" : "Temp"
        }
      },
      "type" : "object"
    },
    "EmployeeAccountBansPut" : {
      "properties" : {
        "account" : {
          "example" : 135,
          "type" : "number",
          "x-description" : "Account"
        },
        "employee" : {
          "example" : 170,
          "type" : "number",
          "x-description" : "Employee"
        },
        "reason" : {
          "example" : 419,
          "type" : "string",
          "x-description" : "Reason"
        },
        "startDate" : {
          "example" : null,
          "type" : "string",
          "x-description" : "Start Date"
        }
      },
      "type" : "object"
    },
    "TaskTypesItem" : {
      "properties" : {
        "active" : {
          "example" : false,
          "type" : "boolean",
          "x-description" : "Active"
        },
        "billable" : {
          "example" : false,
          "type" : "boolean",
          "x-description" : "Billable"
        },
        "dispatchable" : {
          "example" : false,
          "type" : "boolean",
          "x-description" : "Can Dispatch"
        },
        "id" : {
          "example" : 12345,
          "type" : "number",
          "x-description" : "The Unique System ID of this object"
        },
        "name" : {
          "example" : "Sample Name",
          "type" : "string",
          "x-description" : "Task Name"
        },
        "prefix" : {
          "example" : null,
          "type" : "string",
          "x-description" : "Prefix"
        },
        "priority" : {
          "enum" : [ "LOW", "IMPORTANT", "URGENT" ],
          "type" : "string",
          "x-description" : "Priority"
        },
        "reportTemplate" : {
          "allOf" : [ {
            "$ref" : "#/definitions/ReportTemplatesItem"
          } ],
          "x-description" : "Report Template"
        },
        "resourceType" : {
          "example" : null,
          "type" : "string",
          "x-description" : "(On Demand) Resource Type"
        },
        "schedulable" : {
          "example" : false,
          "type" : "boolean",
          "x-description" : "Can Schedule"
        },
        "uri" : {
          "example" : null,
          "type" : "string",
          "x-description" : "Object URI"
        }
      },
      "type" : "object"
    },
    "BillableItemsPut" : {
      "properties" : {
        "name" : {
          "example" : "Sample Name",
          "type" : "string",
          "x-description" : "Temp"
        }
      },
      "type" : "object"
    },
    "WorkSessionsPut" : {
      "properties" : {
        "breaks" : {
          "example" : 105,
          "type" : "number",
          "x-description" : "(On Demand) Breaks"
        },
        "employee" : {
          "example" : 109,
          "type" : "number",
          "x-description" : "(On Demand) Employee"
        },
        "endDateTime" : {
          "example" : "2018-01-01 17:30",
          "type" : "string",
          "x-description" : "End Date & Time"
        },
        "initiationMethod" : {
          "enum" : [ "LIVE", "DELAYED", "DEVICE", "ADMIN", "PHONE", "BROWSER", "BREAK", "BATCH", "KIOSK" ],
          "type" : "string",
          "x-description" : "Initiation Method"
        },
        "position" : {
          "example" : 200,
          "type" : "number",
          "x-description" : "(On Demand) Position"
        },
        "startDateTime" : {
          "example" : "2018-01-01 09:00",
          "type" : "string",
          "x-description" : "Start Date & Time"
        },
        "status" : {
          "enum" : [ "OPEN", "CLOSED" ],
          "type" : "string",
          "x-description" : "Status"
        },
        "terminationMethod" : {
          "enum" : [ "LIVE", "DELAYED", "DEVICE", "ADMIN", "PHONE", "BROWSER", "BREAK", "BATCH", "KIOSK" ],
          "type" : "string",
          "x-description" : "Termination Method"
        }
      },
      "type" : "object"
    },
    "ReportFieldsCollection" : {
      "properties" : {
        "id" : {
          "example" : 12345,
          "type" : "number",
          "x-description" : "The Unique System ID of this object"
        },
        "templateField" : {
          "allOf" : [ {
            "$ref" : "#/definitions/ReportTemplateFieldsItem"
          } ],
          "x-description" : "Field "
        },
        "value" : {
          "example" : null,
          "type" : "string",
          "x-description" : "Valued"
        }
      },
      "type" : "object"
    },
    "InvoicesCollection" : {
      "properties" : {
        "client" : {
          "allOf" : [ {
            "$ref" : "#/definitions/ClientsItem"
          } ],
          "x-description" : ""
        },
        "contract" : {
          "allOf" : [ {
            "$ref" : "#/definitions/ContractsItem"
          } ],
          "x-description" : "Contract"
        },
        "date" : {
          "example" : null,
          "type" : "string",
          "x-description" : "Document date"
        },
        "dueDate" : {
          "example" : null,
          "type" : "string",
          "x-description" : ""
        },
        "id" : {
          "example" : 12345,
          "type" : "number",
          "x-description" : "The Unique System ID of this object"
        },
        "lines" : {
          "items" : {
            "$ref" : "#/definitions/InvoiceLinesItem"
          },
          "type" : "array",
          "x-description" : "Lines"
        },
        "number" : {
          "example" : null,
          "type" : "string",
          "x-description" : "Document number"
        },
        "resourceType" : {
          "example" : null,
          "type" : "string",
          "x-description" : "(On Demand) Resource Type"
        },
        "servicePeriodEnd" : {
          "example" : null,
          "type" : "string",
          "x-description" : "Period Start"
        },
        "servicePeriodStart" : {
          "example" : null,
          "type" : "string",
          "x-description" : "Period Start"
        },
        "status" : {
          "enum" : [ "APPROVED", "DRAFT" ],
          "type" : "string",
          "x-description" : ""
        },
        "subTotal" : {
          "example" : null,
          "type" : "string",
          "x-description" : ""
        },
        "taxClass" : {
          "allOf" : [ {
            "$ref" : "#/definitions/TaxClassesItem"
          } ],
          "x-description" : "Tax Class"
        },
        "taxTotal" : {
          "example" : null,
          "type" : "string",
          "x-description" : ""
        },
        "total" : {
          "example" : null,
          "type" : "string",
          "x-description" : ""
        },
        "uri" : {
          "example" : null,
          "type" : "string",
          "x-description" : "Object URI"
        }
      },
      "type" : "object"
    },
    "EmployeeAccountAssignmentsPost" : {
      "properties" : {
        "account" : {
          "example" : 138,
          "type" : "number",
          "x-description" : "Account"
        },
        "active" : {
          "example" : false,
          "type" : "string",
          "x-description" : "Active"
        },
        "employee" : {
          "example" : 143,
          "type" : "number",
          "x-description" : "Employee"
        },
        "endDate" : {
          "example" : "2018-05-01",
          "type" : "string",
          "x-description" : "End Date"
        },
        "startDate" : {
          "example" : null,
          "type" : "string",
          "x-description" : "Start Date"
        }
      },
      "type" : "object"
    },
    "DispatchTasksClose" : {
      "properties" : { },
      "type" : "object"
    },
    "Object" : {
      "description" : "Fields for the object. There will be fields associated with an Object, which are not all described here.",
      "properties" : {
        "objectField" : {
          "type" : "string"
        }
      },
      "type" : "object"
    },
    "ShiftsAcknowledge" : {
      "properties" : { },
      "type" : "object"
    },
    "SkillsItem" : {
      "properties" : {
        "category" : {
          "allOf" : [ {
            "$ref" : "#/definitions/SkillCategoriesItem"
          } ],
          "x-description" : "Category"
        },
        "dateLabel" : {
          "example" : "Expiration Date",
          "type" : "string",
          "x-description" : "Date Field Label"
        },
        "id" : {
          "example" : 12345,
          "type" : "number",
          "x-description" : "The Unique System ID of this object"
        },
        "label1" : {
          "example" : "Driver License Number",
          "type" : "string",
          "x-description" : "Field Label"
        },
        "label2" : {
          "example" : "Driver License Class",
          "type" : "string",
          "x-description" : "Other Field Label"
        },
        "label3" : {
          "example" : "Driver License Issuer",
          "type" : "string",
          "x-description" : "Another Field Label"
        },
        "name" : {
          "example" : "Driver License",
          "type" : "string",
          "x-description" : "Name"
        }
      },
      "type" : "object"
    },
    "VendorsCollection" : {
      "properties" : {
        "avatar" : {
          "example" : null,
          "type" : "string",
          "x-description" : "Picture"
        },
        "createdBy" : {
          "example" : null,
          "type" : "string",
          "x-description" : "(On Demand) Created By"
        },
        "createdOn" : {
          "example" : null,
          "type" : "string",
          "x-description" : "(On Demand) Created Date Time"
        },
        "firstName" : {
          "example" : "John",
          "type" : "string",
          "x-description" : "First Name"
        },
        "id" : {
          "example" : 12345,
          "type" : "number",
          "x-description" : "The Unique System ID of this object"
        },
        "jobTitle" : {
          "example" : "Assistant",
          "type" : "string",
          "x-description" : "Job Title"
        },
        "lastName" : {
          "example" : "Smith",
          "type" : "string",
          "x-description" : "Last Name"
        },
        "mainEmail" : {
          "example" : null,
          "type" : "string",
          "x-description" : "Main Email"
        },
        "name" : {
          "example" : "Sample Name",
          "type" : "string",
          "x-description" : "Company"
        },
        "primaryPhone" : {
          "example" : "555-555-1234",
          "type" : "string",
          "x-description" : "Primary Phone"
        },
        "resourceType" : {
          "example" : null,
          "type" : "string",
          "x-description" : "(On Demand) Resource Type"
        },
        "secondaryPhone" : {
          "example" : "555-555-4321",
          "type" : "string",
          "x-description" : "Secondary Phone"
        },
        "updatedBy" : {
          "example" : null,
          "type" : "string",
          "x-description" : "(On Demand) Updated By"
        },
        "updatedOn" : {
          "example" : null,
          "type" : "string",
          "x-description" : "(On Demand) Updated Date Time"
        },
        "uri" : {
          "example" : null,
          "type" : "string",
          "x-description" : "Object URI"
        }
      },
      "type" : "object"
    },
    "EmployeeAccountAssignmentsItem" : {
      "properties" : {
        "account" : {
          "allOf" : [ {
            "$ref" : "#/definitions/AccountsItem"
          } ],
          "x-description" : "Account"
        },
        "active" : {
          "example" : false,
          "type" : "string",
          "x-description" : "Active"
        },
        "employee" : {
          "allOf" : [ {
            "$ref" : "#/definitions/EmployeesItem"
          } ],
          "x-description" : "Employee"
        },
        "endDate" : {
          "example" : "2018-05-01",
          "type" : "string",
          "x-description" : "End Date"
        },
        "startDate" : {
          "example" : null,
          "type" : "string",
          "x-description" : "Start Date"
        }
      },
      "type" : "object"
    },
    "BillableItemsItem" : {
      "properties" : {
        "id" : {
          "example" : 12345,
          "type" : "number",
          "x-description" : "The Unique System ID of this object"
        },
        "name" : {
          "example" : "Sample Name",
          "type" : "string",
          "x-description" : "Temp"
        }
      },
      "type" : "object"
    },
    "ReportFieldsPatch" : {
      "properties" : {
        "templateField" : {
          "example" : 137,
          "type" : "number",
          "x-description" : "Field "
        },
        "value" : {
          "example" : null,
          "type" : "string",
          "x-description" : "Valued"
        }
      },
      "type" : "object"
    },
    "DispatchTasksOpen" : {
      "properties" : { },
      "type" : "object"
    },
    "VendorsPut" : {
      "properties" : {
        "firstName" : {
          "example" : "John",
          "type" : "string",
          "x-description" : "First Name"
        },
        "jobTitle" : {
          "example" : "Assistant",
          "type" : "string",
          "x-description" : "Job Title"
        },
        "lastName" : {
          "example" : "Smith",
          "type" : "string",
          "x-description" : "Last Name"
        },
        "mainEmail" : {
          "example" : null,
          "type" : "string",
          "x-description" : "Main Email"
        },
        "name" : {
          "example" : "Sample Name",
          "type" : "string",
          "x-description" : "Company"
        },
        "primaryPhone" : {
          "example" : "555-555-1234",
          "type" : "string",
          "x-description" : "Primary Phone"
        },
        "secondaryPhone" : {
          "example" : "555-555-4321",
          "type" : "string",
          "x-description" : "Secondary Phone"
        }
      },
      "type" : "object"
    },
    "BulkQuery" : {
      "description" : "BulkLoad response of bulk download.",
      "properties" : {
        "id" : {
          "description" : "Id of the bulk job",
          "type" : "number"
        },
        "status" : {
          "description" : "Status of the bulk job",
          "type" : "string"
        }
      },
      "type" : "object"
    },
    "InvoiceLineTaxesPatch" : {
      "properties" : {
        "amount" : {
          "example" : null,
          "type" : "string",
          "x-description" : "Amount"
        },
        "invoiceLine" : {
          "example" : 133,
          "type" : "number",
          "x-description" : "Invoice Line"
        },
        "taxClassItem" : {
          "example" : 110,
          "type" : "number",
          "x-description" : "Tax Class Item"
        }
      },
      "type" : "object"
    },
    "VendorsPost" : {
      "properties" : {
        "firstName" : {
          "example" : "John",
          "type" : "string",
          "x-description" : "First Name"
        },
        "jobTitle" : {
          "example" : "Assistant",
          "type" : "string",
          "x-description" : "Job Title"
        },
        "lastName" : {
          "example" : "Smith",
          "type" : "string",
          "x-description" : "Last Name"
        },
        "mainEmail" : {
          "example" : null,
          "type" : "string",
          "x-description" : "Main Email"
        },
        "name" : {
          "example" : "Sample Name",
          "type" : "string",
          "x-description" : "Company"
        },
        "primaryPhone" : {
          "example" : "555-555-1234",
          "type" : "string",
          "x-description" : "Primary Phone"
        },
        "secondaryPhone" : {
          "example" : "555-555-4321",
          "type" : "string",
          "x-description" : "Secondary Phone"
        }
      },
      "type" : "object"
    },
    "TaskPriceTiersItem" : {
      "properties" : {
        "contract" : {
          "allOf" : [ {
            "$ref" : "#/definitions/ContractsItem"
          } ],
          "x-description" : "Contract"
        },
        "customId" : {
          "example" : "C123-A",
          "type" : "string",
          "x-description" : "Custom ID"
        },
        "id" : {
          "example" : 12345,
          "type" : "number",
          "x-description" : "The Unique System ID of this object"
        },
        "name" : {
          "example" : "Sample Name",
          "type" : "string",
          "x-description" : "Name"
        },
        "resourceType" : {
          "example" : null,
          "type" : "string",
          "x-description" : "(On Demand) Resource Type"
        },
        "uri" : {
          "example" : null,
          "type" : "string",
          "x-description" : "Object URI"
        }
      },
      "type" : "object"
    },
    "MobileDevicesItem" : {
      "properties" : {
        "accountId" : {
          "example" : null,
          "type" : "string",
          "x-description" : "Account"
        },
        "id" : {
          "example" : 12345,
          "type" : "number",
          "x-description" : "The Unique System ID of this object"
        },
        "lastAction" : {
          "example" : null,
          "type" : "string",
          "x-description" : ""
        },
        "lastLatitude" : {
          "example" : null,
          "type" : "number",
          "x-description" : "Last known Latitude"
        },
        "lastLongitude" : {
          "example" : null,
          "type" : "number",
          "x-description" : "Last known Latitude"
        },
        "name" : {
          "example" : "Sample Name",
          "type" : "string",
          "x-description" : "Name"
        },
        "number" : {
          "example" : null,
          "type" : "string",
          "x-description" : "Number"
        },
        "position" : {
          "allOf" : [ {
            "$ref" : "#/definitions/PositionsItem"
          } ],
          "x-description" : "Position"
        },
        "regionOwner" : {
          "allOf" : [ {
            "$ref" : "#/definitions/RegionsItem"
          } ],
          "x-description" : "Region"
        },
        "resourceType" : {
          "example" : null,
          "type" : "string",
          "x-description" : "(On Demand) Resource Type"
        },
        "uri" : {
          "example" : null,
          "type" : "string",
          "x-description" : "Object URI"
        },
        "user" : {
          "allOf" : [ {
            "$ref" : "#/definitions/EmployeesItem"
          } ],
          "x-description" : ""
        }
      },
      "type" : "object"
    },
    "WorkflowInstanceLogsPatch" : {
      "properties" : {
        "createdOn" : {
          "example" : null,
          "type" : "string",
          "x-description" : "Created On"
        },
        "status" : {
          "example" : 115,
          "type" : "number",
          "x-description" : "Status"
        },
        "user" : {
          "example" : 121,
          "type" : "number",
          "x-description" : "User"
        }
      },
      "type" : "object"
    },
    "TaxClassItemsPut" : {
      "properties" : {
        "code" : {
          "example" : null,
          "type" : "string",
          "x-description" : "Tax Code"
        },
        "number" : {
          "example" : null,
          "type" : "string",
          "x-description" : "Tax Number"
        },
        "percentage" : {
          "example" : "15",
          "type" : "number",
          "x-description" : "The percentage"
        },
        "taxClass" : {
          "example" : 150,
          "type" : "number",
          "x-description" : "Tax Class"
        }
      },
      "type" : "object"
    },
    "EmploymentProfilesPost" : {
      "properties" : {
        "defaultPayRate" : {
          "example" : 12.5,
          "type" : "string",
          "x-description" : "Default Pay Rate"
        },
        "employmentDate" : {
          "example" : "2012-01-02",
          "type" : "string",
          "x-description" : "Employment Date"
        },
        "hasGrievance" : {
          "example" : false,
          "type" : "string",
          "x-description" : "Grievance"
        },
        "overtimeExempt" : {
          "example" : false,
          "type" : "string",
          "x-description" : "Overtime Exempt"
        },
        "payRateType" : {
          "enum" : [ "hourly", "salary" ],
          "type" : "string",
          "x-description" : "Pay Rate Type"
        },
        "seniority" : {
          "example" : 225,
          "type" : "number",
          "x-description" : "Seniority"
        },
        "terminationDate" : {
          "example" : null,
          "type" : "string",
          "x-description" : "Termination Date"
        }
      },
      "type" : "object"
    },
    "BreakSessionsPost" : {
      "properties" : {
        "endDateTime" : {
          "example" : "2018-01-01 17:30",
          "type" : "string",
          "x-description" : "End Date & Time"
        },
        "initiationMethod" : {
          "enum" : [ "LIVE", "DELAYED", "DEVICE", "ADMIN", "PHONE", "BROWSER", "BREAK", "BATCH", "KIOSK" ],
          "type" : "string",
          "x-description" : "Initiation Method"
        },
        "startDateTime" : {
          "example" : "2018-01-01 09:00",
          "type" : "string",
          "x-description" : "Start Date & Time"
        },
        "status" : {
          "enum" : [ "OPEN", "CLOSED" ],
          "type" : "string",
          "x-description" : "Status"
        },
        "terminationMethod" : {
          "enum" : [ "LIVE", "DELAYED", "DEVICE", "ADMIN", "PHONE", "BROWSER", "BREAK", "BATCH", "KIOSK" ],
          "type" : "string",
          "x-description" : "Termination Method"
        }
      },
      "type" : "object"
    },
    "TaskPriceTiersCollection" : {
      "properties" : {
        "contract" : {
          "allOf" : [ {
            "$ref" : "#/definitions/ContractsItem"
          } ],
          "x-description" : "Contract"
        },
        "customId" : {
          "example" : "C123-A",
          "type" : "string",
          "x-description" : "Custom ID"
        },
        "id" : {
          "example" : 12345,
          "type" : "number",
          "x-description" : "The Unique System ID of this object"
        },
        "name" : {
          "example" : "Sample Name",
          "type" : "string",
          "x-description" : "Name"
        },
        "resourceType" : {
          "example" : null,
          "type" : "string",
          "x-description" : "(On Demand) Resource Type"
        },
        "uri" : {
          "example" : null,
          "type" : "string",
          "x-description" : "Object URI"
        }
      },
      "type" : "object"
    },
    "AddressesPost" : {
      "properties" : {
        "addressLine1" : {
          "example" : "15000 Main Road",
          "type" : "string",
          "x-description" : "Address"
        },
        "addressLine2" : {
          "example" : "Suite 445",
          "type" : "string",
          "x-description" : "Address Line 2"
        },
        "city" : {
          "example" : "New York",
          "type" : "string",
          "x-description" : "City"
        },
        "country" : {
          "example" : "US",
          "type" : "string",
          "x-description" : "Country"
        },
        "postalCode" : {
          "example" : "10005",
          "type" : "string",
          "x-description" : "Zip/Postal Code"
        },
        "state" : {
          "example" : "NY",
          "type" : "string",
          "x-description" : "State/Province"
        }
      },
      "type" : "object"
    },
    "InvoiceLineTaxesItem" : {
      "properties" : {
        "amount" : {
          "example" : null,
          "type" : "string",
          "x-description" : "Amount"
        },
        "id" : {
          "example" : 12345,
          "type" : "number",
          "x-description" : "The Unique System ID of this object"
        },
        "invoiceLine" : {
          "allOf" : [ {
            "$ref" : "#/definitions/InvoiceLinesItem"
          } ],
          "x-description" : "Invoice Line"
        },
        "resourceType" : {
          "example" : null,
          "type" : "string",
          "x-description" : "(On Demand) Resource Type"
        },
        "taxClassItem" : {
          "allOf" : [ {
            "$ref" : "#/definitions/TaxClassItemsItem"
          } ],
          "x-description" : "Tax Class Item"
        },
        "uri" : {
          "example" : null,
          "type" : "string",
          "x-description" : "Object URI"
        }
      },
      "type" : "object"
    },
    "EmployeeAccountBansPatch" : {
      "properties" : {
        "account" : {
          "example" : 147,
          "type" : "number",
          "x-description" : "Account"
        },
        "employee" : {
          "example" : 157,
          "type" : "number",
          "x-description" : "Employee"
        },
        "reason" : {
          "example" : 684,
          "type" : "string",
          "x-description" : "Reason"
        },
        "startDate" : {
          "example" : null,
          "type" : "string",
          "x-description" : "Start Date"
        }
      },
      "type" : "object"
    },
    "ShiftsLog-time" : {
      "properties" : {
        "endTime" : {
          "example" : 564,
          "type" : "string",
          "x-description" : "End Time"
        },
        "startTime" : {
          "example" : 663,
          "type" : "string",
          "x-description" : "Start Time"
        }
      },
      "type" : "object"
    },
    "SkillsPut" : {
      "properties" : {
        "category" : {
          "example" : 115,
          "type" : "number",
          "x-description" : "Category"
        },
        "dateLabel" : {
          "example" : "Expiration Date",
          "type" : "string",
          "x-description" : "Date Field Label"
        },
        "label1" : {
          "example" : "Driver License Number",
          "type" : "string",
          "x-description" : "Field Label"
        },
        "label2" : {
          "example" : "Driver License Class",
          "type" : "string",
          "x-description" : "Other Field Label"
        },
        "label3" : {
          "example" : "Driver License Issuer",
          "type" : "string",
          "x-description" : "Another Field Label"
        },
        "name" : {
          "example" : "Driver License",
          "type" : "string",
          "x-description" : "Name"
        }
      },
      "type" : "object"
    },
    "ContractsCollection" : {
      "properties" : {
        "customId" : {
          "example" : "C123-A",
          "type" : "string",
          "x-description" : ""
        },
        "id" : {
          "example" : 12345,
          "type" : "number",
          "x-description" : "The Unique System ID of this object"
        },
        "name" : {
          "example" : "Sample Name",
          "type" : "string",
          "x-description" : ""
        },
        "resourceType" : {
          "example" : null,
          "type" : "string",
          "x-description" : "(On Demand) Resource Type"
        },
        "uri" : {
          "example" : null,
          "type" : "string",
          "x-description" : "Object URI"
        }
      },
      "type" : "object"
    },
    "EmployeeAvailabilitiesCollection" : {
      "properties" : {
        "available" : {
          "enum" : [ "NOT_AVAILABLE", "AVAILABLE", "MAYBE" ],
          "type" : "string",
          "x-description" : "Available"
        },
        "id" : {
          "example" : 12345,
          "type" : "number",
          "x-description" : "The Unique System ID of this object"
        },
        "timeFrom" : {
          "example" : 190,
          "type" : "string",
          "x-description" : "Number of seconds from the beginning of a day, i.e. 7200 means available from 2 AM"
        },
        "timeTo" : {
          "example" : 993,
          "type" : "string",
          "x-description" : "Number of seconds from the beginning of a day, i.e. 10800 means available between timeFrom and 3 AM"
        },
        "weekDay" : {
          "enum" : [ "MONDAY", "TUESDAY", "WEDNESDAY", "THURSDAY", "FRIDAY", "SATURDAY", "SUNDAY" ],
          "type" : "string",
          "x-description" : "Week Day"
        }
      },
      "type" : "object"
    },
    "PositionsCollection" : {
      "properties" : {
        "account" : {
          "allOf" : [ {
            "$ref" : "#/definitions/AccountsItem"
          } ],
          "x-description" : "Account"
        },
        "beginDate" : {
          "example" : "2018-01-01",
          "type" : "string",
          "x-description" : "Begin Date"
        },
        "customId" : {
          "example" : "C123-A",
          "type" : "string",
          "x-description" : "UID"
        },
        "description" : {
          "example" : null,
          "type" : "string",
          "x-description" : "Position Description"
        },
        "endDate" : {
          "example" : "2018-05-01",
          "type" : "string",
          "x-description" : "EndDate"
        },
        "id" : {
          "example" : 12345,
          "type" : "number",
          "x-description" : "The Unique System ID of this object"
        },
        "name" : {
          "example" : "Sample Name",
          "type" : "string",
          "x-description" : "Name"
        },
        "resourceType" : {
          "example" : null,
          "type" : "string",
          "x-description" : "(On Demand) Resource Type"
        },
        "shiftMemo" : {
          "example" : "Please wear the white uniform.",
          "type" : "string",
          "x-description" : "Memo that will be displayed on the schedule"
        },
        "status" : {
          "enum" : [ "ACTIVE", "INACTIVE" ],
          "type" : "string",
          "x-description" : "Status"
        },
        "uri" : {
          "example" : null,
          "type" : "string",
          "x-description" : "Object URI"
        }
      },
      "type" : "object"
    },
    "objectsMetadataFields" : {
      "properties" : {
        "mask" : {
          "type" : "string"
        },
        "type" : {
          "type" : "string"
        },
        "vendorDisplayName" : {
          "type" : "string"
        },
        "vendorPath" : {
          "type" : "string"
        },
        "vendorReadOnly" : {
          "type" : "boolean"
        },
        "vendorRequired" : {
          "type" : "boolean"
        }
      },
      "type" : "object"
    },
    "WorkflowStatusesCollection" : {
      "properties" : {
        "alertThresholdInMinutes" : {
          "example" : 239,
          "type" : "number",
          "x-description" : "Alert threshold (in minutes)"
        },
        "formatBackgroundColor" : {
          "example" : null,
          "type" : "string",
          "x-description" : "Format text color"
        },
        "formatTextColor" : {
          "example" : null,
          "type" : "string",
          "x-description" : "Format text color"
        },
        "id" : {
          "example" : 12345,
          "type" : "number",
          "x-description" : "The Unique System ID of this object"
        },
        "name" : {
          "example" : "Sample Name",
          "type" : "string",
          "x-description" : "Name"
        },
        "resourceType" : {
          "example" : null,
          "type" : "string",
          "x-description" : "(On Demand) Resource Type"
        },
        "uri" : {
          "example" : null,
          "type" : "string",
          "x-description" : "Object URI"
        },
        "warningThresholdInMinutes" : {
          "example" : 369,
          "type" : "number",
          "x-description" : "Warning threshold (in minutes)"
        }
      },
      "type" : "object"
    },
    "EmployeeSkillsPost" : {
      "properties" : {
        "comments" : {
          "example" : "This is a sample comment.",
          "type" : "string",
          "x-description" : "Comments"
        },
        "employee" : {
          "example" : 124,
          "type" : "number",
          "x-description" : "Employee"
        },
        "expiryDate" : {
          "example" : null,
          "type" : "string",
          "x-description" : "Expiry Date"
        },
        "label1" : {
          "example" : null,
          "type" : "string",
          "x-description" : "(On Demand) Label 1"
        },
        "label2" : {
          "example" : null,
          "type" : "string",
          "x-description" : "(On Demand) Label 2"
        },
        "label3" : {
          "example" : null,
          "type" : "string",
          "x-description" : "(On Demand) Label 3"
        },
        "skill" : {
          "example" : 112,
          "type" : "number",
          "x-description" : "Skill"
        }
      },
      "type" : "object"
    },
    "DispatchTasksAssign" : {
      "properties" : {
        "notify" : {
          "example" : false,
          "type" : "boolean",
          "x-description" : "Notify user"
        },
        "user" : {
          "example" : 391,
          "type" : "string",
          "x-description" : "Assign to"
        }
      },
      "type" : "object"
    },
    "ShiftsApprove" : {
      "properties" : {
        "billableHours" : {
          "example" : null,
          "type" : "number",
          "x-description" : "Hours to be billed"
        },
        "note" : {
          "example" : null,
          "type" : "string",
          "x-description" : "Optional note for approval"
        },
        "payableHours" : {
          "example" : null,
          "type" : "number",
          "x-description" : "Hours to be payed"
        }
      },
      "type" : "object"
    },
    "ShiftsAssign" : {
      "properties" : {
        "user" : {
          "example" : 999,
          "type" : "number",
          "x-description" : "Assign to"
        }
      },
      "type" : "object"
    },
    "ShiftsPublish" : {
      "properties" : { },
      "type" : "object"
    },
    "InvoiceLineTaxesPut" : {
      "properties" : {
        "amount" : {
          "example" : null,
          "type" : "string",
          "x-description" : "Amount"
        },
        "invoiceLine" : {
          "example" : 117,
          "type" : "number",
          "x-description" : "Invoice Line"
        },
        "taxClassItem" : {
          "example" : 123,
          "type" : "number",
          "x-description" : "Tax Class Item"
        }
      },
      "type" : "object"
    },
    "WorkflowInstanceLogsPut" : {
      "properties" : {
        "createdOn" : {
          "example" : null,
          "type" : "string",
          "x-description" : "Created On"
        },
        "status" : {
          "example" : 185,
          "type" : "number",
          "x-description" : "Status"
        },
        "user" : {
          "example" : 191,
          "type" : "number",
          "x-description" : "User"
        }
      },
      "type" : "object"
    },
    "EmployeeAvailabilitiesPut" : {
      "properties" : {
        "available" : {
          "enum" : [ "NOT_AVAILABLE", "AVAILABLE", "MAYBE" ],
          "type" : "string",
          "x-description" : "Available"
        },
        "timeFrom" : {
          "example" : 770,
          "type" : "string",
          "x-description" : "Number of seconds from the beginning of a day, i.e. 7200 means available from 2 AM"
        },
        "timeTo" : {
          "example" : 580,
          "type" : "string",
          "x-description" : "Number of seconds from the beginning of a day, i.e. 10800 means available between timeFrom and 3 AM"
        },
        "weekDay" : {
          "enum" : [ "MONDAY", "TUESDAY", "WEDNESDAY", "THURSDAY", "FRIDAY", "SATURDAY", "SUNDAY" ],
          "type" : "string",
          "x-description" : "Week Day"
        }
      },
      "type" : "object"
    },
    "BillItemsItem" : {
      "properties" : {
        "customId" : {
          "example" : "C123-A",
          "type" : "string",
          "x-description" : "Chart of account ID or custom ID"
        },
        "id" : {
          "example" : 12345,
          "type" : "number",
          "x-description" : "The Unique System ID of this object"
        },
        "isGlobal" : {
          "example" : false,
          "type" : "boolean",
          "x-description" : "If the bill item is available for all region. If not select a region"
        },
        "name" : {
          "example" : "Sample Name",
          "type" : "string",
          "x-description" : "The name of the bill item"
        },
        "region" : {
          "allOf" : [ {
            "$ref" : "#/definitions/RegionsItem"
          } ],
          "x-description" : "(On Demand) Only set a region, when isGlobal is false"
        },
        "resourceType" : {
          "example" : null,
          "type" : "string",
          "x-description" : "(On Demand) Resource Type"
        },
        "status" : {
          "enum" : [ "ACTIVE", "DISABLED" ],
          "type" : "string",
          "x-description" : "If the bill-item is active or disabled"
        },
        "uri" : {
          "example" : null,
          "type" : "string",
          "x-description" : "Object URI"
        }
      },
      "type" : "object"
    },
    "WorkSessionsCollection" : {
      "properties" : {
        "breaks" : {
          "items" : {
            "$ref" : "#/definitions/BreakSessionsItem"
          },
          "type" : "array",
          "x-description" : "(On Demand) Breaks"
        },
        "employee" : {
          "allOf" : [ {
            "$ref" : "#/definitions/EmployeesItem"
          } ],
          "x-description" : "(On Demand) Employee"
        },
        "endDateTime" : {
          "example" : "2018-01-01 17:30",
          "type" : "string",
          "x-description" : "End Date & Time"
        },
        "id" : {
          "example" : 12345,
          "type" : "number",
          "x-description" : "The Unique System ID of this object"
        },
        "initiationMethod" : {
          "enum" : [ "LIVE", "DELAYED", "DEVICE", "ADMIN", "PHONE", "BROWSER", "BREAK", "BATCH", "KIOSK" ],
          "type" : "string",
          "x-description" : "Initiation Method"
        },
        "position" : {
          "allOf" : [ {
            "$ref" : "#/definitions/PositionsItem"
          } ],
          "x-description" : "(On Demand) Position"
        },
        "resourceType" : {
          "example" : null,
          "type" : "string",
          "x-description" : "(On Demand) Resource Type"
        },
        "startDateTime" : {
          "example" : "2018-01-01 09:00",
          "type" : "string",
          "x-description" : "Start Date & Time"
        },
        "status" : {
          "enum" : [ "OPEN", "CLOSED" ],
          "type" : "string",
          "x-description" : "Status"
        },
        "terminationMethod" : {
          "enum" : [ "LIVE", "DELAYED", "DEVICE", "ADMIN", "PHONE", "BROWSER", "BREAK", "BATCH", "KIOSK" ],
          "type" : "string",
          "x-description" : "Termination Method"
        },
        "uri" : {
          "example" : null,
          "type" : "string",
          "x-description" : "Object URI"
        }
      },
      "type" : "object"
    },
    "SkillCategoriesCollection" : {
      "properties" : {
        "description" : {
          "example" : null,
          "type" : "string",
          "x-description" : "Details"
        },
        "id" : {
          "example" : 12345,
          "type" : "number",
          "x-description" : "The Unique System ID of this object"
        },
        "name" : {
          "example" : "Sample Name",
          "type" : "string",
          "x-description" : "Description"
        }
      },
      "type" : "object"
    },
    "WorkflowInstanceLogsPost" : {
      "properties" : {
        "createdOn" : {
          "example" : null,
          "type" : "string",
          "x-description" : "Created On"
        },
        "status" : {
          "example" : 175,
          "type" : "number",
          "x-description" : "Status"
        },
        "user" : {
          "example" : 100,
          "type" : "number",
          "x-description" : "User"
        }
      },
      "type" : "object"
    },
    "swaggertags" : {
      "x-has-customfields" : false,
      "title" : "tags",
      "properties" : {
        "name" : {
          "x-samplevalue" : "contacts",
          "type" : "string"
        }
      },
      "type" : "object"
    },
    "PriceTiersPost" : {
      "properties" : {
        "cancellationThresholdInMinutes" : {
          "example" : 515,
          "type" : "string",
          "x-description" : "Cancellation Threshold"
        },
        "customId" : {
          "example" : "C123-A",
          "type" : "string",
          "x-description" : "Custom identifier"
        },
        "effectiveDate" : {
          "example" : null,
          "type" : "string",
          "x-description" : "Effective date"
        },
        "instructions" : {
          "example" : null,
          "type" : "string",
          "x-description" : "Instructions"
        },
        "name" : {
          "example" : "Sample Name",
          "type" : "string",
          "x-description" : "Name"
        },
        "validUntilDate" : {
          "example" : null,
          "type" : "string",
          "x-description" : "Valid until date"
        }
      },
      "type" : "object"
    },
    "EmploymentProfilesPut" : {
      "properties" : {
        "defaultPayRate" : {
          "example" : 12.5,
          "type" : "string",
          "x-description" : "Default Pay Rate"
        },
        "employmentDate" : {
          "example" : "2012-01-02",
          "type" : "string",
          "x-description" : "Employment Date"
        },
        "hasGrievance" : {
          "example" : false,
          "type" : "string",
          "x-description" : "Grievance"
        },
        "overtimeExempt" : {
          "example" : false,
          "type" : "string",
          "x-description" : "Overtime Exempt"
        },
        "payRateType" : {
          "enum" : [ "hourly", "salary" ],
          "type" : "string",
          "x-description" : "Pay Rate Type"
        },
        "seniority" : {
          "example" : 973,
          "type" : "number",
          "x-description" : "Seniority"
        },
        "terminationDate" : {
          "example" : null,
          "type" : "string",
          "x-description" : "Termination Date"
        }
      },
      "type" : "object"
    },
    "DispatchCustomLocationsPatch" : {
      "properties" : {
        "addressLine1" : {
          "example" : "15000 Main Road",
          "type" : "string",
          "x-description" : "Address line 1"
        },
        "addressLine2" : {
          "example" : "Suite 445",
          "type" : "string",
          "x-description" : "Address line 2"
        },
        "city" : {
          "example" : "New York",
          "type" : "string",
          "x-description" : "City"
        },
        "country" : {
          "example" : "US",
          "type" : "string",
          "x-description" : "Country"
        },
        "latitude" : {
          "example" : null,
          "type" : "number",
          "x-description" : "Latitude"
        },
        "longitude" : {
          "example" : null,
          "type" : "number",
          "x-description" : "Longitude"
        },
        "name" : {
          "example" : "Company or description of location",
          "type" : "string",
          "x-description" : "Name"
        },
        "postalCode" : {
          "example" : "10005",
          "type" : "string",
          "x-description" : "Zip / Postal Code"
        },
        "state" : {
          "example" : "NY",
          "type" : "string",
          "x-description" : "State / Province"
        },
        "taskId" : {
          "example" : 247,
          "type" : "number",
          "x-description" : "Task ID"
        },
        "type" : {
          "enum" : [ "ADDRESS", "COORDINATES" ],
          "type" : "string",
          "x-description" : "Type"
        }
      },
      "type" : "object"
    },
    "WorkflowInstanceLogsCollection" : {
      "properties" : {
        "createdOn" : {
          "example" : null,
          "type" : "string",
          "x-description" : "Created On"
        },
        "id" : {
          "example" : 12345,
          "type" : "number",
          "x-description" : "The Unique System ID of this object"
        },
        "status" : {
          "allOf" : [ {
            "$ref" : "#/definitions/WorkflowStatusesItem"
          } ],
          "x-description" : "Status"
        },
        "user" : {
          "allOf" : [ {
            "$ref" : "#/definitions/EmployeesItem"
          } ],
          "x-description" : "User"
        }
      },
      "type" : "object"
    },
    "PositionsPut" : {
      "properties" : {
        "account" : {
          "example" : 137,
          "type" : "number",
          "x-description" : "Account"
        },
        "beginDate" : {
          "example" : "2018-01-01",
          "type" : "string",
          "x-description" : "Begin Date"
        },
        "customId" : {
          "example" : "C123-A",
          "type" : "string",
          "x-description" : "UID"
        },
        "description" : {
          "example" : null,
          "type" : "string",
          "x-description" : "Position Description"
        },
        "endDate" : {
          "example" : "2018-05-01",
          "type" : "string",
          "x-description" : "EndDate"
        },
        "name" : {
          "example" : "Sample Name",
          "type" : "string",
          "x-description" : "Name"
        },
        "shiftMemo" : {
          "example" : "Please wear the white uniform.",
          "type" : "string",
          "x-description" : "Memo that will be displayed on the schedule"
        },
        "status" : {
          "enum" : [ "ACTIVE", "INACTIVE" ],
          "type" : "string",
          "x-description" : "Status"
        }
      },
      "type" : "object"
    },
    "TaxClassesPost" : {
      "properties" : {
        "name" : {
          "example" : "Sample Name",
          "type" : "string",
          "x-description" : "Tax Class"
        }
      },
      "type" : "object"
    },
    "AccountsPatch" : {
      "properties" : {
        "address" : {
          "example" : 190,
          "type" : "number",
          "x-description" : "(On Demand) Address"
        },
        "customId" : {
          "example" : "C123-A",
          "type" : "string",
          "x-description" : "UID"
        },
        "name" : {
          "example" : "Sample Name",
          "type" : "string",
          "x-description" : "Name"
        },
        "region" : {
          "example" : 110,
          "type" : "number",
          "x-description" : "(On Demand) Account Region"
        },
        "subType" : {
          "enum" : [ "client", "multi", "site" ],
          "type" : "string",
          "x-description" : "Client Type"
        },
        "type" : {
          "enum" : [ "CLIENT", "ZONE", "DEPARTMENT" ],
          "type" : "string",
          "x-description" : "Account Type"
        }
      },
      "type" : "object"
    },
    "ContractsPut" : {
      "properties" : {
        "customId" : {
          "example" : "C123-A",
          "type" : "string",
          "x-description" : ""
        },
        "name" : {
          "example" : "Sample Name",
          "type" : "string",
          "x-description" : ""
        }
      },
      "type" : "object"
    },
    "WorkflowsPost" : {
      "properties" : {
        "name" : {
          "example" : "Sample Name",
          "type" : "string",
          "x-description" : "Name"
        },
        "statuses" : {
          "example" : 105,
          "type" : "number",
          "x-description" : ""
        }
      },
      "type" : "object"
    },
    "SkillsPost" : {
      "properties" : {
        "category" : {
          "example" : 162,
          "type" : "number",
          "x-description" : "Category"
        },
        "dateLabel" : {
          "example" : "Expiration Date",
          "type" : "string",
          "x-description" : "Date Field Label"
        },
        "label1" : {
          "example" : "Driver License Number",
          "type" : "string",
          "x-description" : "Field Label"
        },
        "label2" : {
          "example" : "Driver License Class",
          "type" : "string",
          "x-description" : "Other Field Label"
        },
        "label3" : {
          "example" : "Driver License Issuer",
          "type" : "string",
          "x-description" : "Another Field Label"
        },
        "name" : {
          "example" : "Driver License",
          "type" : "string",
          "x-description" : "Name"
        }
      },
      "type" : "object"
    },
    "EmployeesPatch" : {
      "properties" : {
        "address" : {
          "example" : 140,
          "type" : "number",
          "x-description" : "(On Demand) Address"
        },
        "ageGroup" : {
          "example" : null,
          "type" : "string",
          "x-description" : "(On Demand) Age"
        },
        "birthday" : {
          "example" : null,
          "type" : "string",
          "x-description" : "(On Demand) Birthday"
        },
        "customId" : {
          "example" : "C123-A",
          "type" : "string",
          "x-description" : "UID"
        },
        "email" : {
          "example" : "john.smith@myemail.com",
          "type" : "string",
          "x-description" : "Email"
        },
        "employmentProfile" : {
          "example" : 180,
          "type" : "number",
          "x-description" : "(On Demand) The profile that contains start date, tesat"
        },
        "firstName" : {
          "example" : "John",
          "type" : "string",
          "x-description" : "First Name"
        },
        "gender" : {
          "example" : null,
          "type" : "string",
          "x-description" : "(On Demand) Gender"
        },
        "jobTitle" : {
          "example" : "Assistant",
          "type" : "string",
          "x-description" : "Job Title"
        },
        "lastName" : {
          "example" : "Smith",
          "type" : "string",
          "x-description" : "Last Name"
        },
        "primaryPhone" : {
          "example" : "555-555-1234",
          "type" : "string",
          "x-description" : "Primary Phone"
        },
        "region" : {
          "example" : 157,
          "type" : "number",
          "x-description" : "Region"
        },
        "secondaryPhone" : {
          "example" : "555-555-4321",
          "type" : "string",
          "x-description" : "Secondary Phone"
        },
        "status" : {
          "enum" : [ "ACTIVE", "INACTIVE" ],
          "type" : "string",
          "x-description" : "Status"
        }
      },
      "type" : "object"
    },
    "InvoicesItem" : {
      "properties" : {
        "client" : {
          "allOf" : [ {
            "$ref" : "#/definitions/ClientsItem"
          } ],
          "x-description" : ""
        },
        "contract" : {
          "allOf" : [ {
            "$ref" : "#/definitions/ContractsItem"
          } ],
          "x-description" : "Contract"
        },
        "date" : {
          "example" : null,
          "type" : "string",
          "x-description" : "Document date"
        },
        "dueDate" : {
          "example" : null,
          "type" : "string",
          "x-description" : ""
        },
        "id" : {
          "example" : 12345,
          "type" : "number",
          "x-description" : "The Unique System ID of this object"
        },
        "lines" : {
          "items" : {
            "$ref" : "#/definitions/InvoiceLinesItem"
          },
          "type" : "array",
          "x-description" : "Lines"
        },
        "number" : {
          "example" : null,
          "type" : "string",
          "x-description" : "Document number"
        },
        "resourceType" : {
          "example" : null,
          "type" : "string",
          "x-description" : "(On Demand) Resource Type"
        },
        "servicePeriodEnd" : {
          "example" : null,
          "type" : "string",
          "x-description" : "Period Start"
        },
        "servicePeriodStart" : {
          "example" : null,
          "type" : "string",
          "x-description" : "Period Start"
        },
        "status" : {
          "enum" : [ "APPROVED", "DRAFT" ],
          "type" : "string",
          "x-description" : ""
        },
        "subTotal" : {
          "example" : null,
          "type" : "string",
          "x-description" : ""
        },
        "taxClass" : {
          "allOf" : [ {
            "$ref" : "#/definitions/TaxClassesItem"
          } ],
          "x-description" : "Tax Class"
        },
        "taxTotal" : {
          "example" : null,
          "type" : "string",
          "x-description" : ""
        },
        "total" : {
          "example" : null,
          "type" : "string",
          "x-description" : ""
        },
        "uri" : {
          "example" : null,
          "type" : "string",
          "x-description" : "Object URI"
        }
      },
      "type" : "object"
    },
    "DispatchCustomLocationsCollection" : {
      "properties" : {
        "addressLine1" : {
          "example" : "15000 Main Road",
          "type" : "string",
          "x-description" : "Address line 1"
        },
        "addressLine2" : {
          "example" : "Suite 445",
          "type" : "string",
          "x-description" : "Address line 2"
        },
        "city" : {
          "example" : "New York",
          "type" : "string",
          "x-description" : "City"
        },
        "country" : {
          "example" : "US",
          "type" : "string",
          "x-description" : "Country"
        },
        "id" : {
          "example" : 12345,
          "type" : "number",
          "x-description" : "The Unique System ID of this object"
        },
        "latitude" : {
          "example" : null,
          "type" : "number",
          "x-description" : "Latitude"
        },
        "longitude" : {
          "example" : null,
          "type" : "number",
          "x-description" : "Longitude"
        },
        "name" : {
          "example" : "Company or description of location",
          "type" : "string",
          "x-description" : "Name"
        },
        "postalCode" : {
          "example" : "10005",
          "type" : "string",
          "x-description" : "Zip / Postal Code"
        },
        "resourceType" : {
          "example" : null,
          "type" : "string",
          "x-description" : "(On Demand) Resource Type"
        },
        "state" : {
          "example" : "NY",
          "type" : "string",
          "x-description" : "State / Province"
        },
        "taskId" : {
          "example" : 286,
          "type" : "number",
          "x-description" : "Task ID"
        },
        "type" : {
          "enum" : [ "ADDRESS", "COORDINATES" ],
          "type" : "string",
          "x-description" : "Type"
        },
        "uri" : {
          "example" : null,
          "type" : "string",
          "x-description" : "Object URI"
        }
      },
      "type" : "object"
    },
    "DataViewsPut" : {
      "properties" : {
        "category" : {
          "example" : 167,
          "type" : "number",
          "x-description" : "Category"
        },
        "configs" : {
          "example" : null,
          "type" : "string",
          "x-description" : "Configs"
        },
        "name" : {
          "example" : "Sample Name",
          "type" : "string",
          "x-description" : "Name"
        },
        "renderer" : {
          "example" : null,
          "type" : "string",
          "x-description" : "Renderer"
        },
        "tqlParsedStatement" : {
          "example" : null,
          "type" : "string",
          "x-description" : "TQL Parsed Statement"
        },
        "tqlStatement" : {
          "example" : null,
          "type" : "string",
          "x-description" : "TQL Statement"
        },
        "type" : {
          "example" : null,
          "type" : "string",
          "x-description" : "View Type"
        },
        "uid" : {
          "example" : null,
          "type" : "string",
          "x-description" : "GUID"
        }
      },
      "type" : "object"
    },
    "NotesPatch" : {
      "properties" : {
        "content" : {
          "example" : null,
          "type" : "string",
          "x-description" : "Content"
        },
        "createdBy" : {
          "example" : 197,
          "type" : "number",
          "x-description" : "Created By"
        },
        "createdOn" : {
          "example" : 745,
          "type" : "string",
          "x-description" : "Created On"
        }
      },
      "type" : "object"
    },
    "ShiftsAdd-note" : {
      "properties" : {
        "note" : {
          "example" : null,
          "type" : "string",
          "x-description" : "Note"
        }
      },
      "type" : "object"
    },
    "EmployeeSkillsCollection" : {
      "properties" : {
        "comments" : {
          "example" : "This is a sample comment.",
          "type" : "string",
          "x-description" : "Comments"
        },
        "employee" : {
          "allOf" : [ {
            "$ref" : "#/definitions/EmployeesItem"
          } ],
          "x-description" : "Employee"
        },
        "expiryDate" : {
          "example" : null,
          "type" : "string",
          "x-description" : "Expiry Date"
        },
        "id" : {
          "example" : 12345,
          "type" : "number",
          "x-description" : "The Unique System ID of this object"
        },
        "label1" : {
          "example" : null,
          "type" : "string",
          "x-description" : "(On Demand) Label 1"
        },
        "label2" : {
          "example" : null,
          "type" : "string",
          "x-description" : "(On Demand) Label 2"
        },
        "label3" : {
          "example" : null,
          "type" : "string",
          "x-description" : "(On Demand) Label 3"
        },
        "resourceType" : {
          "example" : null,
          "type" : "string",
          "x-description" : "(On Demand) Resource Type"
        },
        "skill" : {
          "allOf" : [ {
            "$ref" : "#/definitions/SkillsItem"
          } ],
          "x-description" : "Skill"
        },
        "skillCustomFields" : {
          "example" : {
            "label1" : {
              "field" : "label1",
              "label" : "Gun Permit number",
              "type" : "string",
              "value" : "0222"
            },
            "label_date" : {
              "field" : "label_date",
              "label" : "Renewal Date",
              "type" : "DateTime",
              "value" : "1569988800"
            }
          },
          "type" : "string",
          "x-description" : "Object of custom fields like {'label1': {'label': 'Gun permit', 'value': '0222', 'type':'string'}, ...}"
        },
        "uri" : {
          "example" : null,
          "type" : "string",
          "x-description" : "Object URI"
        }
      },
      "type" : "object"
    },
    "AddressesItem" : {
      "properties" : {
        "addressLine1" : {
          "example" : "15000 Main Road",
          "type" : "string",
          "x-description" : "Address"
        },
        "addressLine2" : {
          "example" : "Suite 445",
          "type" : "string",
          "x-description" : "Address Line 2"
        },
        "city" : {
          "example" : "New York",
          "type" : "string",
          "x-description" : "City"
        },
        "country" : {
          "example" : "US",
          "type" : "string",
          "x-description" : "Country"
        },
        "id" : {
          "example" : 12345,
          "type" : "number",
          "x-description" : "The Unique System ID of this object"
        },
        "latitude" : {
          "example" : null,
          "type" : "number",
          "x-description" : "Latitude"
        },
        "longitude" : {
          "example" : null,
          "type" : "number",
          "x-description" : "Longitude"
        },
        "postalCode" : {
          "example" : "10005",
          "type" : "string",
          "x-description" : "Zip/Postal Code"
        },
        "resourceType" : {
          "example" : null,
          "type" : "string",
          "x-description" : "(On Demand) Resource Type"
        },
        "state" : {
          "example" : "NY",
          "type" : "string",
          "x-description" : "State/Province"
        },
        "uri" : {
          "example" : null,
          "type" : "string",
          "x-description" : "Object URI"
        }
      },
      "type" : "object"
    },
    "EmployeeSkillsPut" : {
      "properties" : {
        "comments" : {
          "example" : "This is a sample comment.",
          "type" : "string",
          "x-description" : "Comments"
        },
        "employee" : {
          "example" : 173,
          "type" : "number",
          "x-description" : "Employee"
        },
        "expiryDate" : {
          "example" : null,
          "type" : "string",
          "x-description" : "Expiry Date"
        },
        "label1" : {
          "example" : null,
          "type" : "string",
          "x-description" : "(On Demand) Label 1"
        },
        "label2" : {
          "example" : null,
          "type" : "string",
          "x-description" : "(On Demand) Label 2"
        },
        "label3" : {
          "example" : null,
          "type" : "string",
          "x-description" : "(On Demand) Label 3"
        },
        "skill" : {
          "example" : 178,
          "type" : "number",
          "x-description" : "Skill"
        }
      },
      "type" : "object"
    },
    "EmployeesItem" : {
      "properties" : {
        "accountAssignments" : {
          "items" : {
            "$ref" : "#/definitions/EmployeeAccountAssignmentsItem"
          },
          "type" : "array",
          "x-description" : "(On Demand) Account Assignments"
        },
        "accountBans" : {
          "items" : {
            "$ref" : "#/definitions/EmployeeAccountBansItem"
          },
          "type" : "array",
          "x-description" : "(On Demand) Account Bans"
        },
        "address" : {
          "allOf" : [ {
            "$ref" : "#/definitions/AddressesItem"
          } ],
          "x-description" : "(On Demand) Address"
        },
        "age" : {
          "example" : 609,
          "type" : "number",
          "x-description" : "(On Demand) Age"
        },
        "ageGroup" : {
          "example" : null,
          "type" : "string",
          "x-description" : "(On Demand) Age"
        },
        "availabilities" : {
          "items" : {
            "$ref" : "#/definitions/EmployeeAvailabilitiesItem"
          },
          "type" : "array",
          "x-description" : "(On Demand) Employee Availability"
        },
        "avatar" : {
          "example" : null,
          "type" : "string",
          "x-description" : "Picture"
        },
        "birthday" : {
          "example" : null,
          "type" : "string",
          "x-description" : "(On Demand) Birthday"
        },
        "createdBy" : {
          "example" : null,
          "type" : "string",
          "x-description" : "(On Demand) Created By"
        },
        "createdOn" : {
          "example" : null,
          "type" : "string",
          "x-description" : "(On Demand) Created Date Time"
        },
        "customId" : {
          "example" : "C123-A",
          "type" : "string",
          "x-description" : "UID"
        },
        "email" : {
          "example" : "john.smith@myemail.com",
          "type" : "string",
          "x-description" : "Email"
        },
        "emergencyContacts" : {
          "items" : {
            "$ref" : "#/definitions/ContactsItem"
          },
          "type" : "array",
          "x-description" : "(On Demand) Emergency Contacts"
        },
        "employmentProfile" : {
          "allOf" : [ {
            "$ref" : "#/definitions/EmploymentProfilesItem"
          } ],
          "x-description" : "(On Demand) The profile that contains start date, tesat"
        },
        "firstName" : {
          "example" : "John",
          "type" : "string",
          "x-description" : "First Name"
        },
        "gender" : {
          "example" : null,
          "type" : "string",
          "x-description" : "(On Demand) Gender"
        },
        "id" : {
          "example" : 12345,
          "type" : "number",
          "x-description" : "The Unique System ID of this object"
        },
        "jobTitle" : {
          "example" : "Assistant",
          "type" : "string",
          "x-description" : "Job Title"
        },
        "lastName" : {
          "example" : "Smith",
          "type" : "string",
          "x-description" : "Last Name"
        },
        "name" : {
          "example" : "Sample Name",
          "type" : "string",
          "x-description" : "(On Demand) Full Name"
        },
        "notes" : {
          "items" : {
            "$ref" : "#/definitions/NotesItem"
          },
          "type" : "array",
          "x-description" : "(On Demand) Notes"
        },
        "primaryPhone" : {
          "example" : "555-555-1234",
          "type" : "string",
          "x-description" : "Primary Phone"
        },
        "region" : {
          "allOf" : [ {
            "$ref" : "#/definitions/RegionsItem"
          } ],
          "x-description" : "Region"
        },
        "resourceType" : {
          "example" : null,
          "type" : "string",
          "x-description" : "(On Demand) Resource Type"
        },
        "secondaryPhone" : {
          "example" : "555-555-4321",
          "type" : "string",
          "x-description" : "Secondary Phone"
        },
        "skills" : {
          "items" : {
            "$ref" : "#/definitions/EmployeeSkillsItem"
          },
          "type" : "array",
          "x-description" : "(On Demand) Skills"
        },
        "status" : {
          "enum" : [ "ACTIVE", "INACTIVE" ],
          "type" : "string",
          "x-description" : "Status"
        },
        "updatedBy" : {
          "example" : null,
          "type" : "string",
          "x-description" : "(On Demand) Updated By"
        },
        "updatedOn" : {
          "example" : null,
          "type" : "string",
          "x-description" : "(On Demand) Updated Date Time"
        },
        "uri" : {
          "example" : null,
          "type" : "string",
          "x-description" : "Object URI"
        }
      },
      "type" : "object"
    },
    "ReportTemplateFieldsItem" : {
      "properties" : {
        "adminOnly" : {
          "example" : false,
          "type" : "boolean",
          "x-description" : "Admin Only"
        },
        "displayOrder" : {
          "example" : 385,
          "type" : "number",
          "x-description" : "Display Order Index"
        },
        "extra" : {
          "example" : null,
          "type" : "string",
          "x-description" : "Extra information"
        },
        "id" : {
          "example" : 12345,
          "type" : "number",
          "x-description" : "The Unique System ID of this object"
        },
        "isDispatcherField" : {
          "example" : false,
          "type" : "boolean",
          "x-description" : "Dispatcher Field"
        },
        "label" : {
          "example" : null,
          "type" : "string",
          "x-description" : "Name"
        },
        "list" : {
          "example" : null,
          "type" : "string",
          "x-description" : "List"
        },
        "name" : {
          "example" : "Sample Name",
          "type" : "string",
          "x-description" : "Field"
        },
        "required" : {
          "example" : false,
          "type" : "boolean",
          "x-description" : "Required"
        },
        "type" : {
          "example" : null,
          "type" : "string",
          "x-description" : "Type"
        }
      },
      "type" : "object"
    },
    "ActionResponse" : {
      "properties" : {
        "data" : {
          "type" : "object"
        },
        "meta" : {
          "type" : "object"
        }
      },
      "type" : "object",
      "x-description" : "List of modified objects"
    },
    "ShiftsPost" : {
      "properties" : {
        "breakInMinutes" : {
          "example" : 15,
          "type" : "string",
          "x-description" : "The number of minuted allocated for breaks"
        },
        "employee" : {
          "example" : 156,
          "type" : "number",
          "x-description" : "(On Demand) The employee assigned to the shift"
        },
        "endDateTime" : {
          "example" : "2018-01-01 17:30",
          "type" : "string",
          "x-description" : "End of the shift"
        },
        "notes" : {
          "example" : 136,
          "type" : "number",
          "x-description" : "(On Demand) Notes"
        },
        "onShiftBoard" : {
          "example" : false,
          "type" : "boolean",
          "x-description" : "If the shift is available on the shiftboard"
        },
        "plannedPayableHours" : {
          "example" : null,
          "type" : "number",
          "x-description" : "Shift hours, remove breaks when breaks are not payable"
        },
        "position" : {
          "example" : 145,
          "type" : "number",
          "x-description" : "(On Demand) The work post where the shift is scheduled"
        },
        "published" : {
          "example" : false,
          "type" : "boolean",
          "x-description" : "If the shift is published and viewable by employees"
        },
        "startDateTime" : {
          "example" : "2018-01-01 09:00",
          "type" : "string",
          "x-description" : "Start of the shift"
        },
        "status" : {
          "enum" : [ "CANCELLED", "ACTIVE" ],
          "type" : "string",
          "x-description" : "If the shift is active or cancelled"
        },
        "vacant" : {
          "example" : false,
          "type" : "boolean",
          "x-description" : "If the shift is vacant"
        }
      },
      "type" : "object"
    },
    "200" : {
      "content" : {
        "application/json" : {
          "schema" : {
            "properties" : {
              "hasErrors" : {
                "type" : "array"
              },
              "processErrors" : {
                "type" : "array"
              },
              "success" : {
                "type" : "array"
              },
              "validationErrors" : {
                "type" : "array"
              }
            },
            "type" : "object"
          }
        }
      },
      "description" : "Batch File payload",
      "type" : "object"
    },
    "ReportsPatch" : {
      "properties" : {
        "account" : {
          "example" : 133,
          "type" : "number",
          "x-description" : "Account"
        },
        "approvalDateTime" : {
          "example" : null,
          "type" : "string",
          "x-description" : "Approved On"
        },
        "approvedBy" : {
          "example" : 134,
          "type" : "number",
          "x-description" : "Approved By"
        },
        "reportDateTime" : {
          "example" : null,
          "type" : "string",
          "x-description" : "Reported on"
        },
        "reportFields" : {
          "example" : 133,
          "type" : "number",
          "x-description" : "Field"
        },
        "reportTemplate" : {
          "example" : 162,
          "type" : "number",
          "x-description" : "Template"
        },
        "status" : {
          "enum" : [ "APPROVED", "NEW", "VERIFICATION", "PENDING" ],
          "type" : "string",
          "x-description" : "Status"
        }
      },
      "type" : "object"
    },
    "EmployeeAccountBansItem" : {
      "properties" : {
        "account" : {
          "allOf" : [ {
            "$ref" : "#/definitions/AccountsItem"
          } ],
          "x-description" : "Account"
        },
        "employee" : {
          "allOf" : [ {
            "$ref" : "#/definitions/EmployeesItem"
          } ],
          "x-description" : "Employee"
        },
        "reason" : {
          "example" : 721,
          "type" : "string",
          "x-description" : "Reason"
        },
        "startDate" : {
          "example" : null,
          "type" : "string",
          "x-description" : "Start Date"
        }
      },
      "type" : "object"
    },
    "ShiftNotesPost" : {
      "properties" : {
        "content" : {
          "example" : null,
          "type" : "string",
          "x-description" : "Content"
        },
        "createdBy" : {
          "example" : 161,
          "type" : "number",
          "x-description" : "User who wrote the note"
        },
        "createdOn" : {
          "example" : null,
          "type" : "string",
          "x-description" : "Created On"
        },
        "type" : {
          "enum" : [ "NOTE", "LOG" ],
          "type" : "string",
          "x-description" : "Type"
        }
      },
      "type" : "object"
    },
    "AddressesCollection" : {
      "properties" : {
        "addressLine1" : {
          "example" : "15000 Main Road",
          "type" : "string",
          "x-description" : "Address"
        },
        "addressLine2" : {
          "example" : "Suite 445",
          "type" : "string",
          "x-description" : "Address Line 2"
        },
        "city" : {
          "example" : "New York",
          "type" : "string",
          "x-description" : "City"
        },
        "country" : {
          "example" : "US",
          "type" : "string",
          "x-description" : "Country"
        },
        "id" : {
          "example" : 12345,
          "type" : "number",
          "x-description" : "The Unique System ID of this object"
        },
        "latitude" : {
          "example" : null,
          "type" : "number",
          "x-description" : "Latitude"
        },
        "longitude" : {
          "example" : null,
          "type" : "number",
          "x-description" : "Longitude"
        },
        "postalCode" : {
          "example" : "10005",
          "type" : "string",
          "x-description" : "Zip/Postal Code"
        },
        "resourceType" : {
          "example" : null,
          "type" : "string",
          "x-description" : "(On Demand) Resource Type"
        },
        "state" : {
          "example" : "NY",
          "type" : "string",
          "x-description" : "State/Province"
        },
        "uri" : {
          "example" : null,
          "type" : "string",
          "x-description" : "Object URI"
        }
      },
      "type" : "object"
    },
    "TaskTypesPatch" : {
      "properties" : {
        "active" : {
          "example" : false,
          "type" : "boolean",
          "x-description" : "Active"
        },
        "billable" : {
          "example" : false,
          "type" : "boolean",
          "x-description" : "Billable"
        },
        "dispatchable" : {
          "example" : false,
          "type" : "boolean",
          "x-description" : "Can Dispatch"
        },
        "name" : {
          "example" : "Sample Name",
          "type" : "string",
          "x-description" : "Task Name"
        },
        "prefix" : {
          "example" : null,
          "type" : "string",
          "x-description" : "Prefix"
        },
        "priority" : {
          "enum" : [ "LOW", "IMPORTANT", "URGENT" ],
          "type" : "string",
          "x-description" : "Priority"
        },
        "reportTemplate" : {
          "example" : 125,
          "type" : "number",
          "x-description" : "Report Template"
        },
        "schedulable" : {
          "example" : false,
          "type" : "boolean",
          "x-description" : "Can Schedule"
        }
      },
      "type" : "object"
    },
    "objectsMetadata" : {
      "properties" : {
        "fields" : {
          "items" : {
            "$ref" : "#/definitions/objectsMetadataFields"
          },
          "type" : "array"
        }
      },
      "type" : "object"
    },
    "EmployeesPut" : {
      "properties" : {
        "address" : {
          "example" : 165,
          "type" : "number",
          "x-description" : "(On Demand) Address"
        },
        "ageGroup" : {
          "example" : null,
          "type" : "string",
          "x-description" : "(On Demand) Age"
        },
        "birthday" : {
          "example" : null,
          "type" : "string",
          "x-description" : "(On Demand) Birthday"
        },
        "customId" : {
          "example" : "C123-A",
          "type" : "string",
          "x-description" : "UID"
        },
        "email" : {
          "example" : "john.smith@myemail.com",
          "type" : "string",
          "x-description" : "Email"
        },
        "employmentProfile" : {
          "example" : 170,
          "type" : "number",
          "x-description" : "(On Demand) The profile that contains start date, tesat"
        },
        "firstName" : {
          "example" : "John",
          "type" : "string",
          "x-description" : "First Name"
        },
        "gender" : {
          "example" : null,
          "type" : "string",
          "x-description" : "(On Demand) Gender"
        },
        "jobTitle" : {
          "example" : "Assistant",
          "type" : "string",
          "x-description" : "Job Title"
        },
        "lastName" : {
          "example" : "Smith",
          "type" : "string",
          "x-description" : "Last Name"
        },
        "primaryPhone" : {
          "example" : "555-555-1234",
          "type" : "string",
          "x-description" : "Primary Phone"
        },
        "region" : {
          "example" : 125,
          "type" : "number",
          "x-description" : "Region"
        },
        "secondaryPhone" : {
          "example" : "555-555-4321",
          "type" : "string",
          "x-description" : "Secondary Phone"
        },
        "status" : {
          "enum" : [ "ACTIVE", "INACTIVE" ],
          "type" : "string",
          "x-description" : "Status"
        }
      },
      "type" : "object"
    },
    "ClientsPatch" : {
      "properties" : {
        "address" : {
          "example" : 117,
          "type" : "number",
          "x-description" : "Address"
        },
        "company" : {
          "example" : "Ace Properties inc.",
          "type" : "string",
          "x-description" : "Company Name"
        },
        "customId" : {
          "example" : "C123-A",
          "type" : "string",
          "x-description" : "UID"
        },
        "email" : {
          "example" : "john.smith@myemail.com",
          "type" : "string",
          "x-description" : "Email"
        },
        "firstName" : {
          "example" : "John",
          "type" : "string",
          "x-description" : "First Name"
        },
        "jobTitle" : {
          "example" : "Assistant",
          "type" : "string",
          "x-description" : "Job Title"
        },
        "lastName" : {
          "example" : "Smith",
          "type" : "string",
          "x-description" : "Last Name"
        },
        "primaryPhone" : {
          "example" : "555-555-1234",
          "type" : "string",
          "x-description" : "Primary Phone"
        },
        "region" : {
          "example" : 182,
          "type" : "number",
          "x-description" : "Region"
        },
        "secondaryPhone" : {
          "example" : "555-555-4321",
          "type" : "string",
          "x-description" : "Secondary Phone"
        },
        "type" : {
          "enum" : [ "SERVICE_LOCATION", "CLIENT", "MULTI_LOCATION_CLIENT" ],
          "type" : "string",
          "x-description" : "Type of Record"
        }
      },
      "type" : "object"
    },
    "swaggerschema" : {
      "x-has-customfields" : false,
      "type" : "object",
      "title" : "schema",
      "properties" : {
        "$ref" : {
          "x-samplevalue" : "#/definitions/Contact-POST-Response",
          "type" : "string"
        }
      }
    },
    "DataViewsPatch" : {
      "properties" : {
        "category" : {
          "example" : 135,
          "type" : "number",
          "x-description" : "Category"
        },
        "configs" : {
          "example" : null,
          "type" : "string",
          "x-description" : "Configs"
        },
        "name" : {
          "example" : "Sample Name",
          "type" : "string",
          "x-description" : "Name"
        },
        "renderer" : {
          "example" : null,
          "type" : "string",
          "x-description" : "Renderer"
        },
        "tqlParsedStatement" : {
          "example" : null,
          "type" : "string",
          "x-description" : "TQL Parsed Statement"
        },
        "tqlStatement" : {
          "example" : null,
          "type" : "string",
          "x-description" : "TQL Statement"
        },
        "type" : {
          "example" : null,
          "type" : "string",
          "x-description" : "View Type"
        },
        "uid" : {
          "example" : null,
          "type" : "string",
          "x-description" : "GUID"
        }
      },
      "type" : "object"
    },
    "TaskSiteSettingsCollection" : {
      "properties" : {
        "generalInstructions" : {
          "example" : null,
          "type" : "string",
          "x-description" : "Default Instructions"
        },
        "id" : {
          "example" : 12345,
          "type" : "number",
          "x-description" : "The Unique System ID of this object"
        },
        "taskInstructions" : {
          "items" : {
            "$ref" : "#/definitions/TaskSiteInstructionsItem"
          },
          "type" : "array",
          "x-description" : ""
        }
      },
      "type" : "object"
    },
    "BillableItemsPost" : {
      "properties" : {
        "name" : {
          "example" : "Sample Name",
          "type" : "string",
          "x-description" : "Temp"
        }
      },
      "type" : "object"
    },
    "BreakSessionsItem" : {
      "properties" : {
        "endDateTime" : {
          "example" : "2018-01-01 17:30",
          "type" : "string",
          "x-description" : "End Date & Time"
        },
        "id" : {
          "example" : 12345,
          "type" : "number",
          "x-description" : "The Unique System ID of this object"
        },
        "initiationMethod" : {
          "enum" : [ "LIVE", "DELAYED", "DEVICE", "ADMIN", "PHONE", "BROWSER", "BREAK", "BATCH", "KIOSK" ],
          "type" : "string",
          "x-description" : "Initiation Method"
        },
        "resourceType" : {
          "example" : null,
          "type" : "string",
          "x-description" : "(On Demand) Resource Type"
        },
        "startDateTime" : {
          "example" : "2018-01-01 09:00",
          "type" : "string",
          "x-description" : "Start Date & Time"
        },
        "status" : {
          "enum" : [ "OPEN", "CLOSED" ],
          "type" : "string",
          "x-description" : "Status"
        },
        "terminationMethod" : {
          "enum" : [ "LIVE", "DELAYED", "DEVICE", "ADMIN", "PHONE", "BROWSER", "BREAK", "BATCH", "KIOSK" ],
          "type" : "string",
          "x-description" : "Termination Method"
        },
        "uri" : {
          "example" : null,
          "type" : "string",
          "x-description" : "Object URI"
        },
        "workSession" : {
          "allOf" : [ {
            "$ref" : "#/definitions/WorkSessionsItem"
          } ],
          "x-description" : "(On Demand) Work Session"
        }
      },
      "type" : "object"
    },
    "InvoiceLineTaxesPost" : {
      "properties" : {
        "amount" : {
          "example" : null,
          "type" : "string",
          "x-description" : "Amount"
        },
        "invoiceLine" : {
          "example" : 191,
          "type" : "number",
          "x-description" : "Invoice Line"
        },
        "taxClassItem" : {
          "example" : 169,
          "type" : "number",
          "x-description" : "Tax Class Item"
        }
      },
      "type" : "object"
    },
    "ShiftNotesPut" : {
      "properties" : {
        "content" : {
          "example" : null,
          "type" : "string",
          "x-description" : "Content"
        },
        "createdBy" : {
          "example" : 127,
          "type" : "number",
          "x-description" : "User who wrote the note"
        },
        "createdOn" : {
          "example" : null,
          "type" : "string",
          "x-description" : "Created On"
        },
        "type" : {
          "enum" : [ "NOTE", "LOG" ],
          "type" : "string",
          "x-description" : "Type"
        }
      },
      "type" : "object"
    },
    "swaggerparametersschema" : {
      "x-has-customfields" : false,
      "type" : "object",
      "title" : "schema",
      "properties" : {
        "$ref" : {
          "x-samplevalue" : "#/definitions/Contact",
          "type" : "string"
        }
      }
    },
    "DataViewCategoriesPut" : {
      "properties" : {
        "iconClass" : {
          "example" : null,
          "type" : "string",
          "x-description" : "Icon"
        },
        "name" : {
          "example" : "Sample Name",
          "type" : "string",
          "x-description" : "Name"
        }
      },
      "type" : "object"
    },
    "swaggerresponses" : {
      "x-has-customfields" : false,
      "type" : "object",
      "title" : "responses",
      "properties" : {
        "200" : {
          "$ref" : "#/definitions/swagger200"
        },
        "400" : {
          "$ref" : "#/definitions/swagger400"
        },
        "401" : {
          "$ref" : "#/definitions/swagger401"
        },
        "403" : {
          "$ref" : "#/definitions/swagger403"
        },
        "404" : {
          "$ref" : "#/definitions/swagger404"
        },
        "405" : {
          "$ref" : "#/definitions/swagger405"
        },
        "406" : {
          "$ref" : "#/definitions/swagger406"
        },
        "409" : {
          "$ref" : "#/definitions/swagger409"
        },
        "415" : {
          "$ref" : "#/definitions/swagger415"
        },
        "500" : {
          "$ref" : "#/definitions/swagger500"
        },
        "502" : {
          "$ref" : "#/definitions/swagger502"
        }
      }
    },
    "ReportTemplateFieldsPost" : {
      "properties" : {
        "adminOnly" : {
          "example" : false,
          "type" : "boolean",
          "x-description" : "Admin Only"
        },
        "displayOrder" : {
          "example" : 451,
          "type" : "number",
          "x-description" : "Display Order Index"
        },
        "extra" : {
          "example" : null,
          "type" : "string",
          "x-description" : "Extra information"
        },
        "isDispatcherField" : {
          "example" : false,
          "type" : "boolean",
          "x-description" : "Dispatcher Field"
        },
        "label" : {
          "example" : null,
          "type" : "string",
          "x-description" : "Name"
        },
        "list" : {
          "example" : null,
          "type" : "string",
          "x-description" : "List"
        },
        "name" : {
          "example" : "Sample Name",
          "type" : "string",
          "x-description" : "Field"
        },
        "required" : {
          "example" : false,
          "type" : "boolean",
          "x-description" : "Required"
        },
        "type" : {
          "example" : null,
          "type" : "string",
          "x-description" : "Type"
        }
      },
      "type" : "object"
    },
    "swaggerproperties" : {
      "x-has-customfields" : false,
      "type" : "object",
      "title" : "properties",
      "properties" : {
        "definition-property" : {
          "$ref" : "#/definitions/swaggerdefinition-property"
        }
      }
    },
    "DispatchTasksCollection" : {
      "properties" : {
        "account" : {
          "allOf" : [ {
            "$ref" : "#/definitions/AccountsItem"
          } ],
          "x-description" : "Account"
        },
        "assignedUser" : {
          "allOf" : [ {
            "$ref" : "#/definitions/EmployeesItem"
          } ],
          "x-description" : "Assigned User"
        },
        "customId" : {
          "example" : "C123-A",
          "type" : "string",
          "x-description" : "Custom ID of the event"
        },
        "endDateTime" : {
          "example" : "2018-01-01 17:30",
          "type" : "string",
          "x-description" : "End Date / Time"
        },
        "id" : {
          "example" : 12345,
          "type" : "number",
          "x-description" : "The Unique System ID of this object"
        },
        "location" : {
          "allOf" : [ {
            "$ref" : "#/definitions/DispatchCustomLocationsItem"
          } ],
          "x-description" : "Custom Location"
        },
        "locationType" : {
          "example" : null,
          "type" : "string",
          "x-description" : "Is A one time location"
        },
        "name" : {
          "example" : "Sample Name",
          "type" : "string",
          "x-description" : "Name"
        },
        "plannedDurationInMinutes" : {
          "example" : 320,
          "type" : "number",
          "x-description" : "Planned duration in minutes"
        },
        "priceTier" : {
          "allOf" : [ {
            "$ref" : "#/definitions/TaskPriceTiersItem"
          } ],
          "x-description" : "Price Tier"
        },
        "priority" : {
          "enum" : [ "LOW", "IMPORTANT", "URGENT" ],
          "type" : "string",
          "x-description" : "Priority"
        },
        "reminderInMinutes" : {
          "example" : 820,
          "type" : "number",
          "x-description" : "@todo"
        },
        "report" : {
          "example" : null,
          "type" : "string",
          "x-description" : "Report"
        },
        "reportTemplate" : {
          "allOf" : [ {
            "$ref" : "#/definitions/ReportTemplatesItem"
          } ],
          "x-description" : "Report Type"
        },
        "resourceType" : {
          "example" : null,
          "type" : "string",
          "x-description" : "(On Demand) Resource Type"
        },
        "startDateTime" : {
          "example" : "2018-01-01 09:00",
          "type" : "string",
          "x-description" : "Start Date / Time"
        },
        "status" : {
          "enum" : [ "OPEN", "LIVE", "CLOSED", "ON_WAY", "RECEIVED" ],
          "type" : "string",
          "x-description" : "Status"
        },
        "taskInstructions" : {
          "example" : null,
          "type" : "string",
          "x-description" : "Task Instructions"
        },
        "taskType" : {
          "allOf" : [ {
            "$ref" : "#/definitions/TaskTypesItem"
          } ],
          "x-description" : "Task Type"
        },
        "uri" : {
          "example" : null,
          "type" : "string",
          "x-description" : "Object URI"
        },
        "workflowInstance" : {
          "allOf" : [ {
            "$ref" : "#/definitions/WorkflowInstancesItem"
          } ],
          "x-description" : "Workflow Instance"
        }
      },
      "type" : "object"
    },
    "PositionSkillsCollection" : {
      "properties" : {
        "comments" : {
          "example" : "This is a sample comment.",
          "type" : "string",
          "x-description" : "Comments"
        },
        "id" : {
          "example" : 12345,
          "type" : "number",
          "x-description" : "The Unique System ID of this object"
        },
        "position" : {
          "allOf" : [ {
            "$ref" : "#/definitions/PositionsItem"
          } ],
          "x-description" : "Position"
        },
        "skill" : {
          "allOf" : [ {
            "$ref" : "#/definitions/SkillsItem"
          } ],
          "x-description" : "Skill"
        },
        "type" : {
          "enum" : [ "HARD", "CONDITIONAL", "SOFT" ],
          "type" : "string",
          "x-description" : "Type"
        }
      },
      "type" : "object"
    },
    "ContractsPost" : {
      "properties" : {
        "customId" : {
          "example" : "C123-A",
          "type" : "string",
          "x-description" : ""
        },
        "name" : {
          "example" : "Sample Name",
          "type" : "string",
          "x-description" : ""
        }
      },
      "type" : "object"
    },
    "AccountsItem" : {
      "properties" : {
        "address" : {
          "allOf" : [ {
            "$ref" : "#/definitions/AddressesItem"
          } ],
          "x-description" : "(On Demand) Address"
        },
        "avatar" : {
          "example" : null,
          "type" : "string",
          "x-description" : "Picture"
        },
        "customId" : {
          "example" : "C123-A",
          "type" : "string",
          "x-description" : "UID"
        },
        "id" : {
          "example" : 12345,
          "type" : "number",
          "x-description" : "The Unique System ID of this object"
        },
        "name" : {
          "example" : "Sample Name",
          "type" : "string",
          "x-description" : "Name"
        },
        "notes" : {
          "items" : {
            "$ref" : "#/definitions/NotesItem"
          },
          "type" : "array",
          "x-description" : "(On Demand) Notes"
        },
        "region" : {
          "allOf" : [ {
            "$ref" : "#/definitions/RegionsItem"
          } ],
          "x-description" : "(On Demand) Account Region"
        },
        "resourceType" : {
          "example" : null,
          "type" : "string",
          "x-description" : "(On Demand) Resource Type"
        },
        "subType" : {
          "enum" : [ "client", "multi", "site" ],
          "type" : "string",
          "x-description" : "Client Type"
        },
        "type" : {
          "enum" : [ "CLIENT", "ZONE", "DEPARTMENT" ],
          "type" : "string",
          "x-description" : "Account Type"
        },
        "uri" : {
          "example" : null,
          "type" : "string",
          "x-description" : "Object URI"
        }
      },
      "type" : "object"
    },
    "EmployeeAvailabilitiesPatch" : {
      "properties" : {
        "available" : {
          "enum" : [ "NOT_AVAILABLE", "AVAILABLE", "MAYBE" ],
          "type" : "string",
          "x-description" : "Available"
        },
        "timeFrom" : {
          "example" : 272,
          "type" : "string",
          "x-description" : "Number of seconds from the beginning of a day, i.e. 7200 means available from 2 AM"
        },
        "timeTo" : {
          "example" : 580,
          "type" : "string",
          "x-description" : "Number of seconds from the beginning of a day, i.e. 10800 means available between timeFrom and 3 AM"
        },
        "weekDay" : {
          "enum" : [ "MONDAY", "TUESDAY", "WEDNESDAY", "THURSDAY", "FRIDAY", "SATURDAY", "SUNDAY" ],
          "type" : "string",
          "x-description" : "Week Day"
        }
      },
      "type" : "object"
    },
    "BillItemsPost" : {
      "properties" : {
        "customId" : {
          "example" : "C123-A",
          "type" : "string",
          "x-description" : "Chart of account ID or custom ID"
        },
        "isGlobal" : {
          "example" : false,
          "type" : "boolean",
          "x-description" : "If the bill item is available for all region. If not select a region"
        },
        "name" : {
          "example" : "Sample Name",
          "type" : "string",
          "x-description" : "The name of the bill item"
        },
        "region" : {
          "example" : 197,
          "type" : "number",
          "x-description" : "(On Demand) Only set a region, when isGlobal is false"
        }
      },
      "type" : "object"
    },
    "DispatchTasksPost" : {
      "properties" : {
        "account" : {
          "example" : 108,
          "type" : "number",
          "x-description" : "Account"
        },
        "assignedUser" : {
          "example" : 163,
          "type" : "number",
          "x-description" : "Assigned User"
        },
        "customId" : {
          "example" : "C123-A",
          "type" : "string",
          "x-description" : "Custom ID of the event"
        },
        "endDateTime" : {
          "example" : "2018-01-01 17:30",
          "type" : "string",
          "x-description" : "End Date / Time"
        },
        "location" : {
          "example" : 111,
          "type" : "number",
          "x-description" : "Custom Location"
        },
        "locationType" : {
          "example" : null,
          "type" : "string",
          "x-description" : "Is A one time location"
        },
        "plannedDurationInMinutes" : {
          "example" : 589,
          "type" : "number",
          "x-description" : "Planned duration in minutes"
        },
        "priceTier" : {
          "example" : 159,
          "type" : "number",
          "x-description" : "Price Tier"
        },
        "priority" : {
          "enum" : [ "LOW", "IMPORTANT", "URGENT" ],
          "type" : "string",
          "x-description" : "Priority"
        },
        "reminderInMinutes" : {
          "example" : 520,
          "type" : "number",
          "x-description" : "@todo"
        },
        "report" : {
          "example" : null,
          "type" : "string",
          "x-description" : "Report"
        },
        "reportTemplate" : {
          "example" : 103,
          "type" : "number",
          "x-description" : "Report Type"
        },
        "startDateTime" : {
          "example" : "2018-01-01 09:00",
          "type" : "string",
          "x-description" : "Start Date / Time"
        },
        "taskInstructions" : {
          "example" : null,
          "type" : "string",
          "x-description" : "Task Instructions"
        },
        "taskType" : {
          "example" : 175,
          "type" : "number",
          "x-description" : "Task Type"
        },
        "workflowInstance" : {
          "example" : 198,
          "type" : "number",
          "x-description" : "Workflow Instance"
        }
      },
      "type" : "object"
    },
    "AddressesPut" : {
      "properties" : {
        "addressLine1" : {
          "example" : "15000 Main Road",
          "type" : "string",
          "x-description" : "Address"
        },
        "addressLine2" : {
          "example" : "Suite 445",
          "type" : "string",
          "x-description" : "Address Line 2"
        },
        "city" : {
          "example" : "New York",
          "type" : "string",
          "x-description" : "City"
        },
        "country" : {
          "example" : "US",
          "type" : "string",
          "x-description" : "Country"
        },
        "postalCode" : {
          "example" : "10005",
          "type" : "string",
          "x-description" : "Zip/Postal Code"
        },
        "state" : {
          "example" : "NY",
          "type" : "string",
          "x-description" : "State/Province"
        }
      },
      "type" : "object"
    },
    "EmployeeAccountAssignmentsPut" : {
      "properties" : {
        "account" : {
          "example" : 183,
          "type" : "number",
          "x-description" : "Account"
        },
        "active" : {
          "example" : false,
          "type" : "string",
          "x-description" : "Active"
        },
        "employee" : {
          "example" : 147,
          "type" : "number",
          "x-description" : "Employee"
        },
        "endDate" : {
          "example" : "2018-05-01",
          "type" : "string",
          "x-description" : "End Date"
        },
        "startDate" : {
          "example" : null,
          "type" : "string",
          "x-description" : "Start Date"
        }
      },
      "type" : "object"
    },
    "NotesItem" : {
      "properties" : {
        "content" : {
          "example" : null,
          "type" : "string",
          "x-description" : "Content"
        },
        "createdBy" : {
          "allOf" : [ {
            "$ref" : "#/definitions/EmployeesItem"
          } ],
          "x-description" : "Created By"
        },
        "createdOn" : {
          "example" : 628,
          "type" : "string",
          "x-description" : "Created On"
        },
        "id" : {
          "example" : 12345,
          "type" : "number",
          "x-description" : "The Unique System ID of this object"
        }
      },
      "type" : "object"
    },
    "TaskSiteSettingsPut" : {
      "properties" : {
        "generalInstructions" : {
          "example" : null,
          "type" : "string",
          "x-description" : "Default Instructions"
        },
        "taskInstructions" : {
          "example" : 179,
          "type" : "number",
          "x-description" : ""
        }
      },
      "type" : "object"
    },
    "EmployeeAvailabilitiesPost" : {
      "properties" : {
        "available" : {
          "enum" : [ "NOT_AVAILABLE", "AVAILABLE", "MAYBE" ],
          "type" : "string",
          "x-description" : "Available"
        },
        "timeFrom" : {
          "example" : 243,
          "type" : "string",
          "x-description" : "Number of seconds from the beginning of a day, i.e. 7200 means available from 2 AM"
        },
        "timeTo" : {
          "example" : 746,
          "type" : "string",
          "x-description" : "Number of seconds from the beginning of a day, i.e. 10800 means available between timeFrom and 3 AM"
        },
        "weekDay" : {
          "enum" : [ "MONDAY", "TUESDAY", "WEDNESDAY", "THURSDAY", "FRIDAY", "SATURDAY", "SUNDAY" ],
          "type" : "string",
          "x-description" : "Week Day"
        }
      },
      "type" : "object"
    },
    "ShiftNotesCollection" : {
      "properties" : {
        "content" : {
          "example" : null,
          "type" : "string",
          "x-description" : "Content"
        },
        "createdBy" : {
          "allOf" : [ {
            "$ref" : "#/definitions/EmployeesItem"
          } ],
          "x-description" : "User who wrote the note"
        },
        "createdOn" : {
          "example" : null,
          "type" : "string",
          "x-description" : "Created On"
        },
        "id" : {
          "example" : 12345,
          "type" : "number",
          "x-description" : "The Unique System ID of this object"
        },
        "resourceType" : {
          "example" : null,
          "type" : "string",
          "x-description" : "(On Demand) Resource Type"
        },
        "type" : {
          "enum" : [ "NOTE", "LOG" ],
          "type" : "string",
          "x-description" : "Type"
        },
        "uri" : {
          "example" : null,
          "type" : "string",
          "x-description" : "Object URI"
        }
      },
      "type" : "object"
    },
    "ShiftsClock-in" : {
      "properties" : { },
      "type" : "object"
    },
    "BillItemsPut" : {
      "properties" : {
        "customId" : {
          "example" : "C123-A",
          "type" : "string",
          "x-description" : "Chart of account ID or custom ID"
        },
        "isGlobal" : {
          "example" : false,
          "type" : "boolean",
          "x-description" : "If the bill item is available for all region. If not select a region"
        },
        "name" : {
          "example" : "Sample Name",
          "type" : "string",
          "x-description" : "The name of the bill item"
        },
        "region" : {
          "example" : 137,
          "type" : "number",
          "x-description" : "(On Demand) Only set a region, when isGlobal is false"
        },
        "status" : {
          "enum" : [ "ACTIVE", "DISABLED" ],
          "type" : "string",
          "x-description" : "If the bill-item is active or disabled"
        }
      },
      "type" : "object"
    },
    "EmployeeSkillsItem" : {
      "properties" : {
        "comments" : {
          "example" : "This is a sample comment.",
          "type" : "string",
          "x-description" : "Comments"
        },
        "employee" : {
          "allOf" : [ {
            "$ref" : "#/definitions/EmployeesItem"
          } ],
          "x-description" : "Employee"
        },
        "expiryDate" : {
          "example" : null,
          "type" : "string",
          "x-description" : "Expiry Date"
        },
        "id" : {
          "example" : 12345,
          "type" : "number",
          "x-description" : "The Unique System ID of this object"
        },
        "label1" : {
          "example" : null,
          "type" : "string",
          "x-description" : "(On Demand) Label 1"
        },
        "label2" : {
          "example" : null,
          "type" : "string",
          "x-description" : "(On Demand) Label 2"
        },
        "label3" : {
          "example" : null,
          "type" : "string",
          "x-description" : "(On Demand) Label 3"
        },
        "resourceType" : {
          "example" : null,
          "type" : "string",
          "x-description" : "(On Demand) Resource Type"
        },
        "skill" : {
          "allOf" : [ {
            "$ref" : "#/definitions/SkillsItem"
          } ],
          "x-description" : "Skill"
        },
        "skillCustomFields" : {
          "example" : {
            "label1" : {
              "field" : "label1",
              "label" : "Gun Permit number",
              "type" : "string",
              "value" : "0222"
            },
            "label_date" : {
              "field" : "label_date",
              "label" : "Renewal Date",
              "type" : "DateTime",
              "value" : "1569988800"
            }
          },
          "type" : "string",
          "x-description" : "Object of custom fields like {'label1': {'label': 'Gun permit', 'value': '0222', 'type':'string'}, ...}"
        },
        "uri" : {
          "example" : null,
          "type" : "string",
          "x-description" : "Object URI"
        }
      },
      "type" : "object"
    },
    "EmploymentProfilesPatch" : {
      "properties" : {
        "defaultPayRate" : {
          "example" : 12.5,
          "type" : "string",
          "x-description" : "Default Pay Rate"
        },
        "employmentDate" : {
          "example" : "2012-01-02",
          "type" : "string",
          "x-description" : "Employment Date"
        },
        "hasGrievance" : {
          "example" : false,
          "type" : "string",
          "x-description" : "Grievance"
        },
        "overtimeExempt" : {
          "example" : false,
          "type" : "string",
          "x-description" : "Overtime Exempt"
        },
        "payRateType" : {
          "enum" : [ "hourly", "salary" ],
          "type" : "string",
          "x-description" : "Pay Rate Type"
        },
        "seniority" : {
          "example" : 469,
          "type" : "number",
          "x-description" : "Seniority"
        },
        "terminationDate" : {
          "example" : null,
          "type" : "string",
          "x-description" : "Termination Date"
        }
      },
      "type" : "object"
    },
    "DataViewCategoriesCollection" : {
      "properties" : {
        "iconClass" : {
          "example" : null,
          "type" : "string",
          "x-description" : "Icon"
        },
        "id" : {
          "example" : 12345,
          "type" : "number",
          "x-description" : "The Unique System ID of this object"
        },
        "name" : {
          "example" : "Sample Name",
          "type" : "string",
          "x-description" : "Name"
        }
      },
      "type" : "object"
    },
    "MobileDevicesPatch" : {
      "properties" : {
        "accountId" : {
          "example" : null,
          "type" : "string",
          "x-description" : "Account"
        },
        "lastAction" : {
          "example" : null,
          "type" : "string",
          "x-description" : ""
        },
        "lastLatitude" : {
          "example" : null,
          "type" : "number",
          "x-description" : "Last known Latitude"
        },
        "lastLongitude" : {
          "example" : null,
          "type" : "number",
          "x-description" : "Last known Latitude"
        },
        "name" : {
          "example" : "Sample Name",
          "type" : "string",
          "x-description" : "Name"
        },
        "number" : {
          "example" : null,
          "type" : "string",
          "x-description" : "Number"
        },
        "position" : {
          "example" : 136,
          "type" : "number",
          "x-description" : "Position"
        },
        "regionOwner" : {
          "example" : 166,
          "type" : "number",
          "x-description" : "Region"
        },
        "user" : {
          "example" : 112,
          "type" : "number",
          "x-description" : ""
        }
      },
      "type" : "object"
    }
  },
  "swagger" : "2.0",
  "info" : {
    "contact" : {
      "email" : "support@cloud-elements.com"
    },
    "title" : "tracktikapi2",
    "version" : "api-v2"
  },
  "tags" : [ {
    "name" : "reports"
  }, {
    "name" : "addresses"
  }, {
    "name" : "notes"
  }, {
    "name" : "employee-skills"
  }, {
    "name" : "auth"
  }, {
    "name" : "objects"
  }, {
    "name" : "shift-notes"
  }, {
    "name" : "skills"
  }, {
    "name" : "invoices"
  }, {
    "name" : "shifts"
  }, {
    "name" : "data-view-categories"
  }, {
    "name" : "vendors"
  }, {
    "name" : "mobile-devices"
  }, {
    "name" : "report-fields"
  }, {
    "name" : "batch"
  }, {
    "name" : "positions"
  }, {
    "name" : "task-site-settings"
  }, {
    "name" : "workflow-instances"
  }, {
    "name" : "employee-availabilities"
  }, {
    "name" : "client-billing-settings"
  }, {
    "name" : "employees"
  }, {
    "name" : "bulk"
  }, {
    "name" : "position-skills"
  }, {
    "name" : "invoice-line-taxes"
  }, {
    "name" : "report-templates"
  }, {
    "name" : "clients"
  }, {
    "name" : "regions"
  }, {
    "name" : "workflow-instance-logs"
  }, {
    "name" : "ping"
  }, {
    "name" : "dispatch-custom-locations"
  }, {
    "name" : "workflows"
  }, {
    "name" : "contracts"
  }, {
    "name" : "task-types"
  }, {
    "name" : "price-tiers"
  }, {
    "name" : "data-views"
  }, {
    "name" : "tax-class-items"
  }, {
    "name" : "workflow-statuses"
  }, {
    "name" : "break-sessions"
  }, {
    "name" : "billable-items"
  }, {
    "name" : "work-sessions"
  }, {
    "name" : "bill-items"
  }, {
    "name" : "employee-account-bans"
  }, {
    "name" : "report-template-fields"
  }, {
    "name" : "dispatch-tasks"
  }, {
    "name" : "task-price-tiers"
  }, {
    "name" : "employment-profiles"
  }, {
    "name" : "objectName"
  }, {
    "name" : "accounts"
  }, {
    "name" : "task-site-instructions"
  }, {
    "name" : "tax-classes"
  }, {
    "name" : "employee-account-assignments"
  }, {
    "name" : "contacts"
  }, {
    "name" : "skill-categories"
  } ]
}