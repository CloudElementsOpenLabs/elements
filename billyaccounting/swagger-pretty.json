{
  "basePath" : "/elements/api-v2",
  "paths" : {
    "/account-groups" : {
      "get" : {
        "summary" : "Search for Account Groups.",
        "operationId" : "getAccountGroups",
        "responses" : {
          "200" : {
            "description" : "OK - Everything worked as expected",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/accountGroupsObject"
              }
            }
          },
          "400" : {
            "description" : "Bad Request - Often due to a missing request parameter"
          },
          "401" : {
            "description" : "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500" : {
            "description" : "Server error - Something went wrong on the Cloud Elements server"
          },
          "403" : {
            "description" : "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502" : {
            "description" : "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404" : {
            "description" : "Not found - The requested resource is not found"
          },
          "415" : {
            "description" : "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405" : {
            "description" : "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406" : {
            "description" : "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409" : {
            "description" : "Conflict - If a resource being created already exists"
          }
        },
        "parameters" : [ {
          "in" : "header",
          "name" : "Authorization",
          "description" : "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
          "type" : "string",
          "required" : true
        }, {
          "in" : "query",
          "name" : "expand",
          "description" : "The expand parameter is used to include related resources in your response. The value of the expand parameter should be in the form 'resource.property:mode' where resource is the name of a resource, property is the name of a property of that resource, and mode is either sideload (default if the : part is omitted) or embed. You can include multiple relationships by separating them with ','. For example, to sideload an invoice's contact object you will use the following: invoice.contact:sideload. ",
          "type" : "string",
          "required" : false
        }, {
          "in" : "query",
          "name" : "pageSize",
          "format" : "int64",
          "description" : "The number of resources to return in a given page",
          "type" : "string",
          "required" : false
        }, {
          "in" : "query",
          "name" : "where",
          "description" : "Find Account Groups in the Finance System, using the provided CEQL search expression, or the where clause, without the WHERE keyword, in a typical SQL query. When this parameter is omitted, all Account Groups are returned.",
          "type" : "string",
          "required" : false
        }, {
          "description" : "The next page cursor, taken from the response header: `elements-next-page-token`",
          "in" : "query",
          "name" : "nextPage",
          "required" : false,
          "type" : "string"
        } ],
        "tags" : [ "account-groups" ]
      }
    },
    "/account-groups/{id}" : {
      "get" : {
        "summary" : "Retrieve an Account Group by id. ",
        "operationId" : "getAccountGroupById",
        "responses" : {
          "200" : {
            "description" : "OK - Everything worked as expected",
            "schema" : {
              "$ref" : "#/definitions/accountGroups"
            }
          },
          "400" : {
            "description" : "Bad Request - Often due to a missing request parameter"
          },
          "401" : {
            "description" : "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500" : {
            "description" : "Server error - Something went wrong on the Cloud Elements server"
          },
          "403" : {
            "description" : "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502" : {
            "description" : "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404" : {
            "description" : "Not found - The requested resource is not found"
          },
          "415" : {
            "description" : "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405" : {
            "description" : "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406" : {
            "description" : "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409" : {
            "description" : "Conflict - If a resource being created already exists"
          }
        },
        "parameters" : [ {
          "in" : "header",
          "name" : "Authorization",
          "description" : "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
          "type" : "string",
          "required" : true
        }, {
          "in" : "path",
          "name" : "id",
          "description" : "The Account Group ID",
          "type" : "string",
          "required" : true
        }, {
          "in" : "query",
          "name" : "expand",
          "description" : "The expand parameter is used to include related resources in your response. The value of the expand parameter should be in the form ‘resource.property:mode’ where resource is the name of a resource, property is the name of a property of that resource, and mode is either sideload (default if the : part is omitted) or embed. You can include multiple relationships by separating them with ',’. For example, to sideload an invoice’s contact object you will use the following: invoice.contact:sideload.",
          "type" : "string",
          "required" : false
        } ],
        "tags" : [ "account-groups" ]
      }
    },
    "/account-natures" : {
      "get" : {
        "summary" : "Search for Account Natures",
        "operationId" : "getAccountNatures",
        "responses" : {
          "200" : {
            "description" : "OK - Everything worked as expected",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/accountNaturesObject"
              }
            }
          },
          "400" : {
            "description" : "Bad Request - Often due to a missing request parameter"
          },
          "401" : {
            "description" : "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500" : {
            "description" : "Server error - Something went wrong on the Cloud Elements server"
          },
          "403" : {
            "description" : "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502" : {
            "description" : "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404" : {
            "description" : "Not found - The requested resource is not found"
          },
          "415" : {
            "description" : "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405" : {
            "description" : "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406" : {
            "description" : "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409" : {
            "description" : "Conflict - If a resource being created already exists"
          }
        },
        "parameters" : [ {
          "in" : "header",
          "name" : "Authorization",
          "description" : "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
          "type" : "string",
          "required" : true
        }, {
          "in" : "query",
          "name" : "where",
          "description" : "Find Account Natures in the Finance System, using the provided CEQL search expression, or the where clause, without the WHERE keyword, in a typical SQL query. When this parameter is omitted, all Account Natures are returned.",
          "type" : "string",
          "required" : false
        }, {
          "in" : "query",
          "name" : "pageSize",
          "format" : "int64",
          "description" : "The number of resources to return in a given page",
          "type" : "string",
          "required" : false
        }, {
          "description" : "The next page cursor, taken from the response header: `elements-next-page-token`",
          "in" : "query",
          "name" : "nextPage",
          "required" : false,
          "type" : "string"
        } ],
        "tags" : [ "account-natures" ]
      }
    },
    "/account-natures/{id}" : {
      "get" : {
        "summary" : "Retrieve an\n Account Nature by id.",
        "operationId" : "getAccountNatureById",
        "responses" : {
          "200" : {
            "description" : "OK - Everything worked as expected",
            "schema" : {
              "$ref" : "#/definitions/accountNatures"
            }
          },
          "400" : {
            "description" : "Bad Request - Often due to a missing request parameter"
          },
          "401" : {
            "description" : "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500" : {
            "description" : "Server error - Something went wrong on the Cloud Elements server"
          },
          "403" : {
            "description" : "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502" : {
            "description" : "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404" : {
            "description" : "Not found - The requested resource is not found"
          },
          "415" : {
            "description" : "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405" : {
            "description" : "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406" : {
            "description" : "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409" : {
            "description" : "Conflict - If a resource being created already exists"
          }
        },
        "parameters" : [ {
          "in" : "header",
          "name" : "Authorization",
          "description" : "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
          "type" : "string",
          "required" : true
        }, {
          "in" : "path",
          "name" : "id",
          "description" : "The Account Nature ID",
          "type" : "string",
          "required" : true
        } ],
        "tags" : [ "account-natures" ]
      }
    },
    "/accounts" : {
      "get" : {
        "summary" : "Search for accounts",
        "operationId" : "getAccounts",
        "responses" : {
          "200" : {
            "description" : "OK - Everything worked as expected",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/accountsObject"
              }
            }
          },
          "400" : {
            "description" : "Bad Request - Often due to a missing request parameter"
          },
          "401" : {
            "description" : "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500" : {
            "description" : "Server error - Something went wrong on the Cloud Elements server"
          },
          "403" : {
            "description" : "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502" : {
            "description" : "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404" : {
            "description" : "Not found - The requested resource is not found"
          },
          "415" : {
            "description" : "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405" : {
            "description" : "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406" : {
            "description" : "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409" : {
            "description" : "Conflict - If a resource being created already exists"
          }
        },
        "parameters" : [ {
          "in" : "header",
          "name" : "Authorization",
          "description" : "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
          "type" : "string",
          "required" : true
        }, {
          "in" : "query",
          "name" : "where",
          "description" : "Find Accounts in the Finance System, using the provided CEQL search expression, or the where clause, without the WHERE keyword, in a typical SQL query. When this parameter is omitted, all Accounts are returned.",
          "type" : "string",
          "required" : false
        }, {
          "in" : "query",
          "name" : "expand",
          "description" : "The expand parameter is used to include related resources in your response. The value of the expand parameter should be in the form ‘resource.property:mode’ where resource is the name of a resource, property is the name of a property of that resource, and mode is either sideload (default if the : part is omitted) or embed. You can include multiple relationships by separating them with ',’. For example, to sideload an invoice’s contact object you will use the following: invoice.contact:sideload.",
          "type" : "string",
          "required" : false
        }, {
          "in" : "query",
          "name" : "pageSize",
          "format" : "int64",
          "description" : "The number of resources to return in a given page",
          "type" : "string",
          "required" : false
        }, {
          "description" : "The next page cursor, taken from the response header: `elements-next-page-token`",
          "in" : "query",
          "name" : "nextPage",
          "required" : false,
          "type" : "string"
        } ],
        "tags" : [ "accounts" ]
      }
    },
    "/accounts/{id}" : {
      "get" : {
        "summary" : "Retrieve an Account by id.",
        "operationId" : "getAccountById",
        "responses" : {
          "200" : {
            "description" : "OK - Everything worked as expected",
            "schema" : {
              "$ref" : "#/definitions/accounts"
            }
          },
          "400" : {
            "description" : "Bad Request - Often due to a missing request parameter"
          },
          "401" : {
            "description" : "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500" : {
            "description" : "Server error - Something went wrong on the Cloud Elements server"
          },
          "403" : {
            "description" : "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502" : {
            "description" : "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404" : {
            "description" : "Not found - The requested resource is not found"
          },
          "415" : {
            "description" : "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405" : {
            "description" : "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406" : {
            "description" : "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409" : {
            "description" : "Conflict - If a resource being created already exists"
          }
        },
        "parameters" : [ {
          "in" : "header",
          "name" : "Authorization",
          "description" : "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
          "type" : "string",
          "required" : true
        }, {
          "in" : "path",
          "name" : "id",
          "description" : "The Account ID.",
          "type" : "string",
          "required" : true
        }, {
          "in" : "query",
          "name" : "expand",
          "description" : "The expand parameter is used to include related resources in your response. The value of the expand parameter should be in the form ‘resource.property:mode’ where resource is the name of a resource, property is the name of a property of that resource, and mode is either sideload (default if the : part is omitted) or embed. You can include multiple relationships by separating them with ',’. For example, to sideload an invoice’s contact object you will use the following: invoice.contact:sideload.",
          "type" : "string",
          "required" : false
        } ],
        "tags" : [ "accounts" ]
      }
    },
    "/accounts/{id}/bank-lines" : {
      "get" : {
        "summary" : "Search for Bank Lines",
        "operationId" : "getAccountsBankLines",
        "responses" : {
          "200" : {
            "description" : "OK - Everything worked as expected"
          },
          "400" : {
            "description" : "Bad Request - Often due to a missing request parameter"
          },
          "401" : {
            "description" : "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500" : {
            "description" : "Server error - Something went wrong on the Cloud Elements server"
          },
          "403" : {
            "description" : "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502" : {
            "description" : "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404" : {
            "description" : "Not found - The requested resource is not found"
          },
          "415" : {
            "description" : "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405" : {
            "description" : "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406" : {
            "description" : "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409" : {
            "description" : "Conflict - If a resource being created already exists"
          }
        },
        "parameters" : [ {
          "in" : "header",
          "name" : "Authorization",
          "description" : "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
          "type" : "string",
          "required" : true
        }, {
          "in" : "path",
          "name" : "id",
          "description" : "The Account ID.",
          "type" : "string",
          "required" : true
        }, {
          "in" : "query",
          "name" : "where",
          "description" : "Find Bank Lines in the Finance System, using the provided CEQL search expression, or the where clause, without the WHERE keyword, in a typical SQL query. When this parameter is omitted, all Bank Lines are returned.",
          "type" : "string",
          "required" : false
        }, {
          "in" : "query",
          "name" : "pageSize",
          "format" : "int64",
          "description" : "The number of resources to return in a given page",
          "type" : "string",
          "required" : false
        }, {
          "description" : "The next page cursor, taken from the response header: `elements-next-page-token`",
          "in" : "query",
          "name" : "nextPage",
          "required" : false,
          "type" : "string"
        } ],
        "tags" : [ "accounts" ]
      }
    },
    "/accounts/{id}/bank-lines/{bankLineId}" : {
      "get" : {
        "summary" : "Retrieve a Bank Line associated to an Account. ",
        "operationId" : "getAccountsBankLineByBankLineId",
        "responses" : {
          "200" : {
            "description" : "OK - Everything worked as expected"
          },
          "400" : {
            "description" : "Bad Request - Often due to a missing request parameter"
          },
          "401" : {
            "description" : "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500" : {
            "description" : "Server error - Something went wrong on the Cloud Elements server"
          },
          "403" : {
            "description" : "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502" : {
            "description" : "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404" : {
            "description" : "Not found - The requested resource is not found"
          },
          "415" : {
            "description" : "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405" : {
            "description" : "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406" : {
            "description" : "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409" : {
            "description" : "Conflict - If a resource being created already exists"
          }
        },
        "parameters" : [ {
          "in" : "header",
          "name" : "Authorization",
          "description" : "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
          "type" : "string",
          "required" : true
        }, {
          "in" : "path",
          "name" : "id",
          "description" : "The Account ID",
          "type" : "string",
          "required" : true
        }, {
          "in" : "path",
          "name" : "bankLineId",
          "description" : "The Bank Line ID",
          "type" : "string",
          "required" : true
        } ],
        "tags" : [ "accounts" ]
      }
    },
    "/bank-payments" : {
      "post" : {
        "summary" : "Create a Bank Payment",
        "operationId" : "createBankPayment",
        "responses" : {
          "200" : {
            "description" : "OK - Everything worked as expected",
            "schema" : {
              "$ref" : "#/definitions/bankPayments"
            }
          },
          "400" : {
            "description" : "Bad Request - Often due to a missing request parameter"
          },
          "401" : {
            "description" : "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500" : {
            "description" : "Server error - Something went wrong on the Cloud Elements server"
          },
          "403" : {
            "description" : "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502" : {
            "description" : "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404" : {
            "description" : "Not found - The requested resource is not found"
          },
          "415" : {
            "description" : "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405" : {
            "description" : "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406" : {
            "description" : "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409" : {
            "description" : "Conflict - If a resource being created already exists"
          }
        },
        "parameters" : [ {
          "in" : "header",
          "name" : "Authorization",
          "description" : "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
          "type" : "string",
          "required" : true
        }, {
          "schema" : {
            "$ref" : "#/definitions/bankPaymentsRequest"
          },
          "in" : "body",
          "name" : "body",
          "description" : "The object body",
          "required" : true
        } ],
        "tags" : [ "bank-payments" ]
      },
      "get" : {
        "summary" : "Search for Bank Payments",
        "operationId" : "getBankPayments",
        "responses" : {
          "200" : {
            "description" : "OK - Everything worked as expected",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/bankPaymentsObject"
              }
            }
          },
          "400" : {
            "description" : "Bad Request - Often due to a missing request parameter"
          },
          "401" : {
            "description" : "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500" : {
            "description" : "Server error - Something went wrong on the Cloud Elements server"
          },
          "403" : {
            "description" : "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502" : {
            "description" : "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404" : {
            "description" : "Not found - The requested resource is not found"
          },
          "415" : {
            "description" : "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405" : {
            "description" : "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406" : {
            "description" : "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409" : {
            "description" : "Conflict - If a resource being created already exists"
          }
        },
        "parameters" : [ {
          "in" : "header",
          "name" : "Authorization",
          "description" : "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
          "type" : "string",
          "required" : true
        }, {
          "in" : "query",
          "name" : "where",
          "description" : "Find Bank Payments in the Finance System, using the provided CEQL search expression, or the where clause, without the WHERE keyword, in a typical SQL query. When this parameter is omitted, all Bank Payments are returned.",
          "type" : "string",
          "required" : false
        }, {
          "in" : "query",
          "name" : "expand",
          "description" : "The expand parameter is used to include related resources in your response. The value of the expand parameter should be in the form ‘resource.property:mode’ where resource is the name of a resource, property is the name of a property of that resource, and mode is either sideload (default if the : part is omitted) or embed. You can include multiple relationships by separating them with ',’. For example, to sideload an invoice’s contact object you will use the following: invoice.contact:sideload.",
          "type" : "string",
          "required" : false
        }, {
          "in" : "query",
          "name" : "pageSize",
          "format" : "int64",
          "description" : "The number of resources to return in a given page",
          "type" : "string",
          "required" : false
        }, {
          "description" : "The next page cursor, taken from the response header: `elements-next-page-token`",
          "in" : "query",
          "name" : "nextPage",
          "required" : false,
          "type" : "string"
        } ],
        "tags" : [ "bank-payments" ]
      },
      "delete" : {
        "summary" : "Delete a Bank Payment",
        "operationId" : "deleteBankPayments",
        "responses" : {
          "200" : {
            "description" : "OK - Everything worked as expected"
          },
          "400" : {
            "description" : "Bad Request - Often due to a missing request parameter"
          },
          "401" : {
            "description" : "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500" : {
            "description" : "Server error - Something went wrong on the Cloud Elements server"
          },
          "403" : {
            "description" : "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502" : {
            "description" : "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404" : {
            "description" : "Not found - The requested resource is not found"
          },
          "415" : {
            "description" : "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405" : {
            "description" : "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406" : {
            "description" : "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409" : {
            "description" : "Conflict - If a resource being created already exists"
          }
        },
        "parameters" : [ {
          "in" : "header",
          "name" : "Authorization",
          "description" : "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
          "type" : "string",
          "required" : true
        } ],
        "tags" : [ "bank-payments" ]
      }
    },
    "/bank-payments/{id}" : {
      "patch" : {
        "summary" : "Update a Bank Payment",
        "operationId" : "updateBankPaymentById",
        "responses" : {
          "200" : {
            "description" : "OK - Everything worked as expected",
            "schema" : {
              "$ref" : "#/definitions/bankPayments"
            }
          },
          "400" : {
            "description" : "Bad Request - Often due to a missing request parameter"
          },
          "401" : {
            "description" : "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500" : {
            "description" : "Server error - Something went wrong on the Cloud Elements server"
          },
          "403" : {
            "description" : "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502" : {
            "description" : "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404" : {
            "description" : "Not found - The requested resource is not found"
          },
          "415" : {
            "description" : "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405" : {
            "description" : "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406" : {
            "description" : "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409" : {
            "description" : "Conflict - If a resource being created already exists"
          }
        },
        "parameters" : [ {
          "in" : "header",
          "name" : "Authorization",
          "description" : "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
          "type" : "string",
          "required" : true
        }, {
          "schema" : {
            "$ref" : "#/definitions/bankPaymentsRequest"
          },
          "in" : "body",
          "name" : "body",
          "description" : "The object body",
          "required" : true
        } ],
        "tags" : [ "bank-payments" ]
      },
      "get" : {
        "summary" : "Retrieve Bank Payments by id. ",
        "operationId" : "getBankPaymentById",
        "responses" : {
          "200" : {
            "description" : "OK - Everything worked as expected",
            "schema" : {
              "$ref" : "#/definitions/bankPayments"
            }
          },
          "400" : {
            "description" : "Bad Request - Often due to a missing request parameter"
          },
          "401" : {
            "description" : "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500" : {
            "description" : "Server error - Something went wrong on the Cloud Elements server"
          },
          "403" : {
            "description" : "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502" : {
            "description" : "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404" : {
            "description" : "Not found - The requested resource is not found"
          },
          "415" : {
            "description" : "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405" : {
            "description" : "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406" : {
            "description" : "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409" : {
            "description" : "Conflict - If a resource being created already exists"
          }
        },
        "parameters" : [ {
          "in" : "header",
          "name" : "Authorization",
          "description" : "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
          "type" : "string",
          "required" : true
        }, {
          "in" : "path",
          "name" : "id",
          "description" : "The Bank Payment ID",
          "type" : "string",
          "required" : true
        }, {
          "in" : "query",
          "name" : "expand",
          "description" : "The expand parameter is used to include related resources in your response. The value of the expand parameter should be in the form ‘resource.property:mode’ where resource is the name of a resource, property is the name of a property of that resource, and mode is either sideload (default if the : part is omitted) or embed. You can include multiple relationships by separating them with ',’. For example, to sideload an invoice’s contact object you will use the following: invoice.contact:sideload.",
          "type" : "string",
          "required" : false
        } ],
        "tags" : [ "bank-payments" ]
      }
    },
    "/bills" : {
      "post" : {
        "summary" : "Create a Bill.",
        "operationId" : "createBill",
        "responses" : {
          "200" : {
            "description" : "OK - Everything worked as expected",
            "schema" : {
              "$ref" : "#/definitions/bills"
            }
          },
          "400" : {
            "description" : "Bad Request - Often due to a missing request parameter"
          },
          "401" : {
            "description" : "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500" : {
            "description" : "Server error - Something went wrong on the Cloud Elements server"
          },
          "403" : {
            "description" : "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502" : {
            "description" : "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404" : {
            "description" : "Not found - The requested resource is not found"
          },
          "415" : {
            "description" : "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405" : {
            "description" : "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406" : {
            "description" : "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409" : {
            "description" : "Conflict - If a resource being created already exists"
          }
        },
        "parameters" : [ {
          "in" : "header",
          "name" : "Authorization",
          "description" : "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
          "type" : "string",
          "required" : true
        }, {
          "schema" : {
            "$ref" : "#/definitions/billsRequest"
          },
          "in" : "body",
          "name" : "body",
          "description" : "The object body",
          "required" : true
        } ],
        "tags" : [ "bills" ]
      },
      "get" : {
        "summary" : "Search for Bills",
        "operationId" : "getBills",
        "responses" : {
          "200" : {
            "description" : "OK - Everything worked as expected",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/billsObject"
              }
            }
          },
          "400" : {
            "description" : "Bad Request - Often due to a missing request parameter"
          },
          "401" : {
            "description" : "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500" : {
            "description" : "Server error - Something went wrong on the Cloud Elements server"
          },
          "403" : {
            "description" : "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502" : {
            "description" : "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404" : {
            "description" : "Not found - The requested resource is not found"
          },
          "415" : {
            "description" : "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405" : {
            "description" : "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406" : {
            "description" : "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409" : {
            "description" : "Conflict - If a resource being created already exists"
          }
        },
        "parameters" : [ {
          "in" : "header",
          "name" : "Authorization",
          "description" : "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
          "type" : "string",
          "required" : true
        }, {
          "in" : "query",
          "name" : "entryDatePeriod",
          "description" : "You can use the entryDatePeriod query param to sort invoices based on their date. You first have to indicate the kind of date period and then the value. So if you would want to search for all the invoices from Q1 for 2019 you would use ‘quarter:2019-1’ or if you only need a specific month from 2019 you would use 'month:2019-1’. You can also specify a date range by setting the period type as dates and indicating your range after the colon, such as 'dates:2018-12-16...2019-01-16'.",
          "type" : "string",
          "required" : false
        }, {
          "in" : "query",
          "name" : "expand",
          "description" : "The expand parameter is used to include related resources in your response. The value of the expand parameter should be in the form ‘resource.property:mode’ where resource is the name of a resource, property is the name of a property of that resource, and mode is either sideload (default if the : part is omitted) or embed. You can include multiple relationships by separating them with ',’. For example, to sideload an invoice’s contact object you will use the following: invoice.contact:sideload.",
          "type" : "string",
          "required" : false
        }, {
          "in" : "query",
          "name" : "pageSize",
          "format" : "int64",
          "description" : "The number of resources to return in a given page",
          "type" : "string",
          "required" : false
        }, {
          "in" : "query",
          "name" : "where",
          "description" : "Find Bills in the Finance System, using the provided CEQL search expression, or the where clause, without the WHERE keyword, in a typical SQL query. When this parameter is omitted, all Bills are returned.",
          "type" : "string",
          "required" : false
        }, {
          "description" : "The next page cursor, taken from the response header: `elements-next-page-token`",
          "in" : "query",
          "name" : "nextPage",
          "required" : false,
          "type" : "string"
        } ],
        "tags" : [ "bills" ]
      }
    },
    "/bills/{id}" : {
      "patch" : {
        "summary" : "Update a Bill",
        "operationId" : "updateBillById",
        "responses" : {
          "200" : {
            "description" : "OK - Everything worked as expected",
            "schema" : {
              "$ref" : "#/definitions/bills"
            }
          },
          "400" : {
            "description" : "Bad Request - Often due to a missing request parameter"
          },
          "401" : {
            "description" : "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500" : {
            "description" : "Server error - Something went wrong on the Cloud Elements server"
          },
          "403" : {
            "description" : "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502" : {
            "description" : "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404" : {
            "description" : "Not found - The requested resource is not found"
          },
          "415" : {
            "description" : "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405" : {
            "description" : "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406" : {
            "description" : "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409" : {
            "description" : "Conflict - If a resource being created already exists"
          }
        },
        "parameters" : [ {
          "in" : "header",
          "name" : "Authorization",
          "description" : "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
          "type" : "string",
          "required" : true
        }, {
          "in" : "path",
          "name" : "id",
          "description" : "The id ID",
          "type" : "string",
          "required" : true
        }, {
          "schema" : {
            "$ref" : "#/definitions/billsRequest"
          },
          "in" : "body",
          "name" : "body",
          "description" : "The object body",
          "required" : true
        } ],
        "tags" : [ "bills" ]
      },
      "get" : {
        "summary" : "Retrieve a Bill by id.",
        "operationId" : "getBillById",
        "responses" : {
          "200" : {
            "description" : "OK - Everything worked as expected",
            "schema" : {
              "$ref" : "#/definitions/bills"
            }
          },
          "400" : {
            "description" : "Bad Request - Often due to a missing request parameter"
          },
          "401" : {
            "description" : "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500" : {
            "description" : "Server error - Something went wrong on the Cloud Elements server"
          },
          "403" : {
            "description" : "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502" : {
            "description" : "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404" : {
            "description" : "Not found - The requested resource is not found"
          },
          "415" : {
            "description" : "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405" : {
            "description" : "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406" : {
            "description" : "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409" : {
            "description" : "Conflict - If a resource being created already exists"
          }
        },
        "parameters" : [ {
          "in" : "header",
          "name" : "Authorization",
          "description" : "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
          "type" : "string",
          "required" : true
        }, {
          "in" : "path",
          "name" : "id",
          "description" : "The Bill ID",
          "type" : "string",
          "required" : true
        }, {
          "in" : "query",
          "name" : "expand",
          "description" : "The expand parameter is used to include related resources in your response. The value of the expand parameter should be in the form ‘resource.property:mode’ where resource is the name of a resource, property is the name of a property of that resource, and mode is either sideload (default if the : part is omitted) or embed. You can include multiple relationships by separating them with ',’. For example, to sideload an invoice’s contact object you will use the following: invoice.contact:sideload.",
          "type" : "string",
          "required" : false
        } ],
        "tags" : [ "bills" ]
      },
      "delete" : {
        "summary" : "Delete a Bill",
        "operationId" : "deleteBillById",
        "responses" : {
          "200" : {
            "description" : "OK - Everything worked as expected"
          },
          "400" : {
            "description" : "Bad Request - Often due to a missing request parameter"
          },
          "401" : {
            "description" : "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500" : {
            "description" : "Server error - Something went wrong on the Cloud Elements server"
          },
          "403" : {
            "description" : "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502" : {
            "description" : "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404" : {
            "description" : "Not found - The requested resource is not found"
          },
          "415" : {
            "description" : "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405" : {
            "description" : "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406" : {
            "description" : "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409" : {
            "description" : "Conflict - If a resource being created already exists"
          }
        },
        "parameters" : [ {
          "in" : "header",
          "name" : "Authorization",
          "description" : "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
          "type" : "string",
          "required" : true
        }, {
          "in" : "path",
          "name" : "id",
          "description" : "The id ID",
          "type" : "string",
          "required" : true
        } ],
        "tags" : [ "bills" ]
      }
    },
    "/contacts" : {
      "post" : {
        "summary" : "Create a Contacts",
        "operationId" : "createContact",
        "responses" : {
          "200" : {
            "description" : "OK - Everything worked as expected",
            "schema" : {
              "$ref" : "#/definitions/contacts"
            }
          },
          "400" : {
            "description" : "Bad Request - Often due to a missing request parameter"
          },
          "401" : {
            "description" : "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500" : {
            "description" : "Server error - Something went wrong on the Cloud Elements server"
          },
          "403" : {
            "description" : "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502" : {
            "description" : "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404" : {
            "description" : "Not found - The requested resource is not found"
          },
          "415" : {
            "description" : "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405" : {
            "description" : "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406" : {
            "description" : "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409" : {
            "description" : "Conflict - If a resource being created already exists"
          }
        },
        "parameters" : [ {
          "in" : "header",
          "name" : "Authorization",
          "description" : "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
          "type" : "string",
          "required" : true
        }, {
          "schema" : {
            "$ref" : "#/definitions/contactsRequest"
          },
          "in" : "body",
          "name" : "body",
          "description" : "The object body",
          "required" : true
        } ],
        "tags" : [ "contacts" ]
      },
      "get" : {
        "summary" : "Search for Contacts",
        "operationId" : "getContacts",
        "responses" : {
          "200" : {
            "description" : "OK - Everything worked as expected",
            "schema" : {
              "$ref" : "#/definitions/contacts"
            }
          },
          "400" : {
            "description" : "Bad Request - Often due to a missing request parameter"
          },
          "401" : {
            "description" : "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500" : {
            "description" : "Server error - Something went wrong on the Cloud Elements server"
          },
          "403" : {
            "description" : "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502" : {
            "description" : "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404" : {
            "description" : "Not found - The requested resource is not found"
          },
          "415" : {
            "description" : "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405" : {
            "description" : "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406" : {
            "description" : "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409" : {
            "description" : "Conflict - If a resource being created already exists"
          }
        },
        "parameters" : [ {
          "in" : "header",
          "name" : "Authorization",
          "description" : "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
          "type" : "string",
          "required" : true
        }, {
          "in" : "query",
          "name" : "expand",
          "description" : "The expand parameter is used to include related resources in your response. The value of the expand parameter should be in the form ‘resource.property:mode’ where resource is the name of a resource, property is the name of a property of that resource, and mode is either sideload (default if the : part is omitted) or embed. You can include multiple relationships by separating them with ',’. For example, to sideload an invoice’s contact object you will use the following: invoice.contact:sideload.",
          "type" : "string",
          "required" : false
        }, {
          "in" : "query",
          "name" : "entryDatePeriod",
          "description" : "You can use the entryDatePeriod query param to sort invoices based on their date. You first have to indicate the kind of date period and then the value. So if you would want to search for all the invoices from Q1 for 2019 you would use ‘quarter:2019-1’ or if you only need a specific month from 2019 you would use 'month:2019-1’. You can also specify a date range by setting the period type as dates and indicating your range after the colon, such as 'dates:2018-12-16...2019-01-16'.",
          "type" : "string",
          "required" : false
        }, {
          "in" : "query",
          "name" : "pageSize",
          "format" : "int64",
          "description" : "The number of resources to return in a given page",
          "type" : "string",
          "required" : false
        }, {
          "in" : "query",
          "name" : "where",
          "description" : "The CEQL search expression",
          "type" : "string",
          "required" : false
        }, {
          "description" : "The next page cursor, taken from the response header: `elements-next-page-token`",
          "in" : "query",
          "name" : "nextPage",
          "required" : false,
          "type" : "string"
        } ],
        "tags" : [ "contacts" ]
      }
    },
    "/contacts/{id}" : {
      "patch" : {
        "summary" : "Update a Contacts",
        "operationId" : "updateContactById",
        "responses" : {
          "200" : {
            "description" : "OK - Everything worked as expected",
            "schema" : {
              "$ref" : "#/definitions/contacts"
            }
          },
          "400" : {
            "description" : "Bad Request - Often due to a missing request parameter"
          },
          "401" : {
            "description" : "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500" : {
            "description" : "Server error - Something went wrong on the Cloud Elements server"
          },
          "403" : {
            "description" : "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502" : {
            "description" : "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404" : {
            "description" : "Not found - The requested resource is not found"
          },
          "415" : {
            "description" : "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405" : {
            "description" : "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406" : {
            "description" : "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409" : {
            "description" : "Conflict - If a resource being created already exists"
          }
        },
        "parameters" : [ {
          "in" : "header",
          "name" : "Authorization",
          "description" : "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
          "type" : "string",
          "required" : true
        }, {
          "in" : "path",
          "name" : "id",
          "description" : "The id ID",
          "type" : "string",
          "required" : true
        }, {
          "schema" : {
            "$ref" : "#/definitions/contacts"
          },
          "in" : "body",
          "name" : "body",
          "description" : "The object body",
          "required" : true
        } ],
        "tags" : [ "contacts" ]
      },
      "get" : {
        "summary" : "Retrieve a Contacts",
        "operationId" : "getContactById",
        "responses" : {
          "200" : {
            "description" : "OK - Everything worked as expected",
            "schema" : {
              "$ref" : "#/definitions/contacts"
            }
          },
          "400" : {
            "description" : "Bad Request - Often due to a missing request parameter"
          },
          "401" : {
            "description" : "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500" : {
            "description" : "Server error - Something went wrong on the Cloud Elements server"
          },
          "403" : {
            "description" : "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502" : {
            "description" : "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404" : {
            "description" : "Not found - The requested resource is not found"
          },
          "415" : {
            "description" : "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405" : {
            "description" : "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406" : {
            "description" : "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409" : {
            "description" : "Conflict - If a resource being created already exists"
          }
        },
        "parameters" : [ {
          "in" : "header",
          "name" : "Authorization",
          "description" : "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
          "type" : "string",
          "required" : true
        }, {
          "in" : "path",
          "name" : "id",
          "description" : "The id ID",
          "type" : "string",
          "required" : true
        } ],
        "tags" : [ "contacts" ]
      },
      "delete" : {
        "summary" : "Delete a Contacts",
        "operationId" : "deleteContactById",
        "responses" : {
          "200" : {
            "description" : "OK - Everything worked as expected"
          },
          "400" : {
            "description" : "Bad Request - Often due to a missing request parameter"
          },
          "401" : {
            "description" : "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500" : {
            "description" : "Server error - Something went wrong on the Cloud Elements server"
          },
          "403" : {
            "description" : "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502" : {
            "description" : "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404" : {
            "description" : "Not found - The requested resource is not found"
          },
          "415" : {
            "description" : "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405" : {
            "description" : "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406" : {
            "description" : "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409" : {
            "description" : "Conflict - If a resource being created already exists"
          }
        },
        "parameters" : [ {
          "in" : "header",
          "name" : "Authorization",
          "description" : "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
          "type" : "string",
          "required" : true
        }, {
          "in" : "path",
          "name" : "id",
          "description" : "The id ID",
          "type" : "string",
          "required" : true
        } ],
        "tags" : [ "contacts" ]
      }
    },
    "/invoices" : {
      "post" : {
        "summary" : "Create an Invoice",
        "operationId" : "createInvoice",
        "responses" : {
          "200" : {
            "description" : "OK - Everything worked as expected",
            "schema" : {
              "$ref" : "#/definitions/invoices"
            }
          },
          "400" : {
            "description" : "Bad Request - Often due to a missing request parameter"
          },
          "401" : {
            "description" : "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500" : {
            "description" : "Server error - Something went wrong on the Cloud Elements server"
          },
          "403" : {
            "description" : "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502" : {
            "description" : "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404" : {
            "description" : "Not found - The requested resource is not found"
          },
          "415" : {
            "description" : "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405" : {
            "description" : "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406" : {
            "description" : "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409" : {
            "description" : "Conflict - If a resource being created already exists"
          }
        },
        "parameters" : [ {
          "in" : "header",
          "name" : "Authorization",
          "description" : "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
          "type" : "string",
          "required" : true
        }, {
          "schema" : {
            "$ref" : "#/definitions/invoicesRequest"
          },
          "in" : "body",
          "name" : "body",
          "description" : "The object body",
          "required" : true
        } ],
        "tags" : [ "invoices" ]
      },
      "get" : {
        "summary" : "Search for invoices",
        "operationId" : "getInvoices",
        "responses" : {
          "200" : {
            "description" : "OK - Everything worked as expected",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/invoicesObject"
              }
            }
          },
          "400" : {
            "description" : "Bad Request - Often due to a missing request parameter"
          },
          "401" : {
            "description" : "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500" : {
            "description" : "Server error - Something went wrong on the Cloud Elements server"
          },
          "403" : {
            "description" : "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502" : {
            "description" : "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404" : {
            "description" : "Not found - The requested resource is not found"
          },
          "415" : {
            "description" : "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405" : {
            "description" : "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406" : {
            "description" : "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409" : {
            "description" : "Conflict - If a resource being created already exists"
          }
        },
        "parameters" : [ {
          "in" : "header",
          "name" : "Authorization",
          "description" : "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
          "type" : "string",
          "required" : true
        }, {
          "in" : "query",
          "name" : "entryDatePeriod",
          "description" : "You can use the entryDatePeriod query param to sort invoices based on their date. You first have to indicate the kind of date period and then the value. So if you would want to search for all the invoices from Q1 for 2019 you would use ‘quarter:2019-1’ or if you only need a specific month from 2019 you would use 'month:2019-1’. You can also specify a date range by setting the period type as dates and indicating your range after the colon, such as 'dates:2018-12-16...2019-01-16'.",
          "type" : "string",
          "required" : false
        }, {
          "in" : "query",
          "name" : "expand",
          "description" : "The expand parameter is used to include related resources in your response. The value of the expand parameter should be in the form ‘resource.property:mode’ where resource is the name of a resource, property is the name of a property of that resource, and mode is either sideload (default if the : part is omitted) or embed. You can include multiple relationships by separating them with ',’. For example, to sideload an invoice’s contact object you will use the following: invoice.contact:sideload.",
          "type" : "string",
          "required" : false
        }, {
          "in" : "query",
          "name" : "where",
          "description" : "Find Invoices in the Finance System, using the provided CEQL search expression, or the where clause, without the WHERE keyword, in a typical SQL query. When this parameter is omitted, all Invoices are returned.",
          "type" : "string",
          "required" : false
        }, {
          "in" : "query",
          "name" : "pageSize",
          "format" : "int64",
          "description" : "The number of resources to return in a given page",
          "type" : "string",
          "required" : false
        }, {
          "description" : "The next page cursor, taken from the response header: `elements-next-page-token`",
          "in" : "query",
          "name" : "nextPage",
          "required" : false,
          "type" : "string"
        } ],
        "tags" : [ "invoices" ]
      }
    },
    "/invoices/{id}" : {
      "patch" : {
        "summary" : "Update an Invoice",
        "operationId" : "updateInvoiceById",
        "responses" : {
          "200" : {
            "description" : "OK - Everything worked as expected",
            "schema" : {
              "$ref" : "#/definitions/invoices"
            }
          },
          "400" : {
            "description" : "Bad Request - Often due to a missing request parameter"
          },
          "401" : {
            "description" : "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500" : {
            "description" : "Server error - Something went wrong on the Cloud Elements server"
          },
          "403" : {
            "description" : "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502" : {
            "description" : "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404" : {
            "description" : "Not found - The requested resource is not found"
          },
          "415" : {
            "description" : "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405" : {
            "description" : "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406" : {
            "description" : "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409" : {
            "description" : "Conflict - If a resource being created already exists"
          }
        },
        "parameters" : [ {
          "in" : "header",
          "name" : "Authorization",
          "description" : "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
          "type" : "string",
          "required" : true
        }, {
          "in" : "path",
          "name" : "id",
          "description" : "The Object ID",
          "type" : "string",
          "required" : true
        }, {
          "schema" : {
            "$ref" : "#/definitions/invoicesRequest"
          },
          "in" : "body",
          "name" : "body",
          "description" : "The object body",
          "required" : true
        } ],
        "tags" : [ "invoices" ]
      },
      "get" : {
        "summary" : "Retrieve an Invoice by id. ",
        "operationId" : "getInvoiceById",
        "responses" : {
          "200" : {
            "description" : "OK - Everything worked as expected",
            "schema" : {
              "$ref" : "#/definitions/invoices"
            }
          },
          "400" : {
            "description" : "Bad Request - Often due to a missing request parameter"
          },
          "401" : {
            "description" : "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500" : {
            "description" : "Server error - Something went wrong on the Cloud Elements server"
          },
          "403" : {
            "description" : "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502" : {
            "description" : "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404" : {
            "description" : "Not found - The requested resource is not found"
          },
          "415" : {
            "description" : "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405" : {
            "description" : "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406" : {
            "description" : "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409" : {
            "description" : "Conflict - If a resource being created already exists"
          }
        },
        "parameters" : [ {
          "in" : "header",
          "name" : "Authorization",
          "description" : "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
          "type" : "string",
          "required" : true
        }, {
          "in" : "path",
          "name" : "id",
          "description" : "The Invoice ID",
          "type" : "string",
          "required" : true
        }, {
          "in" : "query",
          "name" : "expand",
          "description" : "The expand parameter is used to include related resources in your response. The value of the expand parameter should be in the form ‘resource.property:mode’ where resource is the name of a resource, property is the name of a property of that resource, and mode is either sideload (default if the : part is omitted) or embed. You can include multiple relationships by separating them with ',’. For example, to sideload an invoice’s contact object you will use the following: invoice.contact:sideload.",
          "type" : "string",
          "required" : false
        } ],
        "tags" : [ "invoices" ]
      },
      "delete" : {
        "summary" : "Delete an Invoice",
        "operationId" : "deleteInvoiceById",
        "responses" : {
          "200" : {
            "description" : "OK - Everything worked as expected"
          },
          "400" : {
            "description" : "Bad Request - Often due to a missing request parameter"
          },
          "401" : {
            "description" : "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500" : {
            "description" : "Server error - Something went wrong on the Cloud Elements server"
          },
          "403" : {
            "description" : "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502" : {
            "description" : "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404" : {
            "description" : "Not found - The requested resource is not found"
          },
          "415" : {
            "description" : "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405" : {
            "description" : "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406" : {
            "description" : "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409" : {
            "description" : "Conflict - If a resource being created already exists"
          }
        },
        "parameters" : [ {
          "in" : "header",
          "name" : "Authorization",
          "description" : "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
          "type" : "string",
          "required" : true
        }, {
          "in" : "path",
          "name" : "id",
          "description" : "The Invoice ID",
          "type" : "string",
          "required" : true
        } ],
        "tags" : [ "invoices" ]
      }
    },
    "/invoices/{id}/invoice-lines" : {
      "post" : {
        "summary" : "Create an Invoice Line",
        "operationId" : "createInvoiceInvoiceLine",
        "responses" : {
          "200" : {
            "description" : "OK - Everything worked as expected",
            "schema" : {
              "$ref" : "#/definitions/invoiceLines"
            }
          },
          "400" : {
            "description" : "Bad Request - Often due to a missing request parameter"
          },
          "401" : {
            "description" : "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500" : {
            "description" : "Server error - Something went wrong on the Cloud Elements server"
          },
          "403" : {
            "description" : "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502" : {
            "description" : "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404" : {
            "description" : "Not found - The requested resource is not found"
          },
          "415" : {
            "description" : "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405" : {
            "description" : "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406" : {
            "description" : "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409" : {
            "description" : "Conflict - If a resource being created already exists"
          }
        },
        "parameters" : [ {
          "in" : "header",
          "name" : "Authorization",
          "description" : "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
          "type" : "string",
          "required" : true
        }, {
          "in" : "path",
          "name" : "id",
          "description" : "The Invoice ID",
          "type" : "string",
          "required" : true
        }, {
          "schema" : {
            "$ref" : "#/definitions/invoiceLinesRequest"
          },
          "in" : "body",
          "name" : "body",
          "description" : "The object body",
          "required" : true
        } ],
        "tags" : [ "invoices" ]
      },
      "get" : {
        "summary" : "Search for Invoice Lines",
        "operationId" : "getInvoicesInvoiceLines",
        "responses" : {
          "200" : {
            "description" : "OK - Everything worked as expected",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/invoiceLinesObject"
              }
            }
          },
          "400" : {
            "description" : "Bad Request - Often due to a missing request parameter"
          },
          "401" : {
            "description" : "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500" : {
            "description" : "Server error - Something went wrong on the Cloud Elements server"
          },
          "403" : {
            "description" : "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502" : {
            "description" : "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404" : {
            "description" : "Not found - The requested resource is not found"
          },
          "415" : {
            "description" : "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405" : {
            "description" : "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406" : {
            "description" : "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409" : {
            "description" : "Conflict - If a resource being created already exists"
          }
        },
        "parameters" : [ {
          "in" : "header",
          "name" : "Authorization",
          "description" : "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
          "type" : "string",
          "required" : true
        }, {
          "in" : "path",
          "name" : "id",
          "description" : "The Invoice ID",
          "type" : "string",
          "required" : true
        }, {
          "in" : "query",
          "name" : "expand",
          "description" : "The expand parameter is used to include related resources in your response. The value of the expand parameter should be in the form ‘resource.property:mode’ where resource is the name of a resource, property is the name of a property of that resource, and mode is either sideload (default if the : part is omitted) or embed. You can include multiple relationships by separating them with ',’. For example, to sideload an invoice’s contact object you will use the following: invoice.contact:sideload.",
          "type" : "string",
          "required" : false
        }, {
          "in" : "query",
          "name" : "entryDatePeriod",
          "description" : "You can use the entryDatePeriod query param to sort invoices based on their date. You first have to indicate the kind of date period and then the value. So if you would want to search for all the invoices from Q1 for 2019 you would use ‘quarter:2019-1’ or if you only need a specific month from 2019 you would use 'month:2019-1’. You can also specify a date range by setting the period type as dates and indicating your range after the colon, such as 'dates:2018-12-16...2019-01-16'.",
          "type" : "string",
          "required" : false
        }, {
          "in" : "query",
          "name" : "pageSize",
          "format" : "int64",
          "description" : "The number of resources to return in a given page",
          "type" : "string",
          "required" : false
        }, {
          "in" : "query",
          "name" : "where",
          "description" : "The CEQL search expression",
          "type" : "string",
          "required" : false
        }, {
          "description" : "The next page cursor, taken from the response header: `elements-next-page-token`",
          "in" : "query",
          "name" : "nextPage",
          "required" : false,
          "type" : "string"
        } ],
        "tags" : [ "invoices" ]
      }
    },
    "/invoices/{id}/invoice-lines/{invoiceLineId}" : {
      "patch" : {
        "summary" : "Update an Invoice Line",
        "operationId" : "updateInvoicesInvoiceLineByInvoiceLineId",
        "responses" : {
          "200" : {
            "description" : "OK - Everything worked as expected",
            "schema" : {
              "$ref" : "#/definitions/invoiceLines"
            }
          },
          "400" : {
            "description" : "Bad Request - Often due to a missing request parameter"
          },
          "401" : {
            "description" : "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500" : {
            "description" : "Server error - Something went wrong on the Cloud Elements server"
          },
          "403" : {
            "description" : "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502" : {
            "description" : "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404" : {
            "description" : "Not found - The requested resource is not found"
          },
          "415" : {
            "description" : "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405" : {
            "description" : "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406" : {
            "description" : "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409" : {
            "description" : "Conflict - If a resource being created already exists"
          }
        },
        "parameters" : [ {
          "in" : "header",
          "name" : "Authorization",
          "description" : "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
          "type" : "string",
          "required" : true
        }, {
          "in" : "path",
          "name" : "id",
          "description" : "The Invoice ID",
          "type" : "string",
          "required" : true
        }, {
          "in" : "path",
          "name" : "invoiceLineId",
          "description" : "The Invoice Line ID",
          "type" : "string",
          "required" : true
        }, {
          "schema" : {
            "$ref" : "#/definitions/invoiceLinesRequest"
          },
          "in" : "body",
          "name" : "body",
          "description" : "The object body",
          "required" : true
        } ],
        "tags" : [ "invoices" ]
      },
      "get" : {
        "summary" : "Retrieve an Invoice Line",
        "operationId" : "getInvoicesInvoiceLineByInvoiceLineId",
        "responses" : {
          "200" : {
            "description" : "OK - Everything worked as expected",
            "schema" : {
              "$ref" : "#/definitions/invoiceLines"
            }
          },
          "400" : {
            "description" : "Bad Request - Often due to a missing request parameter"
          },
          "401" : {
            "description" : "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500" : {
            "description" : "Server error - Something went wrong on the Cloud Elements server"
          },
          "403" : {
            "description" : "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502" : {
            "description" : "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404" : {
            "description" : "Not found - The requested resource is not found"
          },
          "415" : {
            "description" : "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405" : {
            "description" : "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406" : {
            "description" : "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409" : {
            "description" : "Conflict - If a resource being created already exists"
          }
        },
        "parameters" : [ {
          "in" : "header",
          "name" : "Authorization",
          "description" : "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
          "type" : "string",
          "required" : true
        }, {
          "in" : "path",
          "name" : "id",
          "description" : "The Invoice ID",
          "type" : "string",
          "required" : true
        }, {
          "in" : "path",
          "name" : "invoiceLineId",
          "description" : "The Invoice Line ID",
          "type" : "string",
          "required" : true
        } ],
        "tags" : [ "invoices" ]
      },
      "delete" : {
        "summary" : "Delete an Invoice Line",
        "operationId" : "deleteInvoicesInvoiceLineByInvoiceLineId",
        "responses" : {
          "200" : {
            "description" : "OK - Everything worked as expected"
          },
          "400" : {
            "description" : "Bad Request - Often due to a missing request parameter"
          },
          "401" : {
            "description" : "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500" : {
            "description" : "Server error - Something went wrong on the Cloud Elements server"
          },
          "403" : {
            "description" : "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502" : {
            "description" : "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404" : {
            "description" : "Not found - The requested resource is not found"
          },
          "415" : {
            "description" : "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405" : {
            "description" : "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406" : {
            "description" : "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409" : {
            "description" : "Conflict - If a resource being created already exists"
          }
        },
        "parameters" : [ {
          "in" : "header",
          "name" : "Authorization",
          "description" : "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
          "type" : "string",
          "required" : true
        }, {
          "in" : "path",
          "name" : "id",
          "description" : "The Invoice ID",
          "type" : "string",
          "required" : true
        }, {
          "in" : "path",
          "name" : "invoiceLineId",
          "description" : "The Invoice Line ID",
          "type" : "string",
          "required" : true
        } ],
        "tags" : [ "invoices" ]
      }
    },
    "/journal-entries" : {
      "get" : {
        "summary" : "Search for Journal Entries; maps to vendor's Daybook Transactions.  ",
        "operationId" : "getJournalEntries",
        "responses" : {
          "200" : {
            "description" : "OK - Everything worked as expected",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/journalEntriesObject"
              }
            }
          },
          "400" : {
            "description" : "Bad Request - Often due to a missing request parameter"
          },
          "401" : {
            "description" : "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500" : {
            "description" : "Server error - Something went wrong on the Cloud Elements server"
          },
          "403" : {
            "description" : "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502" : {
            "description" : "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404" : {
            "description" : "Not found - The requested resource is not found"
          },
          "415" : {
            "description" : "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405" : {
            "description" : "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406" : {
            "description" : "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409" : {
            "description" : "Conflict - If a resource being created already exists"
          }
        },
        "parameters" : [ {
          "in" : "header",
          "name" : "Authorization",
          "description" : "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
          "type" : "string",
          "required" : true
        }, {
          "in" : "query",
          "name" : "expand",
          "description" : "The expand parameter is used to include related resources in your response. The value of the expand parameter should be in the form ‘resource.property:mode’ where resource is the name of a resource, property is the name of a property of that resource, and mode is either sideload (default if the : part is omitted) or embed. You can include multiple relationships by separating them with ',’. For example, to sideload an invoice’s contact object you will use the following: invoice.contact:sideload.",
          "type" : "string",
          "required" : false
        }, {
          "in" : "query",
          "name" : "pageSize",
          "format" : "int64",
          "description" : "The number of resources to return in a given page",
          "type" : "string",
          "required" : false
        }, {
          "in" : "query",
          "name" : "where",
          "description" : "Find Journal Entries in the Finance System, using the provided CEQL search expression, or the where clause, without the WHERE keyword, in a typical SQL query. When this parameter is omitted, all Journal Entries are returned.",
          "type" : "string",
          "required" : false
        }, {
          "description" : "The next page cursor, taken from the response header: `elements-next-page-token`",
          "in" : "query",
          "name" : "nextPage",
          "required" : false,
          "type" : "string"
        } ],
        "tags" : [ "journal-entries" ]
      }
    },
    "/journal-entries/{id}" : {
      "get" : {
        "summary" : "Search for a Journal Entry by id; maps to vendor's Daybook Transactions.  ",
        "operationId" : "getJournalEntryById",
        "responses" : {
          "200" : {
            "description" : "OK - Everything worked as expected",
            "schema" : {
              "$ref" : "#/definitions/journalEntries"
            }
          },
          "400" : {
            "description" : "Bad Request - Often due to a missing request parameter"
          },
          "401" : {
            "description" : "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500" : {
            "description" : "Server error - Something went wrong on the Cloud Elements server"
          },
          "403" : {
            "description" : "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502" : {
            "description" : "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404" : {
            "description" : "Not found - The requested resource is not found"
          },
          "415" : {
            "description" : "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405" : {
            "description" : "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406" : {
            "description" : "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409" : {
            "description" : "Conflict - If a resource being created already exists"
          }
        },
        "parameters" : [ {
          "in" : "header",
          "name" : "Authorization",
          "description" : "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
          "type" : "string",
          "required" : true
        }, {
          "in" : "path",
          "name" : "id",
          "description" : "The Journal Entry ID",
          "type" : "string",
          "required" : true
        }, {
          "in" : "query",
          "name" : "expand",
          "description" : "The expand parameter is used to include related resources in your response. The value of the expand parameter should be in the form ‘resource.property:mode’ where resource is the name of a resource, property is the name of a property of that resource, and mode is either sideload (default if the : part is omitted) or embed. You can include multiple relationships by separating them with ',’. For example, to sideload an invoice’s contact object you will use the following: invoice.contact:sideload.",
          "type" : "string",
          "required" : false
        } ],
        "tags" : [ "journal-entries" ]
      }
    },
    "/objects" : {
      "get" : {
        "operationId" : "getObjects",
        "parameters" : [ {
          "description" : "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
          "in" : "header",
          "name" : "Authorization",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK - Everything worked as expected",
            "schema" : {
              "items" : {
                "type" : "string"
              },
              "type" : "array"
            }
          },
          "400" : {
            "description" : "Bad Request - Often due to a missing request parameter"
          },
          "401" : {
            "description" : "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "403" : {
            "description" : "Forbidden - Access to the resource by the provider is forbidden"
          },
          "404" : {
            "description" : "Not found - The requested resource is not found"
          },
          "405" : {
            "description" : "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406" : {
            "description" : "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409" : {
            "description" : "Conflict - If a resource being created already exists"
          },
          "415" : {
            "description" : "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "500" : {
            "description" : "Server error - Something went wrong on the Cloud Elements server"
          },
          "502" : {
            "description" : "Provider server error - Something went wrong on the Provider or Endpoint's server"
          }
        },
        "summary" : "Get a list of all the available objects.",
        "tags" : [ "objects" ]
      }
    },
    "/objects/{objectName}/docs" : {
      "get" : {
        "operationId" : "getObjectsObjectNameDocs",
        "parameters" : [ {
          "description" : "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
          "in" : "header",
          "name" : "Authorization",
          "required" : true,
          "type" : "string"
        }, {
          "description" : "The name of the object",
          "in" : "path",
          "name" : "objectName",
          "required" : true,
          "type" : "string"
        }, {
          "description" : "Include discovery metadata in definitions",
          "in" : "query",
          "name" : "discovery",
          "required" : false,
          "type" : "boolean"
        }, {
          "description" : "Optionally resolve swagger references for an inline object definition",
          "in" : "query",
          "name" : "resolveReferences",
          "required" : false,
          "type" : "boolean"
        }, {
          "description" : "Include only OpenAPI / Swagger properties in definitions",
          "in" : "query",
          "name" : "basic",
          "required" : false,
          "type" : "boolean"
        }, {
          "description" : "The element swagger version to get the corresponding element swagger, Passing in \"-1\" gives latest element swagger",
          "in" : "query",
          "name" : "version",
          "required" : false,
          "default" : "-1",
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK - Everything worked as expected",
            "schema" : {
              "$ref" : "#/definitions/swaggerDocs"
            }
          },
          "400" : {
            "description" : "Bad Request - Often due to a missing request parameter"
          },
          "401" : {
            "description" : "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "403" : {
            "description" : "Forbidden - Access to the resource by the provider is forbidden"
          },
          "404" : {
            "description" : "Not found - The requested resource is not found"
          },
          "405" : {
            "description" : "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406" : {
            "description" : "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409" : {
            "description" : "Conflict - If a resource being created already exists"
          },
          "415" : {
            "description" : "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "500" : {
            "description" : "Server error - Something went wrong on the Cloud Elements server"
          },
          "502" : {
            "description" : "Provider server error - Something went wrong on the Provider or Endpoint's server"
          }
        },
        "summary" : "Get swagger docs for an object.",
        "tags" : [ "objects" ]
      }
    },
    "/objects/{objectName}/metadata" : {
      "get" : {
        "operationId" : "getObjectsObjectNameMetadata",
        "parameters" : [ {
          "description" : "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
          "in" : "header",
          "name" : "Authorization",
          "required" : true,
          "type" : "string"
        }, {
          "description" : "The name of the object",
          "in" : "path",
          "name" : "objectName",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK - Everything worked as expected",
            "schema" : {
              "$ref" : "#/definitions/objectsMetadata"
            }
          },
          "400" : {
            "description" : "Bad Request - Often due to a missing request parameter"
          },
          "401" : {
            "description" : "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "403" : {
            "description" : "Forbidden - Access to the resource by the provider is forbidden"
          },
          "404" : {
            "description" : "Not found - The requested resource is not found"
          },
          "405" : {
            "description" : "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406" : {
            "description" : "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409" : {
            "description" : "Conflict - If a resource being created already exists"
          },
          "415" : {
            "description" : "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "500" : {
            "description" : "Server error - Something went wrong on the Cloud Elements server"
          },
          "502" : {
            "description" : "Provider server error - Something went wrong on the Provider or Endpoint's server"
          }
        },
        "summary" : "Get a list of all the field for an object.",
        "tags" : [ "objects" ]
      }
    },
    "/ping" : {
      "get" : {
        "operationId" : "getPing",
        "parameters" : [ {
          "description" : "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
          "in" : "header",
          "name" : "Authorization",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK - Everything worked as expected",
            "schema" : {
              "$ref" : "#/definitions/Pong"
            }
          },
          "400" : {
            "description" : "Bad Request - Often due to a missing request parameter"
          },
          "401" : {
            "description" : "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "403" : {
            "description" : "Forbidden - Access to the resource by the provider is forbidden"
          },
          "404" : {
            "description" : "Not found - The requested resource is not found"
          },
          "405" : {
            "description" : "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406" : {
            "description" : "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409" : {
            "description" : "Conflict - If a resource being created already exists"
          },
          "415" : {
            "description" : "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "500" : {
            "description" : "Server error - Something went wrong on the Cloud Elements server"
          },
          "502" : {
            "description" : "Provider server error - Something went wrong on the Provider or Endpoint's server"
          }
        },
        "summary" : "Ping the Element to confirm that the Hub Element has a heartbeat.  If the Element does not have a heartbeat, an error message will be returned.",
        "tags" : [ "ping" ]
      }
    },
    "/products" : {
      "post" : {
        "summary" : "Create a Product",
        "operationId" : "createProduct",
        "responses" : {
          "200" : {
            "description" : "OK - Everything worked as expected",
            "schema" : {
              "$ref" : "#/definitions/products"
            }
          },
          "400" : {
            "description" : "Bad Request - Often due to a missing request parameter"
          },
          "401" : {
            "description" : "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500" : {
            "description" : "Server error - Something went wrong on the Cloud Elements server"
          },
          "403" : {
            "description" : "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502" : {
            "description" : "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404" : {
            "description" : "Not found - The requested resource is not found"
          },
          "415" : {
            "description" : "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405" : {
            "description" : "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406" : {
            "description" : "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409" : {
            "description" : "Conflict - If a resource being created already exists"
          }
        },
        "parameters" : [ {
          "in" : "header",
          "name" : "Authorization",
          "description" : "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
          "type" : "string",
          "required" : true
        }, {
          "schema" : {
            "$ref" : "#/definitions/productsRequest"
          },
          "in" : "body",
          "name" : "body",
          "description" : "The object body",
          "required" : true
        } ],
        "tags" : [ "products" ]
      },
      "get" : {
        "summary" : "Search for products",
        "operationId" : "getProducts",
        "responses" : {
          "200" : {
            "description" : "OK - Everything worked as expected",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/productsObject"
              }
            }
          },
          "400" : {
            "description" : "Bad Request - Often due to a missing request parameter"
          },
          "401" : {
            "description" : "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500" : {
            "description" : "Server error - Something went wrong on the Cloud Elements server"
          },
          "403" : {
            "description" : "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502" : {
            "description" : "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404" : {
            "description" : "Not found - The requested resource is not found"
          },
          "415" : {
            "description" : "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405" : {
            "description" : "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406" : {
            "description" : "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409" : {
            "description" : "Conflict - If a resource being created already exists"
          }
        },
        "parameters" : [ {
          "in" : "header",
          "name" : "Authorization",
          "description" : "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
          "type" : "string",
          "required" : true
        }, {
          "in" : "query",
          "name" : "where",
          "description" : "Find Products in the Finance System, using the provided CEQL search expression, or the where clause, without the WHERE keyword, in a typical SQL query. When this parameter is omitted, all Products are returned.",
          "type" : "string",
          "required" : false
        }, {
          "in" : "query",
          "name" : "pageSize",
          "format" : "int64",
          "description" : "The number of resources to return in a given page",
          "type" : "string",
          "required" : false
        }, {
          "in" : "query",
          "name" : "include",
          "description" : "The expand parameter is used to include related resources in your response. The value of the expand parameter should be in the form ‘resource.property:mode’ where resource is the name of a resource, property is the name of a property of that resource, and mode is either sideload (default if the : part is omitted) or embed. You can include multiple relationships by separating them with ',’. For example, to sideload an invoice’s contact object you will use the following: invoice.contact:sideload.",
          "type" : "string",
          "required" : false
        }, {
          "description" : "The next page cursor, taken from the response header: `elements-next-page-token`",
          "in" : "query",
          "name" : "nextPage",
          "required" : false,
          "type" : "string"
        } ],
        "tags" : [ "products" ]
      }
    },
    "/products/{id}" : {
      "patch" : {
        "summary" : "Update a Product.",
        "operationId" : "updateProductById",
        "responses" : {
          "200" : {
            "description" : "OK - Everything worked as expected",
            "schema" : {
              "$ref" : "#/definitions/products"
            }
          },
          "400" : {
            "description" : "Bad Request - Often due to a missing request parameter"
          },
          "401" : {
            "description" : "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500" : {
            "description" : "Server error - Something went wrong on the Cloud Elements server"
          },
          "403" : {
            "description" : "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502" : {
            "description" : "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404" : {
            "description" : "Not found - The requested resource is not found"
          },
          "415" : {
            "description" : "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405" : {
            "description" : "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406" : {
            "description" : "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409" : {
            "description" : "Conflict - If a resource being created already exists"
          }
        },
        "parameters" : [ {
          "in" : "header",
          "name" : "Authorization",
          "description" : "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
          "type" : "string",
          "required" : true
        }, {
          "in" : "path",
          "name" : "id",
          "description" : "The Object ID",
          "type" : "string",
          "required" : true
        }, {
          "schema" : {
            "$ref" : "#/definitions/productsRequest"
          },
          "in" : "body",
          "name" : "body",
          "description" : "The object body",
          "required" : true
        } ],
        "tags" : [ "products" ]
      },
      "get" : {
        "summary" : "Retrieve a Product by id.",
        "operationId" : "getProductById",
        "responses" : {
          "200" : {
            "description" : "OK - Everything worked as expected",
            "schema" : {
              "$ref" : "#/definitions/products"
            }
          },
          "400" : {
            "description" : "Bad Request - Often due to a missing request parameter"
          },
          "401" : {
            "description" : "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500" : {
            "description" : "Server error - Something went wrong on the Cloud Elements server"
          },
          "403" : {
            "description" : "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502" : {
            "description" : "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404" : {
            "description" : "Not found - The requested resource is not found"
          },
          "415" : {
            "description" : "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405" : {
            "description" : "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406" : {
            "description" : "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409" : {
            "description" : "Conflict - If a resource being created already exists"
          }
        },
        "parameters" : [ {
          "in" : "header",
          "name" : "Authorization",
          "description" : "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
          "type" : "string",
          "required" : true
        }, {
          "in" : "path",
          "name" : "id",
          "description" : "The Product ID",
          "type" : "string",
          "required" : true
        }, {
          "in" : "query",
          "name" : "expand",
          "description" : "The expand parameter is used to include related resources in your response. The value of the expand parameter should be in the form ‘resource.property:mode’ where resource is the name of a resource, property is the name of a property of that resource, and mode is either sideload (default if the : part is omitted) or embed. You can include multiple relationships by separating them with ',’. For example, to sideload an invoice’s contact object you will use the following: invoice.contact:sideload.\n\n",
          "type" : "string",
          "required" : false
        } ],
        "tags" : [ "products" ]
      },
      "delete" : {
        "summary" : "Delete a Product.",
        "operationId" : "deleteProductById",
        "responses" : {
          "200" : {
            "description" : "OK - Everything worked as expected"
          },
          "400" : {
            "description" : "Bad Request - Often due to a missing request parameter"
          },
          "401" : {
            "description" : "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500" : {
            "description" : "Server error - Something went wrong on the Cloud Elements server"
          },
          "403" : {
            "description" : "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502" : {
            "description" : "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404" : {
            "description" : "Not found - The requested resource is not found"
          },
          "415" : {
            "description" : "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405" : {
            "description" : "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406" : {
            "description" : "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409" : {
            "description" : "Conflict - If a resource being created already exists"
          }
        },
        "parameters" : [ {
          "in" : "header",
          "name" : "Authorization",
          "description" : "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
          "type" : "string",
          "required" : true
        }, {
          "in" : "path",
          "name" : "id",
          "description" : "The Object ID",
          "type" : "string",
          "required" : true
        } ],
        "tags" : [ "products" ]
      }
    },
    "/purchase-orders" : {
      "get" : {
        "summary" : "Search for Purchase Orders; maps to vendor's Transactions.  ",
        "operationId" : "getPurchaseOrders",
        "responses" : {
          "200" : {
            "description" : "OK - Everything worked as expected",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/purchaseOrdersObject"
              }
            }
          },
          "400" : {
            "description" : "Bad Request - Often due to a missing request parameter"
          },
          "401" : {
            "description" : "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500" : {
            "description" : "Server error - Something went wrong on the Cloud Elements server"
          },
          "403" : {
            "description" : "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502" : {
            "description" : "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404" : {
            "description" : "Not found - The requested resource is not found"
          },
          "415" : {
            "description" : "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405" : {
            "description" : "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406" : {
            "description" : "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409" : {
            "description" : "Conflict - If a resource being created already exists"
          }
        },
        "parameters" : [ {
          "in" : "header",
          "name" : "Authorization",
          "description" : "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
          "type" : "string",
          "required" : true
        }, {
          "in" : "query",
          "name" : "where",
          "description" : "Find Purchase Orders in the Finance System, using the provided CEQL search expression, or the where clause, without the WHERE keyword, in a typical SQL query. When this parameter is omitted, all Purchase Orders are returned.",
          "type" : "string",
          "required" : false
        }, {
          "in" : "query",
          "name" : "expand",
          "description" : "The expand parameter is used to include related resources in your response. The value of the expand parameter should be in the form ‘resource.property:mode’ where resource is the name of a resource, property is the name of a property of that resource, and mode is either sideload (default if the : part is omitted) or embed. You can include multiple relationships by separating them with ',’. For example, to sideload an invoice’s contact object you will use the following: invoice.contact:sideload.",
          "type" : "string",
          "required" : false
        }, {
          "in" : "query",
          "name" : "entryDatePeriod",
          "description" : "You can use the entryDatePeriod query param to sort invoices based on their date. You first have to indicate the kind of date period and then the value. So if you would want to search for all the invoices from Q1 for 2019 you would use ‘quarter:2019-1’ or if you only need a specific month from 2019 you would use 'month:2019-1’. You can also specify a date range by setting the period type as dates and indicating your range after the colon, such as 'dates:2018-12-16...2019-01-16'.",
          "type" : "string",
          "required" : false
        }, {
          "in" : "query",
          "name" : "pageSize",
          "format" : "int64",
          "description" : "The number of resources to return in a given page",
          "type" : "string",
          "required" : false
        }, {
          "description" : "The next page cursor, taken from the response header: `elements-next-page-token`",
          "in" : "query",
          "name" : "nextPage",
          "required" : false,
          "type" : "string"
        } ],
        "tags" : [ "purchase-orders" ]
      }
    },
    "/purchase-orders/{id}" : {
      "get" : {
        "summary" : "Search for a Purchase Order by id; maps to vendor's Transactions.  ",
        "operationId" : "getPurchaseOrderById",
        "responses" : {
          "200" : {
            "description" : "OK - Everything worked as expected",
            "schema" : {
              "$ref" : "#/definitions/purchaseOrders"
            }
          },
          "400" : {
            "description" : "Bad Request - Often due to a missing request parameter"
          },
          "401" : {
            "description" : "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500" : {
            "description" : "Server error - Something went wrong on the Cloud Elements server"
          },
          "403" : {
            "description" : "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502" : {
            "description" : "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404" : {
            "description" : "Not found - The requested resource is not found"
          },
          "415" : {
            "description" : "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405" : {
            "description" : "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406" : {
            "description" : "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409" : {
            "description" : "Conflict - If a resource being created already exists"
          }
        },
        "parameters" : [ {
          "in" : "header",
          "name" : "Authorization",
          "description" : "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
          "type" : "string",
          "required" : true
        }, {
          "in" : "path",
          "name" : "id",
          "description" : "The Purchase Order ID",
          "type" : "string",
          "required" : true
        }, {
          "in" : "query",
          "name" : "expand",
          "description" : "The expand parameter is used to include related resources in your response. The value of the expand parameter should be in the form ‘resource.property:mode’ where resource is the name of a resource, property is the name of a property of that resource, and mode is either sideload (default if the : part is omitted) or embed. You can include multiple relationships by separating them with ',’. For example, to sideload an invoice’s contact object you will use the following: invoice.contact:sideload.",
          "type" : "string",
          "required" : false
        } ],
        "tags" : [ "purchase-orders" ]
      }
    },
    "/{objectName}" : {
      "get" : {
        "operationId" : "getByObjectName",
        "parameters" : [ {
          "description" : "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
          "in" : "header",
          "name" : "Authorization",
          "required" : true,
          "type" : "string"
        }, {
          "description" : "The name of the object",
          "in" : "path",
          "name" : "objectName",
          "required" : true,
          "type" : "string"
        }, {
          "description" : "The CEQL search expression.",
          "in" : "query",
          "name" : "where",
          "required" : false,
          "type" : "string"
        }, {
          "description" : "The page size. Defaults to 200 if not provided. Maximum of 5000.",
          "format" : "int64",
          "in" : "query",
          "name" : "pageSize",
          "required" : false,
          "type" : "integer"
        }, {
          "description" : "The next page cursor, taken from the response header: `elements-next-page-token`",
          "in" : "query",
          "name" : "nextPage",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK - Everything worked as expected",
            "schema" : {
              "items" : {
                "$ref" : "#/definitions/Object"
              },
              "type" : "array"
            }
          },
          "400" : {
            "description" : "Bad Request - Often due to a missing request parameter"
          },
          "401" : {
            "description" : "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "403" : {
            "description" : "Forbidden - Access to the resource by the provider is forbidden"
          },
          "404" : {
            "description" : "Not found - The requested resource is not found"
          },
          "405" : {
            "description" : "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406" : {
            "description" : "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409" : {
            "description" : "Conflict - If a resource being created already exists"
          },
          "415" : {
            "description" : "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "500" : {
            "description" : "Server error - Something went wrong on the Cloud Elements server"
          },
          "502" : {
            "description" : "Provider server error - Something went wrong on the Provider or Endpoint's server"
          }
        },
        "summary" : "Search for {objectName}",
        "tags" : [ "objectName" ]
      },
      "post" : {
        "operationId" : "createByObjectName",
        "parameters" : [ {
          "description" : "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
          "in" : "header",
          "name" : "Authorization",
          "required" : true,
          "type" : "string"
        }, {
          "description" : "The name of the object",
          "in" : "path",
          "name" : "objectName",
          "required" : true,
          "type" : "string"
        }, {
          "description" : "The {objectName}",
          "in" : "body",
          "name" : "Body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/Object"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK - Everything worked as expected"
          },
          "400" : {
            "description" : "Bad Request - Often due to a missing request parameter"
          },
          "401" : {
            "description" : "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "403" : {
            "description" : "Forbidden - Access to the resource by the provider is forbidden"
          },
          "404" : {
            "description" : "Not found - The requested resource is not found"
          },
          "405" : {
            "description" : "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406" : {
            "description" : "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409" : {
            "description" : "Conflict - If a resource being created already exists"
          },
          "415" : {
            "description" : "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "500" : {
            "description" : "Server error - Something went wrong on the Cloud Elements server"
          },
          "502" : {
            "description" : "Provider server error - Something went wrong on the Provider or Endpoint's server"
          }
        },
        "summary" : "Create an {objectName}",
        "tags" : [ "objectName" ]
      }
    },
    "/{objectName}/{objectId}" : {
      "delete" : {
        "operationId" : "deleteObjectNameByObjectId",
        "parameters" : [ {
          "description" : "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
          "in" : "header",
          "name" : "Authorization",
          "required" : true,
          "type" : "string"
        }, {
          "description" : "The name of the object",
          "in" : "path",
          "name" : "objectName",
          "required" : true,
          "type" : "string"
        }, {
          "description" : "The {objectName} ID",
          "in" : "path",
          "name" : "objectId",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK - Everything worked as expected"
          },
          "400" : {
            "description" : "Bad Request - Often due to a missing request parameter"
          },
          "401" : {
            "description" : "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "403" : {
            "description" : "Forbidden - Access to the resource by the provider is forbidden"
          },
          "404" : {
            "description" : "Not found - The requested resource is not found"
          },
          "405" : {
            "description" : "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406" : {
            "description" : "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409" : {
            "description" : "Conflict - If a resource being created already exists"
          },
          "415" : {
            "description" : "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "500" : {
            "description" : "Server error - Something went wrong on the Cloud Elements server"
          },
          "502" : {
            "description" : "Provider server error - Something went wrong on the Provider or Endpoint's server"
          }
        },
        "summary" : "Delete an {objectName}",
        "tags" : [ "objectName" ]
      },
      "get" : {
        "operationId" : "getObjectNameByObjectId",
        "parameters" : [ {
          "description" : "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
          "in" : "header",
          "name" : "Authorization",
          "required" : true,
          "type" : "string"
        }, {
          "description" : "The name of the object",
          "in" : "path",
          "name" : "objectName",
          "required" : true,
          "type" : "string"
        }, {
          "description" : "The {objectName} ID",
          "in" : "path",
          "name" : "objectId",
          "required" : true,
          "type" : "string"
        } ],
        "produces" : [ "application/json", "application/pdf" ],
        "responses" : {
          "200" : {
            "description" : "OK - Everything worked as expected",
            "schema" : {
              "$ref" : "#/definitions/Object"
            }
          },
          "400" : {
            "description" : "Bad Request - Often due to a missing request parameter"
          },
          "401" : {
            "description" : "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "403" : {
            "description" : "Forbidden - Access to the resource by the provider is forbidden"
          },
          "404" : {
            "description" : "Not found - The requested resource is not found"
          },
          "405" : {
            "description" : "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406" : {
            "description" : "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409" : {
            "description" : "Conflict - If a resource being created already exists"
          },
          "415" : {
            "description" : "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "500" : {
            "description" : "Server error - Something went wrong on the Cloud Elements server"
          },
          "502" : {
            "description" : "Provider server error - Something went wrong on the Provider or Endpoint's server"
          }
        },
        "summary" : "Retrieve an {objectName}",
        "tags" : [ "objectName" ]
      },
      "patch" : {
        "operationId" : "updateObjectNameByObjectId",
        "parameters" : [ {
          "description" : "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
          "in" : "header",
          "name" : "Authorization",
          "required" : true,
          "type" : "string"
        }, {
          "description" : "The name of the object",
          "in" : "path",
          "name" : "objectName",
          "required" : true,
          "type" : "string"
        }, {
          "description" : "The {objectName} ID",
          "in" : "path",
          "name" : "objectId",
          "required" : true,
          "type" : "string"
        }, {
          "description" : "The {objectName}",
          "in" : "body",
          "name" : "Body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/Object"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK - Everything worked as expected",
            "schema" : {
              "$ref" : "#/definitions/Object"
            }
          },
          "400" : {
            "description" : "Bad Request - Often due to a missing request parameter"
          },
          "401" : {
            "description" : "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "403" : {
            "description" : "Forbidden - Access to the resource by the provider is forbidden"
          },
          "404" : {
            "description" : "Not found - The requested resource is not found"
          },
          "405" : {
            "description" : "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406" : {
            "description" : "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409" : {
            "description" : "Conflict - If a resource being created already exists"
          },
          "415" : {
            "description" : "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "500" : {
            "description" : "Server error - Something went wrong on the Cloud Elements server"
          },
          "502" : {
            "description" : "Provider server error - Something went wrong on the Provider or Endpoint's server"
          }
        },
        "summary" : "Update an {objectName}",
        "tags" : [ "objectName" ]
      },
      "put" : {
        "operationId" : "replaceObjectNameByObjectId",
        "parameters" : [ {
          "description" : "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
          "in" : "header",
          "name" : "Authorization",
          "required" : true,
          "type" : "string"
        }, {
          "description" : "The name of the object",
          "in" : "path",
          "name" : "objectName",
          "required" : true,
          "type" : "string"
        }, {
          "description" : "The {objectName} ID",
          "in" : "path",
          "name" : "objectId",
          "required" : true,
          "type" : "string"
        }, {
          "description" : "The {objectName}",
          "in" : "body",
          "name" : "Body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/Object"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK - Everything worked as expected",
            "schema" : {
              "$ref" : "#/definitions/Object"
            }
          },
          "400" : {
            "description" : "Bad Request - Often due to a missing request parameter"
          },
          "401" : {
            "description" : "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "403" : {
            "description" : "Forbidden - Access to the resource by the provider is forbidden"
          },
          "404" : {
            "description" : "Not found - The requested resource is not found"
          },
          "405" : {
            "description" : "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406" : {
            "description" : "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409" : {
            "description" : "Conflict - If a resource being created already exists"
          },
          "415" : {
            "description" : "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "500" : {
            "description" : "Server error - Something went wrong on the Cloud Elements server"
          },
          "502" : {
            "description" : "Provider server error - Something went wrong on the Provider or Endpoint's server"
          }
        },
        "summary" : "Update an {objectName}",
        "tags" : [ "objectName" ]
      }
    },
    "/{objectName}/{objectId}/{childObjectName}" : {
      "get" : {
        "operationId" : "getObjectNameByChildObjectName",
        "parameters" : [ {
          "description" : "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
          "in" : "header",
          "name" : "Authorization",
          "required" : true,
          "type" : "string"
        }, {
          "description" : "The name of the object",
          "in" : "path",
          "name" : "objectName",
          "required" : true,
          "type" : "string"
        }, {
          "description" : "The {objectName} ID",
          "in" : "path",
          "name" : "objectId",
          "required" : true,
          "type" : "string"
        }, {
          "description" : "The name of the childObjectName",
          "in" : "path",
          "name" : "childObjectName",
          "required" : true,
          "type" : "string"
        }, {
          "description" : "The CEQL search expression.",
          "in" : "query",
          "name" : "where",
          "required" : false,
          "type" : "string"
        }, {
          "description" : "The page size. Defaults to 200 if not provided. Maximum of 5000.",
          "format" : "int64",
          "in" : "query",
          "name" : "pageSize",
          "required" : false,
          "type" : "integer"
        }, {
          "description" : "The next page cursor, taken from the response header: `elements-next-page-token`",
          "in" : "query",
          "name" : "nextPage",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK - Everything worked as expected",
            "schema" : {
              "items" : {
                "$ref" : "#/definitions/Object"
              },
              "type" : "array"
            }
          },
          "400" : {
            "description" : "Bad Request - Often due to a missing request parameter"
          },
          "401" : {
            "description" : "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "403" : {
            "description" : "Forbidden - Access to the resource by the provider is forbidden"
          },
          "404" : {
            "description" : "Not found - The requested resource is not found"
          },
          "405" : {
            "description" : "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406" : {
            "description" : "Not acceptable - The response content type does not match the &quot;Accept&quot; header value"
          },
          "409" : {
            "description" : "Conflict - If a resource being created already exists"
          },
          "415" : {
            "description" : "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "500" : {
            "description" : "Server error - Something went wrong on the Cloud Elements server"
          },
          "502" : {
            "description" : "Provider server error - Something went wrong on the Provider or Endpoint's server"
          }
        },
        "summary" : "Search for {childObjectName}",
        "tags" : [ "objectName" ]
      },
      "post" : {
        "operationId" : "createObjectNameByChildObjectName",
        "parameters" : [ {
          "description" : "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
          "in" : "header",
          "name" : "Authorization",
          "required" : true,
          "type" : "string"
        }, {
          "description" : "The name of the object",
          "in" : "path",
          "name" : "objectName",
          "required" : true,
          "type" : "string"
        }, {
          "description" : "The {objectName} ID",
          "in" : "path",
          "name" : "objectId",
          "required" : true,
          "type" : "string"
        }, {
          "description" : "The name of the object",
          "in" : "path",
          "name" : "childObjectName",
          "required" : true,
          "type" : "string"
        }, {
          "description" : "The {childObjectName}",
          "in" : "body",
          "name" : "Body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/Object"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK - Everything worked as expected"
          },
          "400" : {
            "description" : "Bad Request - Often due to a missing request parameter"
          },
          "401" : {
            "description" : "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "403" : {
            "description" : "Forbidden - Access to the resource by the provider is forbidden"
          },
          "404" : {
            "description" : "Not found - The requested resource is not found"
          },
          "405" : {
            "description" : "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406" : {
            "description" : "Not acceptable - The response content type does not match the &quot;Accept&quot; header value"
          },
          "409" : {
            "description" : "Conflict - If a resource being created already exists"
          },
          "415" : {
            "description" : "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "500" : {
            "description" : "Server error - Something went wrong on the Cloud Elements server"
          },
          "502" : {
            "description" : "Provider server error - Something went wrong on the Provider or Endpoint's server"
          }
        },
        "summary" : "Create an {childObjectName}",
        "tags" : [ "objectName" ]
      }
    },
    "/{objectName}/{objectId}/{childObjectName}/{childObjectId}" : {
      "delete" : {
        "operationId" : "deleteObjectNameByChildObjectId",
        "parameters" : [ {
          "description" : "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
          "in" : "header",
          "name" : "Authorization",
          "required" : true,
          "type" : "string"
        }, {
          "description" : "The name of the object",
          "in" : "path",
          "name" : "objectName",
          "required" : true,
          "type" : "string"
        }, {
          "description" : "The name of the childObjectName",
          "in" : "path",
          "name" : "childObjectName",
          "required" : true,
          "type" : "string"
        }, {
          "description" : "The {objectName} ID",
          "in" : "path",
          "name" : "objectId",
          "required" : true,
          "type" : "string"
        }, {
          "description" : "The {childObjectName} ID",
          "in" : "path",
          "name" : "childObjectId",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK - Everything worked as expected"
          },
          "400" : {
            "description" : "Bad Request - Often due to a missing request parameter"
          },
          "401" : {
            "description" : "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "403" : {
            "description" : "Forbidden - Access to the resource by the provider is forbidden"
          },
          "404" : {
            "description" : "Not found - The requested resource is not found"
          },
          "405" : {
            "description" : "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406" : {
            "description" : "Not acceptable - The response content type does not match the &quot;Accept&quot; header value"
          },
          "409" : {
            "description" : "Conflict - If a resource being created already exists"
          },
          "415" : {
            "description" : "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "500" : {
            "description" : "Server error - Something went wrong on the Cloud Elements server"
          },
          "502" : {
            "description" : "Provider server error - Something went wrong on the Provider or Endpoint's server"
          }
        },
        "summary" : "Delete an {childObjectName}",
        "tags" : [ "objectName" ]
      },
      "get" : {
        "operationId" : "getObjectNameByChildObjectId",
        "parameters" : [ {
          "description" : "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
          "in" : "header",
          "name" : "Authorization",
          "required" : true,
          "type" : "string"
        }, {
          "description" : "The name of the object",
          "in" : "path",
          "name" : "objectName",
          "required" : true,
          "type" : "string"
        }, {
          "description" : "The name of the childObjectName",
          "in" : "path",
          "name" : "childObjectName",
          "required" : true,
          "type" : "string"
        }, {
          "description" : "The {objectName} ID",
          "in" : "path",
          "name" : "objectId",
          "required" : true,
          "type" : "string"
        }, {
          "description" : "The {childObjectName} ID",
          "in" : "path",
          "name" : "childObjectId",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK - Everything worked as expected",
            "schema" : {
              "$ref" : "#/definitions/Object"
            }
          },
          "400" : {
            "description" : "Bad Request - Often due to a missing request parameter"
          },
          "401" : {
            "description" : "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "403" : {
            "description" : "Forbidden - Access to the resource by the provider is forbidden"
          },
          "404" : {
            "description" : "Not found - The requested resource is not found"
          },
          "405" : {
            "description" : "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406" : {
            "description" : "Not acceptable - The response content type does not match the &quot;Accept&quot; header value"
          },
          "409" : {
            "description" : "Conflict - If a resource being created already exists"
          },
          "415" : {
            "description" : "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "500" : {
            "description" : "Server error - Something went wrong on the Cloud Elements server"
          },
          "502" : {
            "description" : "Provider server error - Something went wrong on the Provider or Endpoint's server"
          }
        },
        "summary" : "Retrieve an {childObjectName}",
        "tags" : [ "objectName" ]
      },
      "patch" : {
        "operationId" : "updateObjectNameByChildObjectId",
        "parameters" : [ {
          "description" : "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
          "in" : "header",
          "name" : "Authorization",
          "required" : true,
          "type" : "string"
        }, {
          "description" : "The name of the object",
          "in" : "path",
          "name" : "objectName",
          "required" : true,
          "type" : "string"
        }, {
          "description" : "The name of the childObjectName",
          "in" : "path",
          "name" : "childObjectName",
          "required" : true,
          "type" : "string"
        }, {
          "description" : "The {objectName} ID",
          "in" : "path",
          "name" : "objectId",
          "required" : true,
          "type" : "string"
        }, {
          "description" : "The {childObjectName} ID",
          "in" : "path",
          "name" : "childObjectId",
          "required" : true,
          "type" : "string"
        }, {
          "description" : "The {objectName}",
          "in" : "body",
          "name" : "Body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/Object"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK - Everything worked as expected",
            "schema" : {
              "$ref" : "#/definitions/Object"
            }
          },
          "400" : {
            "description" : "Bad Request - Often due to a missing request parameter"
          },
          "401" : {
            "description" : "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "403" : {
            "description" : "Forbidden - Access to the resource by the provider is forbidden"
          },
          "404" : {
            "description" : "Not found - The requested resource is not found"
          },
          "405" : {
            "description" : "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406" : {
            "description" : "Not acceptable - The response content type does not match the &quot;Accept&quot; header value"
          },
          "409" : {
            "description" : "Conflict - If a resource being created already exists"
          },
          "415" : {
            "description" : "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "500" : {
            "description" : "Server error - Something went wrong on the Cloud Elements server"
          },
          "502" : {
            "description" : "Provider server error - Something went wrong on the Provider or Endpoint's server"
          }
        },
        "summary" : "Update an {childObjectName}",
        "tags" : [ "objectName" ]
      },
      "put" : {
        "operationId" : "replaceObjectNameByChildObjectId",
        "parameters" : [ {
          "description" : "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
          "in" : "header",
          "name" : "Authorization",
          "required" : true,
          "type" : "string"
        }, {
          "description" : "The name of the object",
          "in" : "path",
          "name" : "objectName",
          "required" : true,
          "type" : "string"
        }, {
          "description" : "The name of the childObjectName",
          "in" : "path",
          "name" : "childObjectName",
          "required" : true,
          "type" : "string"
        }, {
          "description" : "The {objectName} ID",
          "in" : "path",
          "name" : "objectId",
          "required" : true,
          "type" : "string"
        }, {
          "description" : "The {childObjectName} ID",
          "in" : "path",
          "name" : "childObjectId",
          "required" : true,
          "type" : "string"
        }, {
          "description" : "The {objectName}",
          "in" : "body",
          "name" : "Body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/Object"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK - Everything worked as expected",
            "schema" : {
              "$ref" : "#/definitions/Object"
            }
          },
          "400" : {
            "description" : "Bad Request - Often due to a missing request parameter"
          },
          "401" : {
            "description" : "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "403" : {
            "description" : "Forbidden - Access to the resource by the provider is forbidden"
          },
          "404" : {
            "description" : "Not found - The requested resource is not found"
          },
          "405" : {
            "description" : "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406" : {
            "description" : "Not acceptable - The response content type does not match the &quot;Accept&quot; header value"
          },
          "409" : {
            "description" : "Conflict - If a resource being created already exists"
          },
          "415" : {
            "description" : "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "500" : {
            "description" : "Server error - Something went wrong on the Cloud Elements server"
          },
          "502" : {
            "description" : "Provider server error - Something went wrong on the Provider or Endpoint's server"
          }
        },
        "summary" : "Update an {childObjectName}",
        "tags" : [ "objectName" ]
      }
    }
  },
  "host" : "localhost:8080",
  "schemes" : [ "http" ],
  "definitions" : {
    "invoiceLinesRequest" : {
      "properties" : {
        "description" : {
          "type" : "string",
          "x-samplevalue" : "Hello World"
        },
        "invoiceId" : {
          "type" : "string",
          "x-samplevalue" : "6rvfpoFoTDmyE9FfYD2oNA"
        },
        "productId" : {
          "type" : "string",
          "x-samplevalue" : "bvQg1kHnTR2GlzuB3hZl6A"
        },
        "quantity" : {
          "format" : "int32",
          "type" : "integer",
          "x-samplevalue" : 1
        },
        "unitPrice" : {
          "format" : "int32",
          "type" : "integer",
          "x-samplevalue" : 10
        }
      },
      "title" : "invoiceLines",
      "type" : "object"
    },
    "swaggerdefinitions" : {
      "x-has-customfields" : false,
      "type" : "object",
      "title" : "definitions",
      "properties" : {
        "definition-name" : {
          "$ref" : "#/definitions/swaggerdefinition-name"
        }
      }
    },
    "bankPaymentsObject" : {
      "properties" : {
        "cashAccountId" : {
          "type" : "string",
          "x-samplevalue" : "DfnBfZh1RPSpEhVDrAAupA"
        },
        "cashAmount" : {
          "format" : "double",
          "type" : "number",
          "x-samplevalue" : 4.57
        },
        "cashExchangeRate" : {
          "format" : "double",
          "type" : "number",
          "x-samplevalue" : 0.152333
        },
        "cashSide" : {
          "type" : "string",
          "x-samplevalue" : "debit"
        },
        "contactId" : {
          "type" : "string",
          "x-samplevalue" : "HG4O7YcPT4eVcmBpRL8Ygw"
        },
        "createdTime" : {
          "format" : "date-time",
          "type" : "string",
          "x-mask" : "yyyy-MM-dd'T'HH:mm:ss",
          "x-samplevalue" : "2019-02-07T09:47:32"
        },
        "entryDate" : {
          "format" : "date",
          "type" : "string",
          "x-mask" : "yyyy-MM-dd",
          "x-samplevalue" : "2019-02-07"
        },
        "id" : {
          "type" : "string",
          "x-samplevalue" : "BAv8nvEGTNyKNwq0R0upqQ"
        },
        "isVoided" : {
          "type" : "boolean",
          "x-samplevalue" : false
        },
        "organizationId" : {
          "type" : "string",
          "x-samplevalue" : "eShN88ftTraBz2YUJVAjIw"
        },
        "subjectCurrencyId" : {
          "type" : "string",
          "x-samplevalue" : "DKK"
        }
      },
      "title" : "bankPayments",
      "type" : "object"
    },
    "swaggerdefinition-name" : {
      "x-has-customfields" : false,
      "type" : "object",
      "title" : "definition-name",
      "properties" : {
        "properties" : {
          "$ref" : "#/definitions/swaggerproperties"
        }
      }
    },
    "swaggerparameters" : {
      "x-has-customfields" : false,
      "title" : "parameters",
      "properties" : {
        "schema" : {
          "$ref" : "#/definitions/swaggerparametersschema"
        },
        "in" : {
          "x-samplevalue" : "header",
          "type" : "string"
        },
        "name" : {
          "x-samplevalue" : "Authorization",
          "type" : "string"
        },
        "description" : {
          "x-samplevalue" : "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
          "type" : "string"
        },
        "type" : {
          "x-samplevalue" : "string",
          "type" : "string"
        },
        "required" : {
          "x-samplevalue" : true,
          "type" : "boolean"
        }
      },
      "type" : "object"
    },
    "accountGroupsAccountGroup" : {
      "properties" : {
        "id" : {
          "type" : "string",
          "x-samplevalue" : "E9GMjZFRQdaukaLV37YgAg"
        },
        "name" : {
          "type" : "string",
          "x-samplevalue" : "Assets"
        },
        "organizationId" : {
          "type" : "string",
          "x-samplevalue" : "eShN88ftTraBz2YUJVAjIw"
        },
        "priority" : {
          "format" : "int32",
          "type" : "integer",
          "x-samplevalue" : 11
        },
        "type" : {
          "type" : "string",
          "x-samplevalue" : "header"
        }
      },
      "title" : "accountGroup",
      "type" : "object"
    },
    "invoices" : {
      "properties" : {
        "amount" : {
          "type" : "string"
        },
        "approvedTime" : {
          "format" : "date-time",
          "type" : "string",
          "x-mask" : "yyyy-MM-dd'T'HH:mm:ss",
          "x-samplevalue" : "2019-02-14T18:57:59"
        },
        "attContactPersonId" : {
          "type" : "string"
        },
        "balance" : {
          "format" : "int32",
          "type" : "integer",
          "x-samplevalue" : 0
        },
        "contactId" : {
          "type" : "string",
          "x-samplevalue" : "sKsw5aJHQ6iH1NwBEiHqmQ"
        },
        "contactMessage" : {
          "type" : "string"
        },
        "createdTime" : {
          "format" : "date-time",
          "type" : "string",
          "x-mask" : "yyyy-MM-dd'T'HH:mm:ss",
          "x-samplevalue" : "2019-02-14T18:57:59"
        },
        "creditedInvoiceId" : {
          "type" : "string"
        },
        "currencyId" : {
          "type" : "string",
          "x-samplevalue" : "USD"
        },
        "downloadUrl" : {
          "type" : "string",
          "x-samplevalue" : "https://api.billyapp.com/v2/downloads/invoices/eBCFmZiYQaysxvIuqN7gkw/ctwKGiViSuq19lTW1d4ykA/f07d1e6ed4b59b6b5d4fc2871c4371dc79f8d3f7ebc2fe6834/invoice-no-40.pdf"
        },
        "dueDate" : {
          "format" : "date",
          "type" : "string",
          "x-mask" : "yyyy-MM-dd",
          "x-samplevalue" : "2019-02-06"
        },
        "entryDate" : {
          "format" : "date",
          "type" : "string",
          "x-mask" : "yyyy-MM-dd",
          "x-samplevalue" : "2019-01-07"
        },
        "exchangeRate" : {
          "format" : "int32",
          "type" : "integer",
          "x-samplevalue" : 1
        },
        "id" : {
          "type" : "string",
          "x-samplevalue" : "eBCFmZiYQaysxvIuqN7gkw"
        },
        "invoiceNo" : {
          "type" : "string",
          "x-samplevalue" : "40"
        },
        "isPaid" : {
          "type" : "boolean",
          "x-samplevalue" : true
        },
        "lineDescription" : {
          "type" : "string",
          "x-samplevalue" : "TestProduct: string"
        },
        "orderNo" : {
          "type" : "string"
        },
        "organizationId" : {
          "type" : "string",
          "x-samplevalue" : "ctwKGiViSuq19lTW1d4ykA"
        },
        "paymentMethods" : {
          "items" : {
            "$ref" : "#/definitions/invoicesPaymentMethods"
          },
          "type" : "array"
        },
        "paymentTermsDays" : {
          "format" : "int32",
          "type" : "integer",
          "x-samplevalue" : 30
        },
        "paymentTermsMode" : {
          "type" : "string",
          "x-samplevalue" : "net"
        },
        "recurringInvoiceId" : {
          "type" : "string"
        },
        "sentState" : {
          "type" : "string",
          "x-samplevalue" : "sent"
        },
        "state" : {
          "type" : "string",
          "x-samplevalue" : "approved"
        },
        "tax" : {
          "type" : "string"
        },
        "taxMode" : {
          "type" : "string",
          "x-samplevalue" : "excl"
        },
        "templateId" : {
          "type" : "string",
          "x-samplevalue" : "ae24b4e9-919c-49a2-adbd-c4b66a325533"
        },
        "type" : {
          "type" : "string",
          "x-samplevalue" : "invoice"
        }
      },
      "title" : "invoices",
      "type" : "object"
    },
    "invoiceLines" : {
      "properties" : {
        "amount" : {
          "format" : "int32",
          "type" : "integer",
          "x-samplevalue" : 10
        },
        "description" : {
          "type" : "string",
          "x-samplevalue" : "Hello World2"
        },
        "discountMode" : {
          "type" : "string"
        },
        "discountText" : {
          "type" : "string"
        },
        "discountValue" : {
          "type" : "string"
        },
        "id" : {
          "type" : "string",
          "x-samplevalue" : "lAcjOsAZRBW3eUUgAP3AlQ"
        },
        "invoiceId" : {
          "type" : "string",
          "x-samplevalue" : "6rvfpoFoTDmyE9FfYD2oNA"
        },
        "priority" : {
          "format" : "int32",
          "type" : "integer",
          "x-samplevalue" : 0
        },
        "productId" : {
          "type" : "string",
          "x-samplevalue" : "bvQg1kHnTR2GlzuB3hZl6A"
        },
        "quantity" : {
          "format" : "int32",
          "type" : "integer",
          "x-samplevalue" : 1
        },
        "tax" : {
          "format" : "int32",
          "type" : "integer",
          "x-samplevalue" : 0
        },
        "taxRateId" : {
          "type" : "string"
        },
        "unitPrice" : {
          "format" : "int32",
          "type" : "integer",
          "x-samplevalue" : 10
        }
      },
      "title" : "invoiceLines",
      "type" : "object"
    },
    "accountNaturesObject" : {
      "properties" : {
        "id" : {
          "type" : "string",
          "x-samplevalue" : "revenue"
        },
        "name" : {
          "type" : "string",
          "x-samplevalue" : "Income"
        },
        "normalBalance" : {
          "type" : "string",
          "x-samplevalue" : "credit"
        },
        "reportType" : {
          "type" : "string",
          "x-samplevalue" : "incomeStatement"
        }
      },
      "title" : "accountNatures",
      "type" : "object"
    },
    "accountNaturesMeta" : {
      "properties" : {
        "statusCode" : {
          "format" : "int32",
          "type" : "integer",
          "x-samplevalue" : 200
        },
        "success" : {
          "type" : "boolean",
          "x-samplevalue" : true
        },
        "time" : {
          "format" : "double",
          "type" : "number",
          "x-samplevalue" : 0.041490077972412
        }
      },
      "title" : "meta",
      "type" : "object"
    },
    "swagger-contacts-path" : {
      "x-has-customfields" : false,
      "type" : "object",
      "title" : "/contacts",
      "properties" : {
        "post" : {
          "$ref" : "#/definitions/swaggerpost"
        }
      }
    },
    "invoicesDeletedRecords" : {
      "properties" : {
        "invoiceLines" : {
          "items" : {
            "type" : "string"
          },
          "type" : "array",
          "x-samplevalue" : [ "y2y4MtHSRfSVZa0Bmt4buA" ]
        },
        "invoices" : {
          "items" : {
            "type" : "string"
          },
          "type" : "array",
          "x-samplevalue" : [ "dAk7eRScS5KEDSxI7axYgA" ]
        }
      },
      "title" : "deletedRecords",
      "type" : "object"
    },
    "bankPayments" : {
      "properties" : {
        "cashAccountId" : {
          "type" : "string",
          "x-samplevalue" : "FsrL673OQtjVApFskCBUcA"
        },
        "cashAmount" : {
          "format" : "int32",
          "type" : "integer",
          "x-samplevalue" : 200
        },
        "cashExchangeRate" : {
          "format" : "int32",
          "type" : "integer",
          "x-samplevalue" : 1
        },
        "cashSide" : {
          "type" : "string",
          "x-samplevalue" : "credit"
        },
        "contactId" : {
          "type" : "string",
          "x-samplevalue" : "VYownLprQLqk5QmQ8fCdDw"
        },
        "createdTime" : {
          "format" : "date-time",
          "type" : "string",
          "x-mask" : "yyyy-MM-dd'T'HH:mm:ss",
          "x-samplevalue" : "2019-02-20T16:31:27"
        },
        "entryDate" : {
          "format" : "date",
          "type" : "string",
          "x-mask" : "yyyy-MM-dd",
          "x-samplevalue" : "2019-01-10"
        },
        "feeAccountId" : {
          "type" : "string"
        },
        "feeAmount" : {
          "type" : "string"
        },
        "id" : {
          "type" : "string",
          "x-samplevalue" : "oHeMGF0MQWGbkwBO6paAXA"
        },
        "isVoided" : {
          "type" : "boolean",
          "x-samplevalue" : false
        },
        "organizationId" : {
          "type" : "string",
          "x-samplevalue" : "ctwKGiViSuq19lTW1d4ykA"
        },
        "subjectCurrencyId" : {
          "type" : "string",
          "x-samplevalue" : "USD"
        }
      },
      "title" : "bankPayments",
      "type" : "object"
    },
    "productsRequest" : {
      "properties" : {
        "accountId" : {
          "type" : "string",
          "x-samplevalue" : "CsrC6dalRPWVMLwujtoFJA"
        },
        "description" : {
          "type" : "string",
          "x-samplevalue" : "Testing Purposes"
        },
        "id" : {
          "type" : "string",
          "x-samplevalue" : "TaaxfdfCTjGyz4vd8vIsdQ"
        },
        "imageId" : {
          "type" : "string"
        },
        "imageUrl" : {
          "type" : "string"
        },
        "inventoryAccountId" : {
          "type" : "string"
        },
        "isArchived" : {
          "type" : "boolean",
          "x-samplevalue" : false
        },
        "isInInventory" : {
          "type" : "boolean",
          "x-samplevalue" : false
        },
        "name" : {
          "type" : "string",
          "x-samplevalue" : "TestProduct"
        },
        "organizationId" : {
          "type" : "string",
          "x-samplevalue" : "ctwKGiViSuq19lTW1d4ykA"
        },
        "productNo" : {
          "type" : "string"
        },
        "salesTaxRulesetId" : {
          "type" : "string",
          "x-samplevalue" : "B2uOePXQTfWcDorx0I0HfA"
        },
        "suppliersProductNo" : {
          "type" : "string"
        }
      },
      "title" : "productsRequest",
      "type" : "object"
    },
    "swagger200" : {
      "x-has-customfields" : false,
      "type" : "object",
      "title" : "200",
      "properties" : {
        "schema" : {
          "$ref" : "#/definitions/swaggerschema"
        },
        "description" : {
          "x-samplevalue" : "OK - Everything worked as expected",
          "type" : "string"
        }
      }
    },
    "accountsObject" : {
      "properties" : {
        "accountNo" : {
          "format" : "int32",
          "type" : "integer",
          "x-samplevalue" : 2000
        },
        "currencyId" : {
          "type" : "string",
          "x-samplevalue" : "USD"
        },
        "description" : {
          "type" : "string",
          "x-samplevalue" : "Bills received from your vendors and entered into Billy for payment that have not been paid yet. {System Account}"
        },
        "groupId" : {
          "type" : "string",
          "x-samplevalue" : "0mxNMfNWSL6FZl3G7Rxsig"
        },
        "id" : {
          "type" : "string",
          "x-samplevalue" : "P0bq8FWwRZtutye3yRX7OA"
        },
        "isArchived" : {
          "type" : "boolean",
          "x-samplevalue" : false
        },
        "isBankAccount" : {
          "type" : "boolean",
          "x-samplevalue" : false
        },
        "isPaymentEnabled" : {
          "type" : "boolean",
          "x-samplevalue" : false
        },
        "name" : {
          "type" : "string",
          "x-samplevalue" : "Accounts Payable"
        },
        "natureId" : {
          "type" : "string",
          "x-samplevalue" : "liability"
        },
        "organizationId" : {
          "type" : "string",
          "x-samplevalue" : "eShN88ftTraBz2YUJVAjIw"
        },
        "systemRole" : {
          "type" : "string",
          "x-samplevalue" : "accountsPayable"
        }
      },
      "title" : "accounts",
      "type" : "object"
    },
    "swagger400" : {
      "x-has-customfields" : false,
      "type" : "object",
      "title" : "400",
      "properties" : {
        "description" : {
          "x-samplevalue" : "Bad Request - Often due to a missing request parameter",
          "type" : "string"
        }
      }
    },
    "swagger401" : {
      "x-has-customfields" : false,
      "type" : "object",
      "title" : "401",
      "properties" : {
        "description" : {
          "x-samplevalue" : "Unauthorized - An invalid element token, user secret and/or org secret provided",
          "type" : "string"
        }
      }
    },
    "swagger403" : {
      "x-has-customfields" : false,
      "type" : "object",
      "title" : "403",
      "properties" : {
        "description" : {
          "x-samplevalue" : "Forbidden - Access to the resource by the provider is forbidden",
          "type" : "string"
        }
      }
    },
    "accountNaturesAccountNature" : {
      "properties" : {
        "id" : {
          "type" : "string",
          "x-samplevalue" : "revenue"
        },
        "name" : {
          "type" : "string",
          "x-samplevalue" : "Income"
        },
        "normalBalance" : {
          "type" : "string",
          "x-samplevalue" : "credit"
        },
        "reportType" : {
          "type" : "string",
          "x-samplevalue" : "incomeStatement"
        }
      },
      "title" : "accountNature",
      "type" : "object"
    },
    "swagger404" : {
      "x-has-customfields" : false,
      "type" : "object",
      "title" : "404",
      "properties" : {
        "description" : {
          "x-samplevalue" : "Not found - The requested resource is not found",
          "type" : "string"
        }
      }
    },
    "swagger405" : {
      "x-has-customfields" : false,
      "type" : "object",
      "title" : "405",
      "properties" : {
        "description" : {
          "x-samplevalue" : "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected",
          "type" : "string"
        }
      }
    },
    "swaggerDocs" : {
      "x-has-customfields" : false,
      "title" : "swaggerDocs",
      "properties" : {
        "basePath" : {
          "x-samplevalue" : "/elements/api-v2/hubs/crm",
          "type" : "string"
        },
        "paths" : {
          "$ref" : "#/definitions/swaggerpaths"
        },
        "host" : {
          "x-samplevalue" : "localhost:5050",
          "type" : "string"
        },
        "schemes" : {
          "x-samplevalue" : [ "http" ],
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        },
        "definitions" : {
          "$ref" : "#/definitions/swaggerdefinitions"
        },
        "swagger" : {
          "x-samplevalue" : "2.0",
          "type" : "string"
        },
        "info" : {
          "$ref" : "#/definitions/swaggerinfo"
        },
        "tags" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/swaggertags"
          }
        }
      },
      "type" : "object"
    },
    "swaggercontact" : {
      "x-has-customfields" : false,
      "type" : "object",
      "title" : "contact",
      "properties" : {
        "email" : {
          "x-samplevalue" : "support@cloud-elements.com",
          "type" : "string"
        }
      }
    },
    "invoiceLinesObject" : {
      "properties" : {
        "amount" : {
          "format" : "int32",
          "type" : "integer",
          "x-samplevalue" : 10
        },
        "description" : {
          "type" : "string"
        },
        "discountMode" : {
          "type" : "string"
        },
        "discountText" : {
          "type" : "string"
        },
        "discountValue" : {
          "type" : "string"
        },
        "id" : {
          "type" : "string",
          "x-samplevalue" : "AeIyvPCLREylYLKisQAT6g"
        },
        "invoiceId" : {
          "type" : "string",
          "x-samplevalue" : "6rvfpoFoTDmyE9FfYD2oNA"
        },
        "priority" : {
          "format" : "int32",
          "type" : "integer",
          "x-samplevalue" : 0
        },
        "productId" : {
          "type" : "string",
          "x-samplevalue" : "bvQg1kHnTR2GlzuB3hZl6A"
        },
        "quantity" : {
          "format" : "int32",
          "type" : "integer",
          "x-samplevalue" : 1
        },
        "tax" : {
          "format" : "int32",
          "type" : "integer",
          "x-samplevalue" : 0
        },
        "taxRateId" : {
          "type" : "string"
        },
        "unitPrice" : {
          "format" : "int32",
          "type" : "integer",
          "x-samplevalue" : 10
        }
      },
      "title" : "invoiceLines",
      "type" : "object"
    },
    "contactsRequest" : {
      "properties" : {
        "accessCode" : {
          "type" : "string",
          "x-samplevalue" : "Kkg81pyyp9kZmra9"
        },
        "cityId" : {
          "type" : "string",
          "x-samplevalue" : "us_co_denver"
        },
        "cityText" : {
          "type" : "string"
        },
        "contactNo" : {
          "type" : "string"
        },
        "countryId" : {
          "type" : "string",
          "x-samplevalue" : "US"
        },
        "currencyId" : {
          "type" : "string"
        },
        "ean" : {
          "type" : "string"
        },
        "emailAttachmentDeliveryMode" : {
          "type" : "string"
        },
        "fax" : {
          "type" : "string"
        },
        "isArchived" : {
          "type" : "boolean",
          "x-samplevalue" : false
        },
        "isCustomer" : {
          "type" : "boolean",
          "x-samplevalue" : false
        },
        "isSalesTaxExempt" : {
          "type" : "boolean",
          "x-samplevalue" : false
        },
        "isSupplier" : {
          "type" : "boolean",
          "x-samplevalue" : true
        },
        "localeId" : {
          "type" : "string"
        },
        "name" : {
          "type" : "string",
          "x-samplevalue" : "Test Company"
        },
        "organizationId" : {
          "type" : "string",
          "x-samplevalue" : "ctwKGiViSuq19lTW1d4ykA"
        },
        "paymentTermsDays" : {
          "type" : "string"
        },
        "paymentTermsMode" : {
          "type" : "string"
        },
        "phone" : {
          "type" : "string",
          "x-samplevalue" : "123-456-7890"
        },
        "registrationNo" : {
          "type" : "string"
        },
        "stateId" : {
          "type" : "string",
          "x-samplevalue" : "us_co"
        },
        "stateText" : {
          "type" : "string"
        },
        "street" : {
          "type" : "string",
          "x-samplevalue" : "123 Evergreen Drive"
        },
        "type" : {
          "type" : "string",
          "x-samplevalue" : "company"
        },
        "zipcodeId" : {
          "type" : "string",
          "x-samplevalue" : "us_80209"
        },
        "zipcodeText" : {
          "type" : "string"
        }
      },
      "title" : "contactsRequest",
      "type" : "object"
    },
    "journalEntriesObject" : {
      "properties" : {
        "createdTime" : {
          "format" : "date-time",
          "type" : "string",
          "x-mask" : "yyyy-MM-dd'T'HH:mm:ss",
          "x-samplevalue" : "2019-02-07T09:59:49"
        },
        "daybookId" : {
          "type" : "string",
          "x-samplevalue" : "ow9j5rAzRjepZBIiupB7XQ"
        },
        "entryDate" : {
          "format" : "date",
          "type" : "string",
          "x-mask" : "yyyy-MM-dd",
          "x-samplevalue" : "2019-02-07"
        },
        "id" : {
          "type" : "string",
          "x-samplevalue" : "89vXt7doTYKBoCEGNxDKBA"
        },
        "organizationId" : {
          "type" : "string",
          "x-samplevalue" : "eShN88ftTraBz2YUJVAjIw"
        },
        "priority" : {
          "format" : "int32",
          "type" : "integer",
          "x-samplevalue" : 1
        },
        "state" : {
          "type" : "string",
          "x-samplevalue" : "draft"
        },
        "type" : {
          "type" : "string",
          "x-samplevalue" : "entry"
        },
        "voucherNo" : {
          "type" : "string",
          "x-samplevalue" : "1"
        }
      },
      "title" : "journalEntries",
      "type" : "object"
    },
    "swagger406" : {
      "x-has-customfields" : false,
      "type" : "object",
      "title" : "406",
      "properties" : {
        "description" : {
          "x-samplevalue" : "Not acceptable - The response content type does not match the 'Accept' header value",
          "type" : "string"
        }
      }
    },
    "swaggerdefinition-property" : {
      "x-has-customfields" : false,
      "type" : "object",
      "title" : "#/definitions/definition-property",
      "properties" : {
        "type" : {
          "x-samplevalue" : "string",
          "type" : "string"
        }
      }
    },
    "Object" : {
      "description" : "Fields for the object. There will be fields associated with an Object, which are not all described here.",
      "properties" : {
        "objectField" : {
          "type" : "string"
        }
      },
      "type" : "object"
    },
    "swagger409" : {
      "x-has-customfields" : false,
      "type" : "object",
      "title" : "409",
      "properties" : {
        "description" : {
          "x-samplevalue" : "Conflict - If a resource being created already exists",
          "type" : "string"
        }
      }
    },
    "objectsMetadata" : {
      "properties" : {
        "fields" : {
          "items" : {
            "$ref" : "#/definitions/objectsMetadataFields"
          },
          "type" : "array"
        }
      },
      "type" : "object"
    },
    "purchaseOrders" : {
      "properties" : {
        "createdTime" : {
          "format" : "date-time",
          "type" : "string",
          "x-mask" : "yyyy-MM-dd'T'HH:mm:ss",
          "x-samplevalue" : "2019-02-04T15:31:38"
        },
        "entryDate" : {
          "format" : "date",
          "type" : "string",
          "x-mask" : "yyyy-MM-dd",
          "x-samplevalue" : "2019-02-04"
        },
        "id" : {
          "type" : "string",
          "x-samplevalue" : "UvSXGSS8TVGrV4peBXd6Ug"
        },
        "isVoid" : {
          "type" : "boolean",
          "x-samplevalue" : false
        },
        "isVoided" : {
          "type" : "boolean",
          "x-samplevalue" : false
        },
        "organizationId" : {
          "type" : "string",
          "x-samplevalue" : "eShN88ftTraBz2YUJVAjIw"
        },
        "originatorName" : {
          "type" : "string",
          "x-samplevalue" : "Invoice number 1 for Test company"
        },
        "originatorReference" : {
          "type" : "string",
          "x-samplevalue" : "invoice:evn38YzWTvrsJy4jsJi5rA"
        },
        "transactionNo" : {
          "format" : "int32",
          "type" : "integer",
          "x-samplevalue" : 1
        },
        "voucherNo" : {
          "type" : "string"
        }
      },
      "title" : "purchaseOrders",
      "type" : "object"
    },
    "Pong" : {
      "properties" : {
        "dateTime" : {
          "format" : "date-time",
          "type" : "string"
        },
        "endpoint" : {
          "type" : "string"
        }
      },
      "type" : "object"
    },
    "swaggerschema" : {
      "x-has-customfields" : false,
      "type" : "object",
      "title" : "schema",
      "properties" : {
        "$ref" : {
          "x-samplevalue" : "#/definitions/Contact-POST-Response",
          "type" : "string"
        }
      }
    },
    "swagger415" : {
      "x-has-customfields" : false,
      "type" : "object",
      "title" : "415",
      "properties" : {
        "description" : {
          "x-samplevalue" : "Unsupported media type - The server cannot handle the requested Content-Type",
          "type" : "string"
        }
      }
    },
    "invoicesObject" : {
      "properties" : {
        "amount" : {
          "format" : "double",
          "type" : "number",
          "x-samplevalue" : 46.11
        },
        "approvedTime" : {
          "format" : "date-time",
          "type" : "string",
          "x-mask" : "yyyy-MM-dd'T'HH:mm:ss",
          "x-samplevalue" : "2019-02-04T15:31:38"
        },
        "balance" : {
          "format" : "double",
          "type" : "number",
          "x-samplevalue" : 46.11
        },
        "contactId" : {
          "type" : "string",
          "x-samplevalue" : "HG4O7YcPT4eVcmBpRL8Ygw"
        },
        "contactMessage" : {
          "type" : "string"
        },
        "createdTime" : {
          "format" : "date-time",
          "type" : "string",
          "x-mask" : "yyyy-MM-dd'T'HH:mm:ss",
          "x-samplevalue" : "2019-02-04T15:31:38"
        },
        "currencyId" : {
          "type" : "string",
          "x-samplevalue" : "DKK"
        },
        "downloadUrl" : {
          "type" : "string",
          "x-samplevalue" : "https://api.billyapp.com/v2/downloads/invoices/evn38YzWTvrsJy4jsJi5rA/eShN88ftTraBz2YUJVAjIw/a1c5c53ba1b8c5da4b8f22013644c97ee361138ebef8318410/invoice-no-1.pdf"
        },
        "dueDate" : {
          "format" : "date",
          "type" : "string",
          "x-mask" : "yyyy-MM-dd",
          "x-samplevalue" : "2019-03-06"
        },
        "entryDate" : {
          "format" : "date",
          "type" : "string",
          "x-mask" : "yyyy-MM-dd",
          "x-samplevalue" : "2019-02-04"
        },
        "exchangeRate" : {
          "format" : "double",
          "type" : "number",
          "x-samplevalue" : 0.153655
        },
        "id" : {
          "type" : "string",
          "x-samplevalue" : "evn38YzWTvrsJy4jsJi5rA"
        },
        "invoiceNo" : {
          "type" : "string",
          "x-samplevalue" : "1"
        },
        "isPaid" : {
          "type" : "boolean",
          "x-samplevalue" : false
        },
        "lineDescription" : {
          "type" : "string",
          "x-samplevalue" : "socks"
        },
        "organizationId" : {
          "type" : "string",
          "x-samplevalue" : "eShN88ftTraBz2YUJVAjIw"
        },
        "paymentMethods" : {
          "type" : "array"
        },
        "paymentTermsDays" : {
          "format" : "int32",
          "type" : "integer",
          "x-samplevalue" : 30
        },
        "paymentTermsMode" : {
          "type" : "string",
          "x-samplevalue" : "net"
        },
        "sentState" : {
          "type" : "string",
          "x-samplevalue" : "unsent"
        },
        "state" : {
          "type" : "string",
          "x-samplevalue" : "approved"
        },
        "tax" : {
          "format" : "int32",
          "type" : "integer",
          "x-samplevalue" : 0
        },
        "taxMode" : {
          "type" : "string",
          "x-samplevalue" : "excl"
        },
        "templateId" : {
          "type" : "string",
          "x-samplevalue" : "01cf2486-21a0-45bc-be92-fdebdcc475c7"
        },
        "type" : {
          "type" : "string",
          "x-samplevalue" : "invoice"
        }
      },
      "title" : "invoices",
      "type" : "object"
    },
    "products" : {
      "properties" : {
        "accountId" : {
          "type" : "string",
          "x-samplevalue" : "CsrC6dalRPWVMLwujtoFJA"
        },
        "description" : {
          "type" : "string",
          "x-samplevalue" : "Testing Purposes"
        },
        "id" : {
          "type" : "string",
          "x-samplevalue" : "TaaxfdfCTjGyz4vd8vIsdQ"
        },
        "imageId" : {
          "type" : "string"
        },
        "imageUrl" : {
          "type" : "string"
        },
        "inventoryAccountId" : {
          "type" : "string"
        },
        "isArchived" : {
          "type" : "boolean",
          "x-samplevalue" : false
        },
        "isInInventory" : {
          "type" : "boolean",
          "x-samplevalue" : false
        },
        "name" : {
          "type" : "string",
          "x-samplevalue" : "TestProduct"
        },
        "organizationId" : {
          "type" : "string",
          "x-samplevalue" : "ctwKGiViSuq19lTW1d4ykA"
        },
        "productNo" : {
          "type" : "string"
        },
        "salesTaxRulesetId" : {
          "type" : "string",
          "x-samplevalue" : "B2uOePXQTfWcDorx0I0HfA"
        },
        "suppliersProductNo" : {
          "type" : "string"
        }
      },
      "title" : "products",
      "type" : "object"
    },
    "swaggerparametersschema" : {
      "x-has-customfields" : false,
      "type" : "object",
      "title" : "schema",
      "properties" : {
        "$ref" : {
          "x-samplevalue" : "#/definitions/Contact",
          "type" : "string"
        }
      }
    },
    "invoicesRequest" : {
      "properties" : {
        "attContactPersonId" : {
          "type" : "string"
        },
        "contactId" : {
          "type" : "string",
          "x-samplevalue" : "sKsw5aJHQ6iH1NwBEiHqmQ"
        },
        "contactMessage" : {
          "type" : "string"
        },
        "creditedInvoiceId" : {
          "type" : "string"
        },
        "currencyId" : {
          "type" : "string",
          "x-samplevalue" : "USD"
        },
        "downloadUrl" : {
          "type" : "string",
          "x-samplevalue" : "https://api.billyapp.com/v2/downloads/invoices/6rvfpoFoTDmyE9FfYD2oNA/ctwKGiViSuq19lTW1d4ykA/d59e904a1f47000e07e2ef9465aaa2f1383f70964bed60a35b/invoice-no-1.pdf"
        },
        "entryDate" : {
          "format" : "date",
          "type" : "string",
          "x-mask" : "yyyy-MM-dd",
          "x-samplevalue" : "2019-01-07"
        },
        "exchangeRate" : {
          "format" : "int32",
          "type" : "integer",
          "x-samplevalue" : 1
        },
        "invoiceNo" : {
          "type" : "string",
          "x-samplevalue" : "40"
        },
        "lineDescription" : {
          "type" : "string",
          "x-samplevalue" : "TestProduct: Hello World, TestProduct: Hello World, TestProduct: Testing..."
        },
        "orderNo" : {
          "type" : "string"
        },
        "organizationId" : {
          "type" : "string",
          "x-samplevalue" : "ctwKGiViSuq19lTW1d4ykA"
        },
        "paymentTermsDays" : {
          "format" : "int32",
          "type" : "integer",
          "x-samplevalue" : 30
        },
        "paymentTermsMode" : {
          "type" : "string",
          "x-samplevalue" : "net"
        },
        "sentState" : {
          "type" : "string",
          "x-samplevalue" : "sent"
        },
        "state" : {
          "type" : "string",
          "x-samplevalue" : "approved"
        },
        "taxMode" : {
          "type" : "string",
          "x-samplevalue" : "excl"
        },
        "templateId" : {
          "type" : "string",
          "x-samplevalue" : "ae24b4e9-919c-49a2-adbd-c4b66a325533"
        },
        "type" : {
          "type" : "string",
          "x-samplevalue" : "invoice"
        }
      },
      "title" : "invoicesRequest",
      "type" : "object"
    },
    "swaggerresponses" : {
      "x-has-customfields" : false,
      "type" : "object",
      "title" : "responses",
      "properties" : {
        "200" : {
          "$ref" : "#/definitions/swagger200"
        },
        "400" : {
          "$ref" : "#/definitions/swagger400"
        },
        "401" : {
          "$ref" : "#/definitions/swagger401"
        },
        "403" : {
          "$ref" : "#/definitions/swagger403"
        },
        "404" : {
          "$ref" : "#/definitions/swagger404"
        },
        "405" : {
          "$ref" : "#/definitions/swagger405"
        },
        "406" : {
          "$ref" : "#/definitions/swagger406"
        },
        "409" : {
          "$ref" : "#/definitions/swagger409"
        },
        "415" : {
          "$ref" : "#/definitions/swagger415"
        },
        "500" : {
          "$ref" : "#/definitions/swagger500"
        },
        "502" : {
          "$ref" : "#/definitions/swagger502"
        }
      }
    },
    "swaggerproperties" : {
      "x-has-customfields" : false,
      "type" : "object",
      "title" : "properties",
      "properties" : {
        "definition-property" : {
          "$ref" : "#/definitions/swaggerdefinition-property"
        }
      }
    },
    "bills" : {
      "properties" : {
        "amount" : {
          "format" : "int32",
          "type" : "integer",
          "x-samplevalue" : 6
        },
        "approvedTime" : {
          "format" : "date-time",
          "type" : "string",
          "x-mask" : "yyyy-MM-dd'T'HH:mm:ss",
          "x-samplevalue" : "2019-01-10T22:57:15"
        },
        "balance" : {
          "format" : "int32",
          "type" : "integer",
          "x-samplevalue" : 6
        },
        "contactId" : {
          "type" : "string",
          "x-samplevalue" : "VYownLprQLqk5QmQ8fCdDw"
        },
        "contactName" : {
          "type" : "string"
        },
        "createdTime" : {
          "format" : "date-time",
          "type" : "string",
          "x-mask" : "yyyy-MM-dd'T'HH:mm:ss",
          "x-samplevalue" : "2019-01-10T22:57:15"
        },
        "creditedBillId" : {
          "type" : "string"
        },
        "currencyId" : {
          "type" : "string",
          "x-samplevalue" : "USD"
        },
        "dueDate" : {
          "type" : "string"
        },
        "entryDate" : {
          "format" : "date",
          "type" : "string",
          "x-mask" : "yyyy-MM-dd",
          "x-samplevalue" : "2019-01-10"
        },
        "exchangeRate" : {
          "format" : "int32",
          "type" : "integer",
          "x-samplevalue" : 1
        },
        "id" : {
          "type" : "string",
          "x-samplevalue" : "L6eTXsPITDWCkCztYL6NEw"
        },
        "isBare" : {
          "type" : "boolean",
          "x-samplevalue" : false
        },
        "isPaid" : {
          "type" : "boolean",
          "x-samplevalue" : false
        },
        "lineDescription" : {
          "type" : "string",
          "x-samplevalue" : "Stuff"
        },
        "organizationId" : {
          "type" : "string",
          "x-samplevalue" : "ctwKGiViSuq19lTW1d4ykA"
        },
        "paymentAccountId" : {
          "type" : "string"
        },
        "paymentDate" : {
          "type" : "string"
        },
        "scannedCode" : {
          "type" : "string"
        },
        "scannedState" : {
          "type" : "string"
        },
        "source" : {
          "type" : "string"
        },
        "state" : {
          "type" : "string",
          "x-samplevalue" : "approved"
        },
        "subject" : {
          "type" : "string"
        },
        "suppliersInvoiceNo" : {
          "type" : "string"
        },
        "tax" : {
          "format" : "int32",
          "type" : "integer",
          "x-samplevalue" : 0
        },
        "taxMode" : {
          "type" : "string",
          "x-samplevalue" : "excl"
        },
        "type" : {
          "type" : "string",
          "x-samplevalue" : "creditNote"
        },
        "voucherNo" : {
          "type" : "string",
          "x-samplevalue" : "2"
        }
      },
      "title" : "bills",
      "type" : "object"
    },
    "purchaseOrdersObject" : {
      "properties" : {
        "createdTime" : {
          "format" : "date-time",
          "type" : "string",
          "x-mask" : "yyyy-MM-dd'T'HH:mm:ss",
          "x-samplevalue" : "2019-02-04T15:31:38"
        },
        "entryDate" : {
          "format" : "date",
          "type" : "string",
          "x-mask" : "yyyy-MM-dd",
          "x-samplevalue" : "2019-02-04"
        },
        "id" : {
          "type" : "string",
          "x-samplevalue" : "UvSXGSS8TVGrV4peBXd6Ug"
        },
        "isVoid" : {
          "type" : "boolean",
          "x-samplevalue" : false
        },
        "isVoided" : {
          "type" : "boolean",
          "x-samplevalue" : false
        },
        "organizationId" : {
          "type" : "string",
          "x-samplevalue" : "eShN88ftTraBz2YUJVAjIw"
        },
        "originatorName" : {
          "type" : "string",
          "x-samplevalue" : "Invoice number 1 for Test company"
        },
        "originatorReference" : {
          "type" : "string",
          "x-samplevalue" : "invoice:evn38YzWTvrsJy4jsJi5rA"
        },
        "transactionNo" : {
          "format" : "int32",
          "type" : "integer",
          "x-samplevalue" : 1
        },
        "voucherNo" : {
          "type" : "string"
        }
      },
      "title" : "purchaseOrders",
      "type" : "object"
    },
    "productsObject" : {
      "properties" : {
        "accountId" : {
          "type" : "string",
          "x-samplevalue" : "wh3LaCEJQUOVNYhqo3if8w"
        },
        "description" : {
          "type" : "string"
        },
        "id" : {
          "type" : "string",
          "x-samplevalue" : "a2t8jZrSQlCdSYSbgkLwkg"
        },
        "isArchived" : {
          "type" : "boolean",
          "x-samplevalue" : false
        },
        "isInInventory" : {
          "type" : "boolean",
          "x-samplevalue" : false
        },
        "name" : {
          "type" : "string",
          "x-samplevalue" : "danish cookies"
        },
        "organizationId" : {
          "type" : "string",
          "x-samplevalue" : "eShN88ftTraBz2YUJVAjIw"
        },
        "productNo" : {
          "type" : "string"
        },
        "salesTaxRulesetId" : {
          "type" : "string",
          "x-samplevalue" : "scsrBhwzTgSlMeXLo6wGZw"
        },
        "suppliersProductNo" : {
          "type" : "string"
        }
      },
      "title" : "products",
      "type" : "object"
    },
    "bankPaymentsRequest" : {
      "properties" : {
        "cashAccountId" : {
          "type" : "string",
          "x-samplevalue" : "FsrL673OQtjVApFskCBUcA"
        },
        "cashAmount" : {
          "format" : "int32",
          "type" : "integer",
          "x-samplevalue" : 200
        },
        "cashExchangeRate" : {
          "format" : "int32",
          "type" : "integer",
          "x-samplevalue" : 1
        },
        "cashSide" : {
          "type" : "string",
          "x-samplevalue" : "credit"
        },
        "contactId" : {
          "type" : "string",
          "x-samplevalue" : "VYownLprQLqk5QmQ8fCdDw"
        },
        "createdTime" : {
          "format" : "date-time",
          "type" : "string",
          "x-mask" : "yyyy-MM-dd'T'HH:mm:ss",
          "x-samplevalue" : "2019-02-20T16:31:27"
        },
        "entryDate" : {
          "format" : "date",
          "type" : "string",
          "x-mask" : "yyyy-MM-dd",
          "x-samplevalue" : "2019-01-10"
        },
        "feeAccountId" : {
          "type" : "string"
        },
        "feeAmount" : {
          "type" : "string"
        },
        "id" : {
          "type" : "string",
          "x-samplevalue" : "oHeMGF0MQWGbkwBO6paAXA"
        },
        "isVoided" : {
          "type" : "boolean",
          "x-samplevalue" : false
        },
        "organizationId" : {
          "type" : "string",
          "x-samplevalue" : "ctwKGiViSuq19lTW1d4ykA"
        },
        "subjectCurrencyId" : {
          "type" : "string",
          "x-samplevalue" : "USD"
        }
      },
      "title" : "bankPaymentsRequest",
      "type" : "object"
    },
    "journalEntries" : {
      "properties" : {
        "createdTime" : {
          "format" : "date-time",
          "type" : "string",
          "x-mask" : "yyyy-MM-dd'T'HH:mm:ss",
          "x-samplevalue" : "2019-02-07T09:59:49"
        },
        "daybookId" : {
          "type" : "string",
          "x-samplevalue" : "ow9j5rAzRjepZBIiupB7XQ"
        },
        "entryDate" : {
          "format" : "date",
          "type" : "string",
          "x-mask" : "yyyy-MM-dd",
          "x-samplevalue" : "2019-02-07"
        },
        "id" : {
          "type" : "string",
          "x-samplevalue" : "89vXt7doTYKBoCEGNxDKBA"
        },
        "organizationId" : {
          "type" : "string",
          "x-samplevalue" : "eShN88ftTraBz2YUJVAjIw"
        },
        "priority" : {
          "format" : "int32",
          "type" : "integer",
          "x-samplevalue" : 1
        },
        "state" : {
          "type" : "string",
          "x-samplevalue" : "draft"
        },
        "type" : {
          "type" : "string",
          "x-samplevalue" : "entry"
        },
        "voucherNo" : {
          "type" : "string",
          "x-samplevalue" : "1"
        }
      },
      "title" : "journalEntries",
      "type" : "object"
    },
    "swaggerinfo" : {
      "x-has-customfields" : false,
      "type" : "object",
      "title" : "info",
      "properties" : {
        "contact" : {
          "$ref" : "#/definitions/swaggercontact"
        },
        "title" : {
          "x-samplevalue" : "hubspotcrm",
          "type" : "string"
        },
        "version" : {
          "x-samplevalue" : "api-v2",
          "type" : "string"
        }
      }
    },
    "swagger500" : {
      "x-has-customfields" : false,
      "type" : "object",
      "title" : "500",
      "properties" : {
        "description" : {
          "x-samplevalue" : "Server error - Something went wrong on the Cloud Elements server",
          "type" : "string"
        }
      }
    },
    "swaggerpaths" : {
      "x-has-customfields" : false,
      "type" : "object",
      "title" : "paths",
      "properties" : {
        "/contacts" : {
          "$ref" : "#/definitions/swagger-contacts-path"
        }
      }
    },
    "swagger502" : {
      "x-has-customfields" : false,
      "type" : "object",
      "title" : "502",
      "properties" : {
        "description" : {
          "x-samplevalue" : "Provider server error - Something went wrong on the Provider or Endpoint's server",
          "type" : "string"
        }
      }
    },
    "accountNatures" : {
      "properties" : {
        "accountNature" : {
          "$ref" : "#/definitions/accountNaturesAccountNature"
        },
        "meta" : {
          "$ref" : "#/definitions/accountNaturesMeta"
        }
      },
      "title" : "accountNatures",
      "type" : "object"
    },
    "objectsMetadataFields" : {
      "properties" : {
        "mask" : {
          "type" : "string"
        },
        "type" : {
          "type" : "string"
        },
        "vendorDisplayName" : {
          "type" : "string"
        },
        "vendorPath" : {
          "type" : "string"
        },
        "vendorReadOnly" : {
          "type" : "boolean"
        },
        "vendorRequired" : {
          "type" : "boolean"
        }
      },
      "type" : "object"
    },
    "accountGroupsMeta" : {
      "properties" : {
        "statusCode" : {
          "format" : "int32",
          "type" : "integer",
          "x-samplevalue" : 200
        },
        "success" : {
          "type" : "boolean",
          "x-samplevalue" : true
        },
        "time" : {
          "format" : "double",
          "type" : "number",
          "x-samplevalue" : 0.019772052764893
        }
      },
      "title" : "meta",
      "type" : "object"
    },
    "accountGroupsObject" : {
      "properties" : {
        "id" : {
          "type" : "string",
          "x-samplevalue" : "E9GMjZFRQdaukaLV37YgAg"
        },
        "name" : {
          "type" : "string",
          "x-samplevalue" : "Assets"
        },
        "natureId" : {
          "type" : "string",
          "x-samplevalue" : "asset"
        },
        "organizationId" : {
          "type" : "string",
          "x-samplevalue" : "eShN88ftTraBz2YUJVAjIw"
        },
        "priority" : {
          "format" : "int32",
          "type" : "integer",
          "x-samplevalue" : 11
        },
        "style" : {
          "type" : "string",
          "x-samplevalue" : "double-under"
        },
        "sumFrom" : {
          "type" : "string",
          "x-samplevalue" : "Revenue"
        },
        "type" : {
          "type" : "string",
          "x-samplevalue" : "header"
        }
      },
      "title" : "accountGroups",
      "type" : "object"
    },
    "billsObject" : {
      "properties" : {
        "amount" : {
          "format" : "int32",
          "type" : "integer",
          "x-samplevalue" : 50
        },
        "approvedTime" : {
          "format" : "date-time",
          "type" : "string",
          "x-mask" : "yyyy-MM-dd'T'HH:mm:ss",
          "x-samplevalue" : "2019-02-07T10:08:08"
        },
        "balance" : {
          "format" : "int32",
          "type" : "integer",
          "x-samplevalue" : 25
        },
        "contactId" : {
          "type" : "string",
          "x-samplevalue" : "nyGLIPLMROeNmzpEyJTuVg"
        },
        "createdTime" : {
          "format" : "date-time",
          "type" : "string",
          "x-mask" : "yyyy-MM-dd'T'HH:mm:ss",
          "x-samplevalue" : "2019-02-07T10:08:08"
        },
        "currencyId" : {
          "type" : "string",
          "x-samplevalue" : "USD"
        },
        "dueDate" : {
          "format" : "date",
          "type" : "string",
          "x-mask" : "yyyy-MM-dd",
          "x-samplevalue" : "2019-02-14"
        },
        "entryDate" : {
          "format" : "date",
          "type" : "string",
          "x-mask" : "yyyy-MM-dd",
          "x-samplevalue" : "2019-02-07"
        },
        "exchangeRate" : {
          "format" : "int32",
          "type" : "integer",
          "x-samplevalue" : 1
        },
        "id" : {
          "type" : "string",
          "x-samplevalue" : "RslVS17sT3KUsBcJYEFbWQ"
        },
        "isBare" : {
          "type" : "boolean",
          "x-samplevalue" : false
        },
        "isPaid" : {
          "type" : "boolean",
          "x-samplevalue" : false
        },
        "lineDescription" : {
          "type" : "string",
          "x-samplevalue" : "soda"
        },
        "organizationId" : {
          "type" : "string",
          "x-samplevalue" : "eShN88ftTraBz2YUJVAjIw"
        },
        "state" : {
          "type" : "string",
          "x-samplevalue" : "approved"
        },
        "tax" : {
          "format" : "int32",
          "type" : "integer",
          "x-samplevalue" : 0
        },
        "taxMode" : {
          "type" : "string",
          "x-samplevalue" : "excl"
        },
        "type" : {
          "type" : "string",
          "x-samplevalue" : "bill"
        },
        "voucherNo" : {
          "type" : "string",
          "x-samplevalue" : "3"
        }
      },
      "title" : "bills",
      "type" : "object"
    },
    "billsRequest" : {
      "properties" : {
        "amount" : {
          "format" : "int32",
          "type" : "integer",
          "x-samplevalue" : 6
        },
        "approvedTime" : {
          "format" : "date-time",
          "type" : "string",
          "x-mask" : "yyyy-MM-dd'T'HH:mm:ss",
          "x-samplevalue" : "2019-01-10T22:57:15"
        },
        "balance" : {
          "format" : "int32",
          "type" : "integer",
          "x-samplevalue" : 6
        },
        "contactId" : {
          "type" : "string",
          "x-samplevalue" : "VYownLprQLqk5QmQ8fCdDw"
        },
        "contactName" : {
          "type" : "string"
        },
        "createdTime" : {
          "format" : "date-time",
          "type" : "string",
          "x-mask" : "yyyy-MM-dd'T'HH:mm:ss",
          "x-samplevalue" : "2019-01-10T22:57:15"
        },
        "creditedBillId" : {
          "type" : "string"
        },
        "currencyId" : {
          "type" : "string",
          "x-samplevalue" : "USD"
        },
        "dueDate" : {
          "type" : "string"
        },
        "entryDate" : {
          "format" : "date",
          "type" : "string",
          "x-mask" : "yyyy-MM-dd",
          "x-samplevalue" : "2019-01-10"
        },
        "exchangeRate" : {
          "format" : "int32",
          "type" : "integer",
          "x-samplevalue" : 1
        },
        "id" : {
          "type" : "string",
          "x-samplevalue" : "L6eTXsPITDWCkCztYL6NEw"
        },
        "isBare" : {
          "type" : "boolean",
          "x-samplevalue" : false
        },
        "isPaid" : {
          "type" : "boolean",
          "x-samplevalue" : false
        },
        "lineDescription" : {
          "type" : "string",
          "x-samplevalue" : "Stuff"
        },
        "organizationId" : {
          "type" : "string",
          "x-samplevalue" : "ctwKGiViSuq19lTW1d4ykA"
        },
        "paymentAccountId" : {
          "type" : "string"
        },
        "paymentDate" : {
          "type" : "string"
        },
        "scannedCode" : {
          "type" : "string"
        },
        "scannedState" : {
          "type" : "string"
        },
        "source" : {
          "type" : "string"
        },
        "state" : {
          "type" : "string",
          "x-samplevalue" : "approved"
        },
        "subject" : {
          "type" : "string"
        },
        "suppliersInvoiceNo" : {
          "type" : "string"
        },
        "tax" : {
          "format" : "int32",
          "type" : "integer",
          "x-samplevalue" : 0
        },
        "taxMode" : {
          "type" : "string",
          "x-samplevalue" : "excl"
        },
        "type" : {
          "type" : "string",
          "x-samplevalue" : "creditNote"
        },
        "voucherNo" : {
          "type" : "string",
          "x-samplevalue" : "2"
        }
      },
      "title" : "billsRequest",
      "type" : "object"
    },
    "swaggerpost" : {
      "x-has-customfields" : false,
      "type" : "object",
      "title" : "post",
      "properties" : {
        "summary" : {
          "x-samplevalue" : "Create a new contact in the CRM service. Contact creation will flow through Cloud Elements to your CRM service. With the exception of the 'id' field, the required fields indicated in the 'Contact' model are those required to create a new contact.",
          "type" : "string"
        },
        "operationId" : {
          "x-samplevalue" : "createContact",
          "type" : "string"
        },
        "responses" : {
          "$ref" : "#/definitions/swaggerresponses"
        },
        "parameters" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/swaggerparameters"
          }
        },
        "tags" : {
          "x-samplevalue" : [ "contacts" ],
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        }
      }
    },
    "accounts" : {
      "properties" : {
        "accountNo" : {
          "format" : "int32",
          "type" : "integer",
          "x-samplevalue" : 2000
        },
        "currencyId" : {
          "type" : "string",
          "x-samplevalue" : "USD"
        },
        "description" : {
          "type" : "string",
          "x-samplevalue" : "Bills received from your vendors and entered into Billy for payment that have not been paid yet. {System Account}"
        },
        "groupId" : {
          "type" : "string",
          "x-samplevalue" : "0mxNMfNWSL6FZl3G7Rxsig"
        },
        "id" : {
          "type" : "string",
          "x-samplevalue" : "P0bq8FWwRZtutye3yRX7OA"
        },
        "isArchived" : {
          "type" : "boolean",
          "x-samplevalue" : false
        },
        "isBankAccount" : {
          "type" : "boolean",
          "x-samplevalue" : false
        },
        "isPaymentEnabled" : {
          "type" : "boolean",
          "x-samplevalue" : false
        },
        "name" : {
          "type" : "string",
          "x-samplevalue" : "Accounts Payable"
        },
        "natureId" : {
          "type" : "string",
          "x-samplevalue" : "liability"
        },
        "organizationId" : {
          "type" : "string",
          "x-samplevalue" : "eShN88ftTraBz2YUJVAjIw"
        },
        "systemRole" : {
          "type" : "string",
          "x-samplevalue" : "accountsPayable"
        }
      },
      "title" : "accounts",
      "type" : "object"
    },
    "swaggertags" : {
      "x-has-customfields" : false,
      "title" : "tags",
      "properties" : {
        "name" : {
          "x-samplevalue" : "contacts",
          "type" : "string"
        }
      },
      "type" : "object"
    },
    "accountGroups" : {
      "properties" : {
        "accountGroup" : {
          "$ref" : "#/definitions/accountGroupsAccountGroup"
        },
        "meta" : {
          "$ref" : "#/definitions/accountGroupsMeta"
        }
      },
      "title" : "accountGroups",
      "type" : "object"
    },
    "contacts" : {
      "properties" : {
        "accessCode" : {
          "type" : "string",
          "x-samplevalue" : "Kkg81pyyp9kZmra9"
        },
        "cityId" : {
          "type" : "string",
          "x-samplevalue" : "us_co_denver"
        },
        "cityText" : {
          "type" : "string"
        },
        "contactNo" : {
          "type" : "string"
        },
        "countryId" : {
          "type" : "string",
          "x-samplevalue" : "US"
        },
        "createdTime" : {
          "format" : "date-time",
          "type" : "string",
          "x-mask" : "yyyy-MM-dd'T'HH:mm:ss",
          "x-samplevalue" : "2019-01-10T22:55:36"
        },
        "currencyId" : {
          "type" : "string"
        },
        "ean" : {
          "type" : "string"
        },
        "emailAttachmentDeliveryMode" : {
          "type" : "string"
        },
        "fax" : {
          "type" : "string"
        },
        "id" : {
          "type" : "string",
          "x-samplevalue" : "VYownLprQLqk5QmQ8fCdDw"
        },
        "isArchived" : {
          "type" : "boolean",
          "x-samplevalue" : false
        },
        "isCustomer" : {
          "type" : "boolean",
          "x-samplevalue" : false
        },
        "isSalesTaxExempt" : {
          "type" : "boolean",
          "x-samplevalue" : false
        },
        "isSupplier" : {
          "type" : "boolean",
          "x-samplevalue" : true
        },
        "localeId" : {
          "type" : "string"
        },
        "name" : {
          "type" : "string",
          "x-samplevalue" : "Test Company"
        },
        "organizationId" : {
          "type" : "string",
          "x-samplevalue" : "ctwKGiViSuq19lTW1d4ykA"
        },
        "paymentTermsDays" : {
          "type" : "string"
        },
        "paymentTermsMode" : {
          "type" : "string"
        },
        "phone" : {
          "type" : "string",
          "x-samplevalue" : "123-456-7890"
        },
        "registrationNo" : {
          "type" : "string"
        },
        "stateId" : {
          "type" : "string",
          "x-samplevalue" : "us_co"
        },
        "stateText" : {
          "type" : "string"
        },
        "street" : {
          "type" : "string",
          "x-samplevalue" : "123 Evergreen Drive"
        },
        "type" : {
          "type" : "string",
          "x-samplevalue" : "company"
        },
        "zipcodeId" : {
          "type" : "string",
          "x-samplevalue" : "us_80209"
        },
        "zipcodeText" : {
          "type" : "string"
        }
      },
      "title" : "contacts",
      "type" : "object"
    }
  },
  "swagger" : "2.0",
  "info" : {
    "contact" : {
      "email" : "support@cloud-elements.com"
    },
    "title" : "billyaccounting",
    "version" : "api-v2"
  },
  "tags" : [ {
    "name" : "purchase-orders"
  }, {
    "name" : "ping"
  }, {
    "name" : "objects"
  }, {
    "name" : "journal-entries"
  }, {
    "name" : "products"
  }, {
    "name" : "invoices"
  }, {
    "name" : "objectName"
  }, {
    "name" : "bills"
  }, {
    "name" : "accounts"
  }, {
    "name" : "account-groups"
  }, {
    "name" : "contacts"
  }, {
    "name" : "bank-payments"
  }, {
    "name" : "account-natures"
  } ]
}