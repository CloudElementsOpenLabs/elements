{
  "basePath" : "/elements/api-v2",
  "paths" : {
    "/branches" : {
      "get" : {
        "summary" : "Search for branches",
        "operationId" : "getBranches",
        "responses" : {
          "200" : {
            "description" : "OK - Everything worked as expected",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/branchesListObject"
              }
            }
          },
          "400" : {
            "description" : "Bad Request - Often due to a missing request parameter"
          },
          "401" : {
            "description" : "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500" : {
            "description" : "Server error - Something went wrong on the Cloud Elements server"
          },
          "403" : {
            "description" : "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502" : {
            "description" : "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404" : {
            "description" : "Not found - The requested resource is not found"
          },
          "415" : {
            "description" : "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405" : {
            "description" : "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406" : {
            "description" : "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409" : {
            "description" : "Conflict - If a resource being created already exists"
          }
        },
        "parameters" : [ {
          "in" : "header",
          "name" : "Authorization",
          "description" : "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
          "type" : "string",
          "required" : true
        }, {
          "in" : "query",
          "name" : "pageSize",
          "format" : "int64",
          "description" : "The number of resources to return in a given page",
          "type" : "string",
          "required" : false
        }, {
          "description" : "The next page cursor, taken from the response header: `elements-next-page-token`",
          "in" : "query",
          "name" : "nextPage",
          "required" : false,
          "type" : "string"
        } ],
        "tags" : [ "branches" ]
      }
    },
    "/branches/{name}" : {
      "get" : {
        "summary" : "Retrieve a branch",
        "operationId" : "getBrancheByName",
        "responses" : {
          "200" : {
            "description" : "OK - Everything worked as expected",
            "schema" : {
              "$ref" : "#/definitions/branches"
            }
          },
          "400" : {
            "description" : "Bad Request - Often due to a missing request parameter"
          },
          "401" : {
            "description" : "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500" : {
            "description" : "Server error - Something went wrong on the Cloud Elements server"
          },
          "403" : {
            "description" : "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502" : {
            "description" : "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404" : {
            "description" : "Not found - The requested resource is not found"
          },
          "415" : {
            "description" : "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405" : {
            "description" : "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406" : {
            "description" : "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409" : {
            "description" : "Conflict - If a resource being created already exists"
          }
        },
        "parameters" : [ {
          "in" : "header",
          "name" : "Authorization",
          "description" : "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
          "type" : "string",
          "required" : true
        }, {
          "in" : "path",
          "name" : "name",
          "description" : "The branch name",
          "type" : "string",
          "required" : true
        } ],
        "tags" : [ "branches" ]
      }
    },
    "/contents" : {
      "get" : {
        "summary" : "Search for /content",
        "operationId" : "getContents",
        "responses" : {
          "200" : {
            "description" : "OK - Everything worked as expected"
          },
          "400" : {
            "description" : "Bad Request - Often due to a missing request parameter"
          },
          "401" : {
            "description" : "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500" : {
            "description" : "Server error - Something went wrong on the Cloud Elements server"
          },
          "403" : {
            "description" : "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502" : {
            "description" : "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404" : {
            "description" : "Not found - The requested resource is not found"
          },
          "415" : {
            "description" : "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405" : {
            "description" : "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406" : {
            "description" : "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409" : {
            "description" : "Conflict - If a resource being created already exists"
          }
        },
        "parameters" : [ {
          "in" : "header",
          "name" : "Authorization",
          "description" : "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
          "type" : "string",
          "required" : true
        }, {
          "in" : "query",
          "name" : "folder",
          "description" : ".",
          "type" : "string",
          "required" : false
        } ],
        "tags" : [ "contents" ]
      }
    },
    "/contents/{file}" : {
      "get" : {
        "summary" : "Retrieve a(n) /content",
        "operationId" : "getContentByFile",
        "responses" : {
          "200" : {
            "description" : "OK - Everything worked as expected"
          },
          "400" : {
            "description" : "Bad Request - Often due to a missing request parameter"
          },
          "401" : {
            "description" : "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500" : {
            "description" : "Server error - Something went wrong on the Cloud Elements server"
          },
          "403" : {
            "description" : "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502" : {
            "description" : "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404" : {
            "description" : "Not found - The requested resource is not found"
          },
          "415" : {
            "description" : "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405" : {
            "description" : "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406" : {
            "description" : "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409" : {
            "description" : "Conflict - If a resource being created already exists"
          }
        },
        "parameters" : [ {
          "in" : "header",
          "name" : "Authorization",
          "description" : "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
          "type" : "string",
          "required" : true
        }, {
          "in" : "path",
          "name" : "file",
          "description" : ".",
          "type" : "string",
          "required" : true
        }, {
          "in" : "query",
          "name" : "folder",
          "description" : ".",
          "type" : "string",
          "required" : false
        } ],
        "tags" : [ "contents" ]
      }
    },
    "/me" : {
      "get" : {
        "summary" : "Search for authenticated user",
        "operationId" : "getMe",
        "responses" : {
          "200" : {
            "description" : "OK - Everything worked as expected",
            "schema" : {
              "$ref" : "#/definitions/me"
            }
          },
          "400" : {
            "description" : "Bad Request - Often due to a missing request parameter"
          },
          "401" : {
            "description" : "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500" : {
            "description" : "Server error - Something went wrong on the Cloud Elements server"
          },
          "403" : {
            "description" : "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502" : {
            "description" : "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404" : {
            "description" : "Not found - The requested resource is not found"
          },
          "415" : {
            "description" : "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405" : {
            "description" : "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406" : {
            "description" : "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409" : {
            "description" : "Conflict - If a resource being created already exists"
          }
        },
        "parameters" : [ {
          "in" : "header",
          "name" : "Authorization",
          "description" : "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
          "type" : "string",
          "required" : true
        } ],
        "tags" : [ "me" ]
      }
    },
    "/objects" : {
      "get" : {
        "operationId" : "getObjects",
        "parameters" : [ {
          "description" : "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
          "in" : "header",
          "name" : "Authorization",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK - Everything worked as expected",
            "schema" : {
              "items" : {
                "type" : "string"
              },
              "type" : "array"
            }
          },
          "400" : {
            "description" : "Bad Request - Often due to a missing request parameter"
          },
          "401" : {
            "description" : "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "403" : {
            "description" : "Forbidden - Access to the resource by the provider is forbidden"
          },
          "404" : {
            "description" : "Not found - The requested resource is not found"
          },
          "405" : {
            "description" : "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406" : {
            "description" : "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409" : {
            "description" : "Conflict - If a resource being created already exists"
          },
          "415" : {
            "description" : "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "500" : {
            "description" : "Server error - Something went wrong on the Cloud Elements server"
          },
          "502" : {
            "description" : "Provider server error - Something went wrong on the Provider or Endpoint's server"
          }
        },
        "summary" : "Get a list of all the available objects.",
        "tags" : [ "objects" ]
      }
    },
    "/objects/{objectName}/docs" : {
      "get" : {
        "operationId" : "getObjectsObjectNameDocs",
        "parameters" : [ {
          "description" : "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
          "in" : "header",
          "name" : "Authorization",
          "required" : true,
          "type" : "string"
        }, {
          "description" : "The name of the object",
          "in" : "path",
          "name" : "objectName",
          "required" : true,
          "type" : "string"
        }, {
          "description" : "Include discovery metadata in definitions",
          "in" : "query",
          "name" : "discovery",
          "required" : false,
          "type" : "boolean"
        }, {
          "description" : "Optionally resolve swagger references for an inline object definition",
          "in" : "query",
          "name" : "resolveReferences",
          "required" : false,
          "type" : "boolean"
        }, {
          "description" : "Include only OpenAPI / Swagger properties in definitions",
          "in" : "query",
          "name" : "basic",
          "required" : false,
          "type" : "boolean"
        }, {
          "description" : "The element swagger version to get the corresponding element swagger, Passing in \"-1\" gives latest element swagger",
          "in" : "query",
          "name" : "version",
          "required" : false,
          "default" : "-1",
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK - Everything worked as expected",
            "schema" : {
              "$ref" : "#/definitions/swaggerDocs"
            }
          },
          "400" : {
            "description" : "Bad Request - Often due to a missing request parameter"
          },
          "401" : {
            "description" : "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "403" : {
            "description" : "Forbidden - Access to the resource by the provider is forbidden"
          },
          "404" : {
            "description" : "Not found - The requested resource is not found"
          },
          "405" : {
            "description" : "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406" : {
            "description" : "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409" : {
            "description" : "Conflict - If a resource being created already exists"
          },
          "415" : {
            "description" : "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "500" : {
            "description" : "Server error - Something went wrong on the Cloud Elements server"
          },
          "502" : {
            "description" : "Provider server error - Something went wrong on the Provider or Endpoint's server"
          }
        },
        "summary" : "Get swagger docs for an object.",
        "tags" : [ "objects" ]
      }
    },
    "/objects/{objectName}/metadata" : {
      "get" : {
        "operationId" : "getObjectsObjectNameMetadata",
        "parameters" : [ {
          "description" : "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
          "in" : "header",
          "name" : "Authorization",
          "required" : true,
          "type" : "string"
        }, {
          "description" : "The name of the object",
          "in" : "path",
          "name" : "objectName",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK - Everything worked as expected",
            "schema" : {
              "$ref" : "#/definitions/objectsMetadata"
            }
          },
          "400" : {
            "description" : "Bad Request - Often due to a missing request parameter"
          },
          "401" : {
            "description" : "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "403" : {
            "description" : "Forbidden - Access to the resource by the provider is forbidden"
          },
          "404" : {
            "description" : "Not found - The requested resource is not found"
          },
          "405" : {
            "description" : "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406" : {
            "description" : "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409" : {
            "description" : "Conflict - If a resource being created already exists"
          },
          "415" : {
            "description" : "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "500" : {
            "description" : "Server error - Something went wrong on the Cloud Elements server"
          },
          "502" : {
            "description" : "Provider server error - Something went wrong on the Provider or Endpoint's server"
          }
        },
        "summary" : "Get a list of all the field for an object.",
        "tags" : [ "objects" ]
      }
    },
    "/ping" : {
      "get" : {
        "operationId" : "getPing",
        "parameters" : [ {
          "description" : "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
          "in" : "header",
          "name" : "Authorization",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK - Everything worked as expected",
            "schema" : {
              "$ref" : "#/definitions/Pong"
            }
          },
          "400" : {
            "description" : "Bad Request - Often due to a missing request parameter"
          },
          "401" : {
            "description" : "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "403" : {
            "description" : "Forbidden - Access to the resource by the provider is forbidden"
          },
          "404" : {
            "description" : "Not found - The requested resource is not found"
          },
          "405" : {
            "description" : "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406" : {
            "description" : "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409" : {
            "description" : "Conflict - If a resource being created already exists"
          },
          "415" : {
            "description" : "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "500" : {
            "description" : "Server error - Something went wrong on the Cloud Elements server"
          },
          "502" : {
            "description" : "Provider server error - Something went wrong on the Provider or Endpoint's server"
          }
        },
        "summary" : "Ping the Element to confirm that the Hub Element has a heartbeat.  If the Element does not have a heartbeat, an error message will be returned.",
        "tags" : [ "ping" ]
      }
    },
    "/pull-requests" : {
      "post" : {
        "summary" : "Create a pull-request",
        "operationId" : "createPullRequest",
        "responses" : {
          "200" : {
            "description" : "OK - Everything worked as expected",
            "schema" : {
              "$ref" : "#/definitions/postPullRequestResp"
            }
          },
          "400" : {
            "description" : "Bad Request - Often due to a missing request parameter"
          },
          "401" : {
            "description" : "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500" : {
            "description" : "Server error - Something went wrong on the Cloud Elements server"
          },
          "403" : {
            "description" : "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502" : {
            "description" : "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404" : {
            "description" : "Not found - The requested resource is not found"
          },
          "415" : {
            "description" : "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405" : {
            "description" : "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406" : {
            "description" : "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409" : {
            "description" : "Conflict - If a resource being created already exists"
          }
        },
        "parameters" : [ {
          "in" : "header",
          "name" : "Authorization",
          "description" : "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
          "type" : "string",
          "required" : true
        }, {
          "schema" : {
            "$ref" : "#/definitions/postPullRequestReq"
          },
          "in" : "body",
          "name" : "body",
          "description" : "The pull-request body",
          "required" : true
        } ],
        "tags" : [ "pull-requests" ]
      },
      "get" : {
        "summary" : "Search for pull-requests",
        "operationId" : "getPullRequests",
        "responses" : {
          "200" : {
            "description" : "OK - Everything worked as expected",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/pullRequestsListObject"
              }
            }
          },
          "400" : {
            "description" : "Bad Request - Often due to a missing request parameter"
          },
          "401" : {
            "description" : "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500" : {
            "description" : "Server error - Something went wrong on the Cloud Elements server"
          },
          "403" : {
            "description" : "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502" : {
            "description" : "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404" : {
            "description" : "Not found - The requested resource is not found"
          },
          "415" : {
            "description" : "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405" : {
            "description" : "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406" : {
            "description" : "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409" : {
            "description" : "Conflict - If a resource being created already exists"
          }
        },
        "parameters" : [ {
          "in" : "header",
          "name" : "Authorization",
          "description" : "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
          "type" : "string",
          "required" : true
        }, {
          "in" : "query",
          "name" : "where",
          "description" : "The CEQL search expression, or the where clause, without the WHERE keyword, in a typical SQL query. For example, to search for all pull-requests, the search expression will be <i>state='all'</i>. When this parameter is omitted, only the currently opened pull-requests are returned.",
          "type" : "string",
          "required" : false
        }, {
          "in" : "query",
          "name" : "pageSize",
          "format" : "int64",
          "description" : "The number of resources to return in a given page",
          "type" : "string",
          "required" : false
        }, {
          "description" : "The next page cursor, taken from the response header: `elements-next-page-token`",
          "in" : "query",
          "name" : "nextPage",
          "required" : false,
          "type" : "string"
        } ],
        "tags" : [ "pull-requests" ]
      }
    },
    "/pull-requests/{id}" : {
      "patch" : {
        "summary" : "Update a pull-request",
        "operationId" : "updatePullRequestById",
        "responses" : {
          "200" : {
            "description" : "OK - Everything worked as expected",
            "schema" : {
              "$ref" : "#/definitions/patchPullRequestResp"
            }
          },
          "400" : {
            "description" : "Bad Request - Often due to a missing request parameter"
          },
          "401" : {
            "description" : "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500" : {
            "description" : "Server error - Something went wrong on the Cloud Elements server"
          },
          "403" : {
            "description" : "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502" : {
            "description" : "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404" : {
            "description" : "Not found - The requested resource is not found"
          },
          "415" : {
            "description" : "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405" : {
            "description" : "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406" : {
            "description" : "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409" : {
            "description" : "Conflict - If a resource being created already exists"
          }
        },
        "parameters" : [ {
          "in" : "header",
          "name" : "Authorization",
          "description" : "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
          "type" : "string",
          "required" : true
        }, {
          "in" : "path",
          "name" : "id",
          "description" : "The pull-request ID",
          "type" : "string",
          "required" : true
        }, {
          "schema" : {
            "$ref" : "#/definitions/patchPullRequestsReq"
          },
          "in" : "body",
          "name" : "body",
          "description" : "The pull-request body",
          "required" : true
        } ],
        "tags" : [ "pull-requests" ]
      },
      "get" : {
        "summary" : "Retrieve a pull-request",
        "operationId" : "getPullRequestById",
        "responses" : {
          "200" : {
            "description" : "OK - Everything worked as expected",
            "schema" : {
              "$ref" : "#/definitions/pullRequests"
            }
          },
          "400" : {
            "description" : "Bad Request - Often due to a missing request parameter"
          },
          "401" : {
            "description" : "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500" : {
            "description" : "Server error - Something went wrong on the Cloud Elements server"
          },
          "403" : {
            "description" : "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502" : {
            "description" : "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404" : {
            "description" : "Not found - The requested resource is not found"
          },
          "415" : {
            "description" : "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405" : {
            "description" : "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406" : {
            "description" : "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409" : {
            "description" : "Conflict - If a resource being created already exists"
          }
        },
        "parameters" : [ {
          "in" : "header",
          "name" : "Authorization",
          "description" : "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
          "type" : "string",
          "required" : true
        }, {
          "in" : "path",
          "name" : "id",
          "description" : "The pull-request ID",
          "type" : "string",
          "required" : true
        } ],
        "tags" : [ "pull-requests" ]
      }
    },
    "/pull-requests/{id}/commits" : {
      "get" : {
        "summary" : "Search for commits for a pull-request",
        "operationId" : "getPullRequestsCommits",
        "responses" : {
          "200" : {
            "description" : "OK - Everything worked as expected",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/pullRequestsFilesListObject"
              }
            }
          },
          "400" : {
            "description" : "Bad Request - Often due to a missing request parameter"
          },
          "401" : {
            "description" : "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500" : {
            "description" : "Server error - Something went wrong on the Cloud Elements server"
          },
          "403" : {
            "description" : "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502" : {
            "description" : "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404" : {
            "description" : "Not found - The requested resource is not found"
          },
          "415" : {
            "description" : "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405" : {
            "description" : "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406" : {
            "description" : "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409" : {
            "description" : "Conflict - If a resource being created already exists"
          }
        },
        "parameters" : [ {
          "in" : "header",
          "name" : "Authorization",
          "description" : "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
          "type" : "string",
          "required" : true
        }, {
          "in" : "path",
          "name" : "id",
          "description" : "The pull-request ID",
          "type" : "string",
          "required" : true
        }, {
          "in" : "query",
          "name" : "pageSize",
          "format" : "int64",
          "description" : "The number of resources to return in a given page",
          "type" : "string",
          "required" : false
        }, {
          "description" : "The next page cursor, taken from the response header: `elements-next-page-token`",
          "in" : "query",
          "name" : "nextPage",
          "required" : false,
          "type" : "string"
        } ],
        "tags" : [ "pull-requests" ]
      }
    },
    "/pull-requests/{id}/files" : {
      "get" : {
        "summary" : "Search for files for a pull-request",
        "operationId" : "getPullRequestsFiles",
        "responses" : {
          "200" : {
            "description" : "OK - Everything worked as expected",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/pullRequestsFilesListObject"
              }
            }
          },
          "400" : {
            "description" : "Bad Request - Often due to a missing request parameter"
          },
          "401" : {
            "description" : "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500" : {
            "description" : "Server error - Something went wrong on the Cloud Elements server"
          },
          "403" : {
            "description" : "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502" : {
            "description" : "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404" : {
            "description" : "Not found - The requested resource is not found"
          },
          "415" : {
            "description" : "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405" : {
            "description" : "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406" : {
            "description" : "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409" : {
            "description" : "Conflict - If a resource being created already exists"
          }
        },
        "parameters" : [ {
          "in" : "header",
          "name" : "Authorization",
          "description" : "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
          "type" : "string",
          "required" : true
        }, {
          "in" : "path",
          "name" : "id",
          "description" : "The pull-request ID",
          "type" : "string",
          "required" : true
        }, {
          "in" : "query",
          "name" : "pageSize",
          "format" : "int64",
          "description" : "The number of resources to return in a given page",
          "type" : "string",
          "required" : false
        }, {
          "description" : "The next page cursor, taken from the response header: `elements-next-page-token`",
          "in" : "query",
          "name" : "nextPage",
          "required" : false,
          "type" : "string"
        } ],
        "tags" : [ "pull-requests" ]
      }
    },
    "/pull-requests/{id}/is-merged" : {
      "get" : {
        "summary" : "Search for merged pull-request. A return code of 404 is returned if the PR is not merged yet",
        "operationId" : "getPullRequestsIsMerged",
        "responses" : {
          "200" : {
            "description" : "OK - Everything worked as expected",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/pullRequestsFilesListObject"
              }
            }
          },
          "400" : {
            "description" : "Bad Request - Often due to a missing request parameter"
          },
          "401" : {
            "description" : "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500" : {
            "description" : "Server error - Something went wrong on the Cloud Elements server"
          },
          "403" : {
            "description" : "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502" : {
            "description" : "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404" : {
            "description" : "Not found - The requested resource is not found"
          },
          "415" : {
            "description" : "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405" : {
            "description" : "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406" : {
            "description" : "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409" : {
            "description" : "Conflict - If a resource being created already exists"
          }
        },
        "parameters" : [ {
          "in" : "header",
          "name" : "Authorization",
          "description" : "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
          "type" : "string",
          "required" : true
        }, {
          "in" : "path",
          "name" : "id",
          "description" : "The pull-request ID",
          "type" : "string",
          "required" : true
        } ],
        "tags" : [ "pull-requests" ]
      }
    },
    "/pull-requests/{id}/merge" : {
      "put" : {
        "summary" : "Update a merge for pull-request",
        "operationId" : "replacePullRequestsMerge",
        "responses" : {
          "200" : {
            "description" : "OK - Everything worked as expected",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/pullRequestsFilesListObject"
              }
            }
          },
          "400" : {
            "description" : "Bad Request - Often due to a missing request parameter"
          },
          "401" : {
            "description" : "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500" : {
            "description" : "Server error - Something went wrong on the Cloud Elements server"
          },
          "403" : {
            "description" : "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502" : {
            "description" : "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404" : {
            "description" : "Not found - The requested resource is not found"
          },
          "415" : {
            "description" : "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405" : {
            "description" : "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406" : {
            "description" : "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409" : {
            "description" : "Conflict - If a resource being created already exists"
          }
        },
        "parameters" : [ {
          "in" : "header",
          "name" : "Authorization",
          "description" : "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
          "type" : "string",
          "required" : true
        }, {
          "in" : "path",
          "name" : "id",
          "description" : "The pull-request ID",
          "type" : "string",
          "required" : true
        }, {
          "schema" : {
            "$ref" : "#/definitions/pullRequestsMerge"
          },
          "in" : "body",
          "name" : "body",
          "description" : "The merge body",
          "required" : true
        } ],
        "tags" : [ "pull-requests" ]
      }
    },
    "/repositories" : {
      "get" : {
        "summary" : "Search for /repositories",
        "operationId" : "getRepositories",
        "responses" : {
          "200" : {
            "description" : "OK - Everything worked as expected",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/repositoriesListObject"
              }
            }
          },
          "400" : {
            "description" : "Bad Request - Often due to a missing request parameter"
          },
          "401" : {
            "description" : "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500" : {
            "description" : "Server error - Something went wrong on the Cloud Elements server"
          },
          "403" : {
            "description" : "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502" : {
            "description" : "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404" : {
            "description" : "Not found - The requested resource is not found"
          },
          "415" : {
            "description" : "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405" : {
            "description" : "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406" : {
            "description" : "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409" : {
            "description" : "Conflict - If a resource being created already exists"
          }
        },
        "parameters" : [ {
          "in" : "header",
          "name" : "Authorization",
          "description" : "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
          "type" : "string",
          "required" : true
        }, {
          "in" : "query",
          "name" : "pageSize",
          "format" : "int64",
          "description" : "The number of resources to return in a given page",
          "type" : "string",
          "required" : false
        }, {
          "description" : "The next page cursor, taken from the response header: `elements-next-page-token`",
          "in" : "query",
          "name" : "nextPage",
          "required" : false,
          "type" : "string"
        } ],
        "tags" : [ "repositories" ]
      }
    },
    "/repositories/{username}" : {
      "get" : {
        "summary" : "Search repositories for a user",
        "operationId" : "getRepositoryByUsername",
        "responses" : {
          "200" : {
            "description" : "OK - Everything worked as expected",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/repositoriesObject"
              }
            }
          },
          "400" : {
            "description" : "Bad Request - Often due to a missing request parameter"
          },
          "401" : {
            "description" : "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500" : {
            "description" : "Server error - Something went wrong on the Cloud Elements server"
          },
          "403" : {
            "description" : "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502" : {
            "description" : "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404" : {
            "description" : "Not found - The requested resource is not found"
          },
          "415" : {
            "description" : "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405" : {
            "description" : "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406" : {
            "description" : "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409" : {
            "description" : "Conflict - If a resource being created already exists"
          }
        },
        "parameters" : [ {
          "in" : "header",
          "name" : "Authorization",
          "description" : "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
          "type" : "string",
          "required" : true
        }, {
          "in" : "path",
          "name" : "username",
          "description" : "The username ID",
          "type" : "string",
          "required" : true
        }, {
          "in" : "query",
          "name" : "pageSize",
          "format" : "int64",
          "description" : "The number of resources to return in a given page",
          "type" : "string",
          "required" : false
        }, {
          "description" : "The next page cursor, taken from the response header: `elements-next-page-token`",
          "in" : "query",
          "name" : "nextPage",
          "required" : false,
          "type" : "string"
        } ],
        "tags" : [ "repositories" ]
      }
    },
    "/users" : {
      "get" : {
        "summary" : "Search for users",
        "operationId" : "getUsers",
        "responses" : {
          "200" : {
            "description" : "OK - Everything worked as expected",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/usersListObject"
              }
            }
          },
          "400" : {
            "description" : "Bad Request - Often due to a missing request parameter"
          },
          "401" : {
            "description" : "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500" : {
            "description" : "Server error - Something went wrong on the Cloud Elements server"
          },
          "403" : {
            "description" : "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502" : {
            "description" : "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404" : {
            "description" : "Not found - The requested resource is not found"
          },
          "415" : {
            "description" : "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405" : {
            "description" : "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406" : {
            "description" : "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409" : {
            "description" : "Conflict - If a resource being created already exists"
          }
        },
        "parameters" : [ {
          "in" : "header",
          "name" : "Authorization",
          "description" : "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
          "type" : "string",
          "required" : true
        }, {
          "in" : "query",
          "name" : "pageSize",
          "format" : "int64",
          "description" : "The number of resources to return in a given page",
          "type" : "string",
          "required" : false
        }, {
          "description" : "The next page cursor, taken from the response header: `elements-next-page-token`",
          "in" : "query",
          "name" : "nextPage",
          "required" : false,
          "type" : "string"
        } ],
        "tags" : [ "users" ]
      }
    },
    "/webhooks" : {
      "get" : {
        "summary" : "Search for webhooks",
        "operationId" : "getWebhooks",
        "responses" : {
          "200" : {
            "description" : "OK - Everything worked as expected",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/webhooksListObject"
              }
            }
          },
          "400" : {
            "description" : "Bad Request - Often due to a missing request parameter"
          },
          "401" : {
            "description" : "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500" : {
            "description" : "Server error - Something went wrong on the Cloud Elements server"
          },
          "403" : {
            "description" : "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502" : {
            "description" : "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404" : {
            "description" : "Not found - The requested resource is not found"
          },
          "415" : {
            "description" : "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405" : {
            "description" : "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406" : {
            "description" : "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409" : {
            "description" : "Conflict - If a resource being created already exists"
          }
        },
        "parameters" : [ {
          "in" : "header",
          "name" : "Authorization",
          "description" : "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
          "type" : "string",
          "required" : true
        }, {
          "in" : "query",
          "name" : "pageSize",
          "format" : "int64",
          "description" : "The number of resources to return in a given page",
          "type" : "string",
          "required" : false
        }, {
          "description" : "The next page cursor, taken from the response header: `elements-next-page-token`",
          "in" : "query",
          "name" : "nextPage",
          "required" : false,
          "type" : "string"
        } ],
        "tags" : [ "webhooks" ]
      }
    },
    "/webhooks/{id}" : {
      "patch" : {
        "summary" : "Update a webhook",
        "operationId" : "updateWebhookById",
        "responses" : {
          "200" : {
            "description" : "OK - Everything worked as expected",
            "schema" : {
              "$ref" : "#/definitions/patchWebhooksResp"
            }
          },
          "400" : {
            "description" : "Bad Request - Often due to a missing request parameter"
          },
          "401" : {
            "description" : "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500" : {
            "description" : "Server error - Something went wrong on the Cloud Elements server"
          },
          "403" : {
            "description" : "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502" : {
            "description" : "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404" : {
            "description" : "Not found - The requested resource is not found"
          },
          "415" : {
            "description" : "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405" : {
            "description" : "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406" : {
            "description" : "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409" : {
            "description" : "Conflict - If a resource being created already exists"
          }
        },
        "parameters" : [ {
          "in" : "header",
          "name" : "Authorization",
          "description" : "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
          "type" : "string",
          "required" : true
        }, {
          "in" : "path",
          "name" : "id",
          "description" : "The webhook id",
          "type" : "string",
          "required" : true
        }, {
          "schema" : {
            "$ref" : "#/definitions/patchWebhooksReq"
          },
          "in" : "body",
          "name" : "body",
          "description" : "The webhook body",
          "required" : true
        } ],
        "tags" : [ "webhooks" ]
      },
      "get" : {
        "summary" : "Retrieve a webhook",
        "operationId" : "getWebhookById",
        "responses" : {
          "200" : {
            "description" : "OK - Everything worked as expected",
            "schema" : {
              "$ref" : "#/definitions/webhooks"
            }
          },
          "400" : {
            "description" : "Bad Request - Often due to a missing request parameter"
          },
          "401" : {
            "description" : "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500" : {
            "description" : "Server error - Something went wrong on the Cloud Elements server"
          },
          "403" : {
            "description" : "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502" : {
            "description" : "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404" : {
            "description" : "Not found - The requested resource is not found"
          },
          "415" : {
            "description" : "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405" : {
            "description" : "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406" : {
            "description" : "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409" : {
            "description" : "Conflict - If a resource being created already exists"
          }
        },
        "parameters" : [ {
          "in" : "header",
          "name" : "Authorization",
          "description" : "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
          "type" : "string",
          "required" : true
        }, {
          "in" : "path",
          "name" : "id",
          "description" : "The id of the webhook",
          "type" : "string",
          "required" : true
        } ],
        "tags" : [ "webhooks" ]
      },
      "delete" : {
        "summary" : "Delete a webhook",
        "operationId" : "deleteWebhookById",
        "responses" : {
          "200" : {
            "description" : "OK - Everything worked as expected"
          },
          "400" : {
            "description" : "Bad Request - Often due to a missing request parameter"
          },
          "401" : {
            "description" : "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500" : {
            "description" : "Server error - Something went wrong on the Cloud Elements server"
          },
          "403" : {
            "description" : "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502" : {
            "description" : "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404" : {
            "description" : "Not found - The requested resource is not found"
          },
          "415" : {
            "description" : "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405" : {
            "description" : "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406" : {
            "description" : "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409" : {
            "description" : "Conflict - If a resource being created already exists"
          }
        },
        "parameters" : [ {
          "in" : "header",
          "name" : "Authorization",
          "description" : "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
          "type" : "string",
          "required" : true
        }, {
          "in" : "path",
          "name" : "id",
          "description" : "The webhook ID",
          "type" : "string",
          "required" : true
        } ],
        "tags" : [ "webhooks" ]
      }
    },
    "/{objectName}" : {
      "get" : {
        "operationId" : "getByObjectName",
        "parameters" : [ {
          "description" : "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
          "in" : "header",
          "name" : "Authorization",
          "required" : true,
          "type" : "string"
        }, {
          "description" : "The name of the object",
          "in" : "path",
          "name" : "objectName",
          "required" : true,
          "type" : "string"
        }, {
          "description" : "The CEQL search expression.",
          "in" : "query",
          "name" : "where",
          "required" : false,
          "type" : "string"
        }, {
          "description" : "The page size. Defaults to 200 if not provided. Maximum of 5000.",
          "format" : "int64",
          "in" : "query",
          "name" : "pageSize",
          "required" : false,
          "type" : "integer"
        }, {
          "description" : "The next page cursor, taken from the response header: `elements-next-page-token`",
          "in" : "query",
          "name" : "nextPage",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK - Everything worked as expected",
            "schema" : {
              "items" : {
                "$ref" : "#/definitions/Object"
              },
              "type" : "array"
            }
          },
          "400" : {
            "description" : "Bad Request - Often due to a missing request parameter"
          },
          "401" : {
            "description" : "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "403" : {
            "description" : "Forbidden - Access to the resource by the provider is forbidden"
          },
          "404" : {
            "description" : "Not found - The requested resource is not found"
          },
          "405" : {
            "description" : "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406" : {
            "description" : "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409" : {
            "description" : "Conflict - If a resource being created already exists"
          },
          "415" : {
            "description" : "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "500" : {
            "description" : "Server error - Something went wrong on the Cloud Elements server"
          },
          "502" : {
            "description" : "Provider server error - Something went wrong on the Provider or Endpoint's server"
          }
        },
        "summary" : "Search for {objectName}",
        "tags" : [ "objectName" ]
      },
      "post" : {
        "operationId" : "createByObjectName",
        "parameters" : [ {
          "description" : "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
          "in" : "header",
          "name" : "Authorization",
          "required" : true,
          "type" : "string"
        }, {
          "description" : "The name of the object",
          "in" : "path",
          "name" : "objectName",
          "required" : true,
          "type" : "string"
        }, {
          "description" : "The {objectName}",
          "in" : "body",
          "name" : "Body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/Object"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK - Everything worked as expected"
          },
          "400" : {
            "description" : "Bad Request - Often due to a missing request parameter"
          },
          "401" : {
            "description" : "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "403" : {
            "description" : "Forbidden - Access to the resource by the provider is forbidden"
          },
          "404" : {
            "description" : "Not found - The requested resource is not found"
          },
          "405" : {
            "description" : "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406" : {
            "description" : "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409" : {
            "description" : "Conflict - If a resource being created already exists"
          },
          "415" : {
            "description" : "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "500" : {
            "description" : "Server error - Something went wrong on the Cloud Elements server"
          },
          "502" : {
            "description" : "Provider server error - Something went wrong on the Provider or Endpoint's server"
          }
        },
        "summary" : "Create an {objectName}",
        "tags" : [ "objectName" ]
      }
    },
    "/{objectName}/{objectId}" : {
      "delete" : {
        "operationId" : "deleteObjectNameByObjectId",
        "parameters" : [ {
          "description" : "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
          "in" : "header",
          "name" : "Authorization",
          "required" : true,
          "type" : "string"
        }, {
          "description" : "The name of the object",
          "in" : "path",
          "name" : "objectName",
          "required" : true,
          "type" : "string"
        }, {
          "description" : "The {objectName} ID",
          "in" : "path",
          "name" : "objectId",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK - Everything worked as expected"
          },
          "400" : {
            "description" : "Bad Request - Often due to a missing request parameter"
          },
          "401" : {
            "description" : "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "403" : {
            "description" : "Forbidden - Access to the resource by the provider is forbidden"
          },
          "404" : {
            "description" : "Not found - The requested resource is not found"
          },
          "405" : {
            "description" : "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406" : {
            "description" : "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409" : {
            "description" : "Conflict - If a resource being created already exists"
          },
          "415" : {
            "description" : "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "500" : {
            "description" : "Server error - Something went wrong on the Cloud Elements server"
          },
          "502" : {
            "description" : "Provider server error - Something went wrong on the Provider or Endpoint's server"
          }
        },
        "summary" : "Delete an {objectName}",
        "tags" : [ "objectName" ]
      },
      "get" : {
        "operationId" : "getObjectNameByObjectId",
        "parameters" : [ {
          "description" : "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
          "in" : "header",
          "name" : "Authorization",
          "required" : true,
          "type" : "string"
        }, {
          "description" : "The name of the object",
          "in" : "path",
          "name" : "objectName",
          "required" : true,
          "type" : "string"
        }, {
          "description" : "The {objectName} ID",
          "in" : "path",
          "name" : "objectId",
          "required" : true,
          "type" : "string"
        } ],
        "produces" : [ "application/json", "application/pdf" ],
        "responses" : {
          "200" : {
            "description" : "OK - Everything worked as expected",
            "schema" : {
              "$ref" : "#/definitions/Object"
            }
          },
          "400" : {
            "description" : "Bad Request - Often due to a missing request parameter"
          },
          "401" : {
            "description" : "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "403" : {
            "description" : "Forbidden - Access to the resource by the provider is forbidden"
          },
          "404" : {
            "description" : "Not found - The requested resource is not found"
          },
          "405" : {
            "description" : "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406" : {
            "description" : "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409" : {
            "description" : "Conflict - If a resource being created already exists"
          },
          "415" : {
            "description" : "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "500" : {
            "description" : "Server error - Something went wrong on the Cloud Elements server"
          },
          "502" : {
            "description" : "Provider server error - Something went wrong on the Provider or Endpoint's server"
          }
        },
        "summary" : "Retrieve an {objectName}",
        "tags" : [ "objectName" ]
      },
      "patch" : {
        "operationId" : "updateObjectNameByObjectId",
        "parameters" : [ {
          "description" : "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
          "in" : "header",
          "name" : "Authorization",
          "required" : true,
          "type" : "string"
        }, {
          "description" : "The name of the object",
          "in" : "path",
          "name" : "objectName",
          "required" : true,
          "type" : "string"
        }, {
          "description" : "The {objectName} ID",
          "in" : "path",
          "name" : "objectId",
          "required" : true,
          "type" : "string"
        }, {
          "description" : "The {objectName}",
          "in" : "body",
          "name" : "Body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/Object"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK - Everything worked as expected",
            "schema" : {
              "$ref" : "#/definitions/Object"
            }
          },
          "400" : {
            "description" : "Bad Request - Often due to a missing request parameter"
          },
          "401" : {
            "description" : "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "403" : {
            "description" : "Forbidden - Access to the resource by the provider is forbidden"
          },
          "404" : {
            "description" : "Not found - The requested resource is not found"
          },
          "405" : {
            "description" : "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406" : {
            "description" : "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409" : {
            "description" : "Conflict - If a resource being created already exists"
          },
          "415" : {
            "description" : "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "500" : {
            "description" : "Server error - Something went wrong on the Cloud Elements server"
          },
          "502" : {
            "description" : "Provider server error - Something went wrong on the Provider or Endpoint's server"
          }
        },
        "summary" : "Update an {objectName}",
        "tags" : [ "objectName" ]
      },
      "put" : {
        "operationId" : "replaceObjectNameByObjectId",
        "parameters" : [ {
          "description" : "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
          "in" : "header",
          "name" : "Authorization",
          "required" : true,
          "type" : "string"
        }, {
          "description" : "The name of the object",
          "in" : "path",
          "name" : "objectName",
          "required" : true,
          "type" : "string"
        }, {
          "description" : "The {objectName} ID",
          "in" : "path",
          "name" : "objectId",
          "required" : true,
          "type" : "string"
        }, {
          "description" : "The {objectName}",
          "in" : "body",
          "name" : "Body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/Object"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK - Everything worked as expected",
            "schema" : {
              "$ref" : "#/definitions/Object"
            }
          },
          "400" : {
            "description" : "Bad Request - Often due to a missing request parameter"
          },
          "401" : {
            "description" : "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "403" : {
            "description" : "Forbidden - Access to the resource by the provider is forbidden"
          },
          "404" : {
            "description" : "Not found - The requested resource is not found"
          },
          "405" : {
            "description" : "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406" : {
            "description" : "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409" : {
            "description" : "Conflict - If a resource being created already exists"
          },
          "415" : {
            "description" : "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "500" : {
            "description" : "Server error - Something went wrong on the Cloud Elements server"
          },
          "502" : {
            "description" : "Provider server error - Something went wrong on the Provider or Endpoint's server"
          }
        },
        "summary" : "Update an {objectName}",
        "tags" : [ "objectName" ]
      }
    },
    "/{objectName}/{objectId}/{childObjectName}" : {
      "get" : {
        "operationId" : "getObjectNameByChildObjectName",
        "parameters" : [ {
          "description" : "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
          "in" : "header",
          "name" : "Authorization",
          "required" : true,
          "type" : "string"
        }, {
          "description" : "The name of the object",
          "in" : "path",
          "name" : "objectName",
          "required" : true,
          "type" : "string"
        }, {
          "description" : "The {objectName} ID",
          "in" : "path",
          "name" : "objectId",
          "required" : true,
          "type" : "string"
        }, {
          "description" : "The name of the childObjectName",
          "in" : "path",
          "name" : "childObjectName",
          "required" : true,
          "type" : "string"
        }, {
          "description" : "The CEQL search expression.",
          "in" : "query",
          "name" : "where",
          "required" : false,
          "type" : "string"
        }, {
          "description" : "The page size. Defaults to 200 if not provided. Maximum of 5000.",
          "format" : "int64",
          "in" : "query",
          "name" : "pageSize",
          "required" : false,
          "type" : "integer"
        }, {
          "description" : "The next page cursor, taken from the response header: `elements-next-page-token`",
          "in" : "query",
          "name" : "nextPage",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK - Everything worked as expected",
            "schema" : {
              "items" : {
                "$ref" : "#/definitions/Object"
              },
              "type" : "array"
            }
          },
          "400" : {
            "description" : "Bad Request - Often due to a missing request parameter"
          },
          "401" : {
            "description" : "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "403" : {
            "description" : "Forbidden - Access to the resource by the provider is forbidden"
          },
          "404" : {
            "description" : "Not found - The requested resource is not found"
          },
          "405" : {
            "description" : "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406" : {
            "description" : "Not acceptable - The response content type does not match the &quot;Accept&quot; header value"
          },
          "409" : {
            "description" : "Conflict - If a resource being created already exists"
          },
          "415" : {
            "description" : "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "500" : {
            "description" : "Server error - Something went wrong on the Cloud Elements server"
          },
          "502" : {
            "description" : "Provider server error - Something went wrong on the Provider or Endpoint's server"
          }
        },
        "summary" : "Search for {childObjectName}",
        "tags" : [ "objectName" ]
      },
      "post" : {
        "operationId" : "createObjectNameByChildObjectName",
        "parameters" : [ {
          "description" : "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
          "in" : "header",
          "name" : "Authorization",
          "required" : true,
          "type" : "string"
        }, {
          "description" : "The name of the object",
          "in" : "path",
          "name" : "objectName",
          "required" : true,
          "type" : "string"
        }, {
          "description" : "The {objectName} ID",
          "in" : "path",
          "name" : "objectId",
          "required" : true,
          "type" : "string"
        }, {
          "description" : "The name of the object",
          "in" : "path",
          "name" : "childObjectName",
          "required" : true,
          "type" : "string"
        }, {
          "description" : "The {childObjectName}",
          "in" : "body",
          "name" : "Body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/Object"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK - Everything worked as expected"
          },
          "400" : {
            "description" : "Bad Request - Often due to a missing request parameter"
          },
          "401" : {
            "description" : "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "403" : {
            "description" : "Forbidden - Access to the resource by the provider is forbidden"
          },
          "404" : {
            "description" : "Not found - The requested resource is not found"
          },
          "405" : {
            "description" : "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406" : {
            "description" : "Not acceptable - The response content type does not match the &quot;Accept&quot; header value"
          },
          "409" : {
            "description" : "Conflict - If a resource being created already exists"
          },
          "415" : {
            "description" : "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "500" : {
            "description" : "Server error - Something went wrong on the Cloud Elements server"
          },
          "502" : {
            "description" : "Provider server error - Something went wrong on the Provider or Endpoint's server"
          }
        },
        "summary" : "Create an {childObjectName}",
        "tags" : [ "objectName" ]
      }
    },
    "/{objectName}/{objectId}/{childObjectName}/{childObjectId}" : {
      "delete" : {
        "operationId" : "deleteObjectNameByChildObjectId",
        "parameters" : [ {
          "description" : "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
          "in" : "header",
          "name" : "Authorization",
          "required" : true,
          "type" : "string"
        }, {
          "description" : "The name of the object",
          "in" : "path",
          "name" : "objectName",
          "required" : true,
          "type" : "string"
        }, {
          "description" : "The name of the childObjectName",
          "in" : "path",
          "name" : "childObjectName",
          "required" : true,
          "type" : "string"
        }, {
          "description" : "The {objectName} ID",
          "in" : "path",
          "name" : "objectId",
          "required" : true,
          "type" : "string"
        }, {
          "description" : "The {childObjectName} ID",
          "in" : "path",
          "name" : "childObjectId",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK - Everything worked as expected"
          },
          "400" : {
            "description" : "Bad Request - Often due to a missing request parameter"
          },
          "401" : {
            "description" : "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "403" : {
            "description" : "Forbidden - Access to the resource by the provider is forbidden"
          },
          "404" : {
            "description" : "Not found - The requested resource is not found"
          },
          "405" : {
            "description" : "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406" : {
            "description" : "Not acceptable - The response content type does not match the &quot;Accept&quot; header value"
          },
          "409" : {
            "description" : "Conflict - If a resource being created already exists"
          },
          "415" : {
            "description" : "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "500" : {
            "description" : "Server error - Something went wrong on the Cloud Elements server"
          },
          "502" : {
            "description" : "Provider server error - Something went wrong on the Provider or Endpoint's server"
          }
        },
        "summary" : "Delete an {childObjectName}",
        "tags" : [ "objectName" ]
      },
      "get" : {
        "operationId" : "getObjectNameByChildObjectId",
        "parameters" : [ {
          "description" : "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
          "in" : "header",
          "name" : "Authorization",
          "required" : true,
          "type" : "string"
        }, {
          "description" : "The name of the object",
          "in" : "path",
          "name" : "objectName",
          "required" : true,
          "type" : "string"
        }, {
          "description" : "The name of the childObjectName",
          "in" : "path",
          "name" : "childObjectName",
          "required" : true,
          "type" : "string"
        }, {
          "description" : "The {objectName} ID",
          "in" : "path",
          "name" : "objectId",
          "required" : true,
          "type" : "string"
        }, {
          "description" : "The {childObjectName} ID",
          "in" : "path",
          "name" : "childObjectId",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK - Everything worked as expected",
            "schema" : {
              "$ref" : "#/definitions/Object"
            }
          },
          "400" : {
            "description" : "Bad Request - Often due to a missing request parameter"
          },
          "401" : {
            "description" : "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "403" : {
            "description" : "Forbidden - Access to the resource by the provider is forbidden"
          },
          "404" : {
            "description" : "Not found - The requested resource is not found"
          },
          "405" : {
            "description" : "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406" : {
            "description" : "Not acceptable - The response content type does not match the &quot;Accept&quot; header value"
          },
          "409" : {
            "description" : "Conflict - If a resource being created already exists"
          },
          "415" : {
            "description" : "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "500" : {
            "description" : "Server error - Something went wrong on the Cloud Elements server"
          },
          "502" : {
            "description" : "Provider server error - Something went wrong on the Provider or Endpoint's server"
          }
        },
        "summary" : "Retrieve an {childObjectName}",
        "tags" : [ "objectName" ]
      },
      "patch" : {
        "operationId" : "updateObjectNameByChildObjectId",
        "parameters" : [ {
          "description" : "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
          "in" : "header",
          "name" : "Authorization",
          "required" : true,
          "type" : "string"
        }, {
          "description" : "The name of the object",
          "in" : "path",
          "name" : "objectName",
          "required" : true,
          "type" : "string"
        }, {
          "description" : "The name of the childObjectName",
          "in" : "path",
          "name" : "childObjectName",
          "required" : true,
          "type" : "string"
        }, {
          "description" : "The {objectName} ID",
          "in" : "path",
          "name" : "objectId",
          "required" : true,
          "type" : "string"
        }, {
          "description" : "The {childObjectName} ID",
          "in" : "path",
          "name" : "childObjectId",
          "required" : true,
          "type" : "string"
        }, {
          "description" : "The {objectName}",
          "in" : "body",
          "name" : "Body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/Object"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK - Everything worked as expected",
            "schema" : {
              "$ref" : "#/definitions/Object"
            }
          },
          "400" : {
            "description" : "Bad Request - Often due to a missing request parameter"
          },
          "401" : {
            "description" : "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "403" : {
            "description" : "Forbidden - Access to the resource by the provider is forbidden"
          },
          "404" : {
            "description" : "Not found - The requested resource is not found"
          },
          "405" : {
            "description" : "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406" : {
            "description" : "Not acceptable - The response content type does not match the &quot;Accept&quot; header value"
          },
          "409" : {
            "description" : "Conflict - If a resource being created already exists"
          },
          "415" : {
            "description" : "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "500" : {
            "description" : "Server error - Something went wrong on the Cloud Elements server"
          },
          "502" : {
            "description" : "Provider server error - Something went wrong on the Provider or Endpoint's server"
          }
        },
        "summary" : "Update an {childObjectName}",
        "tags" : [ "objectName" ]
      },
      "put" : {
        "operationId" : "replaceObjectNameByChildObjectId",
        "parameters" : [ {
          "description" : "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
          "in" : "header",
          "name" : "Authorization",
          "required" : true,
          "type" : "string"
        }, {
          "description" : "The name of the object",
          "in" : "path",
          "name" : "objectName",
          "required" : true,
          "type" : "string"
        }, {
          "description" : "The name of the childObjectName",
          "in" : "path",
          "name" : "childObjectName",
          "required" : true,
          "type" : "string"
        }, {
          "description" : "The {objectName} ID",
          "in" : "path",
          "name" : "objectId",
          "required" : true,
          "type" : "string"
        }, {
          "description" : "The {childObjectName} ID",
          "in" : "path",
          "name" : "childObjectId",
          "required" : true,
          "type" : "string"
        }, {
          "description" : "The {objectName}",
          "in" : "body",
          "name" : "Body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/Object"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK - Everything worked as expected",
            "schema" : {
              "$ref" : "#/definitions/Object"
            }
          },
          "400" : {
            "description" : "Bad Request - Often due to a missing request parameter"
          },
          "401" : {
            "description" : "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "403" : {
            "description" : "Forbidden - Access to the resource by the provider is forbidden"
          },
          "404" : {
            "description" : "Not found - The requested resource is not found"
          },
          "405" : {
            "description" : "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406" : {
            "description" : "Not acceptable - The response content type does not match the &quot;Accept&quot; header value"
          },
          "409" : {
            "description" : "Conflict - If a resource being created already exists"
          },
          "415" : {
            "description" : "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "500" : {
            "description" : "Server error - Something went wrong on the Cloud Elements server"
          },
          "502" : {
            "description" : "Provider server error - Something went wrong on the Provider or Endpoint's server"
          }
        },
        "summary" : "Update an {childObjectName}",
        "tags" : [ "objectName" ]
      }
    }
  },
  "host" : "localhost:8080",
  "schemes" : [ "http" ],
  "definitions" : {
    "swaggerdefinitions" : {
      "x-has-customfields" : false,
      "type" : "object",
      "title" : "definitions",
      "properties" : {
        "definition-name" : {
          "$ref" : "#/definitions/swaggerdefinition-name"
        }
      }
    },
    "_links" : {
      "properties" : {
        "comments" : {
          "$ref" : "#/definitions/comments"
        },
        "commits" : {
          "$ref" : "#/definitions/commits"
        },
        "html" : {
          "$ref" : "#/definitions/html"
        },
        "issue" : {
          "$ref" : "#/definitions/issue"
        },
        "review_comment" : {
          "$ref" : "#/definitions/review_comment"
        },
        "review_comments" : {
          "$ref" : "#/definitions/review_comments"
        },
        "self" : {
          "$ref" : "#/definitions/self"
        },
        "statuses" : {
          "$ref" : "#/definitions/statuses"
        }
      },
      "title" : "_links",
      "type" : "object",
      "x-has-customfields" : false
    },
    "required_status_checks" : {
      "properties" : {
        "enforcement_level" : {
          "type" : "string"
        }
      },
      "type" : "object"
    },
    "commit" : {
      "properties" : {
        "author" : {
          "$ref" : "#/definitions/author"
        },
        "comments_url" : {
          "type" : "string"
        },
        "commit" : {
          "$ref" : "#/definitions/commitCommit"
        },
        "committer" : {
          "$ref" : "#/definitions/committer"
        },
        "html_url" : {
          "type" : "string"
        },
        "parents" : {
          "items" : {
            "$ref" : "#/definitions/parents"
          },
          "type" : "array"
        },
        "sha" : {
          "type" : "string"
        },
        "url" : {
          "type" : "string"
        }
      },
      "type" : "object"
    },
    "swaggerdefinition-name" : {
      "x-has-customfields" : false,
      "type" : "object",
      "title" : "definition-name",
      "properties" : {
        "properties" : {
          "$ref" : "#/definitions/swaggerproperties"
        }
      }
    },
    "swaggerparameters" : {
      "x-has-customfields" : false,
      "title" : "parameters",
      "properties" : {
        "schema" : {
          "$ref" : "#/definitions/swaggerparametersschema"
        },
        "in" : {
          "x-samplevalue" : "header",
          "type" : "string"
        },
        "name" : {
          "x-samplevalue" : "Authorization",
          "type" : "string"
        },
        "description" : {
          "x-samplevalue" : "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
          "type" : "string"
        },
        "type" : {
          "x-samplevalue" : "string",
          "type" : "string"
        },
        "required" : {
          "x-samplevalue" : true,
          "type" : "boolean"
        }
      },
      "type" : "object"
    },
    "repositoriesListObject" : {
      "properties" : {
        "archive_url" : {
          "type" : "string",
          "x-samplevalue" : "https://api.github.com/repos/cloud-elements/churros/{archive_format}{/ref}"
        },
        "archived" : {
          "type" : "boolean",
          "x-samplevalue" : false
        },
        "assignees_url" : {
          "type" : "string",
          "x-samplevalue" : "https://api.github.com/repos/cloud-elements/churros/assignees{/user}"
        },
        "blobs_url" : {
          "type" : "string",
          "x-samplevalue" : "https://api.github.com/repos/cloud-elements/churros/git/blobs{/sha}"
        },
        "branches_url" : {
          "type" : "string",
          "x-samplevalue" : "https://api.github.com/repos/cloud-elements/churros/branches{/branch}"
        },
        "clone_url" : {
          "type" : "string",
          "x-samplevalue" : "https://github.com/cloud-elements/churros.git"
        },
        "collaborators_url" : {
          "type" : "string",
          "x-samplevalue" : "https://api.github.com/repos/cloud-elements/churros/collaborators{/collaborator}"
        },
        "comments_url" : {
          "type" : "string",
          "x-samplevalue" : "https://api.github.com/repos/cloud-elements/churros/comments{/number}"
        },
        "commits_url" : {
          "type" : "string",
          "x-samplevalue" : "https://api.github.com/repos/cloud-elements/churros/commits{/sha}"
        },
        "compare_url" : {
          "type" : "string",
          "x-samplevalue" : "https://api.github.com/repos/cloud-elements/churros/compare/{base}...{head}"
        },
        "contents_url" : {
          "type" : "string",
          "x-samplevalue" : "https://api.github.com/repos/cloud-elements/churros/contents/{+path}"
        },
        "contributors_url" : {
          "type" : "string",
          "x-samplevalue" : "https://api.github.com/repos/cloud-elements/churros/contributors"
        },
        "created_at" : {
          "format" : "date-time",
          "type" : "string",
          "x-mask" : "yyyy-MM-dd'T'HH:mm:ssZ",
          "x-samplevalue" : "2015-11-17T15:32:22Z"
        },
        "default_branch" : {
          "type" : "string",
          "x-samplevalue" : "master"
        },
        "deployments_url" : {
          "type" : "string",
          "x-samplevalue" : "https://api.github.com/repos/cloud-elements/churros/deployments"
        },
        "description" : {
          "type" : "string",
          "x-samplevalue" : ":cop: Cloud Elements API testing framework"
        },
        "downloads_url" : {
          "type" : "string",
          "x-samplevalue" : "https://api.github.com/repos/cloud-elements/churros/downloads"
        },
        "events_url" : {
          "type" : "string",
          "x-samplevalue" : "https://api.github.com/repos/cloud-elements/churros/events"
        },
        "fork" : {
          "type" : "boolean",
          "x-samplevalue" : false
        },
        "forks" : {
          "format" : "int32",
          "type" : "integer",
          "x-samplevalue" : 5
        },
        "forks_count" : {
          "format" : "int32",
          "type" : "integer",
          "x-samplevalue" : 5
        },
        "forks_url" : {
          "type" : "string",
          "x-samplevalue" : "https://api.github.com/repos/cloud-elements/churros/forks"
        },
        "full_name" : {
          "type" : "string",
          "x-samplevalue" : "cloud-elements/churros"
        },
        "git_commits_url" : {
          "type" : "string",
          "x-samplevalue" : "https://api.github.com/repos/cloud-elements/churros/git/commits{/sha}"
        },
        "git_refs_url" : {
          "type" : "string",
          "x-samplevalue" : "https://api.github.com/repos/cloud-elements/churros/git/refs{/sha}"
        },
        "git_tags_url" : {
          "type" : "string",
          "x-samplevalue" : "https://api.github.com/repos/cloud-elements/churros/git/tags{/sha}"
        },
        "git_url" : {
          "type" : "string",
          "x-samplevalue" : "git://github.com/cloud-elements/churros.git"
        },
        "has_downloads" : {
          "type" : "boolean",
          "x-samplevalue" : true
        },
        "has_issues" : {
          "type" : "boolean",
          "x-samplevalue" : true
        },
        "has_pages" : {
          "type" : "boolean",
          "x-samplevalue" : true
        },
        "has_projects" : {
          "type" : "boolean",
          "x-samplevalue" : true
        },
        "has_wiki" : {
          "type" : "boolean",
          "x-samplevalue" : true
        },
        "homepage" : {
          "type" : "string",
          "x-samplevalue" : ""
        },
        "hooks_url" : {
          "type" : "string",
          "x-samplevalue" : "https://api.github.com/repos/cloud-elements/churros/hooks"
        },
        "html_url" : {
          "type" : "string",
          "x-samplevalue" : "https://github.com/cloud-elements/churros"
        },
        "id" : {
          "format" : "int32",
          "type" : "integer",
          "x-samplevalue" : 46356335
        },
        "issue_comment_url" : {
          "type" : "string",
          "x-samplevalue" : "https://api.github.com/repos/cloud-elements/churros/issues/comments{/number}"
        },
        "issue_events_url" : {
          "type" : "string",
          "x-samplevalue" : "https://api.github.com/repos/cloud-elements/churros/issues/events{/number}"
        },
        "issues_url" : {
          "type" : "string",
          "x-samplevalue" : "https://api.github.com/repos/cloud-elements/churros/issues{/number}"
        },
        "keys_url" : {
          "type" : "string",
          "x-samplevalue" : "https://api.github.com/repos/cloud-elements/churros/keys{/key_id}"
        },
        "labels_url" : {
          "type" : "string",
          "x-samplevalue" : "https://api.github.com/repos/cloud-elements/churros/labels{/name}"
        },
        "language" : {
          "type" : "string",
          "x-samplevalue" : "JavaScript"
        },
        "languages_url" : {
          "type" : "string",
          "x-samplevalue" : "https://api.github.com/repos/cloud-elements/churros/languages"
        },
        "license" : {
          "$ref" : "#/definitions/license"
        },
        "merges_url" : {
          "type" : "string",
          "x-samplevalue" : "https://api.github.com/repos/cloud-elements/churros/merges"
        },
        "milestones_url" : {
          "type" : "string",
          "x-samplevalue" : "https://api.github.com/repos/cloud-elements/churros/milestones{/number}"
        },
        "name" : {
          "type" : "string",
          "x-samplevalue" : "churros"
        },
        "notifications_url" : {
          "type" : "string",
          "x-samplevalue" : "https://api.github.com/repos/cloud-elements/churros/notifications{?since,all,participating}"
        },
        "open_issues" : {
          "format" : "int32",
          "type" : "integer",
          "x-samplevalue" : 111
        },
        "open_issues_count" : {
          "format" : "int32",
          "type" : "integer",
          "x-samplevalue" : 111
        },
        "owner" : {
          "$ref" : "#/definitions/owner"
        },
        "permissions" : {
          "$ref" : "#/definitions/permissions"
        },
        "private" : {
          "type" : "boolean",
          "x-samplevalue" : false
        },
        "pulls_url" : {
          "type" : "string",
          "x-samplevalue" : "https://api.github.com/repos/cloud-elements/churros/pulls{/number}"
        },
        "pushed_at" : {
          "format" : "date-time",
          "type" : "string",
          "x-mask" : "yyyy-MM-dd'T'HH:mm:ssZ",
          "x-samplevalue" : "2018-04-24T07:39:31Z"
        },
        "releases_url" : {
          "type" : "string",
          "x-samplevalue" : "https://api.github.com/repos/cloud-elements/churros/releases{/id}"
        },
        "size" : {
          "format" : "int32",
          "type" : "integer",
          "x-samplevalue" : 14458
        },
        "ssh_url" : {
          "type" : "string",
          "x-samplevalue" : "git@github.com:cloud-elements/churros.git"
        },
        "stargazers_count" : {
          "format" : "int32",
          "type" : "integer",
          "x-samplevalue" : 9
        },
        "stargazers_url" : {
          "type" : "string",
          "x-samplevalue" : "https://api.github.com/repos/cloud-elements/churros/stargazers"
        },
        "statuses_url" : {
          "type" : "string",
          "x-samplevalue" : "https://api.github.com/repos/cloud-elements/churros/statuses/{sha}"
        },
        "subscribers_url" : {
          "type" : "string",
          "x-samplevalue" : "https://api.github.com/repos/cloud-elements/churros/subscribers"
        },
        "subscription_url" : {
          "type" : "string",
          "x-samplevalue" : "https://api.github.com/repos/cloud-elements/churros/subscription"
        },
        "svn_url" : {
          "type" : "string",
          "x-samplevalue" : "https://github.com/cloud-elements/churros"
        },
        "tags_url" : {
          "type" : "string",
          "x-samplevalue" : "https://api.github.com/repos/cloud-elements/churros/tags"
        },
        "teams_url" : {
          "type" : "string",
          "x-samplevalue" : "https://api.github.com/repos/cloud-elements/churros/teams"
        },
        "trees_url" : {
          "type" : "string",
          "x-samplevalue" : "https://api.github.com/repos/cloud-elements/churros/git/trees{/sha}"
        },
        "updated_at" : {
          "format" : "date-time",
          "type" : "string",
          "x-mask" : "yyyy-MM-dd'T'HH:mm:ssZ",
          "x-samplevalue" : "2018-04-23T00:05:15Z"
        },
        "url" : {
          "type" : "string",
          "x-samplevalue" : "https://api.github.com/repos/cloud-elements/churros"
        },
        "watchers" : {
          "format" : "int32",
          "type" : "integer",
          "x-samplevalue" : 9
        },
        "watchers_count" : {
          "format" : "int32",
          "type" : "integer",
          "x-samplevalue" : 9
        }
      },
      "title" : "repositoriesList",
      "type" : "object",
      "x-has-customfields" : false,
      "x-primary-key" : [ "id" ],
      "x-vendor-objectname" : "Repositories"
    },
    "committer" : {
      "properties" : {
        "avatar_url" : {
          "type" : "string"
        },
        "events_url" : {
          "type" : "string"
        },
        "followers_url" : {
          "type" : "string"
        },
        "following_url" : {
          "type" : "string"
        },
        "gists_url" : {
          "type" : "string"
        },
        "gravatar_id" : {
          "type" : "string"
        },
        "html_url" : {
          "type" : "string"
        },
        "id" : {
          "format" : "int32",
          "type" : "integer"
        },
        "login" : {
          "type" : "string"
        },
        "organizations_url" : {
          "type" : "string"
        },
        "received_events_url" : {
          "type" : "string"
        },
        "repos_url" : {
          "type" : "string"
        },
        "site_admin" : {
          "type" : "boolean"
        },
        "starred_url" : {
          "type" : "string"
        },
        "subscriptions_url" : {
          "type" : "string"
        },
        "type" : {
          "type" : "string"
        },
        "url" : {
          "type" : "string"
        }
      },
      "type" : "object"
    },
    "patchPullRequestResp" : {
      "properties" : {
        "_links" : {
          "$ref" : "#/definitions/_links"
        },
        "active_lock_reason" : {
          "type" : "string",
          "x-samplevalue" : "too heated"
        },
        "assignee" : {
          "$ref" : "#/definitions/assignee"
        },
        "base" : {
          "$ref" : "#/definitions/base"
        },
        "body" : {
          "type" : "string",
          "x-samplevalue" : "Please pull these awesome changes"
        },
        "closed_at" : {
          "format" : "date-time",
          "type" : "string",
          "x-mask" : "yyyy-MM-dd'T'HH:mm:ssZ",
          "x-samplevalue" : "2011-01-26T19:01:12Z"
        },
        "comments_url" : {
          "type" : "string",
          "x-samplevalue" : "https://api.github.com/repos/octocat/Hello-World/issues/1347/comments"
        },
        "commits_url" : {
          "type" : "string",
          "x-samplevalue" : "https://api.github.com/repos/octocat/Hello-World/pulls/1347/commits"
        },
        "created_at" : {
          "format" : "date-time",
          "type" : "string",
          "x-mask" : "yyyy-MM-dd'T'HH:mm:ssZ",
          "x-samplevalue" : "2011-01-26T19:01:12Z"
        },
        "diff_url" : {
          "type" : "string",
          "x-samplevalue" : "https://github.com/octocat/Hello-World/pull/1347.diff"
        },
        "head" : {
          "$ref" : "#/definitions/head"
        },
        "html_url" : {
          "type" : "string",
          "x-samplevalue" : "https://github.com/octocat/Hello-World/pull/1347"
        },
        "id" : {
          "format" : "int32",
          "type" : "integer",
          "x-samplevalue" : 1
        },
        "issue_url" : {
          "type" : "string",
          "x-samplevalue" : "https://api.github.com/repos/octocat/Hello-World/issues/1347"
        },
        "labels" : {
          "items" : {
            "$ref" : "#/definitions/labels"
          },
          "type" : "array"
        },
        "locked" : {
          "type" : "boolean",
          "x-samplevalue" : true
        },
        "merged_at" : {
          "format" : "date-time",
          "type" : "string",
          "x-mask" : "yyyy-MM-dd'T'HH:mm:ssZ",
          "x-samplevalue" : "2011-01-26T19:01:12Z"
        },
        "milestone" : {
          "$ref" : "#/definitions/milestone"
        },
        "number" : {
          "format" : "int32",
          "type" : "integer",
          "x-samplevalue" : 1347
        },
        "patch_url" : {
          "type" : "string",
          "x-samplevalue" : "https://github.com/octocat/Hello-World/pull/1347.patch"
        },
        "review_comment_url" : {
          "type" : "string",
          "x-samplevalue" : "https://api.github.com/repos/octocat/Hello-World/pulls/comments{/number}"
        },
        "review_comments_url" : {
          "type" : "string",
          "x-samplevalue" : "https://api.github.com/repos/octocat/Hello-World/pulls/1347/comments"
        },
        "state" : {
          "type" : "string",
          "x-samplevalue" : "open"
        },
        "statuses_url" : {
          "type" : "string",
          "x-samplevalue" : "https://api.github.com/repos/octocat/Hello-World/statuses/6dcb09b5b57875f334f61aebed695e2e4193db5e"
        },
        "title" : {
          "type" : "string",
          "x-samplevalue" : "new-feature"
        },
        "updated_at" : {
          "format" : "date-time",
          "type" : "string",
          "x-mask" : "yyyy-MM-dd'T'HH:mm:ssZ",
          "x-samplevalue" : "2011-01-26T19:01:12Z"
        },
        "url" : {
          "type" : "string",
          "x-samplevalue" : "https://api.github.com/repos/octocat/Hello-World/pulls/1347"
        },
        "user" : {
          "$ref" : "#/definitions/user"
        }
      },
      "title" : "patchPullRequestResp",
      "x-has-customfields" : false,
      "x-primary-key" : [ "id" ],
      "x-vendor-objectname" : "Pull Requests",
      "type" : "object"
    },
    "usersListObject" : {
      "properties" : {
        "avatar_url" : {
          "type" : "string",
          "x-samplevalue" : "https://avatars0.githubusercontent.com/u/1?v=4"
        },
        "events_url" : {
          "type" : "string",
          "x-samplevalue" : "https://api.github.com/users/mojombo/events{/privacy}"
        },
        "followers_url" : {
          "type" : "string",
          "x-samplevalue" : "https://api.github.com/users/mojombo/followers"
        },
        "following_url" : {
          "type" : "string",
          "x-samplevalue" : "https://api.github.com/users/mojombo/following{/other_user}"
        },
        "gists_url" : {
          "type" : "string",
          "x-samplevalue" : "https://api.github.com/users/mojombo/gists{/gist_id}"
        },
        "gravatar_id" : {
          "type" : "string",
          "x-samplevalue" : ""
        },
        "html_url" : {
          "type" : "string",
          "x-samplevalue" : "https://github.com/mojombo"
        },
        "id" : {
          "format" : "int32",
          "type" : "integer",
          "x-samplevalue" : 1
        },
        "login" : {
          "type" : "string",
          "x-samplevalue" : "mojombo"
        },
        "organizations_url" : {
          "type" : "string",
          "x-samplevalue" : "https://api.github.com/users/mojombo/orgs"
        },
        "received_events_url" : {
          "type" : "string",
          "x-samplevalue" : "https://api.github.com/users/mojombo/received_events"
        },
        "repos_url" : {
          "type" : "string",
          "x-samplevalue" : "https://api.github.com/users/mojombo/repos"
        },
        "site_admin" : {
          "type" : "boolean",
          "x-samplevalue" : false
        },
        "starred_url" : {
          "type" : "string",
          "x-samplevalue" : "https://api.github.com/users/mojombo/starred{/owner}{/repo}"
        },
        "subscriptions_url" : {
          "type" : "string",
          "x-samplevalue" : "https://api.github.com/users/mojombo/subscriptions"
        },
        "type" : {
          "type" : "string",
          "x-samplevalue" : "User"
        },
        "url" : {
          "type" : "string",
          "x-samplevalue" : "https://api.github.com/users/mojombo"
        }
      },
      "title" : "usersList",
      "type" : "object",
      "x-has-customfields" : false,
      "x-primary-key" : [ "id" ],
      "x-vendor-objectname" : "Users"
    },
    "permissions" : {
      "properties" : {
        "admin" : {
          "type" : "boolean",
          "x-samplevalue" : true
        },
        "pull" : {
          "type" : "boolean",
          "x-samplevalue" : true
        },
        "push" : {
          "type" : "boolean",
          "x-samplevalue" : true
        }
      },
      "title" : "permissions",
      "type" : "object",
      "x-has-customfields" : false
    },
    "me" : {
      "properties" : {
        "avatar_url" : {
          "type" : "string",
          "x-samplevalue" : "https://avatars1.githubusercontent.com/u/22442264?v=4"
        },
        "blog" : {
          "type" : "string",
          "x-samplevalue" : ""
        },
        "created_at" : {
          "format" : "date-time",
          "type" : "string",
          "x-mask" : "yyyy-MM-dd'T'HH:mm:ssZ",
          "x-samplevalue" : "2016-09-26T07:40:59Z"
        },
        "events_url" : {
          "type" : "string",
          "x-samplevalue" : "https://api.github.com/users/owner-name/events{/privacy}"
        },
        "followers" : {
          "format" : "int32",
          "type" : "integer",
          "x-samplevalue" : 0
        },
        "followers_url" : {
          "type" : "string",
          "x-samplevalue" : "https://api.github.com/users/owner-name/followers"
        },
        "following" : {
          "format" : "int32",
          "type" : "integer",
          "x-samplevalue" : 0
        },
        "following_url" : {
          "type" : "string",
          "x-samplevalue" : "https://api.github.com/users/owner-name/following{/other_user}"
        },
        "gists_url" : {
          "type" : "string",
          "x-samplevalue" : "https://api.github.com/users/owner-name/gists{/gist_id}"
        },
        "gravatar_id" : {
          "type" : "string",
          "x-samplevalue" : ""
        },
        "html_url" : {
          "type" : "string",
          "x-samplevalue" : "https://github.com/owner-name"
        },
        "id" : {
          "format" : "int32",
          "type" : "integer",
          "x-samplevalue" : 22442264
        },
        "login" : {
          "type" : "string",
          "x-samplevalue" : "owner-name"
        },
        "organizations_url" : {
          "type" : "string",
          "x-samplevalue" : "https://api.github.com/users/owner-name/orgs"
        },
        "public_gists" : {
          "format" : "int32",
          "type" : "integer",
          "x-samplevalue" : 0
        },
        "public_repos" : {
          "format" : "int32",
          "type" : "integer",
          "x-samplevalue" : 1
        },
        "received_events_url" : {
          "type" : "string",
          "x-samplevalue" : "https://api.github.com/users/owner-name/received_events"
        },
        "repos_url" : {
          "type" : "string",
          "x-samplevalue" : "https://api.github.com/users/owner-name/repos"
        },
        "site_admin" : {
          "type" : "boolean",
          "x-samplevalue" : false
        },
        "starred_url" : {
          "type" : "string",
          "x-samplevalue" : "https://api.github.com/users/owner-name/starred{/owner}{/repo}"
        },
        "subscriptions_url" : {
          "type" : "string",
          "x-samplevalue" : "https://api.github.com/users/owner-name/subscriptions"
        },
        "type" : {
          "type" : "string",
          "x-samplevalue" : "User"
        },
        "updated_at" : {
          "format" : "date-time",
          "type" : "string",
          "x-mask" : "yyyy-MM-dd'T'HH:mm:ssZ",
          "x-samplevalue" : "2018-04-24T05:00:06Z"
        },
        "url" : {
          "type" : "string",
          "x-samplevalue" : "https://api.github.com/users/owner-name"
        }
      },
      "title" : "me",
      "x-has-customfields" : false,
      "x-primary-key" : [ "id" ],
      "x-vendor-objectname" : "User",
      "type" : "object"
    },
    "html" : {
      "properties" : {
        "href" : {
          "type" : "string",
          "x-samplevalue" : "https://github.com/octocat/Hello-World/pull/1347"
        }
      },
      "title" : "html",
      "type" : "object",
      "x-has-customfields" : false
    },
    "swagger-contacts-path" : {
      "x-has-customfields" : false,
      "type" : "object",
      "title" : "/contacts",
      "properties" : {
        "post" : {
          "$ref" : "#/definitions/swaggerpost"
        }
      }
    },
    "verification" : {
      "properties" : {
        "reason" : {
          "type" : "string"
        },
        "verified" : {
          "type" : "boolean"
        }
      },
      "type" : "object"
    },
    "swagger200" : {
      "x-has-customfields" : false,
      "type" : "object",
      "title" : "200",
      "properties" : {
        "schema" : {
          "$ref" : "#/definitions/swaggerschema"
        },
        "description" : {
          "x-samplevalue" : "OK - Everything worked as expected",
          "type" : "string"
        }
      }
    },
    "repositoriesObject" : {
      "properties" : {
        "archive_url" : {
          "type" : "string",
          "x-samplevalue" : "https://api.github.com/repos/owner-name/webhookTest/{archive_format}{/ref}"
        },
        "archived" : {
          "type" : "boolean",
          "x-samplevalue" : false
        },
        "assignees_url" : {
          "type" : "string",
          "x-samplevalue" : "https://api.github.com/repos/owner-name/webhookTest/assignees{/user}"
        },
        "blobs_url" : {
          "type" : "string",
          "x-samplevalue" : "https://api.github.com/repos/owner-name/webhookTest/git/blobs{/sha}"
        },
        "branches_url" : {
          "type" : "string",
          "x-samplevalue" : "https://api.github.com/repos/owner-name/webhookTest/branches{/branch}"
        },
        "clone_url" : {
          "type" : "string",
          "x-samplevalue" : "https://github.com/owner-name/webhookTest.git"
        },
        "collaborators_url" : {
          "type" : "string",
          "x-samplevalue" : "https://api.github.com/repos/owner-name/webhookTest/collaborators{/collaborator}"
        },
        "comments_url" : {
          "type" : "string",
          "x-samplevalue" : "https://api.github.com/repos/owner-name/webhookTest/comments{/number}"
        },
        "commits_url" : {
          "type" : "string",
          "x-samplevalue" : "https://api.github.com/repos/owner-name/webhookTest/commits{/sha}"
        },
        "compare_url" : {
          "type" : "string",
          "x-samplevalue" : "https://api.github.com/repos/owner-name/webhookTest/compare/{base}...{head}"
        },
        "contents_url" : {
          "type" : "string",
          "x-samplevalue" : "https://api.github.com/repos/owner-name/webhookTest/contents/{+path}"
        },
        "contributors_url" : {
          "type" : "string",
          "x-samplevalue" : "https://api.github.com/repos/owner-name/webhookTest/contributors"
        },
        "created_at" : {
          "format" : "date-time",
          "type" : "string",
          "x-mask" : "yyyy-MM-dd'T'HH:mm:ssZ",
          "x-samplevalue" : "2018-04-23T06:31:43Z"
        },
        "default_branch" : {
          "type" : "string",
          "x-samplevalue" : "master"
        },
        "deployments_url" : {
          "type" : "string",
          "x-samplevalue" : "https://api.github.com/repos/owner-name/webhookTest/deployments"
        },
        "description" : {
          "type" : "string",
          "x-samplevalue" : "test repository for webhook testing"
        },
        "downloads_url" : {
          "type" : "string",
          "x-samplevalue" : "https://api.github.com/repos/owner-name/webhookTest/downloads"
        },
        "events_url" : {
          "type" : "string",
          "x-samplevalue" : "https://api.github.com/repos/owner-name/webhookTest/events"
        },
        "fork" : {
          "type" : "boolean",
          "x-samplevalue" : false
        },
        "forks" : {
          "format" : "int32",
          "type" : "integer",
          "x-samplevalue" : 0
        },
        "forks_count" : {
          "format" : "int32",
          "type" : "integer",
          "x-samplevalue" : 0
        },
        "forks_url" : {
          "type" : "string",
          "x-samplevalue" : "https://api.github.com/repos/owner-name/webhookTest/forks"
        },
        "full_name" : {
          "type" : "string",
          "x-samplevalue" : "owner-name/webhookTest"
        },
        "git_commits_url" : {
          "type" : "string",
          "x-samplevalue" : "https://api.github.com/repos/owner-name/webhookTest/git/commits{/sha}"
        },
        "git_refs_url" : {
          "type" : "string",
          "x-samplevalue" : "https://api.github.com/repos/owner-name/webhookTest/git/refs{/sha}"
        },
        "git_tags_url" : {
          "type" : "string",
          "x-samplevalue" : "https://api.github.com/repos/owner-name/webhookTest/git/tags{/sha}"
        },
        "git_url" : {
          "type" : "string",
          "x-samplevalue" : "git://github.com/owner-name/webhookTest.git"
        },
        "has_downloads" : {
          "type" : "boolean",
          "x-samplevalue" : true
        },
        "has_issues" : {
          "type" : "boolean",
          "x-samplevalue" : true
        },
        "has_pages" : {
          "type" : "boolean",
          "x-samplevalue" : false
        },
        "has_projects" : {
          "type" : "boolean",
          "x-samplevalue" : true
        },
        "has_wiki" : {
          "type" : "boolean",
          "x-samplevalue" : true
        },
        "hooks_url" : {
          "type" : "string",
          "x-samplevalue" : "https://api.github.com/repos/owner-name/webhookTest/hooks"
        },
        "html_url" : {
          "type" : "string",
          "x-samplevalue" : "https://github.com/owner-name/webhookTest"
        },
        "id" : {
          "format" : "int32",
          "type" : "integer",
          "x-samplevalue" : 130650280
        },
        "issue_comment_url" : {
          "type" : "string",
          "x-samplevalue" : "https://api.github.com/repos/owner-name/webhookTest/issues/comments{/number}"
        },
        "issue_events_url" : {
          "type" : "string",
          "x-samplevalue" : "https://api.github.com/repos/owner-name/webhookTest/issues/events{/number}"
        },
        "issues_url" : {
          "type" : "string",
          "x-samplevalue" : "https://api.github.com/repos/owner-name/webhookTest/issues{/number}"
        },
        "keys_url" : {
          "type" : "string",
          "x-samplevalue" : "https://api.github.com/repos/owner-name/webhookTest/keys{/key_id}"
        },
        "labels_url" : {
          "type" : "string",
          "x-samplevalue" : "https://api.github.com/repos/owner-name/webhookTest/labels{/name}"
        },
        "languages_url" : {
          "type" : "string",
          "x-samplevalue" : "https://api.github.com/repos/owner-name/webhookTest/languages"
        },
        "merges_url" : {
          "type" : "string",
          "x-samplevalue" : "https://api.github.com/repos/owner-name/webhookTest/merges"
        },
        "milestones_url" : {
          "type" : "string",
          "x-samplevalue" : "https://api.github.com/repos/owner-name/webhookTest/milestones{/number}"
        },
        "name" : {
          "type" : "string",
          "x-samplevalue" : "webhookTest"
        },
        "notifications_url" : {
          "type" : "string",
          "x-samplevalue" : "https://api.github.com/repos/owner-name/webhookTest/notifications{?since,all,participating}"
        },
        "open_issues" : {
          "format" : "int32",
          "type" : "integer",
          "x-samplevalue" : 1
        },
        "open_issues_count" : {
          "format" : "int32",
          "type" : "integer",
          "x-samplevalue" : 1
        },
        "owner" : {
          "$ref" : "#/definitions/owner"
        },
        "permissions" : {
          "$ref" : "#/definitions/permissions"
        },
        "private" : {
          "type" : "boolean",
          "x-samplevalue" : false
        },
        "pulls_url" : {
          "type" : "string",
          "x-samplevalue" : "https://api.github.com/repos/owner-name/webhookTest/pulls{/number}"
        },
        "pushed_at" : {
          "format" : "date-time",
          "type" : "string",
          "x-mask" : "yyyy-MM-dd'T'HH:mm:ssZ",
          "x-samplevalue" : "2018-04-24T08:56:06Z"
        },
        "releases_url" : {
          "type" : "string",
          "x-samplevalue" : "https://api.github.com/repos/owner-name/webhookTest/releases{/id}"
        },
        "size" : {
          "format" : "int32",
          "type" : "integer",
          "x-samplevalue" : 4
        },
        "ssh_url" : {
          "type" : "string",
          "x-samplevalue" : "git@github.com:owner-name/webhookTest.git"
        },
        "stargazers_count" : {
          "format" : "int32",
          "type" : "integer",
          "x-samplevalue" : 0
        },
        "stargazers_url" : {
          "type" : "string",
          "x-samplevalue" : "https://api.github.com/repos/owner-name/webhookTest/stargazers"
        },
        "statuses_url" : {
          "type" : "string",
          "x-samplevalue" : "https://api.github.com/repos/owner-name/webhookTest/statuses/{sha}"
        },
        "subscribers_url" : {
          "type" : "string",
          "x-samplevalue" : "https://api.github.com/repos/owner-name/webhookTest/subscribers"
        },
        "subscription_url" : {
          "type" : "string",
          "x-samplevalue" : "https://api.github.com/repos/owner-name/webhookTest/subscription"
        },
        "svn_url" : {
          "type" : "string",
          "x-samplevalue" : "https://github.com/owner-name/webhookTest"
        },
        "tags_url" : {
          "type" : "string",
          "x-samplevalue" : "https://api.github.com/repos/owner-name/webhookTest/tags"
        },
        "teams_url" : {
          "type" : "string",
          "x-samplevalue" : "https://api.github.com/repos/owner-name/webhookTest/teams"
        },
        "trees_url" : {
          "type" : "string",
          "x-samplevalue" : "https://api.github.com/repos/owner-name/webhookTest/git/trees{/sha}"
        },
        "updated_at" : {
          "format" : "date-time",
          "type" : "string",
          "x-mask" : "yyyy-MM-dd'T'HH:mm:ssZ",
          "x-samplevalue" : "2018-04-24T08:56:06Z"
        },
        "url" : {
          "type" : "string",
          "x-samplevalue" : "https://api.github.com/repos/owner-name/webhookTest"
        },
        "watchers" : {
          "format" : "int32",
          "type" : "integer",
          "x-samplevalue" : 0
        },
        "watchers_count" : {
          "format" : "int32",
          "type" : "integer",
          "x-samplevalue" : 0
        }
      },
      "title" : "repositories",
      "type" : "object",
      "x-has-customfields" : false,
      "x-primary-key" : [ "id" ],
      "x-vendor-objectname" : "Repositories"
    },
    "swagger400" : {
      "x-has-customfields" : false,
      "type" : "object",
      "title" : "400",
      "properties" : {
        "description" : {
          "x-samplevalue" : "Bad Request - Often due to a missing request parameter",
          "type" : "string"
        }
      }
    },
    "swagger401" : {
      "x-has-customfields" : false,
      "type" : "object",
      "title" : "401",
      "properties" : {
        "description" : {
          "x-samplevalue" : "Unauthorized - An invalid element token, user secret and/or org secret provided",
          "type" : "string"
        }
      }
    },
    "issue" : {
      "properties" : {
        "href" : {
          "type" : "string",
          "x-samplevalue" : "https://api.github.com/repos/octocat/Hello-World/issues/1347"
        }
      },
      "title" : "issue",
      "type" : "object",
      "x-has-customfields" : false
    },
    "swagger403" : {
      "x-has-customfields" : false,
      "type" : "object",
      "title" : "403",
      "properties" : {
        "description" : {
          "x-samplevalue" : "Forbidden - Access to the resource by the provider is forbidden",
          "type" : "string"
        }
      }
    },
    "author" : {
      "properties" : {
        "avatar_url" : {
          "type" : "string"
        },
        "events_url" : {
          "type" : "string"
        },
        "followers_url" : {
          "type" : "string"
        },
        "following_url" : {
          "type" : "string"
        },
        "gists_url" : {
          "type" : "string"
        },
        "gravatar_id" : {
          "type" : "string"
        },
        "html_url" : {
          "type" : "string"
        },
        "id" : {
          "format" : "int32",
          "type" : "integer"
        },
        "login" : {
          "type" : "string"
        },
        "organizations_url" : {
          "type" : "string"
        },
        "received_events_url" : {
          "type" : "string"
        },
        "repos_url" : {
          "type" : "string"
        },
        "site_admin" : {
          "type" : "boolean"
        },
        "starred_url" : {
          "type" : "string"
        },
        "subscriptions_url" : {
          "type" : "string"
        },
        "type" : {
          "type" : "string"
        },
        "url" : {
          "type" : "string"
        }
      },
      "type" : "object"
    },
    "swagger404" : {
      "x-has-customfields" : false,
      "type" : "object",
      "title" : "404",
      "properties" : {
        "description" : {
          "x-samplevalue" : "Not found - The requested resource is not found",
          "type" : "string"
        }
      }
    },
    "swagger405" : {
      "x-has-customfields" : false,
      "type" : "object",
      "title" : "405",
      "properties" : {
        "description" : {
          "x-samplevalue" : "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected",
          "type" : "string"
        }
      }
    },
    "tree" : {
      "properties" : {
        "sha" : {
          "type" : "string"
        },
        "url" : {
          "type" : "string"
        }
      },
      "type" : "object"
    },
    "review_comments" : {
      "properties" : {
        "href" : {
          "type" : "string",
          "x-samplevalue" : "https://api.github.com/repos/octocat/Hello-World/pulls/1347/comments"
        }
      },
      "title" : "review_comments",
      "type" : "object",
      "x-has-customfields" : false
    },
    "pullRequests" : {
      "properties" : {
        "_links" : {
          "$ref" : "#/definitions/_links"
        },
        "assignees" : {
          "items" : {
            "type" : "string"
          },
          "type" : "array"
        },
        "author_association" : {
          "type" : "string",
          "x-samplevalue" : "OWNER"
        },
        "base" : {
          "$ref" : "#/definitions/base"
        },
        "body" : {
          "type" : "string",
          "x-samplevalue" : "## Closes\r\n* US1212"
        },
        "comments_url" : {
          "type" : "string",
          "x-samplevalue" : "https://api.github.com/repos/owner-name/webhookTest/issues/4/comments"
        },
        "commits_url" : {
          "type" : "string",
          "x-samplevalue" : "https://api.github.com/repos/owner-name/webhookTest/pulls/4/commits"
        },
        "created_at" : {
          "format" : "date-time",
          "type" : "string",
          "x-mask" : "yyyy-MM-dd'T'HH:mm:ssZ",
          "x-samplevalue" : "2018-04-24T06:55:56Z"
        },
        "diff_url" : {
          "type" : "string",
          "x-samplevalue" : "https://github.com/owner-name/webhookTest/pull/4.diff"
        },
        "head" : {
          "$ref" : "#/definitions/head"
        },
        "html_url" : {
          "type" : "string",
          "x-samplevalue" : "https://github.com/owner-name/webhookTest/pull/4"
        },
        "id" : {
          "format" : "int32",
          "type" : "integer",
          "x-samplevalue" : 183637190
        },
        "issue_url" : {
          "type" : "string",
          "x-samplevalue" : "https://api.github.com/repos/owner-name/webhookTest/issues/4"
        },
        "labels" : {
          "items" : {
            "type" : "string"
          },
          "type" : "array"
        },
        "locked" : {
          "type" : "boolean",
          "x-samplevalue" : false
        },
        "merge_commit_sha" : {
          "type" : "string",
          "x-samplevalue" : "c9d44aa55ef41c8816a344dc9433b3cb8c1b1452"
        },
        "number" : {
          "format" : "int32",
          "type" : "integer",
          "x-samplevalue" : 4
        },
        "patch_url" : {
          "type" : "string",
          "x-samplevalue" : "https://github.com/owner-name/webhookTest/pull/4.patch"
        },
        "requested_reviewers" : {
          "items" : {
            "type" : "string"
          },
          "type" : "array"
        },
        "requested_teams" : {
          "items" : {
            "type" : "string"
          },
          "type" : "array"
        },
        "review_comment_url" : {
          "type" : "string",
          "x-samplevalue" : "https://api.github.com/repos/owner-name/webhookTest/pulls/comments{/number}"
        },
        "review_comments_url" : {
          "type" : "string",
          "x-samplevalue" : "https://api.github.com/repos/owner-name/webhookTest/pulls/4/comments"
        },
        "state" : {
          "type" : "string",
          "x-samplevalue" : "open"
        },
        "statuses_url" : {
          "type" : "string",
          "x-samplevalue" : "https://api.github.com/repos/owner-name/webhookTest/statuses/c9056f654c0119003bc58e874b2cc8b06371c920"
        },
        "title" : {
          "type" : "string",
          "x-samplevalue" : "test4"
        },
        "updated_at" : {
          "format" : "date-time",
          "type" : "string",
          "x-mask" : "yyyy-MM-dd'T'HH:mm:ssZ",
          "x-samplevalue" : "2018-04-24T06:55:56Z"
        },
        "url" : {
          "type" : "string",
          "x-samplevalue" : "https://api.github.com/repos/owner-name/webhookTest/pulls/4"
        },
        "user" : {
          "$ref" : "#/definitions/user"
        }
      },
      "title" : "pullRequests",
      "type" : "object",
      "x-has-customfields" : false,
      "x-primary-key" : [ "id" ],
      "x-vendor-objectname" : "Pull Requests"
    },
    "branches" : {
      "properties" : {
        "_links" : {
          "$ref" : "#/definitions/_links"
        },
        "commit" : {
          "$ref" : "#/definitions/commit"
        },
        "name" : {
          "type" : "string"
        },
        "protected" : {
          "type" : "boolean"
        },
        "protection" : {
          "$ref" : "#/definitions/protection"
        },
        "protection_url" : {
          "type" : "string"
        }
      },
      "x-primary-key" : [ "name" ],
      "x-vendor-objectname" : "Branches",
      "type" : "object"
    },
    "swaggerDocs" : {
      "x-has-customfields" : false,
      "title" : "swaggerDocs",
      "properties" : {
        "basePath" : {
          "x-samplevalue" : "/elements/api-v2/hubs/crm",
          "type" : "string"
        },
        "paths" : {
          "$ref" : "#/definitions/swaggerpaths"
        },
        "host" : {
          "x-samplevalue" : "localhost:5050",
          "type" : "string"
        },
        "schemes" : {
          "x-samplevalue" : [ "http" ],
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        },
        "definitions" : {
          "$ref" : "#/definitions/swaggerdefinitions"
        },
        "swagger" : {
          "x-samplevalue" : "2.0",
          "type" : "string"
        },
        "info" : {
          "$ref" : "#/definitions/swaggerinfo"
        },
        "tags" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/swaggertags"
          }
        }
      },
      "type" : "object"
    },
    "labels" : {
      "properties" : {
        "color" : {
          "type" : "string",
          "x-samplevalue" : "f29513"
        },
        "default" : {
          "type" : "boolean",
          "x-samplevalue" : true
        },
        "description" : {
          "type" : "string",
          "x-samplevalue" : "Houston, we have a problem"
        },
        "id" : {
          "format" : "int32",
          "type" : "integer",
          "x-samplevalue" : 208045946
        },
        "name" : {
          "type" : "string",
          "x-samplevalue" : "bug"
        },
        "url" : {
          "type" : "string",
          "x-samplevalue" : "https://api.github.com/repos/octocat/Hello-World/labels/bug"
        }
      },
      "title" : "labels",
      "x-has-customfields" : false,
      "type" : "object"
    },
    "swaggercontact" : {
      "x-has-customfields" : false,
      "type" : "object",
      "title" : "contact",
      "properties" : {
        "email" : {
          "x-samplevalue" : "support@cloud-elements.com",
          "type" : "string"
        }
      }
    },
    "license" : {
      "properties" : {
        "key" : {
          "type" : "string",
          "x-samplevalue" : "other"
        },
        "name" : {
          "type" : "string",
          "x-samplevalue" : "Other"
        }
      },
      "title" : "license",
      "type" : "object",
      "x-has-customfields" : false
    },
    "baserepo" : {
      "properties" : {
        "allow_merge_commit" : {
          "type" : "boolean",
          "x-samplevalue" : true
        },
        "allow_rebase_merge" : {
          "type" : "boolean",
          "x-samplevalue" : true
        },
        "allow_squash_merge" : {
          "type" : "boolean",
          "x-samplevalue" : true
        },
        "archive_url" : {
          "type" : "string",
          "x-samplevalue" : "http://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}"
        },
        "archived" : {
          "type" : "boolean",
          "x-samplevalue" : false
        },
        "assignees_url" : {
          "type" : "string",
          "x-samplevalue" : "http://api.github.com/repos/octocat/Hello-World/assignees{/user}"
        },
        "blobs_url" : {
          "type" : "string",
          "x-samplevalue" : "http://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}"
        },
        "branches_url" : {
          "type" : "string",
          "x-samplevalue" : "http://api.github.com/repos/octocat/Hello-World/branches{/branch}"
        },
        "clone_url" : {
          "type" : "string",
          "x-samplevalue" : "https://github.com/octocat/Hello-World.git"
        },
        "collaborators_url" : {
          "type" : "string",
          "x-samplevalue" : "http://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}"
        },
        "comments_url" : {
          "type" : "string",
          "x-samplevalue" : "http://api.github.com/repos/octocat/Hello-World/comments{/number}"
        },
        "commits_url" : {
          "type" : "string",
          "x-samplevalue" : "http://api.github.com/repos/octocat/Hello-World/commits{/sha}"
        },
        "compare_url" : {
          "type" : "string",
          "x-samplevalue" : "http://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}"
        },
        "contents_url" : {
          "type" : "string",
          "x-samplevalue" : "http://api.github.com/repos/octocat/Hello-World/contents/{+path}"
        },
        "contributors_url" : {
          "type" : "string",
          "x-samplevalue" : "http://api.github.com/repos/octocat/Hello-World/contributors"
        },
        "created_at" : {
          "format" : "date-time",
          "type" : "string",
          "x-mask" : "yyyy-MM-dd'T'HH:mm:ssZ",
          "x-samplevalue" : "2011-01-26T19:01:12Z"
        },
        "default_branch" : {
          "type" : "string",
          "x-samplevalue" : "master"
        },
        "deployments_url" : {
          "type" : "string",
          "x-samplevalue" : "http://api.github.com/repos/octocat/Hello-World/deployments"
        },
        "description" : {
          "type" : "string",
          "x-samplevalue" : "This your first repo!"
        },
        "downloads_url" : {
          "type" : "string",
          "x-samplevalue" : "http://api.github.com/repos/octocat/Hello-World/downloads"
        },
        "events_url" : {
          "type" : "string",
          "x-samplevalue" : "http://api.github.com/repos/octocat/Hello-World/events"
        },
        "fork" : {
          "type" : "boolean",
          "x-samplevalue" : false
        },
        "forks_count" : {
          "format" : "int32",
          "type" : "integer",
          "x-samplevalue" : 9
        },
        "forks_url" : {
          "type" : "string",
          "x-samplevalue" : "http://api.github.com/repos/octocat/Hello-World/forks"
        },
        "full_name" : {
          "type" : "string",
          "x-samplevalue" : "octocat/Hello-World"
        },
        "git_commits_url" : {
          "type" : "string",
          "x-samplevalue" : "http://api.github.com/repos/octocat/Hello-World/git/commits{/sha}"
        },
        "git_refs_url" : {
          "type" : "string",
          "x-samplevalue" : "http://api.github.com/repos/octocat/Hello-World/git/refs{/sha}"
        },
        "git_tags_url" : {
          "type" : "string",
          "x-samplevalue" : "http://api.github.com/repos/octocat/Hello-World/git/tags{/sha}"
        },
        "git_url" : {
          "type" : "string",
          "x-samplevalue" : "git:github.com/octocat/Hello-World.git"
        },
        "has_downloads" : {
          "type" : "boolean",
          "x-samplevalue" : true
        },
        "has_issues" : {
          "type" : "boolean",
          "x-samplevalue" : true
        },
        "has_pages" : {
          "type" : "boolean",
          "x-samplevalue" : false
        },
        "has_wiki" : {
          "type" : "boolean",
          "x-samplevalue" : true
        },
        "homepage" : {
          "type" : "string",
          "x-samplevalue" : "https://github.com"
        },
        "hooks_url" : {
          "type" : "string",
          "x-samplevalue" : "http://api.github.com/repos/octocat/Hello-World/hooks"
        },
        "html_url" : {
          "type" : "string",
          "x-samplevalue" : "https://github.com/octocat/Hello-World"
        },
        "id" : {
          "format" : "int32",
          "type" : "integer",
          "x-samplevalue" : 1296269
        },
        "issue_comment_url" : {
          "type" : "string",
          "x-samplevalue" : "http://api.github.com/repos/octocat/Hello-World/issues/comments{/number}"
        },
        "issue_events_url" : {
          "type" : "string",
          "x-samplevalue" : "http://api.github.com/repos/octocat/Hello-World/issues/events{/number}"
        },
        "issues_url" : {
          "type" : "string",
          "x-samplevalue" : "http://api.github.com/repos/octocat/Hello-World/issues{/number}"
        },
        "keys_url" : {
          "type" : "string",
          "x-samplevalue" : "http://api.github.com/repos/octocat/Hello-World/keys{/key_id}"
        },
        "labels_url" : {
          "type" : "string",
          "x-samplevalue" : "http://api.github.com/repos/octocat/Hello-World/labels{/name}"
        },
        "language" : {
          "type" : "string"
        },
        "languages_url" : {
          "type" : "string",
          "x-samplevalue" : "http://api.github.com/repos/octocat/Hello-World/languages"
        },
        "merges_url" : {
          "type" : "string",
          "x-samplevalue" : "http://api.github.com/repos/octocat/Hello-World/merges"
        },
        "milestones_url" : {
          "type" : "string",
          "x-samplevalue" : "http://api.github.com/repos/octocat/Hello-World/milestones{/number}"
        },
        "mirror_url" : {
          "type" : "string",
          "x-samplevalue" : "git:git.example.com/octocat/Hello-World"
        },
        "name" : {
          "type" : "string",
          "x-samplevalue" : "Hello-World"
        },
        "network_count" : {
          "format" : "int32",
          "type" : "integer",
          "x-samplevalue" : 0
        },
        "notifications_url" : {
          "type" : "string",
          "x-samplevalue" : "http://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}"
        },
        "open_issues_count" : {
          "format" : "int32",
          "type" : "integer",
          "x-samplevalue" : 0
        },
        "owner" : {
          "$ref" : "#/definitions/repoowner"
        },
        "permissions" : {
          "$ref" : "#/definitions/repopermissions"
        },
        "private" : {
          "type" : "boolean",
          "x-samplevalue" : false
        },
        "pulls_url" : {
          "type" : "string",
          "x-samplevalue" : "http://api.github.com/repos/octocat/Hello-World/pulls{/number}"
        },
        "pushed_at" : {
          "format" : "date-time",
          "type" : "string",
          "x-mask" : "yyyy-MM-dd'T'HH:mm:ssZ",
          "x-samplevalue" : "2011-01-26T19:06:43Z"
        },
        "releases_url" : {
          "type" : "string",
          "x-samplevalue" : "http://api.github.com/repos/octocat/Hello-World/releases{/id}"
        },
        "size" : {
          "format" : "int32",
          "type" : "integer",
          "x-samplevalue" : 108
        },
        "ssh_url" : {
          "type" : "string",
          "x-samplevalue" : "git@github.com:octocat/Hello-World.git"
        },
        "stargazers_count" : {
          "format" : "int32",
          "type" : "integer",
          "x-samplevalue" : 80
        },
        "stargazers_url" : {
          "type" : "string",
          "x-samplevalue" : "http://api.github.com/repos/octocat/Hello-World/stargazers"
        },
        "statuses_url" : {
          "type" : "string",
          "x-samplevalue" : "http://api.github.com/repos/octocat/Hello-World/statuses/{sha}"
        },
        "subscribers_count" : {
          "format" : "int32",
          "type" : "integer",
          "x-samplevalue" : 42
        },
        "subscribers_url" : {
          "type" : "string",
          "x-samplevalue" : "http://api.github.com/repos/octocat/Hello-World/subscribers"
        },
        "subscription_url" : {
          "type" : "string",
          "x-samplevalue" : "http://api.github.com/repos/octocat/Hello-World/subscription"
        },
        "svn_url" : {
          "type" : "string",
          "x-samplevalue" : "https://svn.github.com/octocat/Hello-World"
        },
        "tags_url" : {
          "type" : "string",
          "x-samplevalue" : "http://api.github.com/repos/octocat/Hello-World/tags"
        },
        "teams_url" : {
          "type" : "string",
          "x-samplevalue" : "http://api.github.com/repos/octocat/Hello-World/teams"
        },
        "topics" : {
          "items" : {
            "type" : "string"
          },
          "type" : "array",
          "x-samplevalue" : [ "octocat", "atom", "electron", "API" ]
        },
        "trees_url" : {
          "type" : "string",
          "x-samplevalue" : "http://api.github.com/repos/octocat/Hello-World/git/trees{/sha}"
        },
        "updated_at" : {
          "format" : "date-time",
          "type" : "string",
          "x-mask" : "yyyy-MM-dd'T'HH:mm:ssZ",
          "x-samplevalue" : "2011-01-26T19:14:43Z"
        },
        "url" : {
          "type" : "string",
          "x-samplevalue" : "https://api.github.com/repos/octocat/Hello-World"
        },
        "watchers_count" : {
          "format" : "int32",
          "type" : "integer",
          "x-samplevalue" : 80
        }
      },
      "title" : "repo",
      "type" : "object",
      "x-has-customfields" : false
    },
    "commitCommitCommitter" : {
      "properties" : {
        "date" : {
          "type" : "string"
        },
        "email" : {
          "type" : "string"
        },
        "name" : {
          "type" : "string"
        }
      },
      "type" : "object"
    },
    "swagger406" : {
      "x-has-customfields" : false,
      "type" : "object",
      "title" : "406",
      "properties" : {
        "description" : {
          "x-samplevalue" : "Not acceptable - The response content type does not match the 'Accept' header value",
          "type" : "string"
        }
      }
    },
    "commitCommitAuthor" : {
      "properties" : {
        "date" : {
          "type" : "string"
        },
        "email" : {
          "type" : "string"
        },
        "name" : {
          "type" : "string"
        }
      },
      "type" : "object"
    },
    "commits" : {
      "properties" : {
        "href" : {
          "type" : "string",
          "x-samplevalue" : "https://api.github.com/repos/octocat/Hello-World/pulls/1347/commits"
        }
      },
      "title" : "commits",
      "type" : "object",
      "x-has-customfields" : false
    },
    "statuses" : {
      "properties" : {
        "href" : {
          "type" : "string",
          "x-samplevalue" : "https://api.github.com/repos/octocat/Hello-World/statuses/6dcb09b5b57875f334f61aebed695e2e4193db5e"
        }
      },
      "title" : "statuses",
      "type" : "object",
      "x-has-customfields" : false
    },
    "patchWebhooksResp" : {
      "properties" : {
        "active" : {
          "type" : "boolean",
          "x-samplevalue" : true
        },
        "config" : {
          "$ref" : "#/definitions/config"
        },
        "created_at" : {
          "format" : "date-time",
          "type" : "string",
          "x-mask" : "yyyy-MM-dd'T'HH:mm:ssZ",
          "x-samplevalue" : "2011-09-06T17:26:27Z"
        },
        "events" : {
          "items" : {
            "type" : "string"
          },
          "type" : "array",
          "x-samplevalue" : [ "push", "pull_request" ]
        },
        "id" : {
          "format" : "int32",
          "type" : "integer",
          "x-samplevalue" : 1
        },
        "name" : {
          "type" : "string",
          "x-samplevalue" : "web"
        },
        "ping_url" : {
          "type" : "string",
          "x-samplevalue" : "https://api.github.com/repos/octocat/Hello-World/hooks/1/pings"
        },
        "test_url" : {
          "type" : "string",
          "x-samplevalue" : "https://api.github.com/repos/octocat/Hello-World/hooks/1/test"
        },
        "updated_at" : {
          "format" : "date-time",
          "type" : "string",
          "x-mask" : "yyyy-MM-dd'T'HH:mm:ssZ",
          "x-samplevalue" : "2011-09-06T20:39:23Z"
        },
        "url" : {
          "type" : "string",
          "x-samplevalue" : "https://api.github.com/repos/octocat/Hello-World/hooks/1"
        }
      },
      "title" : "patchWebhooksResp",
      "x-has-customfields" : false,
      "x-vendor-objectname" : "Webhooks",
      "type" : "object"
    },
    "patchWebhooksReq" : {
      "properties" : {
        "active" : {
          "type" : "boolean",
          "x-samplevalue" : true
        },
        "add_events" : {
          "items" : {
            "type" : "string"
          },
          "type" : "array",
          "x-samplevalue" : [ "label", "pull_request" ]
        },
        "config" : {
          "$ref" : "#/definitions/config"
        },
        "events" : {
          "items" : {
            "type" : "string"
          },
          "type" : "array",
          "x-samplevalue" : [ "label", "pull_request" ]
        },
        "remove_events" : {
          "items" : {
            "type" : "string"
          },
          "type" : "array",
          "x-samplevalue" : [ "label", "pull_request" ]
        }
      },
      "title" : "patchWebhooksReq",
      "x-has-customfields" : false,
      "x-vendor-objectname" : "Webhooks",
      "type" : "object"
    },
    "swaggerdefinition-property" : {
      "x-has-customfields" : false,
      "type" : "object",
      "title" : "#/definitions/definition-property",
      "properties" : {
        "type" : {
          "x-samplevalue" : "string",
          "type" : "string"
        }
      }
    },
    "Object" : {
      "description" : "Fields for the object. There will be fields associated with an Object, which are not all described here.",
      "properties" : {
        "objectField" : {
          "type" : "string"
        }
      },
      "type" : "object"
    },
    "assignee" : {
      "properties" : {
        "avatar_url" : {
          "type" : "string",
          "x-samplevalue" : "https://github.com/images/error/octocat_happy.gif"
        },
        "events_url" : {
          "type" : "string",
          "x-samplevalue" : "https://api.github.com/users/octocat/events{/privacy}"
        },
        "followers_url" : {
          "type" : "string",
          "x-samplevalue" : "https://api.github.com/users/octocat/followers"
        },
        "following_url" : {
          "type" : "string",
          "x-samplevalue" : "https://api.github.com/users/octocat/following{/other_user}"
        },
        "gists_url" : {
          "type" : "string",
          "x-samplevalue" : "https://api.github.com/users/octocat/gists{/gist_id}"
        },
        "gravatar_id" : {
          "type" : "string",
          "x-samplevalue" : ""
        },
        "html_url" : {
          "type" : "string",
          "x-samplevalue" : "https://github.com/octocat"
        },
        "id" : {
          "format" : "int32",
          "type" : "integer",
          "x-samplevalue" : 1
        },
        "login" : {
          "type" : "string",
          "x-samplevalue" : "octocat"
        },
        "organizations_url" : {
          "type" : "string",
          "x-samplevalue" : "https://api.github.com/users/octocat/orgs"
        },
        "received_events_url" : {
          "type" : "string",
          "x-samplevalue" : "https://api.github.com/users/octocat/received_events"
        },
        "repos_url" : {
          "type" : "string",
          "x-samplevalue" : "https://api.github.com/users/octocat/repos"
        },
        "site_admin" : {
          "type" : "boolean",
          "x-samplevalue" : false
        },
        "starred_url" : {
          "type" : "string",
          "x-samplevalue" : "https://api.github.com/users/octocat/starred{/owner}{/repo}"
        },
        "subscriptions_url" : {
          "type" : "string",
          "x-samplevalue" : "https://api.github.com/users/octocat/subscriptions"
        },
        "type" : {
          "type" : "string",
          "x-samplevalue" : "User"
        },
        "url" : {
          "type" : "string",
          "x-samplevalue" : "https://api.github.com/users/octocat"
        }
      },
      "title" : "assignee",
      "type" : "object",
      "x-has-customfields" : false
    },
    "swagger409" : {
      "x-has-customfields" : false,
      "type" : "object",
      "title" : "409",
      "properties" : {
        "description" : {
          "x-samplevalue" : "Conflict - If a resource being created already exists",
          "type" : "string"
        }
      }
    },
    "objectsMetadata" : {
      "properties" : {
        "fields" : {
          "items" : {
            "$ref" : "#/definitions/objectsMetadataFields"
          },
          "type" : "array"
        }
      },
      "type" : "object"
    },
    "Pong" : {
      "properties" : {
        "dateTime" : {
          "format" : "date-time",
          "type" : "string"
        },
        "endpoint" : {
          "type" : "string"
        }
      },
      "type" : "object"
    },
    "parents" : {
      "properties" : {
        "html_url" : {
          "type" : "string"
        },
        "sha" : {
          "type" : "string"
        },
        "url" : {
          "type" : "string"
        }
      },
      "type" : "object"
    },
    "swaggerschema" : {
      "x-has-customfields" : false,
      "type" : "object",
      "title" : "schema",
      "properties" : {
        "$ref" : {
          "x-samplevalue" : "#/definitions/Contact-POST-Response",
          "type" : "string"
        }
      }
    },
    "repoowner" : {
      "properties" : {
        "avatar_url" : {
          "type" : "string",
          "x-samplevalue" : "https://github.com/images/error/octocat_happy.gif"
        },
        "events_url" : {
          "type" : "string",
          "x-samplevalue" : "https://api.github.com/users/octocat/events{/privacy}"
        },
        "followers_url" : {
          "type" : "string",
          "x-samplevalue" : "https://api.github.com/users/octocat/followers"
        },
        "following_url" : {
          "type" : "string",
          "x-samplevalue" : "https://api.github.com/users/octocat/following{/other_user}"
        },
        "gists_url" : {
          "type" : "string",
          "x-samplevalue" : "https://api.github.com/users/octocat/gists{/gist_id}"
        },
        "gravatar_id" : {
          "type" : "string",
          "x-samplevalue" : ""
        },
        "html_url" : {
          "type" : "string",
          "x-samplevalue" : "https://github.com/octocat"
        },
        "id" : {
          "format" : "int32",
          "type" : "integer",
          "x-samplevalue" : 1
        },
        "login" : {
          "type" : "string",
          "x-samplevalue" : "octocat"
        },
        "organizations_url" : {
          "type" : "string",
          "x-samplevalue" : "https://api.github.com/users/octocat/orgs"
        },
        "received_events_url" : {
          "type" : "string",
          "x-samplevalue" : "https://api.github.com/users/octocat/received_events"
        },
        "repos_url" : {
          "type" : "string",
          "x-samplevalue" : "https://api.github.com/users/octocat/repos"
        },
        "site_admin" : {
          "type" : "boolean",
          "x-samplevalue" : false
        },
        "starred_url" : {
          "type" : "string",
          "x-samplevalue" : "https://api.github.com/users/octocat/starred{/owner}{/repo}"
        },
        "subscriptions_url" : {
          "type" : "string",
          "x-samplevalue" : "https://api.github.com/users/octocat/subscriptions"
        },
        "type" : {
          "type" : "string",
          "x-samplevalue" : "User"
        },
        "url" : {
          "type" : "string",
          "x-samplevalue" : "https://api.github.com/users/octocat"
        }
      },
      "title" : "owner",
      "type" : "object",
      "x-has-customfields" : false
    },
    "swagger415" : {
      "x-has-customfields" : false,
      "type" : "object",
      "title" : "415",
      "properties" : {
        "description" : {
          "x-samplevalue" : "Unsupported media type - The server cannot handle the requested Content-Type",
          "type" : "string"
        }
      }
    },
    "repo" : {
      "properties" : {
        "allow_merge_commit" : {
          "type" : "boolean",
          "x-samplevalue" : true
        },
        "allow_rebase_merge" : {
          "type" : "boolean",
          "x-samplevalue" : true
        },
        "allow_squash_merge" : {
          "type" : "boolean",
          "x-samplevalue" : true
        },
        "archive_url" : {
          "type" : "string",
          "x-samplevalue" : "http://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}"
        },
        "archived" : {
          "type" : "boolean",
          "x-samplevalue" : false
        },
        "assignees_url" : {
          "type" : "string",
          "x-samplevalue" : "http://api.github.com/repos/octocat/Hello-World/assignees{/user}"
        },
        "blobs_url" : {
          "type" : "string",
          "x-samplevalue" : "http://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}"
        },
        "branches_url" : {
          "type" : "string",
          "x-samplevalue" : "http://api.github.com/repos/octocat/Hello-World/branches{/branch}"
        },
        "clone_url" : {
          "type" : "string",
          "x-samplevalue" : "https://github.com/octocat/Hello-World.git"
        },
        "collaborators_url" : {
          "type" : "string",
          "x-samplevalue" : "http://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}"
        },
        "comments_url" : {
          "type" : "string",
          "x-samplevalue" : "http://api.github.com/repos/octocat/Hello-World/comments{/number}"
        },
        "commits_url" : {
          "type" : "string",
          "x-samplevalue" : "http://api.github.com/repos/octocat/Hello-World/commits{/sha}"
        },
        "compare_url" : {
          "type" : "string",
          "x-samplevalue" : "http://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}"
        },
        "contents_url" : {
          "type" : "string",
          "x-samplevalue" : "http://api.github.com/repos/octocat/Hello-World/contents/{+path}"
        },
        "contributors_url" : {
          "type" : "string",
          "x-samplevalue" : "http://api.github.com/repos/octocat/Hello-World/contributors"
        },
        "created_at" : {
          "format" : "date-time",
          "type" : "string",
          "x-mask" : "yyyy-MM-dd'T'HH:mm:ssZ",
          "x-samplevalue" : "2011-01-26T19:01:12Z"
        },
        "default_branch" : {
          "type" : "string",
          "x-samplevalue" : "master"
        },
        "deployments_url" : {
          "type" : "string",
          "x-samplevalue" : "http://api.github.com/repos/octocat/Hello-World/deployments"
        },
        "description" : {
          "type" : "string",
          "x-samplevalue" : "This your first repo!"
        },
        "downloads_url" : {
          "type" : "string",
          "x-samplevalue" : "http://api.github.com/repos/octocat/Hello-World/downloads"
        },
        "events_url" : {
          "type" : "string",
          "x-samplevalue" : "http://api.github.com/repos/octocat/Hello-World/events"
        },
        "fork" : {
          "type" : "boolean",
          "x-samplevalue" : false
        },
        "forks_count" : {
          "format" : "int32",
          "type" : "integer",
          "x-samplevalue" : 9
        },
        "forks_url" : {
          "type" : "string",
          "x-samplevalue" : "http://api.github.com/repos/octocat/Hello-World/forks"
        },
        "full_name" : {
          "type" : "string",
          "x-samplevalue" : "octocat/Hello-World"
        },
        "git_commits_url" : {
          "type" : "string",
          "x-samplevalue" : "http://api.github.com/repos/octocat/Hello-World/git/commits{/sha}"
        },
        "git_refs_url" : {
          "type" : "string",
          "x-samplevalue" : "http://api.github.com/repos/octocat/Hello-World/git/refs{/sha}"
        },
        "git_tags_url" : {
          "type" : "string",
          "x-samplevalue" : "http://api.github.com/repos/octocat/Hello-World/git/tags{/sha}"
        },
        "git_url" : {
          "type" : "string",
          "x-samplevalue" : "git:github.com/octocat/Hello-World.git"
        },
        "has_downloads" : {
          "type" : "boolean",
          "x-samplevalue" : true
        },
        "has_issues" : {
          "type" : "boolean",
          "x-samplevalue" : true
        },
        "has_pages" : {
          "type" : "boolean",
          "x-samplevalue" : false
        },
        "has_wiki" : {
          "type" : "boolean",
          "x-samplevalue" : true
        },
        "homepage" : {
          "type" : "string",
          "x-samplevalue" : "https://github.com"
        },
        "hooks_url" : {
          "type" : "string",
          "x-samplevalue" : "http://api.github.com/repos/octocat/Hello-World/hooks"
        },
        "html_url" : {
          "type" : "string",
          "x-samplevalue" : "https://github.com/octocat/Hello-World"
        },
        "id" : {
          "format" : "int32",
          "type" : "integer",
          "x-samplevalue" : 1296269
        },
        "issue_comment_url" : {
          "type" : "string",
          "x-samplevalue" : "http://api.github.com/repos/octocat/Hello-World/issues/comments{/number}"
        },
        "issue_events_url" : {
          "type" : "string",
          "x-samplevalue" : "http://api.github.com/repos/octocat/Hello-World/issues/events{/number}"
        },
        "issues_url" : {
          "type" : "string",
          "x-samplevalue" : "http://api.github.com/repos/octocat/Hello-World/issues{/number}"
        },
        "keys_url" : {
          "type" : "string",
          "x-samplevalue" : "http://api.github.com/repos/octocat/Hello-World/keys{/key_id}"
        },
        "labels_url" : {
          "type" : "string",
          "x-samplevalue" : "http://api.github.com/repos/octocat/Hello-World/labels{/name}"
        },
        "language" : {
          "type" : "string"
        },
        "languages_url" : {
          "type" : "string",
          "x-samplevalue" : "http://api.github.com/repos/octocat/Hello-World/languages"
        },
        "merges_url" : {
          "type" : "string",
          "x-samplevalue" : "http://api.github.com/repos/octocat/Hello-World/merges"
        },
        "milestones_url" : {
          "type" : "string",
          "x-samplevalue" : "http://api.github.com/repos/octocat/Hello-World/milestones{/number}"
        },
        "mirror_url" : {
          "type" : "string",
          "x-samplevalue" : "git:git.example.com/octocat/Hello-World"
        },
        "name" : {
          "type" : "string",
          "x-samplevalue" : "Hello-World"
        },
        "network_count" : {
          "format" : "int32",
          "type" : "integer",
          "x-samplevalue" : 0
        },
        "notifications_url" : {
          "type" : "string",
          "x-samplevalue" : "http://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}"
        },
        "open_issues_count" : {
          "format" : "int32",
          "type" : "integer",
          "x-samplevalue" : 0
        },
        "owner" : {
          "$ref" : "#/definitions/owner"
        },
        "permissions" : {
          "$ref" : "#/definitions/permissions"
        },
        "private" : {
          "type" : "boolean",
          "x-samplevalue" : false
        },
        "pulls_url" : {
          "type" : "string",
          "x-samplevalue" : "http://api.github.com/repos/octocat/Hello-World/pulls{/number}"
        },
        "pushed_at" : {
          "format" : "date-time",
          "type" : "string",
          "x-mask" : "yyyy-MM-dd'T'HH:mm:ssZ",
          "x-samplevalue" : "2011-01-26T19:06:43Z"
        },
        "releases_url" : {
          "type" : "string",
          "x-samplevalue" : "http://api.github.com/repos/octocat/Hello-World/releases{/id}"
        },
        "size" : {
          "format" : "int32",
          "type" : "integer",
          "x-samplevalue" : 108
        },
        "ssh_url" : {
          "type" : "string",
          "x-samplevalue" : "git@github.com:octocat/Hello-World.git"
        },
        "stargazers_count" : {
          "format" : "int32",
          "type" : "integer",
          "x-samplevalue" : 80
        },
        "stargazers_url" : {
          "type" : "string",
          "x-samplevalue" : "http://api.github.com/repos/octocat/Hello-World/stargazers"
        },
        "statuses_url" : {
          "type" : "string",
          "x-samplevalue" : "http://api.github.com/repos/octocat/Hello-World/statuses/{sha}"
        },
        "subscribers_count" : {
          "format" : "int32",
          "type" : "integer",
          "x-samplevalue" : 42
        },
        "subscribers_url" : {
          "type" : "string",
          "x-samplevalue" : "http://api.github.com/repos/octocat/Hello-World/subscribers"
        },
        "subscription_url" : {
          "type" : "string",
          "x-samplevalue" : "http://api.github.com/repos/octocat/Hello-World/subscription"
        },
        "svn_url" : {
          "type" : "string",
          "x-samplevalue" : "https://svn.github.com/octocat/Hello-World"
        },
        "tags_url" : {
          "type" : "string",
          "x-samplevalue" : "http://api.github.com/repos/octocat/Hello-World/tags"
        },
        "teams_url" : {
          "type" : "string",
          "x-samplevalue" : "http://api.github.com/repos/octocat/Hello-World/teams"
        },
        "topics" : {
          "items" : {
            "type" : "string"
          },
          "type" : "array",
          "x-samplevalue" : [ "octocat", "atom", "electron", "API" ]
        },
        "trees_url" : {
          "type" : "string",
          "x-samplevalue" : "http://api.github.com/repos/octocat/Hello-World/git/trees{/sha}"
        },
        "updated_at" : {
          "format" : "date-time",
          "type" : "string",
          "x-mask" : "yyyy-MM-dd'T'HH:mm:ssZ",
          "x-samplevalue" : "2011-01-26T19:14:43Z"
        },
        "url" : {
          "type" : "string",
          "x-samplevalue" : "https://api.github.com/repos/octocat/Hello-World"
        },
        "watchers_count" : {
          "format" : "int32",
          "type" : "integer",
          "x-samplevalue" : 80
        }
      },
      "title" : "repo",
      "type" : "object",
      "x-has-customfields" : false
    },
    "protection" : {
      "properties" : {
        "enabled" : {
          "type" : "boolean"
        },
        "required_status_checks" : {
          "$ref" : "#/definitions/required_status_checks"
        }
      },
      "type" : "object"
    },
    "swaggerparametersschema" : {
      "x-has-customfields" : false,
      "type" : "object",
      "title" : "schema",
      "properties" : {
        "$ref" : {
          "x-samplevalue" : "#/definitions/Contact",
          "type" : "string"
        }
      }
    },
    "head" : {
      "properties" : {
        "label" : {
          "type" : "string",
          "x-samplevalue" : "new-topic"
        },
        "ref" : {
          "type" : "string",
          "x-samplevalue" : "new-topic"
        },
        "repo" : {
          "$ref" : "#/definitions/repo"
        },
        "sha" : {
          "type" : "string",
          "x-samplevalue" : "6dcb09b5b57875f334f61aebed695e2e4193db5e"
        },
        "user" : {
          "$ref" : "#/definitions/user"
        }
      },
      "title" : "head",
      "type" : "object",
      "x-has-customfields" : false
    },
    "swaggerresponses" : {
      "x-has-customfields" : false,
      "type" : "object",
      "title" : "responses",
      "properties" : {
        "200" : {
          "$ref" : "#/definitions/swagger200"
        },
        "400" : {
          "$ref" : "#/definitions/swagger400"
        },
        "401" : {
          "$ref" : "#/definitions/swagger401"
        },
        "403" : {
          "$ref" : "#/definitions/swagger403"
        },
        "404" : {
          "$ref" : "#/definitions/swagger404"
        },
        "405" : {
          "$ref" : "#/definitions/swagger405"
        },
        "406" : {
          "$ref" : "#/definitions/swagger406"
        },
        "409" : {
          "$ref" : "#/definitions/swagger409"
        },
        "415" : {
          "$ref" : "#/definitions/swagger415"
        },
        "500" : {
          "$ref" : "#/definitions/swagger500"
        },
        "502" : {
          "$ref" : "#/definitions/swagger502"
        }
      }
    },
    "swaggerproperties" : {
      "x-has-customfields" : false,
      "type" : "object",
      "title" : "properties",
      "properties" : {
        "definition-property" : {
          "$ref" : "#/definitions/swaggerdefinition-property"
        }
      }
    },
    "pullRequestsListObject" : {
      "properties" : {
        "_links" : {
          "$ref" : "#/definitions/_links"
        },
        "assignees" : {
          "items" : {
            "type" : "string"
          },
          "type" : "array"
        },
        "author_association" : {
          "type" : "string",
          "x-samplevalue" : "OWNER"
        },
        "base" : {
          "$ref" : "#/definitions/base"
        },
        "body" : {
          "type" : "string",
          "x-samplevalue" : "## Closes\r\n* US1212"
        },
        "comments_url" : {
          "type" : "string",
          "x-samplevalue" : "https://api.github.com/repos/owner-name/webhookTest/issues/4/comments"
        },
        "commits_url" : {
          "type" : "string",
          "x-samplevalue" : "https://api.github.com/repos/owner-name/webhookTest/pulls/4/commits"
        },
        "created_at" : {
          "format" : "date-time",
          "type" : "string",
          "x-mask" : "yyyy-MM-dd'T'HH:mm:ssZ",
          "x-samplevalue" : "2018-04-24T06:55:56Z"
        },
        "diff_url" : {
          "type" : "string",
          "x-samplevalue" : "https://github.com/owner-name/webhookTest/pull/4.diff"
        },
        "head" : {
          "$ref" : "#/definitions/head"
        },
        "html_url" : {
          "type" : "string",
          "x-samplevalue" : "https://github.com/owner-name/webhookTest/pull/4"
        },
        "id" : {
          "format" : "int32",
          "type" : "integer",
          "x-samplevalue" : 183637190
        },
        "issue_url" : {
          "type" : "string",
          "x-samplevalue" : "https://api.github.com/repos/owner-name/webhookTest/issues/4"
        },
        "labels" : {
          "items" : {
            "type" : "string"
          },
          "type" : "array"
        },
        "locked" : {
          "type" : "boolean",
          "x-samplevalue" : false
        },
        "merge_commit_sha" : {
          "type" : "string",
          "x-samplevalue" : "c9d44aa55ef41c8816a344dc9433b3cb8c1b1452"
        },
        "number" : {
          "format" : "int32",
          "type" : "integer",
          "x-samplevalue" : 4
        },
        "patch_url" : {
          "type" : "string",
          "x-samplevalue" : "https://github.com/owner-name/webhookTest/pull/4.patch"
        },
        "requested_reviewers" : {
          "items" : {
            "type" : "string"
          },
          "type" : "array"
        },
        "requested_teams" : {
          "items" : {
            "type" : "string"
          },
          "type" : "array"
        },
        "review_comment_url" : {
          "type" : "string",
          "x-samplevalue" : "https://api.github.com/repos/owner-name/webhookTest/pulls/comments{/number}"
        },
        "review_comments_url" : {
          "type" : "string",
          "x-samplevalue" : "https://api.github.com/repos/owner-name/webhookTest/pulls/4/comments"
        },
        "state" : {
          "type" : "string",
          "x-samplevalue" : "open"
        },
        "statuses_url" : {
          "type" : "string",
          "x-samplevalue" : "https://api.github.com/repos/owner-name/webhookTest/statuses/c9056f654c0119003bc58e874b2cc8b06371c920"
        },
        "title" : {
          "type" : "string",
          "x-samplevalue" : "test4"
        },
        "updated_at" : {
          "format" : "date-time",
          "type" : "string",
          "x-mask" : "yyyy-MM-dd'T'HH:mm:ssZ",
          "x-samplevalue" : "2018-04-24T06:55:56Z"
        },
        "url" : {
          "type" : "string",
          "x-samplevalue" : "https://api.github.com/repos/owner-name/webhookTest/pulls/4"
        },
        "user" : {
          "$ref" : "#/definitions/user"
        }
      },
      "title" : "pullRequestsList",
      "type" : "object",
      "x-has-customfields" : false,
      "x-primary-key" : [ "id" ],
      "x-vendor-objectname" : "Pull Requests"
    },
    "patchPullRequestsReq" : {
      "properties" : {
        "base" : {
          "type" : "string",
          "x-samplevalue" : "master"
        },
        "body" : {
          "type" : "string",
          "x-samplevalue" : "updated body"
        },
        "maintainer_can_modify" : {
          "type" : "boolean",
          "x-samplevalue" : false
        },
        "state" : {
          "type" : "string",
          "x-samplevalue" : "open"
        },
        "title" : {
          "type" : "string",
          "x-samplevalue" : "new title"
        }
      },
      "title" : "patchPullRequestsReq",
      "x-has-customfields" : false,
      "x-vendor-objectname" : "Pull Request",
      "type" : "object"
    },
    "commitCommit" : {
      "properties" : {
        "author" : {
          "$ref" : "#/definitions/commitCommitAuthor"
        },
        "comment_count" : {
          "format" : "int32",
          "type" : "integer"
        },
        "committer" : {
          "$ref" : "#/definitions/commitCommitCommitter"
        },
        "message" : {
          "type" : "string"
        },
        "tree" : {
          "$ref" : "#/definitions/tree"
        },
        "url" : {
          "type" : "string"
        },
        "verification" : {
          "$ref" : "#/definitions/verification"
        }
      },
      "type" : "object"
    },
    "review_comment" : {
      "properties" : {
        "href" : {
          "type" : "string",
          "x-samplevalue" : "https://api.github.com/repos/octocat/Hello-World/pulls/comments{/number}"
        }
      },
      "title" : "review_comment",
      "type" : "object",
      "x-has-customfields" : false
    },
    "pullRequestsMerge" : {
      "properties" : {
        "commit_message" : {
          "type" : "string",
          "x-samplevalue" : "commit message"
        },
        "commit_title" : {
          "type" : "string",
          "x-samplevalue" : "Merging successfully"
        },
        "merge_method" : {
          "type" : "string",
          "x-samplevalue" : "merge"
        },
        "sha" : {
          "type" : "string",
          "x-samplevalue" : ""
        }
      },
      "title" : "pullRequestsMerge",
      "x-has-customfields" : false,
      "x-vendor-objectname" : "Merge",
      "type" : "object"
    },
    "owner" : {
      "properties" : {
        "avatar_url" : {
          "type" : "string",
          "x-samplevalue" : "https://avatars1.githubusercontent.com/u/22442264?v=4"
        },
        "events_url" : {
          "type" : "string",
          "x-samplevalue" : "https://api.github.com/users/owner-name/events{/privacy}"
        },
        "followers_url" : {
          "type" : "string",
          "x-samplevalue" : "https://api.github.com/users/owner-name/followers"
        },
        "following_url" : {
          "type" : "string",
          "x-samplevalue" : "https://api.github.com/users/owner-name/following{/other_user}"
        },
        "gists_url" : {
          "type" : "string",
          "x-samplevalue" : "https://api.github.com/users/owner-name/gists{/gist_id}"
        },
        "gravatar_id" : {
          "type" : "string",
          "x-samplevalue" : ""
        },
        "html_url" : {
          "type" : "string",
          "x-samplevalue" : "https://github.com/owner-name"
        },
        "id" : {
          "format" : "int32",
          "type" : "integer",
          "x-samplevalue" : 22442264
        },
        "login" : {
          "type" : "string",
          "x-samplevalue" : "owner-name"
        },
        "organizations_url" : {
          "type" : "string",
          "x-samplevalue" : "https://api.github.com/users/owner-name/orgs"
        },
        "received_events_url" : {
          "type" : "string",
          "x-samplevalue" : "https://api.github.com/users/owner-name/received_events"
        },
        "repos_url" : {
          "type" : "string",
          "x-samplevalue" : "https://api.github.com/users/owner-name/repos"
        },
        "site_admin" : {
          "type" : "boolean",
          "x-samplevalue" : false
        },
        "starred_url" : {
          "type" : "string",
          "x-samplevalue" : "https://api.github.com/users/owner-name/starred{/owner}{/repo}"
        },
        "subscriptions_url" : {
          "type" : "string",
          "x-samplevalue" : "https://api.github.com/users/owner-name/subscriptions"
        },
        "type" : {
          "type" : "string",
          "x-samplevalue" : "User"
        },
        "url" : {
          "type" : "string",
          "x-samplevalue" : "https://api.github.com/users/owner-name"
        }
      },
      "title" : "owner",
      "type" : "object",
      "x-has-customfields" : false
    },
    "creator" : {
      "properties" : {
        "avatar_url" : {
          "type" : "string",
          "x-samplevalue" : "https://github.com/images/error/octocat_happy.gif"
        },
        "events_url" : {
          "type" : "string",
          "x-samplevalue" : "https://api.github.com/users/octocat/events{/privacy}"
        },
        "followers_url" : {
          "type" : "string",
          "x-samplevalue" : "https://api.github.com/users/octocat/followers"
        },
        "following_url" : {
          "type" : "string",
          "x-samplevalue" : "https://api.github.com/users/octocat/following{/other_user}"
        },
        "gists_url" : {
          "type" : "string",
          "x-samplevalue" : "https://api.github.com/users/octocat/gists{/gist_id}"
        },
        "gravatar_id" : {
          "type" : "string",
          "x-samplevalue" : ""
        },
        "html_url" : {
          "type" : "string",
          "x-samplevalue" : "https://github.com/octocat"
        },
        "id" : {
          "format" : "int32",
          "type" : "integer",
          "x-samplevalue" : 1
        },
        "login" : {
          "type" : "string",
          "x-samplevalue" : "octocat"
        },
        "organizations_url" : {
          "type" : "string",
          "x-samplevalue" : "https://api.github.com/users/octocat/orgs"
        },
        "received_events_url" : {
          "type" : "string",
          "x-samplevalue" : "https://api.github.com/users/octocat/received_events"
        },
        "repos_url" : {
          "type" : "string",
          "x-samplevalue" : "https://api.github.com/users/octocat/repos"
        },
        "site_admin" : {
          "type" : "boolean",
          "x-samplevalue" : false
        },
        "starred_url" : {
          "type" : "string",
          "x-samplevalue" : "https://api.github.com/users/octocat/starred{/owner}{/repo}"
        },
        "subscriptions_url" : {
          "type" : "string",
          "x-samplevalue" : "https://api.github.com/users/octocat/subscriptions"
        },
        "type" : {
          "type" : "string",
          "x-samplevalue" : "User"
        },
        "url" : {
          "type" : "string",
          "x-samplevalue" : "https://api.github.com/users/octocat"
        }
      },
      "title" : "creator",
      "type" : "object",
      "x-has-customfields" : false
    },
    "swaggerinfo" : {
      "x-has-customfields" : false,
      "type" : "object",
      "title" : "info",
      "properties" : {
        "contact" : {
          "$ref" : "#/definitions/swaggercontact"
        },
        "title" : {
          "x-samplevalue" : "hubspotcrm",
          "type" : "string"
        },
        "version" : {
          "x-samplevalue" : "api-v2",
          "type" : "string"
        }
      }
    },
    "comments" : {
      "properties" : {
        "href" : {
          "type" : "string",
          "x-samplevalue" : "https://api.github.com/repos/octocat/Hello-World/issues/1347/comments"
        }
      },
      "title" : "comments",
      "type" : "object",
      "x-has-customfields" : false
    },
    "swagger500" : {
      "x-has-customfields" : false,
      "type" : "object",
      "title" : "500",
      "properties" : {
        "description" : {
          "x-samplevalue" : "Server error - Something went wrong on the Cloud Elements server",
          "type" : "string"
        }
      }
    },
    "swaggerpaths" : {
      "x-has-customfields" : false,
      "type" : "object",
      "title" : "paths",
      "properties" : {
        "/contacts" : {
          "$ref" : "#/definitions/swagger-contacts-path"
        }
      }
    },
    "swagger502" : {
      "x-has-customfields" : false,
      "type" : "object",
      "title" : "502",
      "properties" : {
        "description" : {
          "x-samplevalue" : "Provider server error - Something went wrong on the Provider or Endpoint's server",
          "type" : "string"
        }
      }
    },
    "postPullRequestReq" : {
      "properties" : {
        "base" : {
          "type" : "string",
          "x-samplevalue" : "master"
        },
        "body" : {
          "type" : "string",
          "x-samplevalue" : "Please pull this in!"
        },
        "head" : {
          "type" : "string",
          "x-samplevalue" : "test5"
        },
        "title" : {
          "type" : "string",
          "x-samplevalue" : "Amazing new feature"
        }
      },
      "required" : [ "title", "head", "base" ],
      "title" : "postPullRequestReq",
      "x-has-customfields" : false,
      "x-vendor-objectname" : "Pull Requests",
      "type" : "object"
    },
    "pullRequestsFilesListObject" : {
      "properties" : {
        "additions" : {
          "format" : "int32",
          "type" : "integer",
          "x-samplevalue" : 7
        },
        "blob_url" : {
          "type" : "string",
          "x-samplevalue" : "https://github.com/owner-name/webhookTest/blob/6999250fb30e10f9592571e0bcd04223b54ce828/sample.rst"
        },
        "changes" : {
          "format" : "int32",
          "type" : "integer",
          "x-samplevalue" : 7
        },
        "contents_url" : {
          "type" : "string",
          "x-samplevalue" : "https://api.github.com/repos/owner-name/webhookTest/contents/sample.rst?ref=6999250fb30e10f9592571e0bcd04223b54ce828"
        },
        "deletions" : {
          "format" : "int32",
          "type" : "integer",
          "x-samplevalue" : 0
        },
        "filename" : {
          "type" : "string",
          "x-samplevalue" : "sample.rst"
        },
        "patch" : {
          "type" : "string",
          "x-samplevalue" : "@@ -0,0 +1,7 @@\n+#######\n+Heading\n+#######\n+\n+########\n+Heading2\n+########"
        },
        "raw_url" : {
          "type" : "string",
          "x-samplevalue" : "https://github.com/owner-name/webhookTest/raw/6999250fb30e10f9592571e0bcd04223b54ce828/sample.rst"
        },
        "sha" : {
          "type" : "string",
          "x-samplevalue" : "9954c41d0dbbc77d7a229b5c9aeba43edcd8bd47"
        },
        "status" : {
          "type" : "string",
          "x-samplevalue" : "added"
        }
      },
      "title" : "pullRequestsFilesList",
      "type" : "object",
      "x-has-customfields" : false,
      "x-primary-key" : [ "sha" ],
      "x-vendor-objectname" : "Files"
    },
    "objectsMetadataFields" : {
      "properties" : {
        "mask" : {
          "type" : "string"
        },
        "type" : {
          "type" : "string"
        },
        "vendorDisplayName" : {
          "type" : "string"
        },
        "vendorPath" : {
          "type" : "string"
        },
        "vendorReadOnly" : {
          "type" : "boolean"
        },
        "vendorRequired" : {
          "type" : "boolean"
        }
      },
      "type" : "object"
    },
    "baseuser" : {
      "properties" : {
        "avatar_url" : {
          "type" : "string",
          "x-samplevalue" : "https://github.com/images/error/octocat_happy.gif"
        },
        "events_url" : {
          "type" : "string",
          "x-samplevalue" : "https://api.github.com/users/octocat/events{/privacy}"
        },
        "followers_url" : {
          "type" : "string",
          "x-samplevalue" : "https://api.github.com/users/octocat/followers"
        },
        "following_url" : {
          "type" : "string",
          "x-samplevalue" : "https://api.github.com/users/octocat/following{/other_user}"
        },
        "gists_url" : {
          "type" : "string",
          "x-samplevalue" : "https://api.github.com/users/octocat/gists{/gist_id}"
        },
        "gravatar_id" : {
          "type" : "string",
          "x-samplevalue" : ""
        },
        "html_url" : {
          "type" : "string",
          "x-samplevalue" : "https://github.com/octocat"
        },
        "id" : {
          "format" : "int32",
          "type" : "integer",
          "x-samplevalue" : 1
        },
        "login" : {
          "type" : "string",
          "x-samplevalue" : "octocat"
        },
        "organizations_url" : {
          "type" : "string",
          "x-samplevalue" : "https://api.github.com/users/octocat/orgs"
        },
        "received_events_url" : {
          "type" : "string",
          "x-samplevalue" : "https://api.github.com/users/octocat/received_events"
        },
        "repos_url" : {
          "type" : "string",
          "x-samplevalue" : "https://api.github.com/users/octocat/repos"
        },
        "site_admin" : {
          "type" : "boolean",
          "x-samplevalue" : false
        },
        "starred_url" : {
          "type" : "string",
          "x-samplevalue" : "https://api.github.com/users/octocat/starred{/owner}{/repo}"
        },
        "subscriptions_url" : {
          "type" : "string",
          "x-samplevalue" : "https://api.github.com/users/octocat/subscriptions"
        },
        "type" : {
          "type" : "string",
          "x-samplevalue" : "User"
        },
        "url" : {
          "type" : "string",
          "x-samplevalue" : "https://api.github.com/users/octocat"
        }
      },
      "title" : "user",
      "type" : "object",
      "x-has-customfields" : false
    },
    "repopermissions" : {
      "properties" : {
        "admin" : {
          "type" : "boolean",
          "x-samplevalue" : false
        },
        "pull" : {
          "type" : "boolean",
          "x-samplevalue" : true
        },
        "push" : {
          "type" : "boolean",
          "x-samplevalue" : false
        }
      },
      "title" : "permissions",
      "type" : "object",
      "x-has-customfields" : false
    },
    "milestone" : {
      "properties" : {
        "closed_at" : {
          "format" : "date-time",
          "type" : "string",
          "x-mask" : "yyyy-MM-dd'T'HH:mm:ssZ",
          "x-samplevalue" : "2013-02-12T13:22:01Z"
        },
        "closed_issues" : {
          "format" : "int32",
          "type" : "integer",
          "x-samplevalue" : 8
        },
        "created_at" : {
          "format" : "date-time",
          "type" : "string",
          "x-mask" : "yyyy-MM-dd'T'HH:mm:ssZ",
          "x-samplevalue" : "2011-04-10T20:09:31Z"
        },
        "creator" : {
          "$ref" : "#/definitions/creator"
        },
        "description" : {
          "type" : "string",
          "x-samplevalue" : "Tracking milestone for version 1.0"
        },
        "due_on" : {
          "format" : "date-time",
          "type" : "string",
          "x-mask" : "yyyy-MM-dd'T'HH:mm:ssZ",
          "x-samplevalue" : "2012-10-09T23:39:01Z"
        },
        "html_url" : {
          "type" : "string",
          "x-samplevalue" : "https://github.com/octocat/Hello-World/milestones/v1.0"
        },
        "id" : {
          "format" : "int32",
          "type" : "integer",
          "x-samplevalue" : 1002604
        },
        "labels_url" : {
          "type" : "string",
          "x-samplevalue" : "https://api.github.com/repos/octocat/Hello-World/milestones/1/labels"
        },
        "number" : {
          "format" : "int32",
          "type" : "integer",
          "x-samplevalue" : 1
        },
        "open_issues" : {
          "format" : "int32",
          "type" : "integer",
          "x-samplevalue" : 4
        },
        "state" : {
          "type" : "string",
          "x-samplevalue" : "open"
        },
        "title" : {
          "type" : "string",
          "x-samplevalue" : "v1.0"
        },
        "updated_at" : {
          "format" : "date-time",
          "type" : "string",
          "x-mask" : "yyyy-MM-dd'T'HH:mm:ssZ",
          "x-samplevalue" : "2014-03-03T18:58:10Z"
        },
        "url" : {
          "type" : "string",
          "x-samplevalue" : "https://api.github.com/repos/octocat/Hello-World/milestones/1"
        }
      },
      "title" : "milestone",
      "type" : "object",
      "x-has-customfields" : false
    },
    "postPullRequestResp" : {
      "properties" : {
        "_links" : {
          "$ref" : "#/definitions/_links"
        },
        "active_lock_reason" : {
          "type" : "string",
          "x-samplevalue" : "too heated"
        },
        "assignee" : {
          "$ref" : "#/definitions/assignee"
        },
        "base" : {
          "$ref" : "#/definitions/base"
        },
        "body" : {
          "type" : "string",
          "x-samplevalue" : "Please pull these awesome changes"
        },
        "closed_at" : {
          "format" : "date-time",
          "type" : "string",
          "x-mask" : "yyyy-MM-dd'T'HH:mm:ssZ",
          "x-samplevalue" : "2011-01-26T19:01:12Z"
        },
        "comments_url" : {
          "type" : "string",
          "x-samplevalue" : "https://api.github.com/repos/octocat/Hello-World/issues/1347/comments"
        },
        "commits_url" : {
          "type" : "string",
          "x-samplevalue" : "https://api.github.com/repos/octocat/Hello-World/pulls/1347/commits"
        },
        "created_at" : {
          "format" : "date-time",
          "type" : "string",
          "x-mask" : "yyyy-MM-dd'T'HH:mm:ssZ",
          "x-samplevalue" : "2011-01-26T19:01:12Z"
        },
        "diff_url" : {
          "type" : "string",
          "x-samplevalue" : "https://github.com/octocat/Hello-World/pull/1347.diff"
        },
        "head" : {
          "$ref" : "#/definitions/head"
        },
        "html_url" : {
          "type" : "string",
          "x-samplevalue" : "https://github.com/octocat/Hello-World/pull/1347"
        },
        "id" : {
          "format" : "int32",
          "type" : "integer",
          "x-samplevalue" : 1
        },
        "issue_url" : {
          "type" : "string",
          "x-samplevalue" : "https://api.github.com/repos/octocat/Hello-World/issues/1347"
        },
        "labels" : {
          "items" : {
            "$ref" : "#/definitions/labels"
          },
          "type" : "array"
        },
        "locked" : {
          "type" : "boolean",
          "x-samplevalue" : true
        },
        "merged_at" : {
          "format" : "date-time",
          "type" : "string",
          "x-mask" : "yyyy-MM-dd'T'HH:mm:ssZ",
          "x-samplevalue" : "2011-01-26T19:01:12Z"
        },
        "milestone" : {
          "$ref" : "#/definitions/milestone"
        },
        "number" : {
          "format" : "int32",
          "type" : "integer",
          "x-samplevalue" : 1347
        },
        "patch_url" : {
          "type" : "string",
          "x-samplevalue" : "https://github.com/octocat/Hello-World/pull/1347.patch"
        },
        "review_comment_url" : {
          "type" : "string",
          "x-samplevalue" : "https://api.github.com/repos/octocat/Hello-World/pulls/comments{/number}"
        },
        "review_comments_url" : {
          "type" : "string",
          "x-samplevalue" : "https://api.github.com/repos/octocat/Hello-World/pulls/1347/comments"
        },
        "state" : {
          "type" : "string",
          "x-samplevalue" : "open"
        },
        "statuses_url" : {
          "type" : "string",
          "x-samplevalue" : "https://api.github.com/repos/octocat/Hello-World/statuses/6dcb09b5b57875f334f61aebed695e2e4193db5e"
        },
        "title" : {
          "type" : "string",
          "x-samplevalue" : "new-feature"
        },
        "updated_at" : {
          "format" : "date-time",
          "type" : "string",
          "x-mask" : "yyyy-MM-dd'T'HH:mm:ssZ",
          "x-samplevalue" : "2011-01-26T19:01:12Z"
        },
        "url" : {
          "type" : "string",
          "x-samplevalue" : "https://api.github.com/repos/octocat/Hello-World/pulls/1347"
        },
        "user" : {
          "$ref" : "#/definitions/user"
        }
      },
      "title" : "postPullRequestResp",
      "x-has-customfields" : false,
      "x-primary-key" : [ "id" ],
      "x-vendor-objectname" : "Pull Requests",
      "type" : "object"
    },
    "webhooks" : {
      "properties" : {
        "active" : {
          "type" : "boolean",
          "x-samplevalue" : true
        },
        "config" : {
          "$ref" : "#/definitions/config"
        },
        "created_at" : {
          "format" : "date-time",
          "type" : "string",
          "x-mask" : "yyyy-MM-dd'T'HH:mm:ssZ",
          "x-samplevalue" : "2018-04-24T06:50:21Z"
        },
        "events" : {
          "items" : {
            "type" : "string"
          },
          "type" : "array",
          "x-samplevalue" : [ "label", "pull_request" ]
        },
        "id" : {
          "format" : "int32",
          "type" : "integer",
          "x-samplevalue" : 27260736
        },
        "last_response" : {
          "$ref" : "#/definitions/last_response"
        },
        "name" : {
          "type" : "string",
          "x-samplevalue" : "web"
        },
        "ping_url" : {
          "type" : "string",
          "x-samplevalue" : "https://api.github.com/repos/owner-name/webhookTest/hooks/27260736/pings"
        },
        "test_url" : {
          "type" : "string",
          "x-samplevalue" : "https://api.github.com/repos/owner-name/webhookTest/hooks/27260736/test"
        },
        "type" : {
          "type" : "string",
          "x-samplevalue" : "Repository"
        },
        "updated_at" : {
          "format" : "date-time",
          "type" : "string",
          "x-mask" : "yyyy-MM-dd'T'HH:mm:ssZ",
          "x-samplevalue" : "2018-04-24T06:50:21Z"
        },
        "url" : {
          "type" : "string",
          "x-samplevalue" : "https://api.github.com/repos/owner-name/webhookTest/hooks/27260736"
        }
      },
      "title" : "webhooks",
      "x-has-customfields" : false,
      "x-primary-key" : [ "id" ],
      "x-vendor-objectname" : "Webhooks",
      "type" : "object"
    },
    "branchesListObject" : {
      "properties" : {
        "commit" : {
          "$ref" : "#/definitions/commit"
        },
        "name" : {
          "type" : "string"
        }
      },
      "x-primary-key" : [ "name" ],
      "x-vendor-objectname" : "Branches",
      "type" : "object"
    },
    "swaggerpost" : {
      "x-has-customfields" : false,
      "type" : "object",
      "title" : "post",
      "properties" : {
        "summary" : {
          "x-samplevalue" : "Create a new contact in the CRM service. Contact creation will flow through Cloud Elements to your CRM service. With the exception of the 'id' field, the required fields indicated in the 'Contact' model are those required to create a new contact.",
          "type" : "string"
        },
        "operationId" : {
          "x-samplevalue" : "createContact",
          "type" : "string"
        },
        "responses" : {
          "$ref" : "#/definitions/swaggerresponses"
        },
        "parameters" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/swaggerparameters"
          }
        },
        "tags" : {
          "x-samplevalue" : [ "contacts" ],
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        }
      }
    },
    "self" : {
      "properties" : {
        "href" : {
          "type" : "string",
          "x-samplevalue" : "https://api.github.com/repos/octocat/Hello-World/pulls/1347"
        }
      },
      "title" : "self",
      "type" : "object",
      "x-has-customfields" : false
    },
    "last_response" : {
      "properties" : {
        "code" : {
          "format" : "int32",
          "type" : "integer",
          "x-samplevalue" : 200
        },
        "message" : {
          "type" : "string",
          "x-samplevalue" : "OK"
        },
        "status" : {
          "type" : "string",
          "x-samplevalue" : "active"
        }
      },
      "title" : "last_response",
      "type" : "object",
      "x-has-customfields" : false
    },
    "user" : {
      "properties" : {
        "avatar_url" : {
          "type" : "string",
          "x-samplevalue" : "https://github.com/images/error/octocat_happy.gif"
        },
        "events_url" : {
          "type" : "string",
          "x-samplevalue" : "https://api.github.com/users/octocat/events{/privacy}"
        },
        "followers_url" : {
          "type" : "string",
          "x-samplevalue" : "https://api.github.com/users/octocat/followers"
        },
        "following_url" : {
          "type" : "string",
          "x-samplevalue" : "https://api.github.com/users/octocat/following{/other_user}"
        },
        "gists_url" : {
          "type" : "string",
          "x-samplevalue" : "https://api.github.com/users/octocat/gists{/gist_id}"
        },
        "gravatar_id" : {
          "type" : "string",
          "x-samplevalue" : ""
        },
        "html_url" : {
          "type" : "string",
          "x-samplevalue" : "https://github.com/octocat"
        },
        "id" : {
          "format" : "int32",
          "type" : "integer",
          "x-samplevalue" : 1
        },
        "login" : {
          "type" : "string",
          "x-samplevalue" : "octocat"
        },
        "organizations_url" : {
          "type" : "string",
          "x-samplevalue" : "https://api.github.com/users/octocat/orgs"
        },
        "received_events_url" : {
          "type" : "string",
          "x-samplevalue" : "https://api.github.com/users/octocat/received_events"
        },
        "repos_url" : {
          "type" : "string",
          "x-samplevalue" : "https://api.github.com/users/octocat/repos"
        },
        "site_admin" : {
          "type" : "boolean",
          "x-samplevalue" : false
        },
        "starred_url" : {
          "type" : "string",
          "x-samplevalue" : "https://api.github.com/users/octocat/starred{/owner}{/repo}"
        },
        "subscriptions_url" : {
          "type" : "string",
          "x-samplevalue" : "https://api.github.com/users/octocat/subscriptions"
        },
        "type" : {
          "type" : "string",
          "x-samplevalue" : "User"
        },
        "url" : {
          "type" : "string",
          "x-samplevalue" : "https://api.github.com/users/octocat"
        }
      },
      "title" : "user",
      "type" : "object",
      "x-has-customfields" : false
    },
    "config" : {
      "properties" : {
        "content_type" : {
          "type" : "string",
          "x-samplevalue" : "json"
        },
        "insecure_ssl" : {
          "type" : "string",
          "x-samplevalue" : "0"
        },
        "secret" : {
          "type" : "string",
          "x-samplevalue" : "aqwe"
        },
        "url" : {
          "type" : "string",
          "x-samplevalue" : "{webhookCallbackUrl}"
        }
      },
      "title" : "config",
      "type" : "object",
      "x-has-customfields" : false
    },
    "webhooksListObject" : {
      "properties" : {
        "active" : {
          "type" : "boolean",
          "x-samplevalue" : true
        },
        "config" : {
          "$ref" : "#/definitions/config"
        },
        "created_at" : {
          "format" : "date-time",
          "type" : "string",
          "x-mask" : "yyyy-MM-dd'T'HH:mm:ssZ",
          "x-samplevalue" : "2018-04-24T06:50:21Z"
        },
        "events" : {
          "items" : {
            "type" : "string"
          },
          "type" : "array",
          "x-samplevalue" : [ "label", "pull_request" ]
        },
        "id" : {
          "format" : "int32",
          "type" : "integer",
          "x-samplevalue" : 27260736
        },
        "last_response" : {
          "$ref" : "#/definitions/last_response"
        },
        "name" : {
          "type" : "string",
          "x-samplevalue" : "web"
        },
        "ping_url" : {
          "type" : "string",
          "x-samplevalue" : "https://api.github.com/repos/owner-name/webhookTest/hooks/27260736/pings"
        },
        "test_url" : {
          "type" : "string",
          "x-samplevalue" : "https://api.github.com/repos/owner-name/webhookTest/hooks/27260736/test"
        },
        "type" : {
          "type" : "string",
          "x-samplevalue" : "Repository"
        },
        "updated_at" : {
          "format" : "date-time",
          "type" : "string",
          "x-mask" : "yyyy-MM-dd'T'HH:mm:ssZ",
          "x-samplevalue" : "2018-04-24T06:50:21Z"
        },
        "url" : {
          "type" : "string",
          "x-samplevalue" : "https://api.github.com/repos/owner-name/webhookTest/hooks/27260736"
        }
      },
      "title" : "webhooksList",
      "type" : "object",
      "x-has-customfields" : false,
      "x-vendor-objectname" : "webhooks"
    },
    "swaggertags" : {
      "x-has-customfields" : false,
      "title" : "tags",
      "properties" : {
        "name" : {
          "x-samplevalue" : "contacts",
          "type" : "string"
        }
      },
      "type" : "object"
    },
    "base" : {
      "properties" : {
        "label" : {
          "type" : "string",
          "x-samplevalue" : "master"
        },
        "ref" : {
          "type" : "string",
          "x-samplevalue" : "master"
        },
        "repo" : {
          "$ref" : "#/definitions/baserepo"
        },
        "sha" : {
          "type" : "string",
          "x-samplevalue" : "6dcb09b5b57875f334f61aebed695e2e4193db5e"
        },
        "user" : {
          "$ref" : "#/definitions/baseuser"
        }
      },
      "title" : "base",
      "type" : "object",
      "x-has-customfields" : false
    }
  },
  "swagger" : "2.0",
  "info" : {
    "contact" : {
      "email" : "support@cloud-elements.com"
    },
    "title" : "github_max_test",
    "version" : "api-v2"
  },
  "tags" : [ {
    "name" : "webhooks"
  }, {
    "name" : "contents"
  }, {
    "name" : "repositories"
  }, {
    "name" : "ping"
  }, {
    "name" : "objects"
  }, {
    "name" : "me"
  }, {
    "name" : "objectName"
  }, {
    "name" : "branches"
  }, {
    "name" : "pull-requests"
  }, {
    "name" : "users"
  } ]
}